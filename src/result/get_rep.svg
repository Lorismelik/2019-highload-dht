<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1254" onload="init(evt)" viewBox="0 0 1200 1254" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1237"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1237"> </text>
<g id="frames">
<g>
<title>all (2,122 samples, 100.00%)</title><rect x="10.0" y="1203.0" width="1180.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="13.0" y="1214.0">all</text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (1 samples, 0.05%)</title><rect x="10.0" y="1187.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>CompiledMethod::is_method_handle_return(unsigned char*) (1 samples, 0.05%)</title><rect x="10.6" y="1187.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.6" y="1198.0"></text>
</g>
<g>
<title>InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int) (1 samples, 0.05%)</title><rect x="11.1" y="1187.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="14.1" y="1198.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.05%)</title><rect x="11.1" y="1171.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.1" y="1182.0"></text>
</g>
<g>
<title>InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*) (2 samples, 0.09%)</title><rect x="11.7" y="1187.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.7" y="1198.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="11.7" y="1171.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="14.7" y="1182.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.05%)</title><rect x="12.2" y="1171.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="15.2" y="1182.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.05%)</title><rect x="12.2" y="1155.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="15.2" y="1166.0"></text>
</g>
<g>
<title>InterpreterRuntime::newarray(JavaThread*, BasicType, int) (1 samples, 0.05%)</title><rect x="12.8" y="1187.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="15.8" y="1198.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="12.8" y="1171.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="15.8" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.14%)</title><rect x="13.3" y="1187.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="16.3" y="1198.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.14%)</title><rect x="13.3" y="1171.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="16.3" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.14%)</title><rect x="13.3" y="1155.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="16.3" y="1166.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.14%)</title><rect x="13.3" y="1139.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="16.3" y="1150.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.14%)</title><rect x="13.3" y="1123.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="16.3" y="1134.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.14%)</title><rect x="13.3" y="1107.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="16.3" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.05%)</title><rect x="13.9" y="1091.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="16.9" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.05%)</title><rect x="14.4" y="1091.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="17.4" y="1102.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (5 samples, 0.24%)</title><rect x="15.0" y="1187.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="18.0" y="1198.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (5 samples, 0.24%)</title><rect x="15.0" y="1171.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="18.0" y="1182.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (3 samples, 0.14%)</title><rect x="15.0" y="1155.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="18.0" y="1166.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::call_event(Method*, CompLevel, JavaThread*) (3 samples, 0.14%)</title><rect x="15.0" y="1139.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="18.0" y="1150.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::common(bool (TieredThresholdPolicy::*)(int, int, CompLevel, Method*), Method*, CompLevel, bool) (3 samples, 0.14%)</title><rect x="15.0" y="1123.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="18.0" y="1134.0"></text>
</g>
<g>
<title>Method::is_setter() const (2 samples, 0.09%)</title><rect x="15.0" y="1107.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="18.0" y="1118.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::is_method_profiled(Method*) (1 samples, 0.05%)</title><rect x="16.1" y="1107.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="19.1" y="1118.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (2 samples, 0.09%)</title><rect x="16.7" y="1155.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="19.7" y="1166.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (2 samples, 0.09%)</title><rect x="16.7" y="1139.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="19.7" y="1150.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (2 samples, 0.09%)</title><rect x="16.7" y="1123.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="19.7" y="1134.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, bool, Thread*) (2 samples, 0.09%)</title><rect x="16.7" y="1107.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="19.7" y="1118.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.09%)</title><rect x="16.7" y="1091.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="19.7" y="1102.0"></text>
</g>
<g>
<title>Runtime1::exception_handler_for_pc(JavaThread*) (3 samples, 0.14%)</title><rect x="17.8" y="1187.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="20.8" y="1198.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (1 samples, 0.05%)</title><rect x="18.3" y="1171.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="21.3" y="1182.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (1 samples, 0.05%)</title><rect x="18.3" y="1155.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="21.3" y="1166.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.05%)</title><rect x="18.9" y="1171.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="21.9" y="1182.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (160 samples, 7.54%)</title><rect x="19.5" y="1187.0" width="88.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="22.5" y="1198.0">Runtime1::..</text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (159 samples, 7.49%)</title><rect x="20.0" y="1171.0" width="88.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="23.0" y="1182.0">ObjectMoni..</text>
</g>
<g>
<title>JavaThreadBlockedOnMonitorEnterState::JavaThreadBlockedOnMonitorEnterState(JavaThread*, ObjectMonitor*) (1 samples, 0.05%)</title><rect x="20.6" y="1155.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="23.6" y="1166.0"></text>
</g>
<g>
<title>JavaThreadBlockedOnMonitorEnterState::contended_enter_begin(JavaThread*) (1 samples, 0.05%)</title><rect x="20.6" y="1139.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="23.6" y="1150.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (156 samples, 7.35%)</title><rect x="21.1" y="1155.0" width="86.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="24.1" y="1166.0">ObjectMoni..</text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.05%)</title><rect x="21.7" y="1139.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="24.7" y="1150.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.05%)</title><rect x="21.7" y="1123.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="24.7" y="1134.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (154 samples, 7.26%)</title><rect x="22.2" y="1139.0" width="85.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="25.2" y="1150.0">os::Platfo..</text>
</g>
<g>
<title>__psynch_cvwait (152 samples, 7.16%)</title><rect x="22.8" y="1123.0" width="84.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="25.8" y="1134.0">__psynch_c..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.05%)</title><rect x="107.3" y="1123.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="110.3" y="1134.0"></text>
</g>
<g>
<title>jfr_is_event_enabled(JfrEventId) (1 samples, 0.05%)</title><rect x="107.9" y="1155.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="110.9" y="1166.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.19%)</title><rect x="108.4" y="1187.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="111.4" y="1198.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.14%)</title><rect x="108.4" y="1171.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="111.4" y="1182.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (3 samples, 0.14%)</title><rect x="108.4" y="1155.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="111.4" y="1166.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (3 samples, 0.14%)</title><rect x="108.4" y="1139.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="111.4" y="1150.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.14%)</title><rect x="108.4" y="1123.0" width="1.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="111.4" y="1134.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.05%)</title><rect x="110.1" y="1171.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="113.1" y="1182.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.05%)</title><rect x="110.1" y="1155.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="113.1" y="1166.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (1 samples, 0.05%)</title><rect x="110.1" y="1139.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="113.1" y="1150.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.05%)</title><rect x="110.1" y="1123.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="113.1" y="1134.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.05%)</title><rect x="110.1" y="1107.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="113.1" y="1118.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.05%)</title><rect x="110.1" y="1091.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="113.1" y="1102.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="110.1" y="1075.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="113.1" y="1086.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (2 samples, 0.09%)</title><rect x="110.7" y="1187.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="113.7" y="1198.0"></text>
</g>
<g>
<title>[deoptimization] (2 samples, 0.09%)</title><rect x="111.8" y="1187.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="114.8" y="1198.0"></text>
</g>
<g>
<title>Deoptimization::fetch_unroll_info(JavaThread*, int) (2 samples, 0.09%)</title><rect x="111.8" y="1171.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="114.8" y="1182.0"></text>
</g>
<g>
<title>Deoptimization::fetch_unroll_info_helper(JavaThread*, int) (2 samples, 0.09%)</title><rect x="111.8" y="1155.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="114.8" y="1166.0"></text>
</g>
<g>
<title>Deoptimization::create_vframeArray(JavaThread*, frame, RegisterMap*, GrowableArray&lt;compiledVFrame*&gt;*, bool) (2 samples, 0.09%)</title><rect x="111.8" y="1139.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="114.8" y="1150.0"></text>
</g>
<g>
<title>Events::log(Thread*, char const*, ...) (1 samples, 0.05%)</title><rect x="111.8" y="1123.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="114.8" y="1134.0"></text>
</g>
<g>
<title>StringEventLog::logv(Thread*, char const*, __va_list_tag*) (1 samples, 0.05%)</title><rect x="111.8" y="1107.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="114.8" y="1118.0"></text>
</g>
<g>
<title>jio_vsnprintf (1 samples, 0.05%)</title><rect x="111.8" y="1091.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="114.8" y="1102.0"></text>
</g>
<g>
<title>vsnprintf (1 samples, 0.05%)</title><rect x="111.8" y="1075.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="114.8" y="1086.0"></text>
</g>
<g>
<title>vframeArray::allocate(JavaThread*, int, GrowableArray&lt;compiledVFrame*&gt;*, RegisterMap*, frame, frame, frame, bool) (1 samples, 0.05%)</title><rect x="112.3" y="1123.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="115.3" y="1134.0"></text>
</g>
<g>
<title>vframeArray::fill_in(JavaThread*, int, GrowableArray&lt;compiledVFrame*&gt;*, RegisterMap const*, bool) (1 samples, 0.05%)</title><rect x="112.3" y="1107.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="115.3" y="1118.0"></text>
</g>
<g>
<title>compiledVFrame::expressions() const (1 samples, 0.05%)</title><rect x="112.3" y="1091.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="115.3" y="1102.0"></text>
</g>
<g>
<title>[not_walkable] (3 samples, 0.14%)</title><rect x="112.9" y="1187.0" width="1.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="115.9" y="1198.0"></text>
</g>
<g>
<title>[not_walkable_Java] (27 samples, 1.27%)</title><rect x="114.5" y="1187.0" width="15.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="117.5" y="1198.0"></text>
</g>
<g>
<title>G1BarrierSet::write_ref_array_work(MemRegion) (1 samples, 0.05%)</title><rect x="117.3" y="1171.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="120.3" y="1182.0"></text>
</g>
<g>
<title>G1BarrierSetRuntime::write_ref_array_post_entry(HeapWord*, unsigned long) (5 samples, 0.24%)</title><rect x="117.9" y="1171.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="120.9" y="1182.0"></text>
</g>
<g>
<title>G1BarrierSet::write_ref_array_work(MemRegion) (5 samples, 0.24%)</title><rect x="117.9" y="1155.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="120.9" y="1166.0"></text>
</g>
<g>
<title>G1BarrierSet::invalidate(MemRegion) (2 samples, 0.09%)</title><rect x="119.0" y="1139.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="122.0" y="1150.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="120.1" y="1139.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="123.1" y="1150.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.05%)</title><rect x="120.7" y="1171.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="123.7" y="1182.0"></text>
</g>
<g>
<title>Runtime1::exception_handler_for_pc(JavaThread*) (2 samples, 0.09%)</title><rect x="121.2" y="1171.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="124.2" y="1182.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.05%)</title><rect x="121.2" y="1155.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="124.2" y="1166.0"></text>
</g>
<g>
<title>caller_is_deopted() (1 samples, 0.05%)</title><rect x="121.8" y="1155.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="124.8" y="1166.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.05%)</title><rect x="121.8" y="1139.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="124.8" y="1150.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.05%)</title><rect x="121.8" y="1123.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="124.8" y="1134.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (13 samples, 0.61%)</title><rect x="122.3" y="1171.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="125.3" y="1182.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (9 samples, 0.42%)</title><rect x="122.3" y="1155.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="125.3" y="1166.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.24%)</title><rect x="123.4" y="1139.0" width="2.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="126.4" y="1150.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.05%)</title><rect x="126.2" y="1139.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="129.2" y="1150.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.05%)</title><rect x="126.2" y="1123.0" width="0.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="129.2" y="1134.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.05%)</title><rect x="126.2" y="1107.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="129.2" y="1118.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.05%)</title><rect x="126.8" y="1139.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="129.8" y="1150.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (3 samples, 0.14%)</title><rect x="127.3" y="1155.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="130.3" y="1166.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="129.0" y="1155.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="132.0" y="1166.0"></text>
</g>
<g>
<title>[unknown_Java] (22 samples, 1.04%)</title><rect x="129.6" y="1187.0" width="12.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="132.6" y="1198.0"></text>
</g>
<g>
<title>G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(unsigned int*, unsigned long) (1 samples, 0.05%)</title><rect x="140.1" y="1171.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="143.1" y="1182.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (2 samples, 0.09%)</title><rect x="140.7" y="1171.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="143.7" y="1182.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.09%)</title><rect x="140.7" y="1155.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="143.7" y="1166.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.05%)</title><rect x="140.7" y="1139.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="143.7" y="1150.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.05%)</title><rect x="141.2" y="1139.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="144.2" y="1150.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.05%)</title><rect x="141.2" y="1123.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="144.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/Thread.run (400 samples, 18.85%)</title><rect x="141.8" y="1187.0" width="222.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="144.8" y="1198.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (400 samples, 18.85%)</title><rect x="141.8" y="1171.0" width="222.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="144.8" y="1182.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (400 samples, 18.85%)</title><rect x="141.8" y="1155.0" width="222.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="144.8" y="1166.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.09%)</title><rect x="144.0" y="1139.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="147.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.05%)</title><rect x="144.6" y="1123.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="147.6" y="1134.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.05%)</title><rect x="144.6" y="1107.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="147.6" y="1118.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="144.6" y="1091.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="147.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.05%)</title><rect x="145.1" y="1139.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="148.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.05%)</title><rect x="145.1" y="1123.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="148.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.05%)</title><rect x="145.1" y="1107.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="148.1" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.05%)</title><rect x="145.1" y="1091.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="148.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.05%)</title><rect x="145.1" y="1075.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="148.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.05%)</title><rect x="145.7" y="1139.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="148.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.05%)</title><rect x="145.7" y="1123.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="148.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (2 samples, 0.09%)</title><rect x="146.2" y="1139.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="149.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (2 samples, 0.09%)</title><rect x="146.2" y="1123.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="149.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.09%)</title><rect x="146.2" y="1107.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="149.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.09%)</title><rect x="146.2" y="1091.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="149.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.05%)</title><rect x="146.2" y="1075.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="149.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.05%)</title><rect x="146.2" y="1059.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="149.2" y="1070.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.05%)</title><rect x="146.2" y="1043.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="149.2" y="1054.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list() (1 samples, 0.05%)</title><rect x="146.2" y="1027.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="149.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.05%)</title><rect x="146.8" y="1075.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="149.8" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$77/164345650.run (390 samples, 18.38%)</title><rect x="147.4" y="1139.0" width="216.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="150.4" y="1150.0">ru/mail/polis/service/lorism..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$executeAsync$3 (389 samples, 18.33%)</title><rect x="147.9" y="1123.0" width="216.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="150.9" y="1134.0">ru/mail/polis/service/lorism..</text>
</g>
<g>
<title>java/util/logging/Logger.log (332 samples, 15.65%)</title><rect x="147.9" y="1107.0" width="184.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="150.9" y="1118.0">java/util/logging/Logger..</text>
</g>
<g>
<title>java/util/logging/LogRecord.&lt;init&gt; (1 samples, 0.05%)</title><rect x="148.5" y="1091.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="151.5" y="1102.0"></text>
</g>
<g>
<title>java/time/Instant.now (1 samples, 0.05%)</title><rect x="148.5" y="1075.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="151.5" y="1086.0"></text>
</g>
<g>
<title>java/time/Clock$SystemClock.instant (1 samples, 0.05%)</title><rect x="148.5" y="1059.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="151.5" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/misc/VM.getNanoTimeAdjustment (1 samples, 0.05%)</title><rect x="148.5" y="1043.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="151.5" y="1054.0"></text>
</g>
<g>
<title>JVM_GetNanoTimeAdjustment (1 samples, 0.05%)</title><rect x="148.5" y="1027.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="151.5" y="1038.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="148.5" y="1011.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="151.5" y="1022.0"></text>
</g>
<g>
<title>java/util/logging/Logger.doLog (330 samples, 15.55%)</title><rect x="149.0" y="1091.0" width="183.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="152.0" y="1102.0">java/util/logging/Logger..</text>
</g>
<g>
<title>java/util/logging/Logger.getEffectiveLoggerBundle (1 samples, 0.05%)</title><rect x="149.0" y="1075.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="152.0" y="1086.0"></text>
</g>
<g>
<title>java/util/logging/Logger.getResourceBundle (1 samples, 0.05%)</title><rect x="149.0" y="1059.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="152.0" y="1070.0"></text>
</g>
<g>
<title>java/util/logging/Logger.findResourceBundle (1 samples, 0.05%)</title><rect x="149.0" y="1043.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="152.0" y="1054.0"></text>
</g>
<g>
<title>java/util/logging/Logger.log (329 samples, 15.50%)</title><rect x="149.6" y="1075.0" width="182.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="152.6" y="1086.0">java/util/logging/Logger..</text>
</g>
<g>
<title>java/util/logging/ConsoleHandler.publish (324 samples, 15.27%)</title><rect x="150.7" y="1059.0" width="180.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="153.7" y="1070.0">java/util/logging/Conso..</text>
</g>
<g>
<title>java/util/logging/StreamHandler.flush (38 samples, 1.79%)</title><rect x="150.7" y="1043.0" width="21.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="153.7" y="1054.0">j..</text>
</g>
<g>
<title>InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*) (1 samples, 0.05%)</title><rect x="151.2" y="1027.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="154.2" y="1038.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.05%)</title><rect x="151.2" y="1011.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="154.2" y="1022.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.05%)</title><rect x="151.2" y="995.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="154.2" y="1006.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.05%)</title><rect x="151.2" y="979.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="154.2" y="990.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="151.2" y="963.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="154.2" y="974.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.flush (36 samples, 1.70%)</title><rect x="151.8" y="1027.0" width="20.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="154.8" y="1038.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flush (36 samples, 1.70%)</title><rect x="151.8" y="1011.0" width="20.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="154.8" y="1022.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlush (36 samples, 1.70%)</title><rect x="151.8" y="995.0" width="20.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="154.8" y="1006.0"></text>
</g>
<g>
<title>java/io/PrintStream.flush (1 samples, 0.05%)</title><rect x="152.9" y="979.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="155.9" y="990.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (1 samples, 0.05%)</title><rect x="152.9" y="963.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="155.9" y="974.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.05%)</title><rect x="152.9" y="947.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="155.9" y="958.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.05%)</title><rect x="152.9" y="931.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="155.9" y="942.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.05%)</title><rect x="152.9" y="915.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="155.9" y="926.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.05%)</title><rect x="152.9" y="899.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="155.9" y="910.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::call_event(Method*, CompLevel, JavaThread*) (1 samples, 0.05%)</title><rect x="152.9" y="883.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="155.9" y="894.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::common(bool (TieredThresholdPolicy::*)(int, int, CompLevel, Method*), Method*, CompLevel, bool) (1 samples, 0.05%)</title><rect x="152.9" y="867.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="155.9" y="878.0"></text>
</g>
<g>
<title>Method::compute_has_loops_flag() (1 samples, 0.05%)</title><rect x="152.9" y="851.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="155.9" y="862.0"></text>
</g>
<g>
<title>BytecodeStream::next() (1 samples, 0.05%)</title><rect x="152.9" y="835.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="155.9" y="846.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (33 samples, 1.56%)</title><rect x="153.5" y="979.0" width="18.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="156.5" y="990.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (33 samples, 1.56%)</title><rect x="153.5" y="963.0" width="18.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="156.5" y="974.0"></text>
</g>
<g>
<title>java/io/PrintStream.write (33 samples, 1.56%)</title><rect x="153.5" y="947.0" width="18.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="156.5" y="958.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (32 samples, 1.51%)</title><rect x="154.0" y="931.0" width="17.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="157.0" y="942.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (32 samples, 1.51%)</title><rect x="154.0" y="915.0" width="17.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="157.0" y="926.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (31 samples, 1.46%)</title><rect x="154.6" y="899.0" width="17.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="157.6" y="910.0"></text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (31 samples, 1.46%)</title><rect x="154.6" y="883.0" width="17.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="157.6" y="894.0"></text>
</g>
<g>
<title>writeBytes (31 samples, 1.46%)</title><rect x="154.6" y="867.0" width="17.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="157.6" y="878.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;802934ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 802934ull&gt;::oop_access_barrier(oopDesc*, long) (1 samples, 0.05%)</title><rect x="154.6" y="851.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="157.6" y="862.0"></text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.05%)</title><rect x="155.1" y="851.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="158.1" y="862.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.05%)</title><rect x="155.7" y="851.0" width="0.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="158.7" y="862.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="155.7" y="835.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="158.7" y="846.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.05%)</title><rect x="155.7" y="819.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="158.7" y="830.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.05%)</title><rect x="155.7" y="803.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="158.7" y="814.0"></text>
</g>
<g>
<title>jni_GetObjectField (2 samples, 0.09%)</title><rect x="156.2" y="851.0" width="1.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="159.2" y="862.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.05%)</title><rect x="156.2" y="835.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="159.2" y="846.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.05%)</title><rect x="156.8" y="835.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="159.8" y="846.0"></text>
</g>
<g>
<title>write (26 samples, 1.23%)</title><rect x="157.4" y="851.0" width="14.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="160.4" y="862.0"></text>
</g>
<g>
<title>java/util/logging/StreamHandler.publish (286 samples, 13.48%)</title><rect x="171.8" y="1043.0" width="159.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="174.8" y="1054.0">java/util/logging/St..</text>
</g>
<g>
<title>InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*) (23 samples, 1.08%)</title><rect x="171.8" y="1027.0" width="12.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="174.8" y="1038.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (23 samples, 1.08%)</title><rect x="171.8" y="1011.0" width="12.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="174.8" y="1022.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.05%)</title><rect x="171.8" y="995.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="174.8" y="1006.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.05%)</title><rect x="171.8" y="979.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="174.8" y="990.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.05%)</title><rect x="171.8" y="963.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="174.8" y="974.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.05%)</title><rect x="171.8" y="947.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="174.8" y="958.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (21 samples, 0.99%)</title><rect x="172.4" y="995.0" width="11.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="175.4" y="1006.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (21 samples, 0.99%)</title><rect x="172.4" y="979.0" width="11.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="175.4" y="990.0"></text>
</g>
<g>
<title>__psynch_cvwait (21 samples, 0.99%)</title><rect x="172.4" y="963.0" width="11.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="175.4" y="974.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.05%)</title><rect x="184.1" y="995.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="187.1" y="1006.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.05%)</title><rect x="184.1" y="979.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="187.1" y="990.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.05%)</title><rect x="184.1" y="963.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="187.1" y="974.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.05%)</title><rect x="184.1" y="947.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="187.1" y="958.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="184.1" y="931.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="187.1" y="942.0"></text>
</g>
<g>
<title>java/io/Writer.write (16 samples, 0.75%)</title><rect x="184.6" y="1027.0" width="8.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="187.6" y="1038.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.write (16 samples, 0.75%)</title><rect x="184.6" y="1011.0" width="8.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="187.6" y="1022.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.write (15 samples, 0.71%)</title><rect x="185.2" y="995.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="188.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.getChars (3 samples, 0.14%)</title><rect x="185.2" y="979.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="188.2" y="990.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.getChars (3 samples, 0.14%)</title><rect x="185.2" y="963.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="188.2" y="974.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.05%)</title><rect x="186.3" y="947.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="189.3" y="958.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.05%)</title><rect x="186.3" y="931.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="189.3" y="942.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.05%)</title><rect x="186.3" y="915.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="189.3" y="926.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::method_back_branch_event(methodHandle const&amp;, methodHandle const&amp;, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.05%)</title><rect x="186.3" y="899.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="189.3" y="910.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::common(bool (TieredThresholdPolicy::*)(int, int, CompLevel, Method*), Method*, CompLevel, bool) (1 samples, 0.05%)</title><rect x="186.3" y="883.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="189.3" y="894.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.write (12 samples, 0.57%)</title><rect x="186.8" y="979.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="189.8" y="990.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implWrite (12 samples, 0.57%)</title><rect x="186.8" y="963.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="189.8" y="974.0"></text>
</g>
<g>
<title>java/nio/CharBuffer.wrap (2 samples, 0.09%)</title><rect x="186.8" y="947.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="189.8" y="958.0"></text>
</g>
<g>
<title>java/nio/HeapCharBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="187.4" y="931.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="190.4" y="942.0"></text>
</g>
<g>
<title>java/nio/CharBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="187.4" y="915.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="190.4" y="926.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="187.4" y="899.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="190.4" y="910.0"></text>
</g>
<g>
<title>java/nio/CharBuffer.limit (1 samples, 0.05%)</title><rect x="187.4" y="883.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="190.4" y="894.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.05%)</title><rect x="187.4" y="867.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="190.4" y="878.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implWrite (10 samples, 0.47%)</title><rect x="187.9" y="947.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="190.9" y="958.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.encode (10 samples, 0.47%)</title><rect x="187.9" y="931.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="190.9" y="942.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeLoop (8 samples, 0.38%)</title><rect x="189.1" y="915.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="192.1" y="926.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeArrayLoop (8 samples, 0.38%)</title><rect x="189.1" y="899.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="192.1" y="910.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.updatePositions (1 samples, 0.05%)</title><rect x="193.0" y="883.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="196.0" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="193.0" y="867.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="196.0" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="193.0" y="851.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="196.0" y="862.0"></text>
</g>
<g>
<title>java/util/logging/SimpleFormatter.format (245 samples, 11.55%)</title><rect x="193.5" y="1027.0" width="136.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="196.5" y="1038.0">java/util/logging..</text>
</g>
<g>
<title>java/io/StringWriter.&lt;init&gt; (1 samples, 0.05%)</title><rect x="195.7" y="1011.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="198.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="195.7" y="995.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="198.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.05%)</title><rect x="195.7" y="979.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="198.7" y="990.0"></text>
</g>
<g>
<title>java/lang/String.format (61 samples, 2.87%)</title><rect x="196.3" y="1011.0" width="33.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="199.3" y="1022.0">ja..</text>
</g>
<g>
<title>java/util/Formatter.&lt;init&gt; (9 samples, 0.42%)</title><rect x="196.3" y="995.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="199.3" y="1006.0"></text>
</g>
<g>
<title>java/util/Formatter.&lt;init&gt; (8 samples, 0.38%)</title><rect x="196.3" y="979.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="199.3" y="990.0"></text>
</g>
<g>
<title>java/util/Formatter.getZero (8 samples, 0.38%)</title><rect x="196.3" y="963.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.3" y="974.0"></text>
</g>
<g>
<title>java/text/DecimalFormatSymbols.getInstance (7 samples, 0.33%)</title><rect x="196.3" y="947.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="199.3" y="958.0"></text>
</g>
<g>
<title>sun/util/locale/provider/DecimalFormatSymbolsProviderImpl.getInstance (6 samples, 0.28%)</title><rect x="196.8" y="931.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="199.8" y="942.0"></text>
</g>
<g>
<title>java/text/DecimalFormatSymbols.&lt;init&gt; (6 samples, 0.28%)</title><rect x="196.8" y="915.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="199.8" y="926.0"></text>
</g>
<g>
<title>java/text/DecimalFormatSymbols.initialize (6 samples, 0.28%)</title><rect x="196.8" y="899.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="199.8" y="910.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.05%)</title><rect x="198.0" y="883.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="201.0" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.05%)</title><rect x="198.0" y="867.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="201.0" y="878.0"></text>
</g>
<g>
<title>sun/util/locale/provider/CalendarDataUtility.findRegionOverride (2 samples, 0.09%)</title><rect x="198.5" y="883.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="201.5" y="894.0"></text>
</g>
<g>
<title>java/util/Locale.getUnicodeLocaleType (2 samples, 0.09%)</title><rect x="198.5" y="867.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="201.5" y="878.0"></text>
</g>
<g>
<title>java/util/Locale.isUnicodeExtensionKey (2 samples, 0.09%)</title><rect x="198.5" y="851.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="201.5" y="862.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.05%)</title><rect x="198.5" y="835.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="201.5" y="846.0"></text>
</g>
<g>
<title>sun/util/locale/LocaleUtils.isAlphaNumericString (1 samples, 0.05%)</title><rect x="199.1" y="835.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="202.1" y="846.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.05%)</title><rect x="199.1" y="819.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="202.1" y="830.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.05%)</title><rect x="199.1" y="803.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="202.1" y="814.0"></text>
</g>
<g>
<title>sun/util/locale/provider/JRELocaleProviderAdapter.getLocaleResources (1 samples, 0.05%)</title><rect x="199.6" y="883.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="202.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.05%)</title><rect x="199.6" y="867.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="202.6" y="878.0"></text>
</g>
<g>
<title>java/util/Locale.equals (1 samples, 0.05%)</title><rect x="200.2" y="947.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="203.2" y="958.0"></text>
</g>
<g>
<title>java/util/Locale.getDefault (1 samples, 0.05%)</title><rect x="200.7" y="979.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="203.7" y="990.0"></text>
</g>
<g>
<title>java/util/Formatter.format (51 samples, 2.40%)</title><rect x="201.3" y="995.0" width="28.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="204.3" y="1006.0">ja..</text>
</g>
<g>
<title>java/util/Formatter.format (51 samples, 2.40%)</title><rect x="201.3" y="979.0" width="28.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="204.3" y="990.0">ja..</text>
</g>
<g>
<title>java/util/ArrayList$Itr.hasNext (1 samples, 0.05%)</title><rect x="201.8" y="963.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="204.8" y="974.0"></text>
</g>
<g>
<title>java/util/Formatter$FixedString.print (3 samples, 0.14%)</title><rect x="202.4" y="963.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="205.4" y="974.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.14%)</title><rect x="202.4" y="947.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="205.4" y="958.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.14%)</title><rect x="202.4" y="931.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="205.4" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.14%)</title><rect x="202.4" y="915.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="205.4" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.09%)</title><rect x="203.0" y="899.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="206.0" y="910.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.05%)</title><rect x="203.0" y="883.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="206.0" y="894.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="203.5" y="883.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="206.5" y="894.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (19 samples, 0.90%)</title><rect x="204.1" y="963.0" width="10.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="207.1" y="974.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.printDateTime (15 samples, 0.71%)</title><rect x="205.2" y="947.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="208.2" y="958.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (15 samples, 0.71%)</title><rect x="205.2" y="931.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.2" y="942.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.appendJustified (1 samples, 0.05%)</title><rect x="205.2" y="915.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="208.2" y="926.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.05%)</title><rect x="205.2" y="899.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.2" y="910.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.05%)</title><rect x="205.2" y="883.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="208.2" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.05%)</title><rect x="205.2" y="867.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="208.2" y="878.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (14 samples, 0.66%)</title><rect x="205.7" y="915.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="208.7" y="926.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.14%)</title><rect x="206.3" y="899.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="209.3" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.09%)</title><rect x="206.9" y="883.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="209.9" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (2 samples, 0.09%)</title><rect x="206.9" y="867.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="209.9" y="878.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.inflate (1 samples, 0.05%)</title><rect x="206.9" y="851.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="209.9" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.inflate (1 samples, 0.05%)</title><rect x="206.9" y="835.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="209.9" y="846.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.inflate (1 samples, 0.05%)</title><rect x="206.9" y="819.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="209.9" y="830.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.checkBoundsOffCount (1 samples, 0.05%)</title><rect x="206.9" y="803.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="209.9" y="814.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.length (1 samples, 0.05%)</title><rect x="206.9" y="787.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="209.9" y="798.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.05%)</title><rect x="207.4" y="851.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="210.4" y="862.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="207.4" y="835.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="210.4" y="846.0"></text>
</g>
<g>
<title>java/text/DateFormatSymbols.getInstance (2 samples, 0.09%)</title><rect x="208.0" y="899.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="211.0" y="910.0"></text>
</g>
<g>
<title>java/text/DateFormatSymbols.getProviderInstance (2 samples, 0.09%)</title><rect x="208.0" y="883.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="211.0" y="894.0"></text>
</g>
<g>
<title>sun/util/locale/provider/DateFormatSymbolsProviderImpl.getInstance (1 samples, 0.05%)</title><rect x="208.0" y="867.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="211.0" y="878.0"></text>
</g>
<g>
<title>java/text/DateFormatSymbols.&lt;init&gt; (1 samples, 0.05%)</title><rect x="208.0" y="851.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="211.0" y="862.0"></text>
</g>
<g>
<title>java/text/DateFormatSymbols.initializeData (1 samples, 0.05%)</title><rect x="208.0" y="835.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.0" y="846.0"></text>
</g>
<g>
<title>java/text/DateFormatSymbols.copyMembers (1 samples, 0.05%)</title><rect x="208.0" y="819.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.0" y="830.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.05%)</title><rect x="208.0" y="803.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="211.0" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.05%)</title><rect x="208.0" y="787.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="211.0" y="798.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.newInstance (1 samples, 0.05%)</title><rect x="208.0" y="771.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="211.0" y="782.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.newArray (1 samples, 0.05%)</title><rect x="208.0" y="755.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="211.0" y="766.0"></text>
</g>
<g>
<title>JVM_NewArray (1 samples, 0.05%)</title><rect x="208.0" y="739.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="211.0" y="750.0"></text>
</g>
<g>
<title>Reflection::reflect_new_array(oopDesc*, int, Thread*) (1 samples, 0.05%)</title><rect x="208.0" y="723.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="211.0" y="734.0"></text>
</g>
<g>
<title>oopDesc::metadata_field(int) const (1 samples, 0.05%)</title><rect x="208.0" y="707.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="211.0" y="718.0"></text>
</g>
<g>
<title>sun/util/locale/provider/LocaleProviderAdapter.getAdapter (1 samples, 0.05%)</title><rect x="208.5" y="867.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="211.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.05%)</title><rect x="208.5" y="851.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="211.5" y="862.0"></text>
</g>
<g>
<title>java/text/DateFormatSymbols.getShortMonths (2 samples, 0.09%)</title><rect x="209.1" y="899.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="212.1" y="910.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.05%)</title><rect x="209.6" y="883.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="212.6" y="894.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.05%)</title><rect x="209.6" y="867.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="212.6" y="878.0"></text>
</g>
<g>
<title>java/time/ZonedDateTime.get (4 samples, 0.19%)</title><rect x="210.2" y="899.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="213.2" y="910.0"></text>
</g>
<g>
<title>java/time/LocalDateTime.get (3 samples, 0.14%)</title><rect x="210.7" y="883.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="213.7" y="894.0"></text>
</g>
<g>
<title>java/time/LocalDate.get (2 samples, 0.09%)</title><rect x="211.3" y="867.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="214.3" y="878.0"></text>
</g>
<g>
<title>java/time/LocalDate.get0 (2 samples, 0.09%)</title><rect x="211.3" y="851.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="214.3" y="862.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="211.9" y="835.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="214.9" y="846.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.localizedMagnitude (2 samples, 0.09%)</title><rect x="212.4" y="899.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="215.4" y="910.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.localizedMagnitude (2 samples, 0.09%)</title><rect x="212.4" y="883.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="215.4" y="894.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.insert (1 samples, 0.05%)</title><rect x="213.0" y="867.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="216.0" y="878.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.insert (1 samples, 0.05%)</title><rect x="213.0" y="851.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="216.0" y="862.0"></text>
</g>
<g>
<title>java/lang/String.checkOffset (1 samples, 0.05%)</title><rect x="213.0" y="835.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="216.0" y="846.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.printString (2 samples, 0.09%)</title><rect x="213.5" y="947.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="216.5" y="958.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (2 samples, 0.09%)</title><rect x="213.5" y="931.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="216.5" y="942.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.appendJustified (2 samples, 0.09%)</title><rect x="213.5" y="915.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.5" y="926.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.09%)</title><rect x="213.5" y="899.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="216.5" y="910.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.09%)</title><rect x="213.5" y="883.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="216.5" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.09%)</title><rect x="213.5" y="867.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="216.5" y="878.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.09%)</title><rect x="213.5" y="851.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="216.5" y="862.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.05%)</title><rect x="214.1" y="835.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="217.1" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.05%)</title><rect x="214.1" y="819.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="217.1" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (1 samples, 0.05%)</title><rect x="214.1" y="803.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="217.1" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.inflate (1 samples, 0.05%)</title><rect x="214.1" y="787.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="217.1" y="798.0"></text>
</g>
<g>
<title>java/util/Formatter.parse (27 samples, 1.27%)</title><rect x="214.6" y="963.0" width="15.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="217.6" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.05%)</title><rect x="215.7" y="947.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="218.7" y="958.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.05%)</title><rect x="215.7" y="931.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="218.7" y="942.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.05%)</title><rect x="215.7" y="915.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="218.7" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.05%)</title><rect x="215.7" y="899.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="218.7" y="910.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.05%)</title><rect x="215.7" y="883.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="218.7" y="894.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.05%)</title><rect x="215.7" y="867.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="218.7" y="878.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.newInstance (1 samples, 0.05%)</title><rect x="215.7" y="851.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="218.7" y="862.0"></text>
</g>
<g>
<title>oop_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="215.7" y="835.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="218.7" y="846.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.&lt;init&gt; (7 samples, 0.33%)</title><rect x="216.3" y="947.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="219.3" y="958.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.05%)</title><rect x="216.9" y="931.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="219.9" y="942.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.checkDateTime (1 samples, 0.05%)</title><rect x="217.4" y="931.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="220.4" y="942.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.conversion (1 samples, 0.05%)</title><rect x="218.0" y="931.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="221.0" y="942.0"></text>
</g>
<g>
<title>java/lang/Character.isUpperCase (1 samples, 0.05%)</title><rect x="218.0" y="915.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="221.0" y="926.0"></text>
</g>
<g>
<title>java/lang/Character.isUpperCase (1 samples, 0.05%)</title><rect x="218.0" y="899.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="221.0" y="910.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.isUpperCase (1 samples, 0.05%)</title><rect x="218.0" y="883.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="221.0" y="894.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.05%)</title><rect x="218.0" y="867.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="221.0" y="878.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.index (1 samples, 0.05%)</title><rect x="218.5" y="931.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.5" y="942.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.end (1 samples, 0.05%)</title><rect x="219.1" y="931.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="222.1" y="942.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.start (1 samples, 0.05%)</title><rect x="219.6" y="931.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="222.6" y="942.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.find (13 samples, 0.61%)</title><rect x="220.2" y="947.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="223.2" y="958.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.getTextLength (1 samples, 0.05%)</title><rect x="220.2" y="931.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="223.2" y="942.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.reset (1 samples, 0.05%)</title><rect x="220.8" y="931.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="223.8" y="942.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.search (11 samples, 0.52%)</title><rect x="221.3" y="931.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.3" y="942.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Start.match (11 samples, 0.52%)</title><rect x="221.3" y="915.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="224.3" y="926.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharProperty.match (11 samples, 0.52%)</title><rect x="221.3" y="899.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="224.3" y="910.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (11 samples, 0.52%)</title><rect x="221.3" y="883.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.3" y="894.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (10 samples, 0.47%)</title><rect x="221.9" y="867.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="224.9" y="878.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPropertyGreedy.match (10 samples, 0.47%)</title><rect x="221.9" y="851.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="224.9" y="862.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharProperty.match (8 samples, 0.38%)</title><rect x="223.0" y="835.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="226.0" y="846.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupTail.match (7 samples, 0.33%)</title><rect x="223.5" y="819.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="226.5" y="830.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BranchConn.match (7 samples, 0.33%)</title><rect x="223.5" y="803.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="226.5" y="814.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (7 samples, 0.33%)</title><rect x="223.5" y="787.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.5" y="798.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (7 samples, 0.33%)</title><rect x="223.5" y="771.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="226.5" y="782.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPropertyGreedy.match (7 samples, 0.33%)</title><rect x="223.5" y="755.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="226.5" y="766.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupTail.match (6 samples, 0.28%)</title><rect x="224.1" y="739.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="227.1" y="750.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BranchConn.match (6 samples, 0.28%)</title><rect x="224.1" y="723.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="227.1" y="734.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (6 samples, 0.28%)</title><rect x="224.1" y="707.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="227.1" y="718.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (6 samples, 0.28%)</title><rect x="224.1" y="691.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="227.1" y="702.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (5 samples, 0.24%)</title><rect x="224.6" y="675.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="227.6" y="686.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (4 samples, 0.19%)</title><rect x="225.2" y="659.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="228.2" y="670.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharProperty.match (2 samples, 0.09%)</title><rect x="226.3" y="643.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="229.3" y="654.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$$Lambda$17/1500056228.is (1 samples, 0.05%)</title><rect x="226.3" y="627.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="229.3" y="638.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.lambda$clazz$1 (1 samples, 0.05%)</title><rect x="226.3" y="611.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="229.3" y="622.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupTail.match (1 samples, 0.05%)</title><rect x="226.9" y="627.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="229.9" y="638.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BranchConn.match (1 samples, 0.05%)</title><rect x="226.9" y="611.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="229.9" y="622.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (1 samples, 0.05%)</title><rect x="226.9" y="595.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="229.9" y="606.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharProperty.match (1 samples, 0.05%)</title><rect x="226.9" y="579.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="229.9" y="590.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPredicate$$Lambda$19/1464642111.is (1 samples, 0.05%)</title><rect x="226.9" y="563.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="229.9" y="574.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPredicate.lambda$union$2 (1 samples, 0.05%)</title><rect x="226.9" y="547.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="229.9" y="558.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPredicate$$Lambda$19/1464642111.is (1 samples, 0.05%)</title><rect x="226.9" y="531.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="229.9" y="542.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPredicate.lambda$union$2 (1 samples, 0.05%)</title><rect x="226.9" y="515.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="229.9" y="526.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.05%)</title><rect x="226.9" y="499.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="229.9" y="510.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.matcher (4 samples, 0.19%)</title><rect x="227.4" y="947.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="230.4" y="958.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.&lt;init&gt; (3 samples, 0.14%)</title><rect x="228.0" y="931.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="231.0" y="942.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.reset (1 samples, 0.05%)</title><rect x="229.1" y="915.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="232.1" y="926.0"></text>
</g>
<g>
<title>java/util/Formatter.toString (1 samples, 0.05%)</title><rect x="229.7" y="995.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="232.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.05%)</title><rect x="229.7" y="979.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="232.7" y="990.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.newString (1 samples, 0.05%)</title><rect x="229.7" y="963.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="232.7" y="974.0"></text>
</g>
<g>
<title>java/lang/Throwable.printStackTrace (86 samples, 4.05%)</title><rect x="230.2" y="1011.0" width="47.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="233.2" y="1022.0">java..</text>
</g>
<g>
<title>java/lang/Throwable.printStackTrace (86 samples, 4.05%)</title><rect x="230.2" y="995.0" width="47.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="233.2" y="1006.0">java..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (15 samples, 0.71%)</title><rect x="231.9" y="979.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="234.9" y="990.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (13 samples, 0.61%)</title><rect x="231.9" y="963.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="234.9" y="974.0"></text>
</g>
<g>
<title>java/lang/StackTraceElement.toString (12 samples, 0.57%)</title><rect x="232.4" y="947.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="235.4" y="958.0"></text>
</g>
<g>
<title>java/lang/StackTraceElement.dropModuleVersion (1 samples, 0.05%)</title><rect x="233.0" y="931.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="236.0" y="942.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.05%)</title><rect x="233.5" y="931.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="236.5" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.05%)</title><rect x="233.5" y="915.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.5" y="926.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 0.33%)</title><rect x="234.1" y="931.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="237.1" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 0.33%)</title><rect x="234.1" y="915.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.1" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.09%)</title><rect x="234.7" y="899.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="237.7" y="910.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.05%)</title><rect x="234.7" y="883.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="237.7" y="894.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="235.2" y="883.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="238.2" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (4 samples, 0.19%)</title><rect x="235.8" y="899.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="238.8" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.getCoder (1 samples, 0.05%)</title><rect x="235.8" y="883.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="238.8" y="894.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.14%)</title><rect x="236.3" y="883.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="239.3" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.inflate (2 samples, 0.09%)</title><rect x="236.3" y="867.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="239.3" y="878.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="237.4" y="867.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="240.4" y="878.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.09%)</title><rect x="238.0" y="931.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="241.0" y="942.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.09%)</title><rect x="238.0" y="915.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="241.0" y="926.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.09%)</title><rect x="238.0" y="899.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="241.0" y="910.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="238.5" y="883.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="241.5" y="894.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.09%)</title><rect x="239.1" y="963.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="242.1" y="974.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.09%)</title><rect x="239.1" y="947.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="242.1" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.09%)</title><rect x="239.1" y="931.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.1" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.05%)</title><rect x="239.1" y="915.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.1" y="926.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="239.7" y="915.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="242.7" y="926.0"></text>
</g>
<g>
<title>java/lang/Throwable$WrappedPrintWriter.println (8 samples, 0.38%)</title><rect x="240.2" y="979.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="243.2" y="990.0"></text>
</g>
<g>
<title>java/io/PrintWriter.println (8 samples, 0.38%)</title><rect x="240.2" y="963.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="243.2" y="974.0"></text>
</g>
<g>
<title>java/io/PrintWriter.print (4 samples, 0.19%)</title><rect x="240.8" y="947.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="243.8" y="958.0"></text>
</g>
<g>
<title>java/io/PrintWriter.write (4 samples, 0.19%)</title><rect x="240.8" y="931.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="243.8" y="942.0"></text>
</g>
<g>
<title>java/io/PrintWriter.write (4 samples, 0.19%)</title><rect x="240.8" y="915.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.8" y="926.0"></text>
</g>
<g>
<title>java/io/StringWriter.write (4 samples, 0.19%)</title><rect x="240.8" y="899.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="243.8" y="910.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (4 samples, 0.19%)</title><rect x="240.8" y="883.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="243.8" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.19%)</title><rect x="240.8" y="867.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="243.8" y="878.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.appendChars (3 samples, 0.14%)</title><rect x="240.8" y="851.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="243.8" y="862.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.05%)</title><rect x="241.9" y="835.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="244.9" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.05%)</title><rect x="242.4" y="851.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="245.4" y="862.0"></text>
</g>
<g>
<title>java/io/PrintWriter.println (1 samples, 0.05%)</title><rect x="243.0" y="947.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="246.0" y="958.0"></text>
</g>
<g>
<title>java/io/PrintWriter.newLine (1 samples, 0.05%)</title><rect x="243.0" y="931.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="246.0" y="942.0"></text>
</g>
<g>
<title>java/lang/System.lineSeparator (1 samples, 0.05%)</title><rect x="243.0" y="915.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.0" y="926.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.09%)</title><rect x="243.6" y="947.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="246.6" y="958.0"></text>
</g>
<g>
<title>java/lang/Throwable.toString (2 samples, 0.09%)</title><rect x="243.6" y="931.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="246.6" y="942.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.05%)</title><rect x="243.6" y="915.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="246.6" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.05%)</title><rect x="243.6" y="899.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="246.6" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.05%)</title><rect x="243.6" y="883.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.6" y="894.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="243.6" y="867.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="246.6" y="878.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.05%)</title><rect x="244.1" y="915.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="247.1" y="926.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.05%)</title><rect x="244.1" y="899.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="247.1" y="910.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.05%)</title><rect x="244.1" y="883.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.1" y="894.0"></text>
</g>
<g>
<title>java/lang/Throwable.getOurStackTrace (57 samples, 2.69%)</title><rect x="244.7" y="979.0" width="31.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="247.7" y="990.0">ja..</text>
</g>
<g>
<title>java/lang/StackTraceElement.of (57 samples, 2.69%)</title><rect x="244.7" y="963.0" width="31.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="247.7" y="974.0">ja..</text>
</g>
<g>
<title>java/lang/StackTraceElement.computeFormat (1 samples, 0.05%)</title><rect x="245.2" y="947.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="248.2" y="958.0"></text>
</g>
<g>
<title>java/lang/StackTraceElement.isHashedInJavaBase (1 samples, 0.05%)</title><rect x="245.2" y="931.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="248.2" y="942.0"></text>
</g>
<g>
<title>java/lang/StackTraceElement$HashedModules.contains (1 samples, 0.05%)</title><rect x="245.2" y="915.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="248.2" y="926.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.05%)</title><rect x="245.2" y="899.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="248.2" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.05%)</title><rect x="245.2" y="883.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="248.2" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.05%)</title><rect x="245.2" y="867.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="248.2" y="878.0"></text>
</g>
<g>
<title>java/lang/StackTraceElement.initStackTraceElements (55 samples, 2.59%)</title><rect x="245.8" y="947.0" width="30.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="248.8" y="958.0">ja..</text>
</g>
<g>
<title>JVM_InitStackTraceElementArray (55 samples, 2.59%)</title><rect x="245.8" y="931.0" width="30.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="248.8" y="942.0">JV..</text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.05%)</title><rect x="246.3" y="915.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="249.3" y="926.0"></text>
</g>
<g>
<title>java_lang_Throwable::get_stack_trace_elements(Handle, objArrayHandle, Thread*) (53 samples, 2.50%)</title><rect x="246.9" y="915.0" width="29.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="249.9" y="926.0">ja..</text>
</g>
<g>
<title>BacktraceIterator::next(Thread*) (1 samples, 0.05%)</title><rect x="246.9" y="899.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="249.9" y="910.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="246.9" y="883.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="249.9" y="894.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.05%)</title><rect x="246.9" y="867.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="249.9" y="878.0"></text>
</g>
<g>
<title>G1BarrierSet::AccessBarrier&lt;2670710ull, G1BarrierSet&gt;::oop_load_in_heap_at(oopDesc*, long) (1 samples, 0.05%)</title><rect x="247.4" y="899.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="250.4" y="910.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;2670710ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (1 samples, 0.05%)</title><rect x="247.4" y="883.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="250.4" y="894.0"></text>
</g>
<g>
<title>unsigned int RawAccessBarrier&lt;2670710ull&gt;::load&lt;unsigned int&gt;(void*) (1 samples, 0.05%)</title><rect x="247.4" y="867.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="250.4" y="878.0"></text>
</g>
<g>
<title>java_lang_StackTraceElement::fill_in(Handle, InstanceKlass*, methodHandle const&amp;, int, int, Symbol*, Thread*) (51 samples, 2.40%)</title><rect x="248.0" y="899.0" width="28.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="251.0" y="910.0">ja..</text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.05%)</title><rect x="249.1" y="883.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="252.1" y="894.0"></text>
</g>
<g>
<title>Klass::external_name() const (1 samples, 0.05%)</title><rect x="249.7" y="883.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="252.7" y="894.0"></text>
</g>
<g>
<title>StringTable::intern(Symbol*, Thread*) (27 samples, 1.27%)</title><rect x="250.2" y="883.0" width="15.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="253.2" y="894.0"></text>
</g>
<g>
<title>StringTable::do_intern(Handle, unsigned short const*, int, unsigned long, Thread*) (18 samples, 0.85%)</title><rect x="250.2" y="867.0" width="10.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="253.2" y="878.0"></text>
</g>
<g>
<title>bool ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)1&gt;, StringTableConfig, (MemoryType)9&gt;::get&lt;StringTableLookupOop, StringTableGet&gt;(Thread*, StringTableLookupOop&amp;, StringTableGet&amp;, bool*) (6 samples, 0.28%)</title><rect x="250.2" y="851.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="253.2" y="862.0"></text>
</g>
<g>
<title>StringTableGet::operator()(WeakHandle&lt;(WeakHandleType)1&gt;*) (1 samples, 0.05%)</title><rect x="250.8" y="835.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="253.8" y="846.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="250.8" y="819.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="253.8" y="830.0"></text>
</g>
<g>
<title>WeakHandle&lt;(WeakHandleType)1&gt;* ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)1&gt;, StringTableConfig, (MemoryType)9&gt;::internal_get&lt;StringTableLookupOop&gt;(Thread*, StringTableLookupOop&amp;, bool*) (4 samples, 0.19%)</title><rect x="251.3" y="835.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="254.3" y="846.0"></text>
</g>
<g>
<title>ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)1&gt;, StringTableConfig, (MemoryType)9&gt;::Node* ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)1&gt;, StringTableConfig, (MemoryType)9&gt;::get_node&lt;StringTableLookupOop&gt;(ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)1&gt;, StringTableConfig, (MemoryType)9&gt;::Bucket const*, StringTableLookupOop&amp;, bool*, unsigned long*) const (4 samples, 0.19%)</title><rect x="251.3" y="819.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="254.3" y="830.0"></text>
</g>
<g>
<title>StringTableLookupOop::equals(WeakHandle&lt;(WeakHandleType)1&gt;*, bool*) (3 samples, 0.14%)</title><rect x="251.9" y="803.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="254.9" y="814.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1187956ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1187956ull&gt;::oop_access_barrier(void*) (1 samples, 0.05%)</title><rect x="251.9" y="787.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="254.9" y="798.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;565366ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 565366ull&gt;::oop_access_barrier(oopDesc*, long) (1 samples, 0.05%)</title><rect x="252.5" y="787.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="255.5" y="798.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.05%)</title><rect x="253.0" y="787.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="256.0" y="798.0"></text>
</g>
<g>
<title>java_lang_String::create_from_unicode(unsigned short const*, int, Thread*) (12 samples, 0.57%)</title><rect x="253.6" y="851.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="256.6" y="862.0"></text>
</g>
<g>
<title>UNICODE::is_latin1(unsigned short const*, int) (1 samples, 0.05%)</title><rect x="254.1" y="835.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="257.1" y="846.0"></text>
</g>
<g>
<title>java_lang_String::basic_create(int, bool, Thread*) (10 samples, 0.47%)</title><rect x="254.7" y="835.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="257.7" y="846.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="255.2" y="819.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="258.2" y="830.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.05%)</title><rect x="255.2" y="803.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="258.2" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (4 samples, 0.19%)</title><rect x="255.8" y="819.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="258.8" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (4 samples, 0.19%)</title><rect x="255.8" y="803.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="258.8" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.14%)</title><rect x="255.8" y="787.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="258.8" y="798.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (2 samples, 0.09%)</title><rect x="255.8" y="771.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="258.8" y="782.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_low_memory_detector() (2 samples, 0.09%)</title><rect x="255.8" y="755.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="258.8" y="766.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.05%)</title><rect x="256.9" y="771.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="259.9" y="782.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="257.5" y="787.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="260.5" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.19%)</title><rect x="258.0" y="819.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="261.0" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.19%)</title><rect x="258.0" y="803.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="261.0" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.14%)</title><rect x="258.0" y="787.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="261.0" y="798.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.05%)</title><rect x="258.0" y="771.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="261.0" y="782.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_low_memory_detector() (1 samples, 0.05%)</title><rect x="258.0" y="755.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="261.0" y="766.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_dtrace_sampler() (1 samples, 0.05%)</title><rect x="258.6" y="771.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="261.6" y="782.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.05%)</title><rect x="259.1" y="771.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="262.1" y="782.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.05%)</title><rect x="259.7" y="787.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="262.7" y="798.0"></text>
</g>
<g>
<title>StringTable::intern(Handle, unsigned short const*, int, Thread*) (5 samples, 0.24%)</title><rect x="260.2" y="867.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="263.2" y="878.0"></text>
</g>
<g>
<title>StringTable::lookup_shared(unsigned short const*, int, unsigned int) (4 samples, 0.19%)</title><rect x="260.8" y="851.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="263.8" y="862.0"></text>
</g>
<g>
<title>java_lang_String::equals(oopDesc*, unsigned short const*, int) (2 samples, 0.09%)</title><rect x="261.9" y="835.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="264.9" y="846.0"></text>
</g>
<g>
<title>Symbol::as_unicode(int&amp;) const (4 samples, 0.19%)</title><rect x="263.0" y="867.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="266.0" y="878.0"></text>
</g>
<g>
<title>UTF8::unicode_length(char const*, int, bool&amp;, bool&amp;) (3 samples, 0.14%)</title><rect x="263.0" y="851.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="266.0" y="862.0"></text>
</g>
<g>
<title>void UTF8::convert_to_unicode&lt;unsigned short&gt;(char const*, unsigned short*, int) (1 samples, 0.05%)</title><rect x="264.7" y="851.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="267.7" y="862.0"></text>
</g>
<g>
<title>StringTable::intern(char const*, Thread*) (16 samples, 0.75%)</title><rect x="265.2" y="883.0" width="8.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="268.2" y="894.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.05%)</title><rect x="265.2" y="867.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="268.2" y="878.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.05%)</title><rect x="265.2" y="851.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="268.2" y="862.0"></text>
</g>
<g>
<title>StringTable::do_intern(Handle, unsigned short const*, int, unsigned long, Thread*) (15 samples, 0.71%)</title><rect x="265.8" y="867.0" width="8.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="268.8" y="878.0"></text>
</g>
<g>
<title>bool ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)1&gt;, StringTableConfig, (MemoryType)9&gt;::get&lt;StringTableLookupOop, StringTableGet&gt;(Thread*, StringTableLookupOop&amp;, StringTableGet&amp;, bool*) (5 samples, 0.24%)</title><rect x="266.4" y="851.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="269.4" y="862.0"></text>
</g>
<g>
<title>StringTableGet::operator()(WeakHandle&lt;(WeakHandleType)1&gt;*) (2 samples, 0.09%)</title><rect x="267.5" y="835.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="270.5" y="846.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.09%)</title><rect x="267.5" y="819.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="270.5" y="830.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.05%)</title><rect x="268.0" y="803.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="271.0" y="814.0"></text>
</g>
<g>
<title>WeakHandle&lt;(WeakHandleType)1&gt;* ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)1&gt;, StringTableConfig, (MemoryType)9&gt;::internal_get&lt;StringTableLookupOop&gt;(Thread*, StringTableLookupOop&amp;, bool*) (1 samples, 0.05%)</title><rect x="268.6" y="835.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="271.6" y="846.0"></text>
</g>
<g>
<title>ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)1&gt;, StringTableConfig, (MemoryType)9&gt;::Node* ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)1&gt;, StringTableConfig, (MemoryType)9&gt;::get_node&lt;StringTableLookupOop&gt;(ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)1&gt;, StringTableConfig, (MemoryType)9&gt;::Bucket const*, StringTableLookupOop&amp;, bool*, unsigned long*) const (1 samples, 0.05%)</title><rect x="268.6" y="819.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="271.6" y="830.0"></text>
</g>
<g>
<title>StringTableLookupOop::equals(WeakHandle&lt;(WeakHandleType)1&gt;*, bool*) (1 samples, 0.05%)</title><rect x="268.6" y="803.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="271.6" y="814.0"></text>
</g>
<g>
<title>java_lang_String::equals(oopDesc*, oopDesc*) (1 samples, 0.05%)</title><rect x="268.6" y="787.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="271.6" y="798.0"></text>
</g>
<g>
<title>java_lang_String::create_from_unicode(unsigned short const*, int, Thread*) (9 samples, 0.42%)</title><rect x="269.1" y="851.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="272.1" y="862.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;573558ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 573558ull&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (1 samples, 0.05%)</title><rect x="271.9" y="835.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="274.9" y="846.0"></text>
</g>
<g>
<title>java_lang_String::basic_create(int, bool, Thread*) (3 samples, 0.14%)</title><rect x="272.5" y="835.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="275.5" y="846.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.09%)</title><rect x="273.0" y="819.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="276.0" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.09%)</title><rect x="273.0" y="803.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="276.0" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.09%)</title><rect x="273.0" y="787.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="276.0" y="798.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.05%)</title><rect x="273.0" y="771.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="276.0" y="782.0"></text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.05%)</title><rect x="273.6" y="771.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="276.6" y="782.0"></text>
</g>
<g>
<title>Symbol::as_klass_external_name() const (3 samples, 0.14%)</title><rect x="274.1" y="883.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="277.1" y="894.0"></text>
</g>
<g>
<title>Symbol::as_C_string() const (1 samples, 0.05%)</title><rect x="274.7" y="867.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="277.7" y="878.0"></text>
</g>
<g>
<title>_platform_strlen (1 samples, 0.05%)</title><rect x="275.2" y="867.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="278.2" y="878.0"></text>
</g>
<g>
<title>void ModRefBarrierSet::AccessBarrier&lt;573558ull, G1BarrierSet&gt;::oop_store_in_heap&lt;unsigned int&gt;(unsigned int*, oopDesc*) (1 samples, 0.05%)</title><rect x="275.8" y="883.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="278.8" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$SetFromMap.add (3 samples, 0.14%)</title><rect x="276.4" y="979.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="279.4" y="990.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.put (3 samples, 0.14%)</title><rect x="276.4" y="963.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="279.4" y="974.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.hash (2 samples, 0.09%)</title><rect x="276.9" y="947.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="279.9" y="958.0"></text>
</g>
<g>
<title>java/lang/System.identityHashCode (2 samples, 0.09%)</title><rect x="276.9" y="931.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="279.9" y="942.0"></text>
</g>
<g>
<title>JVM_IHashCode (1 samples, 0.05%)</title><rect x="277.5" y="915.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="280.5" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (6 samples, 0.28%)</title><rect x="278.0" y="1011.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="281.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1543237999.invoke (6 samples, 0.28%)</title><rect x="278.0" y="995.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="281.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4 samples, 0.19%)</title><rect x="278.6" y="979.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="281.6" y="990.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (2 samples, 0.09%)</title><rect x="278.6" y="963.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="281.6" y="974.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.05%)</title><rect x="279.1" y="947.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="282.1" y="958.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.05%)</title><rect x="279.1" y="931.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.1" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.invokeBasic (1 samples, 0.05%)</title><rect x="279.7" y="963.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="282.7" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$Stringifiers$ObjectStringifier.valueOf (1 samples, 0.05%)</title><rect x="280.3" y="963.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="283.3" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/257895351.invoke (1 samples, 0.05%)</title><rect x="280.8" y="979.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="283.8" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.05%)</title><rect x="280.8" y="963.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="283.8" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.invokeBasic (1 samples, 0.05%)</title><rect x="280.8" y="947.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="283.8" y="958.0"></text>
</g>
<g>
<title>java/time/ZoneId.systemDefault (7 samples, 0.33%)</title><rect x="281.4" y="1011.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="284.4" y="1022.0"></text>
</g>
<g>
<title>java/util/TimeZone.getDefault (6 samples, 0.28%)</title><rect x="281.4" y="995.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="284.4" y="1006.0"></text>
</g>
<g>
<title>java/util/TimeZone.getDefaultRef (2 samples, 0.09%)</title><rect x="281.4" y="979.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="284.4" y="990.0"></text>
</g>
<g>
<title>sun/util/calendar/ZoneInfo.clone (4 samples, 0.19%)</title><rect x="282.5" y="979.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.5" y="990.0"></text>
</g>
<g>
<title>java/util/TimeZone.clone (4 samples, 0.19%)</title><rect x="282.5" y="963.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="285.5" y="974.0"></text>
</g>
<g>
<title>java/lang/Object.clone (3 samples, 0.14%)</title><rect x="283.0" y="947.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="286.0" y="958.0"></text>
</g>
<g>
<title>JVM_Clone (3 samples, 0.14%)</title><rect x="283.0" y="931.0" width="1.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="286.0" y="942.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;540784ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)9, 540784ull&gt;::access_barrier(oopDesc*, oopDesc*, unsigned long) (2 samples, 0.09%)</title><rect x="283.0" y="915.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="286.0" y="926.0"></text>
</g>
<g>
<title>acl_CopyRight (1 samples, 0.05%)</title><rect x="283.6" y="899.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="286.6" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.05%)</title><rect x="284.1" y="915.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="287.1" y="926.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="284.1" y="899.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="287.1" y="910.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="284.1" y="883.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="287.1" y="894.0"></text>
</g>
<g>
<title>java/util/TimeZone.toZoneId (1 samples, 0.05%)</title><rect x="284.7" y="995.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="287.7" y="1006.0"></text>
</g>
<g>
<title>java/util/TimeZone.toZoneId0 (1 samples, 0.05%)</title><rect x="284.7" y="979.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="287.7" y="990.0"></text>
</g>
<g>
<title>java/util/TimeZone.toZoneId (1 samples, 0.05%)</title><rect x="284.7" y="963.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.7" y="974.0"></text>
</g>
<g>
<title>java/util/TimeZone.toZoneId0 (1 samples, 0.05%)</title><rect x="284.7" y="947.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="287.7" y="958.0"></text>
</g>
<g>
<title>java/time/ZoneId.of (1 samples, 0.05%)</title><rect x="284.7" y="931.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="287.7" y="942.0"></text>
</g>
<g>
<title>java/time/ZoneId.of (1 samples, 0.05%)</title><rect x="284.7" y="915.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="287.7" y="926.0"></text>
</g>
<g>
<title>java/time/ZoneId.of (1 samples, 0.05%)</title><rect x="284.7" y="899.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="287.7" y="910.0"></text>
</g>
<g>
<title>java/time/ZoneRegion.ofId (1 samples, 0.05%)</title><rect x="284.7" y="883.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="287.7" y="894.0"></text>
</g>
<g>
<title>java/time/zone/ZoneRulesProvider.&lt;clinit&gt; (1 samples, 0.05%)</title><rect x="284.7" y="867.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="287.7" y="878.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.05%)</title><rect x="284.7" y="851.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="287.7" y="862.0"></text>
</g>
<g>
<title>java/security/AccessController.executePrivileged (1 samples, 0.05%)</title><rect x="284.7" y="835.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="287.7" y="846.0"></text>
</g>
<g>
<title>java/time/zone/ZoneRulesProvider$1.run (1 samples, 0.05%)</title><rect x="284.7" y="819.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="287.7" y="830.0"></text>
</g>
<g>
<title>java/time/zone/TzdbZoneRulesProvider.&lt;init&gt; (1 samples, 0.05%)</title><rect x="284.7" y="803.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="287.7" y="814.0"></text>
</g>
<g>
<title>java/time/zone/TzdbZoneRulesProvider.load (1 samples, 0.05%)</title><rect x="284.7" y="787.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.7" y="798.0"></text>
</g>
<g>
<title>java/io/DataInputStream.readFully (1 samples, 0.05%)</title><rect x="284.7" y="771.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.7" y="782.0"></text>
</g>
<g>
<title>java/io/DataInputStream.readFully (1 samples, 0.05%)</title><rect x="284.7" y="755.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="287.7" y="766.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.read (1 samples, 0.05%)</title><rect x="284.7" y="739.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.7" y="750.0"></text>
</g>
<g>
<title>java/io/FileInputStream.available (1 samples, 0.05%)</title><rect x="284.7" y="723.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="287.7" y="734.0"></text>
</g>
<g>
<title>java/io/FileInputStream.available0 (1 samples, 0.05%)</title><rect x="284.7" y="707.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="287.7" y="718.0"></text>
</g>
<g>
<title>Java_java_io_FileInputStream_available0 (1 samples, 0.05%)</title><rect x="284.7" y="691.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="287.7" y="702.0"></text>
</g>
<g>
<title>lseek (1 samples, 0.05%)</title><rect x="284.7" y="675.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="287.7" y="686.0"></text>
</g>
<g>
<title>java/time/ZonedDateTime.ofInstant (4 samples, 0.19%)</title><rect x="285.3" y="1011.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="288.3" y="1022.0"></text>
</g>
<g>
<title>java/time/ZonedDateTime.create (4 samples, 0.19%)</title><rect x="285.3" y="995.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="288.3" y="1006.0"></text>
</g>
<g>
<title>java/time/Instant.ofEpochSecond (1 samples, 0.05%)</title><rect x="285.3" y="979.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="288.3" y="990.0"></text>
</g>
<g>
<title>java/time/Instant.create (1 samples, 0.05%)</title><rect x="285.3" y="963.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="288.3" y="974.0"></text>
</g>
<g>
<title>java/time/LocalDateTime.ofEpochSecond (2 samples, 0.09%)</title><rect x="285.8" y="979.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="288.8" y="990.0"></text>
</g>
<g>
<title>java/time/LocalDate.ofEpochDay (2 samples, 0.09%)</title><rect x="285.8" y="963.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.8" y="974.0"></text>
</g>
<g>
<title>java/time/temporal/ChronoField.checkValidIntValue (2 samples, 0.09%)</title><rect x="285.8" y="947.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="288.8" y="958.0"></text>
</g>
<g>
<title>java/time/temporal/ValueRange.checkValidIntValue (2 samples, 0.09%)</title><rect x="285.8" y="931.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="288.8" y="942.0"></text>
</g>
<g>
<title>java/time/temporal/ValueRange.isValidIntValue (2 samples, 0.09%)</title><rect x="285.8" y="915.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="288.8" y="926.0"></text>
</g>
<g>
<title>java/time/zone/ZoneRules.getOffset (1 samples, 0.05%)</title><rect x="286.9" y="979.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="289.9" y="990.0"></text>
</g>
<g>
<title>java/util/Arrays.binarySearch (1 samples, 0.05%)</title><rect x="286.9" y="963.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="289.9" y="974.0"></text>
</g>
<g>
<title>java/util/Arrays.binarySearch0 (1 samples, 0.05%)</title><rect x="286.9" y="947.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="289.9" y="958.0"></text>
</g>
<g>
<title>java/util/logging/Level.getLocalizedLevelName (3 samples, 0.14%)</title><rect x="287.5" y="1011.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="290.5" y="1022.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.05%)</title><rect x="288.0" y="995.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="291.0" y="1006.0"></text>
</g>
<g>
<title>RelocIterator::initialize(CompiledMethod*, unsigned char*, unsigned char*) (1 samples, 0.05%)</title><rect x="288.0" y="979.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="291.0" y="990.0"></text>
</g>
<g>
<title>java/util/logging/Level.getCachedLocalizedLevelName (1 samples, 0.05%)</title><rect x="288.6" y="995.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="291.6" y="1006.0"></text>
</g>
<g>
<title>java/util/logging/LogRecord.getSourceClassName (73 samples, 3.44%)</title><rect x="289.2" y="1011.0" width="40.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="292.2" y="1022.0">jav..</text>
</g>
<g>
<title>java/util/logging/LogRecord.inferCaller (73 samples, 3.44%)</title><rect x="289.2" y="995.0" width="40.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.2" y="1006.0">jav..</text>
</g>
<g>
<title>java/util/Optional.ifPresent (10 samples, 0.47%)</title><rect x="289.2" y="979.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="292.2" y="990.0"></text>
</g>
<g>
<title>java/util/logging/LogRecord$$Lambda$82/1051376934.accept (10 samples, 0.47%)</title><rect x="289.2" y="963.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="292.2" y="974.0"></text>
</g>
<g>
<title>java/util/logging/LogRecord.lambda$inferCaller$0 (10 samples, 0.47%)</title><rect x="289.2" y="947.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.2" y="958.0"></text>
</g>
<g>
<title>java/lang/StackFrameInfo.getMethodName (10 samples, 0.47%)</title><rect x="289.2" y="931.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="292.2" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleImpl$1.getName (10 samples, 0.47%)</title><rect x="289.2" y="915.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="292.2" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/MemberName.getName (10 samples, 0.47%)</title><rect x="289.2" y="899.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="292.2" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/MemberName.expandFromVM (10 samples, 0.47%)</title><rect x="289.2" y="883.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="292.2" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.expand (10 samples, 0.47%)</title><rect x="289.2" y="867.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="292.2" y="878.0"></text>
</g>
<g>
<title>MHN_expand_Mem (10 samples, 0.47%)</title><rect x="289.2" y="851.0" width="5.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="292.2" y="862.0"></text>
</g>
<g>
<title>MethodHandles::expand_MemberName(Handle, int, Thread*) (10 samples, 0.47%)</title><rect x="289.2" y="835.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="292.2" y="846.0"></text>
</g>
<g>
<title>StringTable::intern(Symbol*, Thread*) (10 samples, 0.47%)</title><rect x="289.2" y="819.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="292.2" y="830.0"></text>
</g>
<g>
<title>StringTable::do_intern(Handle, unsigned short const*, int, unsigned long, Thread*) (6 samples, 0.28%)</title><rect x="289.2" y="803.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="292.2" y="814.0"></text>
</g>
<g>
<title>bool ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)1&gt;, StringTableConfig, (MemoryType)9&gt;::get&lt;StringTableLookupOop, StringTableGet&gt;(Thread*, StringTableLookupOop&amp;, StringTableGet&amp;, bool*) (3 samples, 0.14%)</title><rect x="289.2" y="787.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="292.2" y="798.0"></text>
</g>
<g>
<title>WeakHandle&lt;(WeakHandleType)1&gt;* ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)1&gt;, StringTableConfig, (MemoryType)9&gt;::internal_get&lt;StringTableLookupOop&gt;(Thread*, StringTableLookupOop&amp;, bool*) (3 samples, 0.14%)</title><rect x="289.2" y="771.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="292.2" y="782.0"></text>
</g>
<g>
<title>ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)1&gt;, StringTableConfig, (MemoryType)9&gt;::Node* ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)1&gt;, StringTableConfig, (MemoryType)9&gt;::get_node&lt;StringTableLookupOop&gt;(ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)1&gt;, StringTableConfig, (MemoryType)9&gt;::Bucket const*, StringTableLookupOop&amp;, bool*, unsigned long*) const (2 samples, 0.09%)</title><rect x="289.7" y="755.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="292.7" y="766.0"></text>
</g>
<g>
<title>StringTableLookupOop::equals(WeakHandle&lt;(WeakHandleType)1&gt;*, bool*) (2 samples, 0.09%)</title><rect x="289.7" y="739.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="292.7" y="750.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1187956ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1187956ull&gt;::oop_access_barrier(void*) (1 samples, 0.05%)</title><rect x="290.3" y="723.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="293.3" y="734.0"></text>
</g>
<g>
<title>java_lang_String::create_from_unicode(unsigned short const*, int, Thread*) (3 samples, 0.14%)</title><rect x="290.8" y="787.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="293.8" y="798.0"></text>
</g>
<g>
<title>java_lang_String::basic_create(int, bool, Thread*) (3 samples, 0.14%)</title><rect x="290.8" y="771.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="293.8" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.09%)</title><rect x="290.8" y="755.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="293.8" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.09%)</title><rect x="290.8" y="739.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="293.8" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="291.4" y="723.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="294.4" y="734.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.05%)</title><rect x="291.4" y="707.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="294.4" y="718.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_low_memory_detector() (1 samples, 0.05%)</title><rect x="291.4" y="691.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="294.4" y="702.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="291.9" y="755.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="294.9" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="291.9" y="739.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="294.9" y="750.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="291.9" y="723.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="294.9" y="734.0"></text>
</g>
<g>
<title>StringTable::intern(Handle, unsigned short const*, int, Thread*) (1 samples, 0.05%)</title><rect x="292.5" y="803.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="295.5" y="814.0"></text>
</g>
<g>
<title>StringTable::lookup_shared(unsigned short const*, int, unsigned int) (1 samples, 0.05%)</title><rect x="292.5" y="787.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="295.5" y="798.0"></text>
</g>
<g>
<title>Symbol::as_unicode(int&amp;) const (2 samples, 0.09%)</title><rect x="293.0" y="803.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="296.0" y="814.0"></text>
</g>
<g>
<title>void UTF8::convert_to_unicode&lt;unsigned short&gt;(char const*, unsigned short*, int) (1 samples, 0.05%)</title><rect x="293.6" y="787.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="296.6" y="798.0"></text>
</g>
<g>
<title>java_lang_String::create_from_unicode(unsigned short const*, int, Thread*) (1 samples, 0.05%)</title><rect x="294.2" y="803.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="297.2" y="814.0"></text>
</g>
<g>
<title>java/util/logging/LogRecord$CallerFinder.&lt;clinit&gt; (1 samples, 0.05%)</title><rect x="294.7" y="979.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="297.7" y="990.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.05%)</title><rect x="294.7" y="963.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="297.7" y="974.0"></text>
</g>
<g>
<title>java/security/AccessController.executePrivileged (1 samples, 0.05%)</title><rect x="294.7" y="947.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="297.7" y="958.0"></text>
</g>
<g>
<title>java/util/logging/LogRecord$CallerFinder$$Lambda$80/163760686.run (1 samples, 0.05%)</title><rect x="294.7" y="931.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="297.7" y="942.0"></text>
</g>
<g>
<title>java/util/logging/LogRecord$CallerFinder.lambda$static$0 (1 samples, 0.05%)</title><rect x="294.7" y="915.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="297.7" y="926.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.05%)</title><rect x="294.7" y="899.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="297.7" y="910.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.05%)</title><rect x="294.7" y="883.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="297.7" y="894.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.05%)</title><rect x="294.7" y="867.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="297.7" y="878.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.05%)</title><rect x="294.7" y="851.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="297.7" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.05%)</title><rect x="294.7" y="835.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="297.7" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::call_class_initializer(Thread*) (1 samples, 0.05%)</title><rect x="294.7" y="819.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="297.7" y="830.0"></text>
</g>
<g>
<title>java/util/logging/LogRecord$CallerFinder.get (62 samples, 2.92%)</title><rect x="295.3" y="979.0" width="34.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="298.3" y="990.0">ja..</text>
</g>
<g>
<title>java/lang/StackWalker.walk (62 samples, 2.92%)</title><rect x="295.3" y="963.0" width="34.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="298.3" y="974.0">ja..</text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.walk (59 samples, 2.78%)</title><rect x="295.3" y="947.0" width="32.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="298.3" y="958.0">ja..</text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.beginStackWalk (59 samples, 2.78%)</title><rect x="295.3" y="931.0" width="32.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="298.3" y="942.0">ja..</text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.callStackWalk (58 samples, 2.73%)</title><rect x="295.3" y="915.0" width="32.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="298.3" y="926.0">ja..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.05%)</title><rect x="295.3" y="899.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="298.3" y="910.0"></text>
</g>
<g>
<title>JVM_CallStackWalk (19 samples, 0.90%)</title><rect x="295.8" y="899.0" width="10.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="298.8" y="910.0"></text>
</g>
<g>
<title>StackWalk::walk(Handle, long, int, int, int, objArrayHandle, Thread*) (19 samples, 0.90%)</title><rect x="295.8" y="883.0" width="10.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="298.8" y="894.0"></text>
</g>
<g>
<title>StackWalk::fetchFirstBatch(BaseFrameStream&amp;, Handle, long, int, int, int, objArrayHandle, Thread*) (19 samples, 0.90%)</title><rect x="295.8" y="867.0" width="10.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="298.8" y="878.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.05%)</title><rect x="295.8" y="851.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="298.8" y="862.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.14%)</title><rect x="296.4" y="851.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="299.4" y="862.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.05%)</title><rect x="297.5" y="835.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="300.5" y="846.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle const&amp;, int) (1 samples, 0.05%)</title><rect x="297.5" y="819.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="300.5" y="830.0"></text>
</g>
<g>
<title>StackWalk::fill_in_frames(long, BaseFrameStream&amp;, int, int, objArrayHandle, int&amp;, Thread*) (15 samples, 0.71%)</title><rect x="298.0" y="851.0" width="8.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="301.0" y="862.0"></text>
</g>
<g>
<title>JavaFrameStream::fill_frame(int, objArrayHandle, methodHandle const&amp;, Thread*) (2 samples, 0.09%)</title><rect x="298.0" y="835.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="301.0" y="846.0"></text>
</g>
<g>
<title>G1BarrierSet::AccessBarrier&lt;2670710ull, G1BarrierSet&gt;::oop_load_in_heap_at(oopDesc*, long) (2 samples, 0.09%)</title><rect x="298.0" y="819.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="301.0" y="830.0"></text>
</g>
<g>
<title>RawAccessBarrier&lt;2670710ull&gt;::field_addr(oopDesc*, long) (1 samples, 0.05%)</title><rect x="298.0" y="803.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="301.0" y="814.0"></text>
</g>
<g>
<title>Universe::narrow_oop_base() (1 samples, 0.05%)</title><rect x="298.6" y="803.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="301.6" y="814.0"></text>
</g>
<g>
<title>JavaFrameStream::next() (3 samples, 0.14%)</title><rect x="299.2" y="835.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="302.2" y="846.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.05%)</title><rect x="299.2" y="819.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="302.2" y="830.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.05%)</title><rect x="299.2" y="803.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="302.2" y="814.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.05%)</title><rect x="299.2" y="787.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="302.2" y="798.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.05%)</title><rect x="299.2" y="771.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="302.2" y="782.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.05%)</title><rect x="299.2" y="755.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="302.2" y="766.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (2 samples, 0.09%)</title><rect x="299.7" y="819.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="302.7" y="830.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (2 samples, 0.09%)</title><rect x="299.7" y="803.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="302.7" y="814.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (2 samples, 0.09%)</title><rect x="299.7" y="787.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="302.7" y="798.0"></text>
</g>
<g>
<title>PcDescCache::find_pc_desc(int, bool) (2 samples, 0.09%)</title><rect x="299.7" y="771.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="302.7" y="782.0"></text>
</g>
<g>
<title>java_lang_StackFrameInfo::set_method_and_bci(Handle, methodHandle const&amp;, int, Thread*) (10 samples, 0.47%)</title><rect x="300.8" y="835.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="303.8" y="846.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="301.4" y="819.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="304.4" y="830.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.05%)</title><rect x="301.4" y="803.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="304.4" y="814.0"></text>
</g>
<g>
<title>CallInfo::CallInfo(Method*, Klass*, Thread*) (6 samples, 0.28%)</title><rect x="301.9" y="819.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="304.9" y="830.0"></text>
</g>
<g>
<title>CallInfo::set_resolved_method_name(Thread*) (5 samples, 0.24%)</title><rect x="301.9" y="803.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="304.9" y="814.0"></text>
</g>
<g>
<title>java_lang_invoke_ResolvedMethodName::find_resolved_method(methodHandle const&amp;, Thread*) (5 samples, 0.24%)</title><rect x="301.9" y="787.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="304.9" y="798.0"></text>
</g>
<g>
<title>ResolvedMethodTable::find_method(Method*) (5 samples, 0.24%)</title><rect x="301.9" y="771.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="304.9" y="782.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.05%)</title><rect x="301.9" y="755.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="304.9" y="766.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.05%)</title><rect x="302.5" y="755.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="305.5" y="766.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.05%)</title><rect x="302.5" y="739.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="305.5" y="750.0"></text>
</g>
<g>
<title>ResolvedMethodTable::compute_hash(Method*) (2 samples, 0.09%)</title><rect x="303.1" y="755.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="306.1" y="766.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.05%)</title><rect x="304.2" y="755.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="307.2" y="766.0"></text>
</g>
<g>
<title>Method::can_be_statically_bound() const (1 samples, 0.05%)</title><rect x="304.7" y="803.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="307.7" y="814.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="305.3" y="819.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="308.3" y="830.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.05%)</title><rect x="305.8" y="819.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="308.8" y="830.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.doStackWalk (38 samples, 1.79%)</title><rect x="306.4" y="899.0" width="21.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="309.4" y="910.0">j..</text>
</g>
<g>
<title>java/lang/StackStreamFactory$FrameBuffer.setBatch (3 samples, 0.14%)</title><rect x="306.4" y="883.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="309.4" y="894.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$StackFrameTraverser.consumeFrames (35 samples, 1.65%)</title><rect x="308.1" y="883.0" width="19.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="311.1" y="894.0"></text>
</g>
<g>
<title>java/util/logging/LogRecord$CallerFinder$$Lambda$81/339423802.apply (35 samples, 1.65%)</title><rect x="308.1" y="867.0" width="19.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="311.1" y="878.0"></text>
</g>
<g>
<title>java/util/logging/LogRecord$CallerFinder.lambda$get$1 (35 samples, 1.65%)</title><rect x="308.1" y="851.0" width="19.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="311.1" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (1 samples, 0.05%)</title><rect x="308.1" y="835.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="311.1" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.&lt;init&gt; (1 samples, 0.05%)</title><rect x="308.1" y="819.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="311.1" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$StatelessOp.&lt;init&gt; (1 samples, 0.05%)</title><rect x="308.1" y="803.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="311.1" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (1 samples, 0.05%)</title><rect x="308.1" y="787.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="311.1" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (1 samples, 0.05%)</title><rect x="308.1" y="771.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="311.1" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.findFirst (34 samples, 1.60%)</title><rect x="308.6" y="835.0" width="18.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="311.6" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (34 samples, 1.60%)</title><rect x="308.6" y="819.0" width="18.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="311.6" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.sourceSpliterator (2 samples, 0.09%)</title><rect x="308.6" y="803.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="311.6" y="814.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.combineOpFlags (1 samples, 0.05%)</title><rect x="309.2" y="787.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="312.2" y="798.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.getMask (1 samples, 0.05%)</title><rect x="309.2" y="771.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="312.2" y="782.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (32 samples, 1.51%)</title><rect x="309.7" y="803.0" width="17.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="312.7" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (32 samples, 1.51%)</title><rect x="309.7" y="787.0" width="17.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="312.7" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (32 samples, 1.51%)</title><rect x="309.7" y="771.0" width="17.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="312.7" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (31 samples, 1.46%)</title><rect x="310.3" y="755.0" width="17.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="313.3" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (31 samples, 1.46%)</title><rect x="310.3" y="739.0" width="17.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="313.3" y="750.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$StackFrameTraverser.tryAdvance (29 samples, 1.37%)</title><rect x="311.4" y="723.0" width="16.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="314.4" y="734.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.checkState (1 samples, 0.05%)</title><rect x="311.4" y="707.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="314.4" y="718.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.hasNext (19 samples, 0.90%)</title><rect x="312.0" y="707.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="315.0" y="718.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.peekFrame (19 samples, 0.90%)</title><rect x="312.0" y="691.0" width="10.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="315.0" y="702.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.getNextBatch (16 samples, 0.75%)</title><rect x="312.0" y="675.0" width="8.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="315.0" y="686.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.05%)</title><rect x="312.0" y="659.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="315.0" y="670.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.fetchStackFrames (15 samples, 0.71%)</title><rect x="312.5" y="659.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="315.5" y="670.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.fetchStackFrames (11 samples, 0.52%)</title><rect x="312.5" y="643.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="315.5" y="654.0"></text>
</g>
<g>
<title>JVM_MoreStackWalk (11 samples, 0.52%)</title><rect x="312.5" y="627.0" width="6.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="315.5" y="638.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.05%)</title><rect x="312.5" y="611.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="315.5" y="622.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.05%)</title><rect x="312.5" y="595.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="315.5" y="606.0"></text>
</g>
<g>
<title>StackWalk::fetchNextBatch(Handle, long, long, int, int, objArrayHandle, Thread*) (10 samples, 0.47%)</title><rect x="313.1" y="611.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="316.1" y="622.0"></text>
</g>
<g>
<title>StackWalk::fill_in_frames(long, BaseFrameStream&amp;, int, int, objArrayHandle, int&amp;, Thread*) (10 samples, 0.47%)</title><rect x="313.1" y="595.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="316.1" y="606.0"></text>
</g>
<g>
<title>JavaFrameStream::fill_frame(int, objArrayHandle, methodHandle const&amp;, Thread*) (1 samples, 0.05%)</title><rect x="313.1" y="579.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="316.1" y="590.0"></text>
</g>
<g>
<title>JavaFrameStream::next() (4 samples, 0.19%)</title><rect x="313.6" y="579.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="316.6" y="590.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.09%)</title><rect x="313.6" y="563.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="316.6" y="574.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.05%)</title><rect x="313.6" y="547.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="316.6" y="558.0"></text>
</g>
<g>
<title>frame::sender_for_interpreter_frame(RegisterMap*) const (1 samples, 0.05%)</title><rect x="314.2" y="547.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="317.2" y="558.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.05%)</title><rect x="314.2" y="531.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="317.2" y="542.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.05%)</title><rect x="314.2" y="515.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="317.2" y="526.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (2 samples, 0.09%)</title><rect x="314.7" y="563.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="317.7" y="574.0"></text>
</g>
<g>
<title>Method::validate_bci_from_bcp(unsigned char*) const (1 samples, 0.05%)</title><rect x="314.7" y="547.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="317.7" y="558.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_compiled_frame(int) (1 samples, 0.05%)</title><rect x="315.3" y="547.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="318.3" y="558.0"></text>
</g>
<g>
<title>java_lang_StackFrameInfo::set_method_and_bci(Handle, methodHandle const&amp;, int, Thread*) (5 samples, 0.24%)</title><rect x="315.8" y="579.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="318.8" y="590.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="317.0" y="563.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="320.0" y="574.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="317.0" y="547.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="320.0" y="558.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.05%)</title><rect x="317.0" y="531.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="320.0" y="542.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.05%)</title><rect x="317.0" y="515.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="320.0" y="526.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.05%)</title><rect x="317.0" y="499.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="320.0" y="510.0"></text>
</g>
<g>
<title>CallInfo::CallInfo(Method*, Klass*, Thread*) (2 samples, 0.09%)</title><rect x="317.5" y="563.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="320.5" y="574.0"></text>
</g>
<g>
<title>CallInfo::set_resolved_method_name(Thread*) (2 samples, 0.09%)</title><rect x="317.5" y="547.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="320.5" y="558.0"></text>
</g>
<g>
<title>java_lang_invoke_ResolvedMethodName::find_resolved_method(methodHandle const&amp;, Thread*) (2 samples, 0.09%)</title><rect x="317.5" y="531.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="320.5" y="542.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.05%)</title><rect x="317.5" y="515.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="320.5" y="526.0"></text>
</g>
<g>
<title>ResolvedMethodTable::find_method(Method*) (1 samples, 0.05%)</title><rect x="318.1" y="515.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="321.1" y="526.0"></text>
</g>
<g>
<title>java_lang_invoke_ResolvedMethodName::vmtarget(oopDesc*) (1 samples, 0.05%)</title><rect x="318.1" y="499.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="321.1" y="510.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$FrameBuffer.setBatch (1 samples, 0.05%)</title><rect x="318.6" y="643.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="321.6" y="654.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$StackFrameTraverser$StackFrameBuffer.resize (3 samples, 0.14%)</title><rect x="319.2" y="643.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="322.2" y="654.0"></text>
</g>
<g>
<title>java/lang/StackFrameInfo.&lt;init&gt; (1 samples, 0.05%)</title><rect x="319.7" y="627.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="322.7" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleImpl$1.newMemberName (1 samples, 0.05%)</title><rect x="319.7" y="611.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="322.7" y="622.0"></text>
</g>
<g>
<title>java/lang/System.arraycopy (1 samples, 0.05%)</title><rect x="320.3" y="627.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="323.3" y="638.0"></text>
</g>
<g>
<title>JVM_ArrayCopy (1 samples, 0.05%)</title><rect x="320.3" y="611.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="323.3" y="622.0"></text>
</g>
<g>
<title>bool AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;36225142ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)8, 36225142ull&gt;::oop_access_barrier&lt;HeapWord&gt;(arrayOopDesc*, unsigned long, HeapWord*, arrayOopDesc*, unsigned long, HeapWord*, unsigned long) (1 samples, 0.05%)</title><rect x="320.3" y="595.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="323.3" y="606.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory.isReflectionFrame (3 samples, 0.14%)</title><rect x="320.8" y="675.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="323.8" y="686.0"></text>
</g>
<g>
<title>java/lang/Class.isAssignableFrom (2 samples, 0.09%)</title><rect x="321.4" y="659.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="324.4" y="670.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.05%)</title><rect x="321.4" y="643.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="324.4" y="654.0"></text>
</g>
<g>
<title>jni_IsAssignableFrom (1 samples, 0.05%)</title><rect x="322.0" y="643.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="325.0" y="654.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$StackFrameTraverser.nextStackFrame (3 samples, 0.14%)</title><rect x="322.5" y="707.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="325.5" y="718.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.hasNext (2 samples, 0.09%)</title><rect x="323.1" y="691.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="326.1" y="702.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.peekFrame (2 samples, 0.09%)</title><rect x="323.1" y="675.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="326.1" y="686.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.skipReflectionFrames (1 samples, 0.05%)</title><rect x="323.1" y="659.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="326.1" y="670.0"></text>
</g>
<g>
<title>java/lang/StackWalker.hasOption (1 samples, 0.05%)</title><rect x="323.1" y="643.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="326.1" y="654.0"></text>
</g>
<g>
<title>java/util/RegularEnumSet.contains (1 samples, 0.05%)</title><rect x="323.1" y="627.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="326.1" y="638.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory.isReflectionFrame (1 samples, 0.05%)</title><rect x="323.6" y="659.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="326.6" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (6 samples, 0.28%)</title><rect x="324.2" y="707.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="327.2" y="718.0"></text>
</g>
<g>
<title>java/util/logging/LogRecord$CallerFinder.test (5 samples, 0.24%)</title><rect x="324.2" y="691.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="327.2" y="702.0"></text>
</g>
<g>
<title>java/util/logging/LogRecord$CallerFinder.test (5 samples, 0.24%)</title><rect x="324.2" y="675.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="327.2" y="686.0"></text>
</g>
<g>
<title>java/lang/StackFrameInfo.getClassName (1 samples, 0.05%)</title><rect x="324.2" y="659.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="327.2" y="670.0"></text>
</g>
<g>
<title>java/lang/StackFrameInfo.declaringClass (1 samples, 0.05%)</title><rect x="324.2" y="643.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="327.2" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleImpl$1.getDeclaringClass (1 samples, 0.05%)</title><rect x="324.2" y="627.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="327.2" y="638.0"></text>
</g>
<g>
<title>jdk/internal/logger/SimpleConsoleLogger$Formatting.isFilteredFrame (1 samples, 0.05%)</title><rect x="324.7" y="659.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="327.7" y="670.0"></text>
</g>
<g>
<title>jdk/internal/logger/SurrogateLogger.isFilteredFrame (3 samples, 0.14%)</title><rect x="325.3" y="659.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="328.3" y="670.0"></text>
</g>
<g>
<title>jdk/internal/logger/SimpleConsoleLogger$Formatting.isFilteredFrame (3 samples, 0.14%)</title><rect x="325.3" y="643.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="328.3" y="654.0"></text>
</g>
<g>
<title>java/lang/StackFrameInfo.getDeclaringClass (1 samples, 0.05%)</title><rect x="325.3" y="627.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="328.3" y="638.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (2 samples, 0.09%)</title><rect x="325.9" y="627.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="328.9" y="638.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (2 samples, 0.09%)</title><rect x="325.9" y="611.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="328.9" y="622.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindSink.accept (1 samples, 0.05%)</title><rect x="327.0" y="691.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="330.0" y="702.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$StackFrameTraverser.initFrameBuffer (1 samples, 0.05%)</title><rect x="327.5" y="915.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="330.5" y="926.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.getNextBatchSize (1 samples, 0.05%)</title><rect x="327.5" y="899.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="330.5" y="910.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$StackFrameTraverser.batchSize (1 samples, 0.05%)</title><rect x="327.5" y="883.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="330.5" y="894.0"></text>
</g>
<g>
<title>java/lang/Math.max (1 samples, 0.05%)</title><rect x="327.5" y="867.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="330.5" y="878.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory.makeStackTraverser (3 samples, 0.14%)</title><rect x="328.1" y="947.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="331.1" y="958.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$StackFrameTraverser.&lt;init&gt; (2 samples, 0.09%)</title><rect x="328.6" y="931.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="331.6" y="942.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$StackFrameTraverser.&lt;init&gt; (2 samples, 0.09%)</title><rect x="328.6" y="915.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="331.6" y="926.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.&lt;init&gt; (2 samples, 0.09%)</title><rect x="328.6" y="899.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.6" y="910.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.&lt;init&gt; (2 samples, 0.09%)</title><rect x="328.6" y="883.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="331.6" y="894.0"></text>
</g>
<g>
<title>java/lang/StackStreamFactory$AbstractStackWalker.toStackWalkMode (2 samples, 0.09%)</title><rect x="328.6" y="867.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="331.6" y="878.0"></text>
</g>
<g>
<title>java/lang/StackWalker.hasOption (1 samples, 0.05%)</title><rect x="329.2" y="851.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="332.2" y="862.0"></text>
</g>
<g>
<title>java/util/RegularEnumSet.contains (1 samples, 0.05%)</title><rect x="329.2" y="835.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="332.2" y="846.0"></text>
</g>
<g>
<title>java/util/logging/StreamHandler.isLoggable (2 samples, 0.09%)</title><rect x="329.7" y="1027.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="332.7" y="1038.0"></text>
</g>
<g>
<title>java/util/logging/Handler.isLoggable (2 samples, 0.09%)</title><rect x="329.7" y="1011.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="332.7" y="1022.0"></text>
</g>
<g>
<title>java/util/logging/LogRecord.getLevel (1 samples, 0.05%)</title><rect x="330.3" y="995.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="333.3" y="1006.0"></text>
</g>
<g>
<title>java/util/logging/Logger.getHandlers (2 samples, 0.09%)</title><rect x="330.9" y="1059.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="333.9" y="1070.0"></text>
</g>
<g>
<title>java/util/logging/LogManager$RootLogger.accessCheckedHandlers (2 samples, 0.09%)</title><rect x="330.9" y="1043.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="333.9" y="1054.0"></text>
</g>
<g>
<title>java/util/logging/Logger.accessCheckedHandlers (2 samples, 0.09%)</title><rect x="330.9" y="1027.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="333.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.toArray (2 samples, 0.09%)</title><rect x="330.9" y="1011.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="333.9" y="1022.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.05%)</title><rect x="331.4" y="995.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="334.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.newInstance (1 samples, 0.05%)</title><rect x="331.4" y="979.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="334.4" y="990.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.newArray (1 samples, 0.05%)</title><rect x="331.4" y="963.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="334.4" y="974.0"></text>
</g>
<g>
<title>JVM_NewArray (1 samples, 0.05%)</title><rect x="331.4" y="947.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="334.4" y="958.0"></text>
</g>
<g>
<title>Reflection::reflect_new_array(oopDesc*, int, Thread*) (1 samples, 0.05%)</title><rect x="331.4" y="931.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="334.4" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.05%)</title><rect x="331.4" y="915.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="334.4" y="926.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.05%)</title><rect x="332.0" y="1059.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="335.0" y="1070.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendError (8 samples, 0.38%)</title><rect x="332.5" y="1107.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="335.5" y="1118.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (7 samples, 0.33%)</title><rect x="333.1" y="1091.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="336.1" y="1102.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 0.33%)</title><rect x="333.1" y="1075.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="336.1" y="1086.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 0.33%)</title><rect x="333.1" y="1059.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="336.1" y="1070.0"></text>
</g>
<g>
<title>java/net/SocketException.&lt;init&gt; (6 samples, 0.28%)</title><rect x="333.6" y="1043.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="336.6" y="1054.0"></text>
</g>
<g>
<title>java/io/IOException.&lt;init&gt; (6 samples, 0.28%)</title><rect x="333.6" y="1027.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="336.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (6 samples, 0.28%)</title><rect x="333.6" y="1011.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="336.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (6 samples, 0.28%)</title><rect x="333.6" y="995.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="336.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (6 samples, 0.28%)</title><rect x="333.6" y="979.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="336.6" y="990.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (6 samples, 0.28%)</title><rect x="333.6" y="963.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="336.6" y="974.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (5 samples, 0.24%)</title><rect x="334.2" y="947.0" width="2.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="337.2" y="958.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (5 samples, 0.24%)</title><rect x="334.2" y="931.0" width="2.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="337.2" y="942.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="334.2" y="915.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="337.2" y="926.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.05%)</title><rect x="334.2" y="899.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="337.2" y="910.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.05%)</title><rect x="334.2" y="883.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="337.2" y="894.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="334.2" y="867.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="337.2" y="878.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.05%)</title><rect x="334.2" y="851.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="337.2" y="862.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.05%)</title><rect x="334.2" y="835.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="337.2" y="846.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (4 samples, 0.19%)</title><rect x="334.8" y="915.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="337.8" y="926.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (4 samples, 0.19%)</title><rect x="334.8" y="899.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="337.8" y="910.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (1 samples, 0.05%)</title><rect x="335.9" y="883.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="338.9" y="894.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (1 samples, 0.05%)</title><rect x="335.9" y="867.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="338.9" y="878.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="335.9" y="851.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="338.9" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="335.9" y="835.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="338.9" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="335.9" y="819.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="338.9" y="830.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.05%)</title><rect x="335.9" y="803.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="338.9" y="814.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_low_memory_detector() (1 samples, 0.05%)</title><rect x="335.9" y="787.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="338.9" y="798.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.05%)</title><rect x="336.4" y="883.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="339.4" y="894.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.05%)</title><rect x="336.4" y="867.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="339.4" y="878.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (22 samples, 1.04%)</title><rect x="337.0" y="1107.0" width="12.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="340.0" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (1 samples, 0.05%)</title><rect x="337.5" y="1091.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="340.5" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (1 samples, 0.05%)</title><rect x="337.5" y="1075.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="340.5" y="1086.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (1 samples, 0.05%)</title><rect x="337.5" y="1059.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="340.5" y="1070.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (19 samples, 0.90%)</title><rect x="338.1" y="1091.0" width="10.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="341.1" y="1102.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.05%)</title><rect x="338.1" y="1075.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="341.1" y="1086.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="338.1" y="1059.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="341.1" y="1070.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (18 samples, 0.85%)</title><rect x="338.6" y="1075.0" width="10.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="341.6" y="1086.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (18 samples, 0.85%)</title><rect x="338.6" y="1059.0" width="10.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="341.6" y="1070.0"></text>
</g>
<g>
<title>java/net/SocketException.&lt;init&gt; (18 samples, 0.85%)</title><rect x="338.6" y="1043.0" width="10.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="341.6" y="1054.0"></text>
</g>
<g>
<title>java/io/IOException.&lt;init&gt; (18 samples, 0.85%)</title><rect x="338.6" y="1027.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="341.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (17 samples, 0.80%)</title><rect x="339.2" y="1011.0" width="9.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="342.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (17 samples, 0.80%)</title><rect x="339.2" y="995.0" width="9.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="342.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (16 samples, 0.75%)</title><rect x="339.2" y="979.0" width="8.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="342.2" y="990.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (16 samples, 0.75%)</title><rect x="339.2" y="963.0" width="8.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="342.2" y="974.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (15 samples, 0.71%)</title><rect x="339.8" y="947.0" width="8.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="342.8" y="958.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (15 samples, 0.71%)</title><rect x="339.8" y="931.0" width="8.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="342.8" y="942.0"></text>
</g>
<g>
<title>PreserveExceptionMark::PreserveExceptionMark(Thread*&amp;) (2 samples, 0.09%)</title><rect x="339.8" y="915.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="342.8" y="926.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (13 samples, 0.61%)</title><rect x="340.9" y="915.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="343.9" y="926.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (13 samples, 0.61%)</title><rect x="340.9" y="899.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="343.9" y="910.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (2 samples, 0.09%)</title><rect x="343.6" y="883.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="346.6" y="894.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (2 samples, 0.09%)</title><rect x="343.6" y="867.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="346.6" y="878.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="343.6" y="851.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="346.6" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="343.6" y="835.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="346.6" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="343.6" y="819.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="346.6" y="830.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (1 samples, 0.05%)</title><rect x="343.6" y="803.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="346.6" y="814.0"></text>
</g>
<g>
<title>void ModRefBarrierSet::AccessBarrier&lt;2670710ull, G1BarrierSet&gt;::oop_store_in_heap&lt;unsigned int&gt;(unsigned int*, oopDesc*) (1 samples, 0.05%)</title><rect x="344.2" y="851.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="347.2" y="862.0"></text>
</g>
<g>
<title>BacktraceBuilder::push(Method*, int, Thread*) (2 samples, 0.09%)</title><rect x="344.8" y="883.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="347.8" y="894.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.05%)</title><rect x="345.3" y="867.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="348.3" y="878.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (1 samples, 0.05%)</title><rect x="345.3" y="851.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="348.3" y="862.0"></text>
</g>
<g>
<title>EnableIf&lt;HasDecorator&lt;1097844ull, MO_UNORDERED&gt;::value, oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::load_internal&lt;1097844ull, oopDesc*&gt;(void*) (1 samples, 0.05%)</title><rect x="345.3" y="835.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="348.3" y="846.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (2 samples, 0.09%)</title><rect x="345.9" y="883.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="348.9" y="894.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (1 samples, 0.05%)</title><rect x="346.4" y="867.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="349.4" y="878.0"></text>
</g>
<g>
<title>PcDescCache::find_pc_desc(int, bool) (1 samples, 0.05%)</title><rect x="346.4" y="851.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="349.4" y="862.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.05%)</title><rect x="347.0" y="883.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="350.0" y="894.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.05%)</title><rect x="347.0" y="867.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="350.0" y="878.0"></text>
</g>
<g>
<title>nmethod::metadata_addr_at(int) const (1 samples, 0.05%)</title><rect x="347.5" y="883.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="350.5" y="894.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.05%)</title><rect x="348.1" y="979.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="351.1" y="990.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (1 samples, 0.05%)</title><rect x="348.7" y="1091.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="351.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.incrementAndGet (1 samples, 0.05%)</title><rect x="348.7" y="1075.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="351.7" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$73/393084041.act (27 samples, 1.27%)</title><rect x="349.2" y="1107.0" width="15.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="352.2" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$entity$0 (27 samples, 1.27%)</title><rect x="349.2" y="1091.0" width="15.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="352.2" y="1102.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.doGet (27 samples, 1.27%)</title><rect x="349.2" y="1075.0" width="15.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="352.2" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.05%)</title><rect x="349.8" y="1059.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="352.8" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/lorismelik/RocksDAO.get (25 samples, 1.18%)</title><rect x="350.3" y="1059.0" width="13.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="353.3" y="1070.0"></text>
</g>
<g>
<title>ThreadInVMfromJava::~ThreadInVMfromJava() (1 samples, 0.05%)</title><rect x="350.9" y="1043.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="353.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (5 samples, 0.24%)</title><rect x="351.4" y="1043.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="354.4" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1987083830.invoke (4 samples, 0.19%)</title><rect x="352.0" y="1027.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="355.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.14%)</title><rect x="352.0" y="1011.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="355.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (1 samples, 0.05%)</title><rect x="352.5" y="995.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="355.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (1 samples, 0.05%)</title><rect x="353.1" y="995.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="356.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mix (1 samples, 0.05%)</title><rect x="353.1" y="979.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="356.1" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/257895351.invoke (1 samples, 0.05%)</title><rect x="353.7" y="1011.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="356.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.05%)</title><rect x="353.7" y="995.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="356.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.invokeBasic (1 samples, 0.05%)</title><rect x="353.7" y="979.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="356.7" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (8 samples, 0.38%)</title><rect x="354.2" y="1043.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="357.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (6 samples, 0.28%)</title><rect x="354.8" y="1027.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="357.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.19%)</title><rect x="355.9" y="1011.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="358.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (2 samples, 0.09%)</title><rect x="355.9" y="995.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="358.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.getCoder (1 samples, 0.05%)</title><rect x="355.9" y="979.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="358.9" y="990.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.05%)</title><rect x="356.4" y="979.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="359.4" y="990.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.inflate (1 samples, 0.05%)</title><rect x="356.4" y="963.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="359.4" y="974.0"></text>
</g>
<g>
<title>java/lang/Integer.stringSize (1 samples, 0.05%)</title><rect x="357.0" y="995.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="360.0" y="1006.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="357.5" y="995.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="360.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (1 samples, 0.05%)</title><rect x="358.1" y="1027.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="361.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.isLatin1 (1 samples, 0.05%)</title><rect x="358.1" y="1011.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="361.1" y="1022.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (7 samples, 0.33%)</title><rect x="358.7" y="1043.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="361.7" y="1054.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (7 samples, 0.33%)</title><rect x="358.7" y="1027.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="361.7" y="1038.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (7 samples, 0.33%)</title><rect x="358.7" y="1011.0" width="3.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="361.7" y="1022.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (6 samples, 0.28%)</title><rect x="359.2" y="995.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="362.2" y="1006.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.05%)</title><rect x="359.8" y="979.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="362.8" y="990.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="359.8" y="963.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="362.8" y="974.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.05%)</title><rect x="359.8" y="947.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="362.8" y="958.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.05%)</title><rect x="359.8" y="931.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="362.8" y="942.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="359.8" y="915.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="362.8" y="926.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.05%)</title><rect x="359.8" y="899.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="362.8" y="910.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="359.8" y="883.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="362.8" y="894.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="359.8" y="867.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="362.8" y="878.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.05%)</title><rect x="360.3" y="979.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="363.3" y="990.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="360.3" y="963.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="363.3" y="974.0"></text>
</g>
<g>
<title>mask_bits_are_true(long, long) (1 samples, 0.05%)</title><rect x="360.3" y="947.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="363.3" y="958.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (3 samples, 0.14%)</title><rect x="360.9" y="979.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="363.9" y="990.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (3 samples, 0.14%)</title><rect x="360.9" y="963.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="363.9" y="974.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (3 samples, 0.14%)</title><rect x="360.9" y="947.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="363.9" y="958.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (2 samples, 0.09%)</title><rect x="360.9" y="931.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="363.9" y="942.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.05%)</title><rect x="360.9" y="915.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="363.9" y="926.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.05%)</title><rect x="361.4" y="915.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="364.4" y="926.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.05%)</title><rect x="362.0" y="931.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="365.0" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.shiftBytes (1 samples, 0.05%)</title><rect x="362.6" y="1043.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="365.6" y="1054.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="362.6" y="1027.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="365.6" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/lorismelik/NoSuchElementExceptionLite.&lt;init&gt; (2 samples, 0.09%)</title><rect x="363.1" y="1043.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="366.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (1 samples, 0.05%)</title><rect x="363.1" y="1027.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="366.1" y="1038.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (1 samples, 0.05%)</title><rect x="363.7" y="1027.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="366.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (1 samples, 0.05%)</title><rect x="363.7" y="1011.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="366.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (1 samples, 0.05%)</title><rect x="363.7" y="995.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="366.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (1 samples, 0.05%)</title><rect x="363.7" y="979.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="366.7" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/lorismelik/NoSuchElementExceptionLite.fillInStackTrace (1 samples, 0.05%)</title><rect x="363.7" y="963.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="366.7" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_I (1 samples, 0.05%)</title><rect x="364.2" y="1187.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="367.2" y="1198.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.getAndSet (1 samples, 0.05%)</title><rect x="364.2" y="1171.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="367.2" y="1182.0"></text>
</g>
<g>
<title>one/nio/server/AcceptorThread.run (233 samples, 10.98%)</title><rect x="364.8" y="1187.0" width="129.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="367.8" y="1198.0">one/nio/server/A..</text>
</g>
<g>
<title>one/nio/net/Socket.acceptNonBlocking (221 samples, 10.41%)</title><rect x="366.4" y="1171.0" width="122.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="369.4" y="1182.0">one/nio/net/Soc..</text>
</g>
<g>
<title>one/nio/net/JavaServerSocket.accept (207 samples, 9.75%)</title><rect x="367.0" y="1155.0" width="115.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="370.0" y="1166.0">one/nio/net/Ja..</text>
</g>
<g>
<title>one/nio/net/JavaServerSocket.accept (207 samples, 9.75%)</title><rect x="367.0" y="1139.0" width="115.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="370.0" y="1150.0">one/nio/net/Ja..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.&lt;init&gt; (2 samples, 0.09%)</title><rect x="367.0" y="1123.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="370.0" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/ServerSocketChannelImpl.accept (205 samples, 9.66%)</title><rect x="368.1" y="1123.0" width="114.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="371.1" y="1134.0">sun/nio/ch/Ser..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.configureBlocking (2 samples, 0.09%)</title><rect x="368.7" y="1107.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="371.7" y="1118.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_IOUtil_configureBlocking (2 samples, 0.09%)</title><rect x="368.7" y="1091.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="371.7" y="1102.0"></text>
</g>
<g>
<title>configureBlocking (2 samples, 0.09%)</title><rect x="368.7" y="1075.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="371.7" y="1086.0"></text>
</g>
<g>
<title>__fcntl (2 samples, 0.09%)</title><rect x="368.7" y="1059.0" width="1.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="371.7" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/ServerSocketChannelImpl.accept (181 samples, 8.53%)</title><rect x="369.8" y="1107.0" width="100.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="372.8" y="1118.0">sun/nio/ch/S..</text>
</g>
<g>
<title>sun/nio/ch/ServerSocketChannelImpl.accept0 (181 samples, 8.53%)</title><rect x="369.8" y="1091.0" width="100.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="372.8" y="1102.0">sun/nio/ch/S..</text>
</g>
<g>
<title>Java_sun_nio_ch_ServerSocketChannelImpl_accept0 (21 samples, 0.99%)</title><rect x="369.8" y="1075.0" width="11.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="372.8" y="1086.0"></text>
</g>
<g>
<title>NET_SockaddrToInetAddress (12 samples, 0.57%)</title><rect x="371.5" y="1059.0" width="6.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="374.5" y="1070.0"></text>
</g>
<g>
<title>jni_NewObject (6 samples, 0.28%)</title><rect x="371.5" y="1043.0" width="3.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="374.5" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="372.0" y="1027.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="375.0" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.05%)</title><rect x="372.0" y="1011.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="375.0" y="1022.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="372.0" y="995.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="375.0" y="1006.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.05%)</title><rect x="372.0" y="979.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="375.0" y="990.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="372.0" y="963.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="375.0" y="974.0"></text>
</g>
<g>
<title>alloc_object(_jclass*, Thread*) (1 samples, 0.05%)</title><rect x="372.6" y="1027.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="375.6" y="1038.0"></text>
</g>
<g>
<title>java_lang_Class::as_Klass(oopDesc*) (1 samples, 0.05%)</title><rect x="373.1" y="1027.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="376.1" y="1038.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (2 samples, 0.09%)</title><rect x="373.7" y="1027.0" width="1.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="376.7" y="1038.0"></text>
</g>
<g>
<title>Fingerprinter::Fingerprinter(methodHandle const&amp;) (1 samples, 0.05%)</title><rect x="373.7" y="1011.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="376.7" y="1022.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.05%)</title><rect x="374.2" y="1011.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="377.2" y="1022.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.05%)</title><rect x="374.2" y="995.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="377.2" y="1006.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.05%)</title><rect x="374.2" y="979.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="377.2" y="990.0"></text>
</g>
<g>
<title>setInet6Address_ipaddress (6 samples, 0.28%)</title><rect x="374.8" y="1043.0" width="3.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="377.8" y="1054.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;802934ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 802934ull&gt;::oop_access_barrier(oopDesc*, long) (1 samples, 0.05%)</title><rect x="375.3" y="1027.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="378.3" y="1038.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.05%)</title><rect x="375.9" y="1027.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="378.9" y="1038.0"></text>
</g>
<g>
<title>jni_GetObjectField (2 samples, 0.09%)</title><rect x="376.5" y="1027.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="379.5" y="1038.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.09%)</title><rect x="376.5" y="1011.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="379.5" y="1022.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.05%)</title><rect x="376.5" y="995.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="379.5" y="1006.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.05%)</title><rect x="377.0" y="995.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="380.0" y="1006.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.05%)</title><rect x="377.0" y="979.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="380.0" y="990.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.05%)</title><rect x="377.6" y="1027.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="380.6" y="1038.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="377.6" y="1011.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="380.6" y="1022.0"></text>
</g>
<g>
<title>jni_NewObject (3 samples, 0.14%)</title><rect x="378.1" y="1059.0" width="1.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="381.1" y="1070.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (1 samples, 0.05%)</title><rect x="379.2" y="1043.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="382.2" y="1054.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.05%)</title><rect x="379.2" y="1027.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="382.2" y="1038.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.05%)</title><rect x="379.2" y="1011.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="382.2" y="1022.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.05%)</title><rect x="379.2" y="995.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="382.2" y="1006.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.05%)</title><rect x="379.2" y="979.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="382.2" y="990.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.05%)</title><rect x="379.2" y="963.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="382.2" y="974.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.05%)</title><rect x="379.2" y="947.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="382.2" y="958.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="379.2" y="931.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="382.2" y="942.0"></text>
</g>
<g>
<title>jni_SetIntField (2 samples, 0.09%)</title><rect x="379.8" y="1059.0" width="1.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="382.8" y="1070.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.05%)</title><rect x="380.3" y="1043.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="383.3" y="1054.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.05%)</title><rect x="380.3" y="1027.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="383.3" y="1038.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.05%)</title><rect x="380.3" y="1011.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="383.3" y="1022.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.05%)</title><rect x="380.3" y="995.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="383.3" y="1006.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.05%)</title><rect x="380.3" y="979.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="383.3" y="990.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="380.3" y="963.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="383.3" y="974.0"></text>
</g>
<g>
<title>jni_SetObjectArrayElement (1 samples, 0.05%)</title><rect x="380.9" y="1059.0" width="0.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="383.9" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="380.9" y="1043.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="383.9" y="1054.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.05%)</title><rect x="380.9" y="1027.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="383.9" y="1038.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.05%)</title><rect x="380.9" y="1011.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="383.9" y="1022.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="380.9" y="995.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="383.9" y="1006.0"></text>
</g>
<g>
<title>__accept (159 samples, 7.49%)</title><rect x="381.5" y="1075.0" width="88.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="384.5" y="1086.0">__accept</text>
</g>
<g>
<title>java/net/Inet6Address.&lt;init&gt; (1 samples, 0.05%)</title><rect x="469.9" y="1075.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="472.9" y="1086.0"></text>
</g>
<g>
<title>java/net/Inet6Address$Inet6AddressHolder.&lt;init&gt; (1 samples, 0.05%)</title><rect x="469.9" y="1059.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="472.9" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/ServerSocketChannelImpl.begin (3 samples, 0.14%)</title><rect x="470.4" y="1107.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="473.4" y="1118.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (3 samples, 0.14%)</title><rect x="470.4" y="1091.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="473.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.14%)</title><rect x="470.4" y="1075.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="473.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.14%)</title><rect x="470.4" y="1059.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="473.4" y="1070.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (3 samples, 0.14%)</title><rect x="470.4" y="1043.0" width="1.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="473.4" y="1054.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.05%)</title><rect x="471.0" y="1027.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="474.0" y="1038.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="471.5" y="1027.0" width="0.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="474.5" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.&lt;init&gt; (18 samples, 0.85%)</title><rect x="472.1" y="1107.0" width="10.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="475.1" y="1118.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.&lt;init&gt; (2 samples, 0.09%)</title><rect x="472.7" y="1091.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="475.7" y="1102.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.&lt;init&gt; (1 samples, 0.05%)</title><rect x="473.2" y="1075.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="476.2" y="1086.0"></text>
</g>
<g>
<title>java/nio/channels/SelectableChannel.&lt;init&gt; (1 samples, 0.05%)</title><rect x="473.2" y="1059.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="476.2" y="1070.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.&lt;init&gt; (1 samples, 0.05%)</title><rect x="473.2" y="1043.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="476.2" y="1054.0"></text>
</g>
<g>
<title>SafepointBlob (1 samples, 0.05%)</title><rect x="473.2" y="1027.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="476.2" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/Net.localAddress (15 samples, 0.71%)</title><rect x="473.8" y="1091.0" width="8.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="476.8" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/Net.localInetAddress (11 samples, 0.52%)</title><rect x="473.8" y="1075.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="476.8" y="1086.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_Net_localInetAddress (6 samples, 0.28%)</title><rect x="473.8" y="1059.0" width="3.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="476.8" y="1070.0"></text>
</g>
<g>
<title>NET_SockaddrToInetAddress (6 samples, 0.28%)</title><rect x="473.8" y="1043.0" width="3.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="476.8" y="1054.0"></text>
</g>
<g>
<title>jni_NewObject (3 samples, 0.14%)</title><rect x="473.8" y="1027.0" width="1.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="476.8" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.09%)</title><rect x="473.8" y="1011.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="476.8" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.09%)</title><rect x="473.8" y="995.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="476.8" y="1006.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.09%)</title><rect x="473.8" y="979.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="476.8" y="990.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="473.8" y="963.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="476.8" y="974.0"></text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.05%)</title><rect x="474.3" y="963.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="477.3" y="974.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (1 samples, 0.05%)</title><rect x="474.9" y="1011.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="477.9" y="1022.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::decode&lt;oopDesc*&gt;(AccessInternal::EncodedType&lt;1097844ull, oopDesc*&gt;::type) (1 samples, 0.05%)</title><rect x="474.9" y="995.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="477.9" y="1006.0"></text>
</g>
<g>
<title>setInet6Address_ipaddress (1 samples, 0.05%)</title><rect x="475.4" y="1027.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="478.4" y="1038.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.05%)</title><rect x="475.4" y="1011.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="478.4" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="475.4" y="995.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="478.4" y="1006.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.05%)</title><rect x="475.4" y="979.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="478.4" y="990.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.05%)</title><rect x="475.4" y="963.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="478.4" y="974.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="475.4" y="947.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="478.4" y="958.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.05%)</title><rect x="475.4" y="931.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="478.4" y="942.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="475.4" y="915.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="478.4" y="926.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="475.4" y="899.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="478.4" y="910.0"></text>
</g>
<g>
<title>void volatile* Atomic::PlatformLoad&lt;8ul&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.05%)</title><rect x="475.4" y="883.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="478.4" y="894.0"></text>
</g>
<g>
<title>setInet6Address_scopeid (1 samples, 0.05%)</title><rect x="476.0" y="1027.0" width="0.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="479.0" y="1038.0"></text>
</g>
<g>
<title>jni_SetIntField (1 samples, 0.05%)</title><rect x="476.0" y="1011.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="479.0" y="1022.0"></text>
</g>
<g>
<title>setInetAddress_family (1 samples, 0.05%)</title><rect x="476.6" y="1027.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="479.6" y="1038.0"></text>
</g>
<g>
<title>jni_GetObjectField (1 samples, 0.05%)</title><rect x="476.6" y="1011.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="479.6" y="1022.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (1 samples, 0.05%)</title><rect x="476.6" y="995.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="479.6" y="1006.0"></text>
</g>
<g>
<title>__getsockname (4 samples, 0.19%)</title><rect x="477.1" y="1059.0" width="2.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="480.1" y="1070.0"></text>
</g>
<g>
<title>java/net/Inet6Address.&lt;init&gt; (1 samples, 0.05%)</title><rect x="479.3" y="1059.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="482.3" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/Net.localPort (4 samples, 0.19%)</title><rect x="479.9" y="1075.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="482.9" y="1086.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_Net_localPort (1 samples, 0.05%)</title><rect x="479.9" y="1059.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="482.9" y="1070.0"></text>
</g>
<g>
<title>__getsockname (3 samples, 0.14%)</title><rect x="480.4" y="1059.0" width="1.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="483.4" y="1070.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.setBlocking (13 samples, 0.61%)</title><rect x="482.1" y="1155.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="485.1" y="1166.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.configureBlocking (13 samples, 0.61%)</title><rect x="482.1" y="1139.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="485.1" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.implConfigureBlocking (13 samples, 0.61%)</title><rect x="482.1" y="1123.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="485.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.05%)</title><rect x="482.1" y="1107.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="485.1" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.05%)</title><rect x="482.1" y="1091.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="485.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.05%)</title><rect x="482.1" y="1075.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="485.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.05%)</title><rect x="482.7" y="1107.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="485.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.05%)</title><rect x="482.7" y="1091.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="485.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.05%)</title><rect x="482.7" y="1075.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="485.7" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.configureBlocking (11 samples, 0.52%)</title><rect x="483.2" y="1107.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="486.2" y="1118.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_IOUtil_configureBlocking (11 samples, 0.52%)</title><rect x="483.2" y="1091.0" width="6.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="486.2" y="1102.0"></text>
</g>
<g>
<title>__fcntl (9 samples, 0.42%)</title><rect x="483.2" y="1075.0" width="5.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="486.2" y="1086.0"></text>
</g>
<g>
<title>configureBlocking (2 samples, 0.09%)</title><rect x="488.2" y="1075.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="491.2" y="1086.0"></text>
</g>
<g>
<title>__fcntl (2 samples, 0.09%)</title><rect x="488.2" y="1059.0" width="1.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="491.2" y="1070.0"></text>
</g>
<g>
<title>one/nio/server/Server.register (7 samples, 0.33%)</title><rect x="489.3" y="1171.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="492.3" y="1182.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.register (3 samples, 0.14%)</title><rect x="489.9" y="1155.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="492.9" y="1166.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.enable (3 samples, 0.14%)</title><rect x="489.9" y="1139.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="492.9" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.wakeup (3 samples, 0.14%)</title><rect x="489.9" y="1123.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="492.9" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (3 samples, 0.14%)</title><rect x="489.9" y="1107.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="492.9" y="1118.0"></text>
</g>
<g>
<title>write (3 samples, 0.14%)</title><rect x="489.9" y="1091.0" width="1.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="492.9" y="1102.0"></text>
</g>
<g>
<title>one/nio/server/Server.getSmallestSelector (3 samples, 0.14%)</title><rect x="491.6" y="1155.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="494.6" y="1166.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.size (3 samples, 0.14%)</title><rect x="491.6" y="1139.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="494.6" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.09%)</title><rect x="491.6" y="1123.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="494.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$CollectionView.size (2 samples, 0.09%)</title><rect x="491.6" y="1107.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="494.6" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.size (1 samples, 0.05%)</title><rect x="492.1" y="1091.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="495.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.sumCount (1 samples, 0.05%)</title><rect x="492.1" y="1075.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="495.1" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.keys (1 samples, 0.05%)</title><rect x="492.7" y="1123.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="495.7" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.ensureOpen (1 samples, 0.05%)</title><rect x="492.7" y="1107.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="495.7" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.createSession (2 samples, 0.09%)</title><rect x="493.2" y="1171.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="496.2" y="1182.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.createSession (1 samples, 0.05%)</title><rect x="493.8" y="1155.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="496.8" y="1166.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/StorageSession.&lt;init&gt; (1 samples, 0.05%)</title><rect x="493.8" y="1139.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="496.8" y="1150.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (305 samples, 14.37%)</title><rect x="494.3" y="1187.0" width="169.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="497.3" y="1198.0">one/nio/server/Selecto..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (159 samples, 7.49%)</title><rect x="495.5" y="1171.0" width="88.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="498.5" y="1182.0">one/nio/ne..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.05%)</title><rect x="495.5" y="1155.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="498.5" y="1166.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (14 samples, 0.66%)</title><rect x="496.0" y="1155.0" width="7.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="499.0" y="1166.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.register (9 samples, 0.42%)</title><rect x="496.0" y="1139.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="499.0" y="1150.0"></text>
</g>
<g>
<title>InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*) (1 samples, 0.05%)</title><rect x="496.6" y="1123.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="499.6" y="1134.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.05%)</title><rect x="496.6" y="1107.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="499.6" y="1118.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.05%)</title><rect x="496.6" y="1091.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="499.6" y="1102.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (1 samples, 0.05%)</title><rect x="496.6" y="1075.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="499.6" y="1086.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.05%)</title><rect x="496.6" y="1059.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="499.6" y="1070.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.05%)</title><rect x="496.6" y="1043.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="499.6" y="1054.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.05%)</title><rect x="496.6" y="1027.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="499.6" y="1038.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.05%)</title><rect x="496.6" y="1011.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="499.6" y="1022.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.05%)</title><rect x="496.6" y="995.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="499.6" y="1006.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.05%)</title><rect x="496.6" y="979.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="499.6" y="990.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="496.6" y="963.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="499.6" y="974.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.validOps (1 samples, 0.05%)</title><rect x="497.1" y="1123.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="500.1" y="1134.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.addKey (1 samples, 0.05%)</title><rect x="497.7" y="1123.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="500.7" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.register (5 samples, 0.24%)</title><rect x="498.2" y="1123.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="501.2" y="1134.0"></text>
</g>
<g>
<title>java/nio/channels/SelectionKey.attach (2 samples, 0.09%)</title><rect x="498.8" y="1107.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="501.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.getAndSet (2 samples, 0.09%)</title><rect x="498.8" y="1091.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="501.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.accessCheck (1 samples, 0.05%)</title><rect x="498.8" y="1075.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="501.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/Class.isInstance (1 samples, 0.05%)</title><rect x="498.8" y="1059.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="501.8" y="1070.0"></text>
</g>
<g>
<title>Java_java_lang_Class_isInstance (1 samples, 0.05%)</title><rect x="498.8" y="1043.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="501.8" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getAndSetReference (1 samples, 0.05%)</title><rect x="499.3" y="1075.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="502.3" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getReferenceVolatile (1 samples, 0.05%)</title><rect x="499.3" y="1059.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="502.3" y="1070.0"></text>
</g>
<g>
<title>Unsafe_GetReferenceVolatile(JNIEnv_*, _jobject*, _jobject*, long) (1 samples, 0.05%)</title><rect x="499.3" y="1043.0" width="0.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="502.3" y="1054.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ull, false&gt;(_jobject*) (1 samples, 0.05%)</title><rect x="499.3" y="1027.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="502.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$KeySetView.add (1 samples, 0.05%)</title><rect x="499.9" y="1107.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="502.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.putVal (1 samples, 0.05%)</title><rect x="499.9" y="1091.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="502.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/Object.hashCode (1 samples, 0.05%)</title><rect x="499.9" y="1075.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="502.9" y="1086.0"></text>
</g>
<g>
<title>JVM_IHashCode (1 samples, 0.05%)</title><rect x="499.9" y="1059.0" width="0.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="502.9" y="1070.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (1 samples, 0.05%)</title><rect x="499.9" y="1043.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="502.9" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (1 samples, 0.05%)</title><rect x="500.5" y="1107.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="503.5" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.setEventOps (1 samples, 0.05%)</title><rect x="500.5" y="1091.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="503.5" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.addLast (1 samples, 0.05%)</title><rect x="500.5" y="1075.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="503.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (5 samples, 0.24%)</title><rect x="501.0" y="1139.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="504.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (5 samples, 0.24%)</title><rect x="501.0" y="1123.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="504.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.09%)</title><rect x="501.6" y="1107.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="504.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (2 samples, 0.09%)</title><rect x="501.6" y="1091.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="504.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/Class.cast (2 samples, 0.09%)</title><rect x="501.6" y="1075.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="504.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.09%)</title><rect x="502.7" y="1107.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="505.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.setRelease (2 samples, 0.09%)</title><rect x="502.7" y="1091.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="505.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/Class.cast (1 samples, 0.05%)</title><rect x="502.7" y="1075.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="505.7" y="1086.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.05%)</title><rect x="503.2" y="1075.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="506.2" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (144 samples, 6.79%)</title><rect x="503.8" y="1155.0" width="80.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="506.8" y="1166.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (144 samples, 6.79%)</title><rect x="503.8" y="1139.0" width="80.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="506.8" y="1150.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (144 samples, 6.79%)</title><rect x="503.8" y="1123.0" width="80.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="506.8" y="1134.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (104 samples, 4.90%)</title><rect x="504.4" y="1107.0" width="57.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="507.4" y="1118.0">sun/ni..</text>
</g>
<g>
<title>kevent (100 samples, 4.71%)</title><rect x="506.6" y="1091.0" width="55.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="509.6" y="1102.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.14%)</title><rect x="562.2" y="1107.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="565.2" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.clearInterrupt (3 samples, 0.14%)</title><rect x="562.2" y="1091.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="565.2" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.drain (2 samples, 0.09%)</title><rect x="562.7" y="1075.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="565.7" y="1086.0"></text>
</g>
<g>
<title>read (2 samples, 0.09%)</title><rect x="562.7" y="1059.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="565.7" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (10 samples, 0.47%)</title><rect x="563.9" y="1107.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="566.9" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.putIfAbsent (1 samples, 0.05%)</title><rect x="563.9" y="1091.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="566.9" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.05%)</title><rect x="563.9" y="1075.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="566.9" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.register (7 samples, 0.33%)</title><rect x="564.4" y="1091.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="567.4" y="1102.0"></text>
</g>
<g>
<title>kevent (7 samples, 0.33%)</title><rect x="564.4" y="1075.0" width="3.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="567.4" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.registeredEvents (1 samples, 0.05%)</title><rect x="568.3" y="1091.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="571.3" y="1102.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.05%)</title><rect x="568.3" y="1075.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="571.3" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateInterestOps (1 samples, 0.05%)</title><rect x="568.9" y="1091.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="571.9" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (26 samples, 1.23%)</title><rect x="569.4" y="1107.0" width="14.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="572.4" y="1118.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.deregister (1 samples, 0.05%)</title><rect x="570.0" y="1091.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="573.0" y="1102.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.removeKey (1 samples, 0.05%)</title><rect x="570.0" y="1075.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="573.0" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.05%)</title><rect x="570.5" y="1091.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="573.5" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.05%)</title><rect x="570.5" y="1075.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="573.5" y="1086.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4 samples, 0.19%)</title><rect x="571.1" y="1091.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="574.1" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.05%)</title><rect x="571.1" y="1075.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="574.1" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.05%)</title><rect x="571.1" y="1059.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="574.1" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.05%)</title><rect x="571.1" y="1043.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="574.1" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (3 samples, 0.14%)</title><rect x="571.6" y="1075.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="574.6" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.&lt;init&gt; (1 samples, 0.05%)</title><rect x="572.8" y="1059.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="575.8" y="1070.0"></text>
</g>
<g>
<title>java/util/AbstractSet.&lt;init&gt; (1 samples, 0.05%)</title><rect x="572.8" y="1043.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="575.8" y="1054.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.&lt;init&gt; (1 samples, 0.05%)</title><rect x="572.8" y="1027.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="575.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.05%)</title><rect x="572.8" y="1011.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="575.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$KeySetView.remove (5 samples, 0.24%)</title><rect x="573.3" y="1091.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="576.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.remove (5 samples, 0.24%)</title><rect x="573.3" y="1075.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="576.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.replaceNode (5 samples, 0.24%)</title><rect x="573.3" y="1059.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="576.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.addCount (1 samples, 0.05%)</title><rect x="575.5" y="1043.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="578.5" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.implDereg (5 samples, 0.24%)</title><rect x="576.1" y="1091.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="579.1" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.register (5 samples, 0.24%)</title><rect x="576.1" y="1075.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="579.1" y="1086.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.05%)</title><rect x="576.1" y="1059.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="579.1" y="1070.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.05%)</title><rect x="576.1" y="1043.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="579.1" y="1054.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.05%)</title><rect x="576.1" y="1027.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="579.1" y="1038.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.05%)</title><rect x="576.1" y="1011.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="579.1" y="1022.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.05%)</title><rect x="576.1" y="995.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="579.1" y="1006.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.05%)</title><rect x="576.1" y="979.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="579.1" y="990.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle const&amp;) (1 samples, 0.05%)</title><rect x="576.1" y="963.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="579.1" y="974.0"></text>
</g>
<g>
<title>SharedRuntime::generate_native_wrapper(MacroAssembler*, methodHandle const&amp;, int, BasicType*, VMRegPair*, BasicType) (1 samples, 0.05%)</title><rect x="576.1" y="947.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="579.1" y="958.0"></text>
</g>
<g>
<title>Method::critical_native_function() (1 samples, 0.05%)</title><rect x="576.1" y="931.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="579.1" y="942.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_entry(methodHandle const&amp;) (1 samples, 0.05%)</title><rect x="576.1" y="915.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="579.1" y="926.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_style(methodHandle const&amp;, char*, char const*, int, bool) (1 samples, 0.05%)</title><rect x="576.1" y="899.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="579.1" y="910.0"></text>
</g>
<g>
<title>os::dll_load(char const*, char*, int) (1 samples, 0.05%)</title><rect x="576.1" y="883.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="579.1" y="894.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="576.1" y="867.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="579.1" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="576.1" y="851.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="579.1" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="576.1" y="835.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="579.1" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="576.1" y="819.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="579.1" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="576.1" y="803.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="579.1" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="576.1" y="787.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="579.1" y="798.0"></text>
</g>
<g>
<title>kevent (4 samples, 0.19%)</title><rect x="576.6" y="1059.0" width="2.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="579.6" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.kill (9 samples, 0.42%)</title><rect x="578.9" y="1091.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="581.9" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.close (8 samples, 0.38%)</title><rect x="579.4" y="1075.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="582.4" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.close0 (8 samples, 0.38%)</title><rect x="579.4" y="1059.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="582.4" y="1070.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (8 samples, 0.38%)</title><rect x="579.4" y="1043.0" width="4.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="582.4" y="1054.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (144 samples, 6.79%)</title><rect x="583.9" y="1171.0" width="80.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="586.9" y="1182.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (144 samples, 6.79%)</title><rect x="583.9" y="1155.0" width="80.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="586.9" y="1166.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (132 samples, 6.22%)</title><rect x="583.9" y="1139.0" width="73.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="586.9" y="1150.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (128 samples, 6.03%)</title><rect x="585.5" y="1123.0" width="71.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="588.5" y="1134.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (128 samples, 6.03%)</title><rect x="585.5" y="1107.0" width="71.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="588.5" y="1118.0">one/nio/..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.handleDefault (128 samples, 6.03%)</title><rect x="585.5" y="1091.0" width="71.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="588.5" y="1102.0">ru/mail/..</text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.05%)</title><rect x="585.5" y="1075.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="588.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.05%)</title><rect x="585.5" y="1059.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="588.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.05%)</title><rect x="585.5" y="1043.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="588.5" y="1054.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.05%)</title><rect x="585.5" y="1027.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="588.5" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.entity (127 samples, 5.98%)</title><rect x="586.1" y="1075.0" width="70.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="589.1" y="1086.0">ru/mail/..</text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.05%)</title><rect x="586.7" y="1059.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="589.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.05%)</title><rect x="586.7" y="1043.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="589.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.05%)</title><rect x="586.7" y="1027.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="589.7" y="1038.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.05%)</title><rect x="586.7" y="1011.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="589.7" y="1022.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="586.7" y="995.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="589.7" y="1006.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.14%)</title><rect x="587.2" y="1059.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="590.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.14%)</title><rect x="587.2" y="1043.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="590.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.05%)</title><rect x="587.2" y="1027.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="590.2" y="1038.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.09%)</title><rect x="587.8" y="1027.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="590.8" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.executeAsync (2 samples, 0.09%)</title><rect x="588.9" y="1059.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="591.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.09%)</title><rect x="588.9" y="1043.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="591.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.05%)</title><rect x="589.4" y="1027.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="592.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.getAndIncrement (1 samples, 0.05%)</title><rect x="589.4" y="1011.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="592.4" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getAndAddInt (1 samples, 0.05%)</title><rect x="589.4" y="995.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="592.4" y="1006.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/NodeDescriptor.getNodes (3 samples, 0.14%)</title><rect x="590.0" y="1059.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="593.0" y="1070.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (3 samples, 0.14%)</title><rect x="590.0" y="1043.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="593.0" y="1054.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.09%)</title><rect x="590.5" y="1027.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="593.5" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (1 samples, 0.05%)</title><rect x="590.5" y="1011.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="593.5" y="1022.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.05%)</title><rect x="591.1" y="1011.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="594.1" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.05%)</title><rect x="591.1" y="995.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="594.1" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.05%)</title><rect x="591.1" y="979.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="594.1" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.05%)</title><rect x="591.1" y="963.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="594.1" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/RF.calculateRF (117 samples, 5.51%)</title><rect x="591.7" y="1059.0" width="65.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="594.7" y="1070.0">ru/mail..</text>
</g>
<g>
<title>java/lang/IllegalArgumentException.&lt;init&gt; (13 samples, 0.61%)</title><rect x="591.7" y="1043.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="594.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (12 samples, 0.57%)</title><rect x="592.2" y="1027.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="595.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (12 samples, 0.57%)</title><rect x="592.2" y="1011.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="595.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (12 samples, 0.57%)</title><rect x="592.2" y="995.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="595.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (12 samples, 0.57%)</title><rect x="592.2" y="979.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="595.2" y="990.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (11 samples, 0.52%)</title><rect x="592.8" y="963.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="595.8" y="974.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (11 samples, 0.52%)</title><rect x="592.8" y="947.0" width="6.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="595.8" y="958.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (10 samples, 0.47%)</title><rect x="592.8" y="931.0" width="5.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="595.8" y="942.0"></text>
</g>
<g>
<title>PreserveExceptionMark::~PreserveExceptionMark() (1 samples, 0.05%)</title><rect x="592.8" y="915.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="595.8" y="926.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (9 samples, 0.42%)</title><rect x="593.3" y="915.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="596.3" y="926.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (9 samples, 0.42%)</title><rect x="593.3" y="899.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="596.3" y="910.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (2 samples, 0.09%)</title><rect x="595.0" y="883.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="598.0" y="894.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (2 samples, 0.09%)</title><rect x="595.0" y="867.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="598.0" y="878.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (1 samples, 0.05%)</title><rect x="595.0" y="851.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="598.0" y="862.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="595.6" y="851.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="598.6" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="595.6" y="835.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="598.6" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="595.6" y="819.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="598.6" y="830.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.05%)</title><rect x="595.6" y="803.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="598.6" y="814.0"></text>
</g>
<g>
<title>BacktraceBuilder::push(Method*, int, Thread*) (1 samples, 0.05%)</title><rect x="596.1" y="883.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="599.1" y="894.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.05%)</title><rect x="596.7" y="883.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="599.7" y="894.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.05%)</title><rect x="596.7" y="867.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="599.7" y="878.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.05%)</title><rect x="596.7" y="851.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="599.7" y="862.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.05%)</title><rect x="596.7" y="835.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="599.7" y="846.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.05%)</title><rect x="597.2" y="883.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="600.2" y="894.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.05%)</title><rect x="597.2" y="867.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="600.2" y="878.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.05%)</title><rect x="597.2" y="851.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="600.2" y="862.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.05%)</title><rect x="597.2" y="835.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="600.2" y="846.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.05%)</title><rect x="597.2" y="819.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="600.2" y="830.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.05%)</title><rect x="597.8" y="883.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="600.8" y="894.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.05%)</title><rect x="598.3" y="931.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="601.3" y="942.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendError (83 samples, 3.91%)</title><rect x="598.9" y="1043.0" width="46.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="601.9" y="1054.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (47 samples, 2.21%)</title><rect x="599.4" y="1027.0" width="26.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="602.4" y="1038.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.05%)</title><rect x="599.4" y="1011.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="602.4" y="1022.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.05%)</title><rect x="599.4" y="995.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="602.4" y="1006.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.05%)</title><rect x="599.4" y="979.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="602.4" y="990.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.05%)</title><rect x="599.4" y="963.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="602.4" y="974.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (46 samples, 2.17%)</title><rect x="600.0" y="1011.0" width="25.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="603.0" y="1022.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (46 samples, 2.17%)</title><rect x="600.0" y="995.0" width="25.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="603.0" y="1006.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (45 samples, 2.12%)</title><rect x="600.6" y="979.0" width="25.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="603.6" y="990.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (45 samples, 2.12%)</title><rect x="600.6" y="963.0" width="25.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="603.6" y="974.0">o..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (45 samples, 2.12%)</title><rect x="600.6" y="947.0" width="25.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="603.6" y="958.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (44 samples, 2.07%)</title><rect x="601.1" y="931.0" width="24.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="604.1" y="942.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (44 samples, 2.07%)</title><rect x="601.1" y="915.0" width="24.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="604.1" y="926.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (43 samples, 2.03%)</title><rect x="601.1" y="899.0" width="23.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="604.1" y="910.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (43 samples, 2.03%)</title><rect x="601.1" y="883.0" width="23.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="604.1" y="894.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (43 samples, 2.03%)</title><rect x="601.1" y="867.0" width="23.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="604.1" y="878.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.05%)</title><rect x="601.1" y="851.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="604.1" y="862.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.05%)</title><rect x="601.1" y="835.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="604.1" y="846.0"></text>
</g>
<g>
<title>write (42 samples, 1.98%)</title><rect x="601.7" y="851.0" width="23.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="604.7" y="862.0">w..</text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.05%)</title><rect x="625.0" y="899.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="628.0" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.05%)</title><rect x="625.0" y="883.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="628.0" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.05%)</title><rect x="625.0" y="867.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="628.0" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session.scheduleClose (35 samples, 1.65%)</title><rect x="625.6" y="1027.0" width="19.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="628.6" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/Session.close (35 samples, 1.65%)</title><rect x="625.6" y="1011.0" width="19.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="628.6" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.unregister (4 samples, 0.19%)</title><rect x="626.1" y="995.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="629.1" y="1006.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.disable (4 samples, 0.19%)</title><rect x="626.1" y="979.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="629.1" y="990.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.keyFor (1 samples, 0.05%)</title><rect x="626.1" y="963.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="629.1" y="974.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectionKey.cancel (3 samples, 0.14%)</title><rect x="626.7" y="963.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="629.7" y="974.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.cancel (3 samples, 0.14%)</title><rect x="626.7" y="947.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="629.7" y="958.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.09%)</title><rect x="627.2" y="931.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="630.2" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.09%)</title><rect x="627.2" y="915.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="630.2" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.09%)</title><rect x="627.2" y="899.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="630.2" y="910.0"></text>
</g>
<g>
<title>java/lang/Object.hashCode (2 samples, 0.09%)</title><rect x="627.2" y="883.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="630.2" y="894.0"></text>
</g>
<g>
<title>JVM_IHashCode (2 samples, 0.09%)</title><rect x="627.2" y="867.0" width="1.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="630.2" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="627.8" y="851.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="630.8" y="862.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.05%)</title><rect x="627.8" y="835.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="630.8" y="846.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.05%)</title><rect x="627.8" y="819.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="630.8" y="830.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="627.8" y="803.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="630.8" y="814.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.05%)</title><rect x="627.8" y="787.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="630.8" y="798.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="627.8" y="771.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="630.8" y="782.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.close (30 samples, 1.41%)</title><rect x="628.4" y="995.0" width="16.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="631.4" y="1006.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.05%)</title><rect x="628.9" y="979.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="631.9" y="990.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.05%)</title><rect x="628.9" y="963.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="631.9" y="974.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.05%)</title><rect x="628.9" y="947.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="631.9" y="958.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.05%)</title><rect x="628.9" y="931.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="631.9" y="942.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.05%)</title><rect x="628.9" y="915.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="631.9" y="926.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.05%)</title><rect x="628.9" y="899.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="631.9" y="910.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(Bytecodes::Code, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.05%)</title><rect x="628.9" y="883.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="631.9" y="894.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.05%)</title><rect x="628.9" y="867.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="631.9" y="878.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.05%)</title><rect x="628.9" y="851.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="631.9" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.05%)</title><rect x="628.9" y="835.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="631.9" y="846.0"></text>
</g>
<g>
<title>SignatureStream::SignatureStream(Symbol*, bool) (1 samples, 0.05%)</title><rect x="628.9" y="819.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="631.9" y="830.0"></text>
</g>
<g>
<title>GrowableArray&lt;Symbol*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.05%)</title><rect x="628.9" y="803.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="631.9" y="814.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.close (28 samples, 1.32%)</title><rect x="629.5" y="979.0" width="15.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="632.5" y="990.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.implCloseChannel (27 samples, 1.27%)</title><rect x="630.0" y="963.0" width="15.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="633.0" y="974.0"></text>
</g>
<g>
<title>java/lang/Object.clone (2 samples, 0.09%)</title><rect x="630.6" y="947.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="633.6" y="958.0"></text>
</g>
<g>
<title>JVM_Clone (2 samples, 0.09%)</title><rect x="630.6" y="931.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="633.6" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="631.1" y="915.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="634.1" y="926.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="631.1" y="899.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="634.1" y="910.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.05%)</title><rect x="631.1" y="883.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="634.1" y="894.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_low_memory_detector() (1 samples, 0.05%)</title><rect x="631.1" y="867.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="634.1" y="878.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectionKey.cancel (1 samples, 0.05%)</title><rect x="631.7" y="947.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="634.7" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.implCloseSelectableChannel (23 samples, 1.08%)</title><rect x="632.3" y="947.0" width="12.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="635.3" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/Net.getSocketOption (1 samples, 0.05%)</title><rect x="633.4" y="931.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="636.4" y="942.0"></text>
</g>
<g>
<title>sun/net/ext/ExtendedSocketOptions.isOptionSupported (1 samples, 0.05%)</title><rect x="633.4" y="915.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="636.4" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.05%)</title><rect x="633.4" y="899.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="636.4" y="910.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.05%)</title><rect x="633.4" y="883.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="636.4" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/Net.shutdown (20 samples, 0.94%)</title><rect x="633.9" y="931.0" width="11.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="636.9" y="942.0"></text>
</g>
<g>
<title>shutdown (20 samples, 0.94%)</title><rect x="633.9" y="915.0" width="11.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="636.9" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/RF.of (21 samples, 0.99%)</title><rect x="645.0" y="1043.0" width="11.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="648.0" y="1054.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (3 samples, 0.14%)</title><rect x="645.0" y="1027.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="648.0" y="1038.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (2 samples, 0.09%)</title><rect x="645.0" y="1011.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="648.0" y="1022.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.&lt;init&gt; (1 samples, 0.05%)</title><rect x="645.0" y="995.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="648.0" y="1006.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.&lt;init&gt; (1 samples, 0.05%)</title><rect x="645.0" y="979.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="648.0" y="990.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.05%)</title><rect x="645.6" y="995.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="648.6" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.05%)</title><rect x="645.6" y="979.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="648.6" y="990.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.05%)</title><rect x="645.6" y="963.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="648.6" y="974.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.05%)</title><rect x="645.6" y="947.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="648.6" y="958.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.05%)</title><rect x="645.6" y="931.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="648.6" y="942.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.05%)</title><rect x="645.6" y="915.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="648.6" y="926.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.05%)</title><rect x="645.6" y="899.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="648.6" y="910.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.05%)</title><rect x="645.6" y="883.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="648.6" y="894.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.05%)</title><rect x="645.6" y="867.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="648.6" y="878.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.05%)</title><rect x="645.6" y="851.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="648.6" y="862.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.05%)</title><rect x="645.6" y="835.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="648.6" y="846.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.05%)</title><rect x="645.6" y="819.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="648.6" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.05%)</title><rect x="645.6" y="803.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="648.6" y="814.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.05%)</title><rect x="645.6" y="787.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="648.6" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.05%)</title><rect x="645.6" y="771.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="648.6" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.05%)</title><rect x="645.6" y="755.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="648.6" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.05%)</title><rect x="645.6" y="739.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="648.6" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.05%)</title><rect x="645.6" y="723.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="648.6" y="734.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.05%)</title><rect x="645.6" y="707.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="648.6" y="718.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.05%)</title><rect x="646.2" y="1011.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="649.2" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.05%)</title><rect x="646.2" y="995.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="649.2" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.05%)</title><rect x="646.2" y="979.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="649.2" y="990.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.05%)</title><rect x="646.2" y="963.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="649.2" y="974.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.05%)</title><rect x="646.2" y="947.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="649.2" y="958.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath.getResource (1 samples, 0.05%)</title><rect x="646.2" y="931.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="649.2" y="942.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$JarLoader.getResource (1 samples, 0.05%)</title><rect x="646.2" y="915.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="649.2" y="926.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$JarLoader.checkResource (1 samples, 0.05%)</title><rect x="646.2" y="899.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="649.2" y="910.0"></text>
</g>
<g>
<title>java/net/URL.&lt;init&gt; (1 samples, 0.05%)</title><rect x="646.2" y="883.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="649.2" y="894.0"></text>
</g>
<g>
<title>java/net/URL.&lt;init&gt; (1 samples, 0.05%)</title><rect x="646.2" y="867.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="649.2" y="878.0"></text>
</g>
<g>
<title>sun/net/www/protocol/jar/Handler.parseURL (1 samples, 0.05%)</title><rect x="646.2" y="851.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="649.2" y="862.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splitToList (11 samples, 0.52%)</title><rect x="646.7" y="1027.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="649.7" y="1038.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.hasNext (5 samples, 0.24%)</title><rect x="646.7" y="1011.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="649.7" y="1022.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.tryToComputeNext (4 samples, 0.19%)</title><rect x="647.3" y="995.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="650.3" y="1006.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (4 samples, 0.19%)</title><rect x="647.3" y="979.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="650.3" y="990.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (3 samples, 0.14%)</title><rect x="647.8" y="963.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="650.8" y="974.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.05%)</title><rect x="648.4" y="947.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="651.4" y="958.0"></text>
</g>
<g>
<title>java/lang/String.toString (1 samples, 0.05%)</title><rect x="648.9" y="947.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="651.9" y="958.0"></text>
</g>
<g>
<title>com/google/common/base/Preconditions.checkNotNull (1 samples, 0.05%)</title><rect x="649.5" y="1011.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="652.5" y="1022.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splittingIterator (1 samples, 0.05%)</title><rect x="650.0" y="1011.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="653.0" y="1022.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (1 samples, 0.05%)</title><rect x="650.0" y="995.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="653.0" y="1006.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (1 samples, 0.05%)</title><rect x="650.0" y="979.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="653.0" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (3 samples, 0.14%)</title><rect x="650.6" y="1011.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="653.6" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (3 samples, 0.14%)</title><rect x="650.6" y="995.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="653.6" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (3 samples, 0.14%)</title><rect x="650.6" y="979.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="653.6" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (3 samples, 0.14%)</title><rect x="650.6" y="963.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="653.6" y="974.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.14%)</title><rect x="650.6" y="947.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="653.6" y="958.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (1 samples, 0.05%)</title><rect x="651.2" y="931.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="654.2" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.05%)</title><rect x="651.7" y="931.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="654.7" y="942.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.05%)</title><rect x="652.3" y="1011.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="655.3" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.&lt;init&gt; (1 samples, 0.05%)</title><rect x="652.3" y="995.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="655.3" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.&lt;init&gt; (1 samples, 0.05%)</title><rect x="652.3" y="979.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="655.3" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.&lt;init&gt; (1 samples, 0.05%)</title><rect x="652.3" y="963.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="655.3" y="974.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.05%)</title><rect x="652.8" y="1027.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="655.8" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.05%)</title><rect x="652.8" y="1011.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="655.8" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.05%)</title><rect x="652.8" y="995.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="655.8" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.05%)</title><rect x="652.8" y="979.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="655.8" y="990.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.05%)</title><rect x="652.8" y="963.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="655.8" y="974.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.05%)</title><rect x="652.8" y="947.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="655.8" y="958.0"></text>
</g>
<g>
<title>jdk/internal/loader/Resource.getBytes (1 samples, 0.05%)</title><rect x="652.8" y="931.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="655.8" y="942.0"></text>
</g>
<g>
<title>java/util/zip/InflaterInputStream.read (1 samples, 0.05%)</title><rect x="652.8" y="915.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="655.8" y="926.0"></text>
</g>
<g>
<title>java/util/zip/Inflater.inflate (1 samples, 0.05%)</title><rect x="652.8" y="899.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="655.8" y="910.0"></text>
</g>
<g>
<title>java/util/zip/Inflater.inflateBytesBytes (1 samples, 0.05%)</title><rect x="652.8" y="883.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="655.8" y="894.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.05%)</title><rect x="652.8" y="867.0" width="0.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="655.8" y="878.0"></text>
</g>
<g>
<title>java/lang/String.replace (6 samples, 0.28%)</title><rect x="653.4" y="1027.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="656.4" y="1038.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (2 samples, 0.09%)</title><rect x="653.4" y="1011.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="656.4" y="1022.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.05%)</title><rect x="653.4" y="995.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="656.4" y="1006.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (1 samples, 0.05%)</title><rect x="653.4" y="979.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="656.4" y="990.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.05%)</title><rect x="653.9" y="995.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="656.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.09%)</title><rect x="654.5" y="1011.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="657.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.05%)</title><rect x="654.5" y="995.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="657.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.05%)</title><rect x="654.5" y="979.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="657.5" y="990.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.05%)</title><rect x="655.1" y="995.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="658.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.05%)</title><rect x="655.6" y="1011.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="658.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.05%)</title><rect x="655.6" y="995.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="658.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.05%)</title><rect x="656.2" y="1011.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="659.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.05%)</title><rect x="656.2" y="995.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="659.2" y="1006.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.05%)</title><rect x="656.2" y="979.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="659.2" y="990.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.05%)</title><rect x="656.7" y="1123.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="659.7" y="1134.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.05%)</title><rect x="656.7" y="1107.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="659.7" y="1118.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (12 samples, 0.57%)</title><rect x="657.3" y="1139.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="660.3" y="1150.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (12 samples, 0.57%)</title><rect x="657.3" y="1123.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="660.3" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (12 samples, 0.57%)</title><rect x="657.3" y="1107.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="660.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.05%)</title><rect x="657.3" y="1091.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="660.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.05%)</title><rect x="657.3" y="1075.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="660.3" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (11 samples, 0.52%)</title><rect x="657.8" y="1091.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="660.8" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (11 samples, 0.52%)</title><rect x="657.8" y="1075.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="660.8" y="1086.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.05%)</title><rect x="657.8" y="1059.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="660.8" y="1070.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.05%)</title><rect x="657.8" y="1043.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="660.8" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.05%)</title><rect x="657.8" y="1027.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="660.8" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.05%)</title><rect x="657.8" y="1011.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="660.8" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.05%)</title><rect x="657.8" y="995.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="660.8" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.05%)</title><rect x="657.8" y="979.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="660.8" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (8 samples, 0.38%)</title><rect x="658.4" y="1059.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="661.4" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (8 samples, 0.38%)</title><rect x="658.4" y="1043.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="661.4" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (8 samples, 0.38%)</title><rect x="658.4" y="1027.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="661.4" y="1038.0"></text>
</g>
<g>
<title>read (8 samples, 0.38%)</title><rect x="658.4" y="1011.0" width="4.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="661.4" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.09%)</title><rect x="662.8" y="1059.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="665.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.05%)</title><rect x="663.4" y="1043.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="666.4" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.05%)</title><rect x="663.9" y="1187.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="666.9" y="1198.0"></text>
</g>
<g>
<title>thread_start (945 samples, 44.53%)</title><rect x="664.5" y="1187.0" width="525.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="667.5" y="1198.0">thread_start</text>
</g>
<g>
<title>_pthread_start (945 samples, 44.53%)</title><rect x="664.5" y="1171.0" width="525.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="667.5" y="1182.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (945 samples, 44.53%)</title><rect x="664.5" y="1155.0" width="525.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="667.5" y="1166.0">_pthread_body</text>
</g>
<g>
<title>thread_native_entry(Thread*) (945 samples, 44.53%)</title><rect x="664.5" y="1139.0" width="525.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="667.5" y="1150.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (945 samples, 44.53%)</title><rect x="664.5" y="1123.0" width="525.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="667.5" y="1134.0">Thread::call_run()</text>
</g>
<g>
<title>ConcurrentGCThread::run() (3 samples, 0.14%)</title><rect x="664.5" y="1107.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="667.5" y="1118.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (3 samples, 0.14%)</title><rect x="664.5" y="1091.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="667.5" y="1102.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (3 samples, 0.14%)</title><rect x="664.5" y="1075.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="667.5" y="1086.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.14%)</title><rect x="664.5" y="1059.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="667.5" y="1070.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.14%)</title><rect x="664.5" y="1043.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="667.5" y="1054.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.14%)</title><rect x="664.5" y="1027.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="667.5" y="1038.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.14%)</title><rect x="664.5" y="1011.0" width="1.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="667.5" y="1022.0"></text>
</g>
<g>
<title>GangWorker::loop() (82 samples, 3.86%)</title><rect x="666.2" y="1107.0" width="45.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="669.2" y="1118.0">Gang..</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (21 samples, 0.99%)</title><rect x="666.2" y="1091.0" width="11.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="669.2" y="1102.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (21 samples, 0.99%)</title><rect x="666.2" y="1075.0" width="11.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="669.2" y="1086.0"></text>
</g>
<g>
<title>G1CMBitMap::iterate(G1CMBitMapClosure*, MemRegion) (20 samples, 0.94%)</title><rect x="666.2" y="1059.0" width="11.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="669.2" y="1070.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (18 samples, 0.85%)</title><rect x="666.7" y="1043.0" width="10.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="669.7" y="1054.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) (10 samples, 0.47%)</title><rect x="666.7" y="1027.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="669.7" y="1038.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (9 samples, 0.42%)</title><rect x="667.3" y="1011.0" width="5.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="670.3" y="1022.0"></text>
</g>
<g>
<title>int oopDesc::oop_iterate_size&lt;G1CMOopClosure&gt;(G1CMOopClosure*) (8 samples, 0.38%)</title><rect x="667.8" y="995.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="670.8" y="1006.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (8 samples, 0.38%)</title><rect x="667.8" y="979.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="670.8" y="990.0"></text>
</g>
<g>
<title>void G1CMOopClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (8 samples, 0.38%)</title><rect x="667.8" y="963.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="670.8" y="974.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (8 samples, 0.38%)</title><rect x="667.8" y="947.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="670.8" y="958.0"></text>
</g>
<g>
<title>G1ConcurrentMark::mark_in_next_bitmap(unsigned int, HeapRegion*, oopDesc*) (7 samples, 0.33%)</title><rect x="668.4" y="931.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="671.4" y="942.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (8 samples, 0.38%)</title><rect x="672.3" y="1027.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="675.3" y="1038.0"></text>
</g>
<g>
<title>int oopDesc::oop_iterate_size&lt;G1CMOopClosure&gt;(G1CMOopClosure*) (8 samples, 0.38%)</title><rect x="672.3" y="1011.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="675.3" y="1022.0"></text>
</g>
<g>
<title>void InstanceMirrorKlass::oop_oop_iterate&lt;unsigned int, G1CMOopClosure&gt;(oopDesc*, G1CMOopClosure*) (1 samples, 0.05%)</title><rect x="672.3" y="995.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="675.3" y="1006.0"></text>
</g>
<g>
<title>void G1CMOopClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.05%)</title><rect x="672.3" y="979.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="675.3" y="990.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (1 samples, 0.05%)</title><rect x="672.3" y="963.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="675.3" y="974.0"></text>
</g>
<g>
<title>G1ConcurrentMark::mark_in_next_bitmap(unsigned int, HeapRegion*, oopDesc*) (1 samples, 0.05%)</title><rect x="672.3" y="947.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="675.3" y="958.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (7 samples, 0.33%)</title><rect x="672.8" y="995.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="675.8" y="1006.0"></text>
</g>
<g>
<title>void G1CMOopClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (6 samples, 0.28%)</title><rect x="673.4" y="979.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="676.4" y="990.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (6 samples, 0.28%)</title><rect x="673.4" y="963.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="676.4" y="974.0"></text>
</g>
<g>
<title>G1ConcurrentMark::mark_in_next_bitmap(unsigned int, HeapRegion*, oopDesc*) (4 samples, 0.19%)</title><rect x="674.5" y="947.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="677.5" y="958.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (1 samples, 0.05%)</title><rect x="676.7" y="1043.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="679.7" y="1054.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) (1 samples, 0.05%)</title><rect x="677.3" y="1059.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="680.3" y="1070.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (1 samples, 0.05%)</title><rect x="677.3" y="1043.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="680.3" y="1054.0"></text>
</g>
<g>
<title>int oopDesc::oop_iterate_size&lt;G1CMOopClosure&gt;(G1CMOopClosure*) (1 samples, 0.05%)</title><rect x="677.3" y="1027.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="680.3" y="1038.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.05%)</title><rect x="677.3" y="1011.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="680.3" y="1022.0"></text>
</g>
<g>
<title>void G1CMOopClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.05%)</title><rect x="677.3" y="995.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="680.3" y="1006.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (1 samples, 0.05%)</title><rect x="677.3" y="979.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="680.3" y="990.0"></text>
</g>
<g>
<title>G1ConcurrentMark::mark_in_next_bitmap(unsigned int, HeapRegion*, oopDesc*) (1 samples, 0.05%)</title><rect x="677.3" y="963.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="680.3" y="974.0"></text>
</g>
<g>
<title>G1CMRemarkTask::work(unsigned int) (20 samples, 0.94%)</title><rect x="677.9" y="1091.0" width="11.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="680.9" y="1102.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (20 samples, 0.94%)</title><rect x="677.9" y="1075.0" width="11.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="680.9" y="1086.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) (20 samples, 0.94%)</title><rect x="677.9" y="1059.0" width="11.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="680.9" y="1070.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (15 samples, 0.71%)</title><rect x="680.6" y="1043.0" width="8.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="683.6" y="1054.0"></text>
</g>
<g>
<title>int oopDesc::oop_iterate_size&lt;G1CMOopClosure&gt;(G1CMOopClosure*) (15 samples, 0.71%)</title><rect x="680.6" y="1027.0" width="8.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="683.6" y="1038.0"></text>
</g>
<g>
<title>void G1CMOopClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (3 samples, 0.14%)</title><rect x="681.2" y="1011.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="684.2" y="1022.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (11 samples, 0.52%)</title><rect x="682.9" y="1011.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="685.9" y="1022.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, int, bool) (1 samples, 0.05%)</title><rect x="682.9" y="995.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="685.9" y="1006.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (1 samples, 0.05%)</title><rect x="683.4" y="995.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="686.4" y="1006.0"></text>
</g>
<g>
<title>void G1CMOopClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (9 samples, 0.42%)</title><rect x="684.0" y="995.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="687.0" y="1006.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (9 samples, 0.42%)</title><rect x="684.0" y="979.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="687.0" y="990.0"></text>
</g>
<g>
<title>G1ConcurrentMark::mark_in_next_bitmap(unsigned int, HeapRegion*, oopDesc*) (5 samples, 0.24%)</title><rect x="686.2" y="963.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="689.2" y="974.0"></text>
</g>
<g>
<title>G1RegionMarkStatsCache::add_live_words(unsigned int, unsigned long) (1 samples, 0.05%)</title><rect x="688.4" y="947.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="691.4" y="958.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (1 samples, 0.05%)</title><rect x="689.0" y="1091.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="692.0" y="1102.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::do_serial_work() (1 samples, 0.05%)</title><rect x="689.0" y="1075.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="692.0" y="1086.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.05%)</title><rect x="689.0" y="1059.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="692.0" y="1070.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::G1SerialFreeCollectionSetClosure::do_heap_region(HeapRegion*) (1 samples, 0.05%)</title><rect x="689.0" y="1043.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="692.0" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_region(HeapRegion*, FreeRegionList*, bool, bool, bool) (1 samples, 0.05%)</title><rect x="689.0" y="1027.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="692.0" y="1038.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.05%)</title><rect x="689.0" y="1011.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="692.0" y="1022.0"></text>
</g>
<g>
<title>HeapRegion::report_region_type_change(G1HeapRegionTraceType::Type) (1 samples, 0.05%)</title><rect x="689.0" y="995.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="692.0" y="1006.0"></text>
</g>
<g>
<title>HeapRegionType::get_trace_type() (1 samples, 0.05%)</title><rect x="689.0" y="979.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="692.0" y="990.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (10 samples, 0.47%)</title><rect x="689.5" y="1091.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="692.5" y="1102.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.24%)</title><rect x="689.5" y="1075.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="692.5" y="1086.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.09%)</title><rect x="689.5" y="1059.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="692.5" y="1070.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (2 samples, 0.09%)</title><rect x="689.5" y="1043.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="692.5" y="1054.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.09%)</title><rect x="689.5" y="1027.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="692.5" y="1038.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.09%)</title><rect x="689.5" y="1011.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="692.5" y="1022.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.05%)</title><rect x="690.1" y="995.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="693.1" y="1006.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.05%)</title><rect x="690.1" y="979.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="693.1" y="990.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.14%)</title><rect x="690.6" y="1059.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="693.6" y="1070.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::do_spin_master_work(TerminatorTerminator*) (1 samples, 0.05%)</title><rect x="690.6" y="1043.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="693.6" y="1054.0"></text>
</g>
<g>
<title>xdrrec_ops (1 samples, 0.05%)</title><rect x="690.6" y="1027.0" width="0.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="693.6" y="1038.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.05%)</title><rect x="691.2" y="1043.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="694.2" y="1054.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.05%)</title><rect x="691.8" y="1043.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="694.8" y="1054.0"></text>
</g>
<g>
<title>G1ParScanThreadStateSet::state_for_worker(unsigned int) (1 samples, 0.05%)</title><rect x="692.3" y="1075.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="695.3" y="1086.0"></text>
</g>
<g>
<title>G1ParScanThreadState::G1ParScanThreadState(G1CollectedHeap*, unsigned int, unsigned long, unsigned long) (1 samples, 0.05%)</title><rect x="692.3" y="1059.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="695.3" y="1070.0"></text>
</g>
<g>
<title>AgeTable::AgeTable(bool) (1 samples, 0.05%)</title><rect x="692.3" y="1043.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="695.3" y="1054.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (4 samples, 0.19%)</title><rect x="692.9" y="1075.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="695.9" y="1086.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (4 samples, 0.19%)</title><rect x="692.9" y="1059.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="695.9" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (4 samples, 0.19%)</title><rect x="692.9" y="1043.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="695.9" y="1054.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (4 samples, 0.19%)</title><rect x="692.9" y="1027.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="695.9" y="1038.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_buffer(CardTableEntryClosure*, BufferNode*, bool, unsigned int) (4 samples, 0.19%)</title><rect x="692.9" y="1011.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="695.9" y="1022.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.19%)</title><rect x="692.9" y="995.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="695.9" y="1006.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (1 samples, 0.05%)</title><rect x="692.9" y="979.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="695.9" y="990.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.05%)</title><rect x="692.9" y="963.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="695.9" y="974.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.05%)</title><rect x="692.9" y="947.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="695.9" y="958.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (3 samples, 0.14%)</title><rect x="693.4" y="979.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="696.4" y="990.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (3 samples, 0.14%)</title><rect x="693.4" y="963.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="696.4" y="974.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (2 samples, 0.09%)</title><rect x="693.4" y="947.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="696.4" y="958.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.09%)</title><rect x="693.4" y="931.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="696.4" y="942.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.05%)</title><rect x="694.0" y="915.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="697.0" y="926.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (1 samples, 0.05%)</title><rect x="694.5" y="947.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="697.5" y="958.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (25 samples, 1.18%)</title><rect x="695.1" y="1091.0" width="13.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="698.1" y="1102.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (25 samples, 1.18%)</title><rect x="695.1" y="1075.0" width="13.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="698.1" y="1086.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (25 samples, 1.18%)</title><rect x="695.1" y="1059.0" width="13.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="698.1" y="1070.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::LiveObjIterator::move_if_below_tams() (2 samples, 0.09%)</title><rect x="695.1" y="1043.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="698.1" y="1054.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::rebuild_rem_set_in_region(G1CMBitMap const*, HeapWord*, HeapWord*, HeapRegion*, MemRegion) (23 samples, 1.08%)</title><rect x="696.2" y="1043.0" width="12.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="699.2" y="1054.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (3 samples, 0.14%)</title><rect x="696.8" y="1027.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="699.8" y="1038.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.05%)</title><rect x="696.8" y="1011.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="699.8" y="1022.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.09%)</title><rect x="697.3" y="1011.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="700.3" y="1022.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (2 samples, 0.09%)</title><rect x="697.3" y="995.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="700.3" y="1006.0"></text>
</g>
<g>
<title>G1ContiguousSpace::used_region() const (1 samples, 0.05%)</title><rect x="697.9" y="979.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="700.9" y="990.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::LiveObjIterator::move_if_below_tams() (1 samples, 0.05%)</title><rect x="698.4" y="1027.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="701.4" y="1038.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::scan_for_references(oopDesc*, MemRegion) (16 samples, 0.75%)</title><rect x="699.0" y="1027.0" width="8.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="702.0" y="1038.0"></text>
</g>
<g>
<title>void InstanceRefKlass::oop_oop_iterate&lt;unsigned int, G1RebuildRemSetClosure&gt;(oopDesc*, G1RebuildRemSetClosure*) (1 samples, 0.05%)</title><rect x="703.4" y="1011.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="706.4" y="1022.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.05%)</title><rect x="703.4" y="995.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="706.4" y="1006.0"></text>
</g>
<g>
<title>void ObjArrayKlass::oop_oop_iterate_elements&lt;unsigned int, G1RebuildRemSetClosure&gt;(objArrayOopDesc*, G1RebuildRemSetClosure*) (2 samples, 0.09%)</title><rect x="704.0" y="1011.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="707.0" y="1022.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.09%)</title><rect x="704.0" y="995.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="707.0" y="1006.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (5 samples, 0.24%)</title><rect x="705.1" y="1011.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="708.1" y="1022.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (2 samples, 0.09%)</title><rect x="705.7" y="995.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="708.7" y="1006.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.09%)</title><rect x="706.8" y="995.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="709.8" y="1006.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.05%)</title><rect x="707.9" y="1027.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="710.9" y="1038.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.05%)</title><rect x="708.4" y="1027.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="711.4" y="1038.0"></text>
</g>
<g>
<title>Jfr::weak_oops_do(BoolObjectClosure*, OopClosure*) (1 samples, 0.05%)</title><rect x="709.0" y="1091.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="712.0" y="1102.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.05%)</title><rect x="709.5" y="1091.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="712.5" y="1102.0"></text>
</g>
<g>
<title>InlineCacheBuffer::release_pending_icholders() (1 samples, 0.05%)</title><rect x="709.5" y="1075.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="712.5" y="1086.0"></text>
</g>
<g>
<title>free (1 samples, 0.05%)</title><rect x="709.5" y="1059.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="712.5" y="1070.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.05%)</title><rect x="709.5" y="1043.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="712.5" y="1054.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (2 samples, 0.09%)</title><rect x="710.1" y="1091.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="713.1" y="1102.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (2 samples, 0.09%)</title><rect x="710.1" y="1075.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="713.1" y="1086.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (1 samples, 0.05%)</title><rect x="711.2" y="1091.0" width="0.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="714.2" y="1102.0"></text>
</g>
<g>
<title>JavaThread::run() (828 samples, 39.02%)</title><rect x="711.8" y="1107.0" width="460.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="714.8" y="1118.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (828 samples, 39.02%)</title><rect x="711.8" y="1091.0" width="460.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="714.8" y="1102.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (811 samples, 38.22%)</title><rect x="711.8" y="1075.0" width="451.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="714.8" y="1086.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (790 samples, 37.23%)</title><rect x="711.8" y="1059.0" width="439.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="714.8" y="1070.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (695 samples, 32.75%)</title><rect x="711.8" y="1043.0" width="386.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="714.8" y="1054.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int, Di..</text>
</g>
<g>
<title>Arena::~Arena() (1 samples, 0.05%)</title><rect x="711.8" y="1027.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="714.8" y="1038.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (1 samples, 0.05%)</title><rect x="711.8" y="1011.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="714.8" y="1022.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (694 samples, 32.70%)</title><rect x="712.3" y="1027.0" width="385.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="715.3" y="1038.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int,..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (4 samples, 0.19%)</title><rect x="712.3" y="1011.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="715.3" y="1022.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (4 samples, 0.19%)</title><rect x="712.3" y="995.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="715.3" y="1006.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (4 samples, 0.19%)</title><rect x="712.3" y="979.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="715.3" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (4 samples, 0.19%)</title><rect x="712.3" y="963.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="715.3" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (4 samples, 0.19%)</title><rect x="712.3" y="947.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="715.3" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (3 samples, 0.14%)</title><rect x="712.3" y="931.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="715.3" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::build_loop_tree(ciTypeFlow::Block*) (1 samples, 0.05%)</title><rect x="712.3" y="915.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="715.3" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.09%)</title><rect x="712.9" y="915.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="715.9" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 0.09%)</title><rect x="712.9" y="899.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="715.9" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (2 samples, 0.09%)</title><rect x="712.9" y="883.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="715.9" y="894.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (2 samples, 0.09%)</title><rect x="712.9" y="867.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="715.9" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 0.09%)</title><rect x="712.9" y="851.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="715.9" y="862.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.05%)</title><rect x="712.9" y="835.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="715.9" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(LinkInfo const&amp;) (1 samples, 0.05%)</title><rect x="712.9" y="819.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="715.9" y="830.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="712.9" y="803.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="715.9" y="814.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="713.4" y="835.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="716.4" y="846.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="713.4" y="819.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="716.4" y="830.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="713.4" y="803.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="716.4" y="814.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.05%)</title><rect x="713.4" y="787.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="716.4" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.05%)</title><rect x="713.4" y="771.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="716.4" y="782.0"></text>
</g>
<g>
<title>ciObjArrayKlass::make_impl(ciKlass*) (1 samples, 0.05%)</title><rect x="713.4" y="755.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="716.4" y="766.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="713.4" y="739.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="716.4" y="750.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="713.4" y="723.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="716.4" y="734.0"></text>
</g>
<g>
<title>ciArrayKlass::ciArrayKlass(Klass*) (1 samples, 0.05%)</title><rect x="713.4" y="707.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="716.4" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.05%)</title><rect x="714.0" y="931.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="717.0" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="714.0" y="915.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="717.0" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::StateVector(ciTypeFlow*) (1 samples, 0.05%)</title><rect x="714.0" y="899.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="717.0" y="910.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="714.0" y="883.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="717.0" y="894.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (411 samples, 19.37%)</title><rect x="714.6" y="1011.0" width="228.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="717.6" y="1022.0">Compile::Code_Gen()</text>
</g>
<g>
<title>AbstractAssembler::bind(Label&amp;) (1 samples, 0.05%)</title><rect x="714.6" y="995.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="717.6" y="1006.0"></text>
</g>
<g>
<title>Compile::Output() (17 samples, 0.80%)</title><rect x="715.1" y="995.0" width="9.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="718.1" y="1006.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (11 samples, 0.52%)</title><rect x="715.1" y="979.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="718.1" y="990.0"></text>
</g>
<g>
<title>Dict::Dict(int (*)(void const*, void const*), int (*)(void const*), Arena*, int) (1 samples, 0.05%)</title><rect x="717.3" y="963.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="720.3" y="974.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (2 samples, 0.09%)</title><rect x="717.9" y="963.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="720.9" y="974.0"></text>
</g>
<g>
<title>OopFlow::make(Arena*, int, Compile*) (1 samples, 0.05%)</title><rect x="719.0" y="963.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="722.0" y="974.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.14%)</title><rect x="719.6" y="963.0" width="1.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="722.6" y="974.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (6 samples, 0.28%)</title><rect x="721.2" y="979.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="724.2" y="990.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (6 samples, 0.28%)</title><rect x="721.2" y="963.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="724.2" y="974.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (3 samples, 0.14%)</title><rect x="722.3" y="947.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="725.3" y="958.0"></text>
</g>
<g>
<title>CodeBuffer::~CodeBuffer() (1 samples, 0.05%)</title><rect x="722.3" y="931.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="725.3" y="942.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.05%)</title><rect x="722.3" y="915.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="725.3" y="926.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.05%)</title><rect x="722.9" y="931.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="725.9" y="942.0"></text>
</g>
<g>
<title>subI_rRegNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.05%)</title><rect x="723.4" y="931.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="726.4" y="942.0"></text>
</g>
<g>
<title>jmpConNode::short_branch_version() (1 samples, 0.05%)</title><rect x="724.0" y="947.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="727.0" y="958.0"></text>
</g>
<g>
<title>MachNode::fill_new_machnode(MachNode*) const (1 samples, 0.05%)</title><rect x="724.0" y="931.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="727.0" y="942.0"></text>
</g>
<g>
<title>cmpOpOper::clone() const (1 samples, 0.05%)</title><rect x="724.0" y="915.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="727.0" y="926.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="724.0" y="899.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="727.0" y="910.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (11 samples, 0.52%)</title><rect x="724.6" y="995.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="727.6" y="1006.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.05%)</title><rect x="725.1" y="979.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="728.1" y="990.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.05%)</title><rect x="725.1" y="963.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="728.1" y="974.0"></text>
</g>
<g>
<title>DebugInformationRecorder::serialize_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.05%)</title><rect x="725.1" y="947.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="728.1" y="958.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.05%)</title><rect x="725.1" y="931.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="728.1" y="942.0"></text>
</g>
<g>
<title>DIR_Chunk* GrowableArray&lt;DIR_Chunk*&gt;::insert_sorted&lt;&amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;) (1 samples, 0.05%)</title><rect x="725.1" y="915.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="728.1" y="926.0"></text>
</g>
<g>
<title>GrowableArray&lt;DIR_Chunk*&gt;::insert_before(int, DIR_Chunk* const&amp;) (1 samples, 0.05%)</title><rect x="725.1" y="899.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="728.1" y="910.0"></text>
</g>
<g>
<title>Compile::compute_loop_first_inst_sizes() (1 samples, 0.05%)</title><rect x="725.7" y="979.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="728.7" y="990.0"></text>
</g>
<g>
<title>Block::compute_first_inst_size(unsigned int&amp;, unsigned int, PhaseRegAlloc*) (1 samples, 0.05%)</title><rect x="725.7" y="963.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="728.7" y="974.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.05%)</title><rect x="726.2" y="979.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="729.2" y="990.0"></text>
</g>
<g>
<title>HandlerImpl::emit_exception_handler(CodeBuffer&amp;) (1 samples, 0.05%)</title><rect x="726.8" y="979.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="729.8" y="990.0"></text>
</g>
<g>
<title>Assembler::jmp_literal(unsigned char*, RelocationHolder const&amp;) (1 samples, 0.05%)</title><rect x="726.8" y="963.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="729.8" y="974.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (1 samples, 0.05%)</title><rect x="727.3" y="979.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="730.3" y="990.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.05%)</title><rect x="727.3" y="963.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="730.3" y="974.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.05%)</title><rect x="727.3" y="947.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="730.3" y="958.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.05%)</title><rect x="727.3" y="931.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="730.3" y="942.0"></text>
</g>
<g>
<title>DIR_Chunk* GrowableArray&lt;DIR_Chunk*&gt;::insert_sorted&lt;&amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;) (1 samples, 0.05%)</title><rect x="727.3" y="915.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="730.3" y="926.0"></text>
</g>
<g>
<title>int GrowableArray&lt;DIR_Chunk*&gt;::find_sorted&lt;DIR_Chunk*, &amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;, bool&amp;) (1 samples, 0.05%)</title><rect x="727.3" y="899.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="730.3" y="910.0"></text>
</g>
<g>
<title>DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;) (1 samples, 0.05%)</title><rect x="727.3" y="883.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="730.3" y="894.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_safepoint(JVMState*, int) (2 samples, 0.09%)</title><rect x="727.9" y="979.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="730.9" y="990.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (2 samples, 0.09%)</title><rect x="727.9" y="963.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="730.9" y="974.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.05%)</title><rect x="728.5" y="947.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="731.5" y="958.0"></text>
</g>
<g>
<title>addI_rRegNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.05%)</title><rect x="729.0" y="979.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="732.0" y="990.0"></text>
</g>
<g>
<title>MachOper::reg(PhaseRegAlloc*, Node const*, int) const (1 samples, 0.05%)</title><rect x="729.0" y="963.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="732.0" y="974.0"></text>
</g>
<g>
<title>jmpDirNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.05%)</title><rect x="729.6" y="979.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="732.6" y="990.0"></text>
</g>
<g>
<title>methodOper::method() const (1 samples, 0.05%)</title><rect x="730.1" y="979.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="733.1" y="990.0"></text>
</g>
<g>
<title>Matcher::Matcher() (2 samples, 0.09%)</title><rect x="730.7" y="995.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="733.7" y="1006.0"></text>
</g>
<g>
<title>PhaseTransform::PhaseTransform(Phase::PhaseNumber) (2 samples, 0.09%)</title><rect x="730.7" y="979.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="733.7" y="990.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (2 samples, 0.09%)</title><rect x="730.7" y="963.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="733.7" y="974.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.09%)</title><rect x="730.7" y="947.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="733.7" y="958.0"></text>
</g>
<g>
<title>Matcher::match() (28 samples, 1.32%)</title><rect x="731.8" y="995.0" width="15.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="734.8" y="1006.0"></text>
</g>
<g>
<title>IfFalseNode::Opcode() const (1 samples, 0.05%)</title><rect x="731.8" y="979.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="734.8" y="990.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.09%)</title><rect x="732.3" y="979.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="735.3" y="990.0"></text>
</g>
<g>
<title>Matcher::find_shared_visit(Matcher::MStack&amp;, Node*, unsigned int, bool&amp;, int&amp;) (1 samples, 0.05%)</title><rect x="732.9" y="963.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="735.9" y="974.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (22 samples, 1.04%)</title><rect x="733.5" y="979.0" width="12.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="736.5" y="990.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.05%)</title><rect x="734.6" y="963.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="737.6" y="974.0"></text>
</g>
<g>
<title>CallNode::match(ProjNode const*, Matcher const*) (1 samples, 0.05%)</title><rect x="735.1" y="963.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="738.1" y="974.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (11 samples, 0.52%)</title><rect x="735.7" y="963.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="738.7" y="974.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.05%)</title><rect x="736.8" y="947.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="739.8" y="958.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.05%)</title><rect x="736.8" y="931.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="739.8" y="942.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (7 samples, 0.33%)</title><rect x="737.4" y="947.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="740.4" y="958.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (5 samples, 0.24%)</title><rect x="737.4" y="931.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="740.4" y="942.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.09%)</title><rect x="738.5" y="915.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="741.5" y="926.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.05%)</title><rect x="738.5" y="899.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="741.5" y="910.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int) (1 samples, 0.05%)</title><rect x="738.5" y="883.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="741.5" y="894.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="738.5" y="867.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="741.5" y="878.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int) (1 samples, 0.05%)</title><rect x="739.0" y="899.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="742.0" y="910.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.05%)</title><rect x="739.0" y="883.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="742.0" y="894.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int) (1 samples, 0.05%)</title><rect x="739.6" y="915.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="742.6" y="926.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="739.6" y="899.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="742.6" y="910.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int) (2 samples, 0.09%)</title><rect x="740.1" y="931.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="743.1" y="942.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.05%)</title><rect x="741.2" y="947.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="744.2" y="958.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.05%)</title><rect x="741.2" y="931.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="744.2" y="942.0"></text>
</g>
<g>
<title>ChunkPool::free(Chunk*) (1 samples, 0.05%)</title><rect x="741.2" y="915.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="744.2" y="926.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.05%)</title><rect x="741.2" y="899.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="744.2" y="910.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.05%)</title><rect x="741.2" y="883.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="744.2" y="894.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.05%)</title><rect x="741.2" y="867.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="744.2" y="878.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.05%)</title><rect x="741.8" y="963.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="744.8" y="974.0"></text>
</g>
<g>
<title>Node::clone() const (2 samples, 0.09%)</title><rect x="742.4" y="963.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="745.4" y="974.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.05%)</title><rect x="742.9" y="947.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="745.9" y="958.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.05%)</title><rect x="742.9" y="931.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="745.9" y="942.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (4 samples, 0.19%)</title><rect x="743.5" y="963.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="746.5" y="974.0"></text>
</g>
<g>
<title>Compile::current() (3 samples, 0.14%)</title><rect x="743.5" y="947.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="746.5" y="958.0"></text>
</g>
<g>
<title>ciEnv::compiler_data() (1 samples, 0.05%)</title><rect x="743.5" y="931.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="746.5" y="942.0"></text>
</g>
<g>
<title>ciEnv::current() (2 samples, 0.09%)</title><rect x="744.0" y="931.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="747.0" y="942.0"></text>
</g>
<g>
<title>CompilerThread::current() (2 samples, 0.09%)</title><rect x="744.0" y="915.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="747.0" y="926.0"></text>
</g>
<g>
<title>JavaThread::current() (2 samples, 0.09%)</title><rect x="744.0" y="899.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="747.0" y="910.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.09%)</title><rect x="744.0" y="883.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="747.0" y="894.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.05%)</title><rect x="744.6" y="867.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="747.6" y="878.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.05%)</title><rect x="745.1" y="947.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="748.1" y="958.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.05%)</title><rect x="745.7" y="979.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="748.7" y="990.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="745.7" y="963.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="748.7" y="974.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (2 samples, 0.09%)</title><rect x="746.2" y="979.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="749.2" y="990.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (2 samples, 0.09%)</title><rect x="747.4" y="995.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="750.4" y="1006.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.05%)</title><rect x="747.4" y="979.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="750.4" y="990.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.05%)</title><rect x="747.4" y="963.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="750.4" y="974.0"></text>
</g>
<g>
<title>PhaseBlockLayout::reorder_traces(int) (1 samples, 0.05%)</title><rect x="747.9" y="979.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="750.9" y="990.0"></text>
</g>
<g>
<title>Trace::fixup_blocks(PhaseCFG&amp;) (1 samples, 0.05%)</title><rect x="747.9" y="963.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="750.9" y="974.0"></text>
</g>
<g>
<title>Block::num_fall_throughs() (1 samples, 0.05%)</title><rect x="747.9" y="947.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="750.9" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.05%)</title><rect x="748.5" y="995.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="751.5" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.05%)</title><rect x="748.5" y="979.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="751.5" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (47 samples, 2.21%)</title><rect x="749.0" y="995.0" width="26.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="752.0" y="1006.0">P..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (47 samples, 2.21%)</title><rect x="749.0" y="979.0" width="26.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="752.0" y="990.0">P..</text>
</g>
<g>
<title>Node::pinned() const (2 samples, 0.09%)</title><rect x="749.0" y="963.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="752.0" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.05%)</title><rect x="750.1" y="963.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="753.1" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (13 samples, 0.61%)</title><rect x="750.7" y="963.0" width="7.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="753.7" y="974.0"></text>
</g>
<g>
<title>Block::dom_lca(Block*) (1 samples, 0.05%)</title><rect x="750.7" y="947.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="753.7" y="958.0"></text>
</g>
<g>
<title>MachReturnNode::adr_type() const (1 samples, 0.05%)</title><rect x="751.3" y="947.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="754.3" y="958.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (4 samples, 0.19%)</title><rect x="751.8" y="947.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="754.8" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (2 samples, 0.09%)</title><rect x="754.0" y="947.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="757.0" y="958.0"></text>
</g>
<g>
<title>GrowableArray&lt;unsigned int&gt;::at_grow(int, unsigned int const&amp;) (1 samples, 0.05%)</title><rect x="754.6" y="931.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="757.6" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (3 samples, 0.14%)</title><rect x="755.1" y="947.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="758.1" y="958.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.05%)</title><rect x="755.7" y="931.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="758.7" y="942.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.05%)</title><rect x="755.7" y="915.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="758.7" y="926.0"></text>
</g>
<g>
<title>MachNode::memory_inputs(Node*&amp;, Node*&amp;) const (1 samples, 0.05%)</title><rect x="755.7" y="899.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="758.7" y="910.0"></text>
</g>
<g>
<title>loadLNode::oper_input_base() const (1 samples, 0.05%)</title><rect x="755.7" y="883.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="758.7" y="894.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.05%)</title><rect x="756.3" y="931.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="759.3" y="942.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="756.3" y="915.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="759.3" y="926.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="756.3" y="899.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="759.3" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.05%)</title><rect x="756.8" y="947.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="759.8" y="958.0"></text>
</g>
<g>
<title>loadConINode::out_RegMask() const (1 samples, 0.05%)</title><rect x="757.4" y="947.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="760.4" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (7 samples, 0.33%)</title><rect x="757.9" y="963.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="760.9" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::adjust_register_pressure(Node*, Block*, long*, bool) (2 samples, 0.09%)</title><rect x="758.5" y="947.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="761.5" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.05%)</title><rect x="758.5" y="931.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="761.5" y="942.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.05%)</title><rect x="758.5" y="915.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="761.5" y="926.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.05%)</title><rect x="758.5" y="899.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="761.5" y="910.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.05%)</title><rect x="759.0" y="931.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="762.0" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (2 samples, 0.09%)</title><rect x="759.6" y="947.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="762.6" y="958.0"></text>
</g>
<g>
<title>add_call_kills(MachProjNode*, RegMask&amp;, char const*, bool) (2 samples, 0.09%)</title><rect x="759.6" y="931.0" width="1.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="762.6" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (2 samples, 0.09%)</title><rect x="760.7" y="947.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="763.7" y="958.0"></text>
</g>
<g>
<title>GrowableArray&lt;unsigned int&gt;::at_grow(int, unsigned int const&amp;) (1 samples, 0.05%)</title><rect x="761.3" y="931.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="764.3" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.19%)</title><rect x="761.8" y="963.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="764.8" y="974.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (1 samples, 0.05%)</title><rect x="762.9" y="947.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="765.9" y="958.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.05%)</title><rect x="763.5" y="947.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="766.5" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::mark_ssa() (3 samples, 0.14%)</title><rect x="764.0" y="963.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="767.0" y="974.0"></text>
</g>
<g>
<title>RegMask::is_NotEmpty() const (1 samples, 0.05%)</title><rect x="765.2" y="947.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="768.2" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (7 samples, 0.33%)</title><rect x="765.7" y="963.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="768.7" y="974.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.09%)</title><rect x="765.7" y="947.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="768.7" y="958.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.09%)</title><rect x="765.7" y="931.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="768.7" y="942.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.05%)</title><rect x="766.3" y="915.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="769.3" y="926.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.05%)</title><rect x="766.3" y="899.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="769.3" y="910.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.05%)</title><rect x="766.3" y="883.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="769.3" y="894.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.05%)</title><rect x="766.3" y="867.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="769.3" y="878.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="766.3" y="851.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="769.3" y="862.0"></text>
</g>
<g>
<title>large_malloc (1 samples, 0.05%)</title><rect x="766.3" y="835.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="769.3" y="846.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (3 samples, 0.14%)</title><rect x="766.8" y="947.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="769.8" y="958.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="768.5" y="947.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="771.5" y="958.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="769.0" y="947.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="772.0" y="958.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 0.33%)</title><rect x="769.6" y="963.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="772.6" y="974.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.19%)</title><rect x="770.2" y="947.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="773.2" y="958.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.09%)</title><rect x="770.7" y="931.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="773.7" y="942.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.05%)</title><rect x="771.3" y="915.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="774.3" y="926.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.05%)</title><rect x="771.8" y="931.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="774.8" y="942.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.05%)</title><rect x="771.8" y="915.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="774.8" y="926.0"></text>
</g>
<g>
<title>PhaseLive::freeset(Block*) (2 samples, 0.09%)</title><rect x="772.4" y="947.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="775.4" y="958.0"></text>
</g>
<g>
<title>PhaseLive::add_livein(Block*, IndexSet*) (2 samples, 0.09%)</title><rect x="772.4" y="931.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="775.4" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.09%)</title><rect x="772.4" y="915.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="775.4" y="926.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.09%)</title><rect x="773.5" y="963.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="776.5" y="974.0"></text>
</g>
<g>
<title>Chunk::next_chop() (2 samples, 0.09%)</title><rect x="773.5" y="947.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="776.5" y="958.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (2 samples, 0.09%)</title><rect x="773.5" y="931.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="776.5" y="942.0"></text>
</g>
<g>
<title>madvise (2 samples, 0.09%)</title><rect x="773.5" y="915.0" width="1.1" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="776.5" y="926.0"></text>
</g>
<g>
<title>testL_regNode::out_RegMask() const (1 samples, 0.05%)</title><rect x="774.6" y="963.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="777.6" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::fixup_flow() (1 samples, 0.05%)</title><rect x="775.2" y="995.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="778.2" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.05%)</title><rect x="775.7" y="995.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="778.7" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::move_to_end(Block*, unsigned int) (1 samples, 0.05%)</title><rect x="775.7" y="979.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="778.7" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (300 samples, 14.14%)</title><rect x="776.3" y="995.0" width="166.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="779.3" y="1006.0">PhaseChaitin::Registe..</text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.05%)</title><rect x="776.3" y="979.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="779.3" y="990.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (11 samples, 0.52%)</title><rect x="776.8" y="979.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="779.8" y="990.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="782.4" y="963.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="785.4" y="974.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.05%)</title><rect x="782.4" y="947.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="785.4" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (16 samples, 0.75%)</title><rect x="783.0" y="979.0" width="8.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="786.0" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="784.1" y="963.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="787.1" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (2 samples, 0.09%)</title><rect x="784.6" y="963.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="787.6" y="974.0"></text>
</g>
<g>
<title>LiveRangeMap::find(unsigned int) (1 samples, 0.05%)</title><rect x="785.2" y="947.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="788.2" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (9 samples, 0.42%)</title><rect x="785.7" y="963.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="788.7" y="974.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.09%)</title><rect x="785.7" y="947.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="788.7" y="958.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.05%)</title><rect x="786.3" y="931.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="789.3" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (6 samples, 0.28%)</title><rect x="786.8" y="947.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="789.8" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="790.2" y="947.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="793.2" y="958.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (2 samples, 0.09%)</title><rect x="790.7" y="963.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="793.7" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (13 samples, 0.61%)</title><rect x="791.8" y="979.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="794.8" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (11 samples, 0.52%)</title><rect x="793.0" y="963.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="796.0" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (2 samples, 0.09%)</title><rect x="795.7" y="947.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="798.7" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.14%)</title><rect x="796.9" y="947.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="799.9" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="798.5" y="947.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="801.5" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (32 samples, 1.51%)</title><rect x="799.1" y="979.0" width="17.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="802.1" y="990.0"></text>
</g>
<g>
<title>Block::find_node(Node const*) const (1 samples, 0.05%)</title><rect x="808.5" y="963.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="811.5" y="974.0"></text>
</g>
<g>
<title>JVMState::debug_end() const (1 samples, 0.05%)</title><rect x="809.1" y="963.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="812.1" y="974.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (2 samples, 0.09%)</title><rect x="809.6" y="963.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="812.6" y="974.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.05%)</title><rect x="810.2" y="947.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="813.2" y="958.0"></text>
</g>
<g>
<title>Node::rematerialize() const (2 samples, 0.09%)</title><rect x="810.8" y="963.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="813.8" y="974.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.05%)</title><rect x="811.9" y="963.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="814.9" y="974.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="812.4" y="963.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="815.4" y="974.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.05%)</title><rect x="812.4" y="947.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="815.4" y="958.0"></text>
</g>
<g>
<title>CompilerThread::current() (1 samples, 0.05%)</title><rect x="812.4" y="931.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="815.4" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.05%)</title><rect x="813.0" y="963.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="816.0" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.05%)</title><rect x="813.0" y="947.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="816.0" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (4 samples, 0.19%)</title><rect x="813.5" y="963.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="816.5" y="974.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="814.1" y="947.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="817.1" y="958.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.05%)</title><rect x="814.1" y="931.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="817.1" y="942.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.05%)</title><rect x="814.1" y="915.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="817.1" y="926.0"></text>
</g>
<g>
<title>CompilerThread::current() (1 samples, 0.05%)</title><rect x="814.1" y="899.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="817.1" y="910.0"></text>
</g>
<g>
<title>JavaThread::current() (1 samples, 0.05%)</title><rect x="814.1" y="883.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="817.1" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.05%)</title><rect x="814.6" y="947.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="817.6" y="958.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.05%)</title><rect x="814.6" y="931.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="817.6" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.05%)</title><rect x="815.2" y="947.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="818.2" y="958.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.05%)</title><rect x="815.8" y="963.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="818.8" y="974.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.05%)</title><rect x="816.3" y="963.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="819.3" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (73 samples, 3.44%)</title><rect x="816.9" y="979.0" width="40.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="819.9" y="990.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="820.8" y="963.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="823.8" y="974.0"></text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.05%)</title><rect x="821.3" y="963.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="824.3" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (11 samples, 0.52%)</title><rect x="821.9" y="963.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="824.9" y="974.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.05%)</title><rect x="826.3" y="947.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="829.3" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.05%)</title><rect x="826.9" y="947.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="829.9" y="958.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.05%)</title><rect x="826.9" y="931.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="829.9" y="942.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.05%)</title><rect x="826.9" y="915.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="829.9" y="926.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.05%)</title><rect x="827.4" y="947.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="830.4" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::adjust_high_pressure_index(Block*, unsigned int&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.05%)</title><rect x="828.0" y="963.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="831.0" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::assign_high_score_to_immediate_copies(Block*, Node*, LRG&amp;, unsigned int, unsigned int) (1 samples, 0.05%)</title><rect x="828.5" y="963.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="831.5" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (7 samples, 0.33%)</title><rect x="829.1" y="963.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="832.1" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="829.7" y="947.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="832.7" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="830.2" y="947.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="833.2" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (4 samples, 0.19%)</title><rect x="830.8" y="947.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="833.8" y="958.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (3 samples, 0.14%)</title><rect x="830.8" y="931.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="833.8" y="942.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (3 samples, 0.14%)</title><rect x="830.8" y="915.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="833.8" y="926.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.05%)</title><rect x="832.4" y="931.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="835.4" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (24 samples, 1.13%)</title><rect x="833.0" y="963.0" width="13.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="836.0" y="974.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.09%)</title><rect x="833.6" y="947.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="836.6" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.14%)</title><rect x="834.7" y="947.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="837.7" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (4 samples, 0.19%)</title><rect x="836.3" y="947.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="839.3" y="958.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (14 samples, 0.66%)</title><rect x="838.6" y="947.0" width="7.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="841.6" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::lower_pressure(Block*, unsigned int, LRG&amp;, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.09%)</title><rect x="846.3" y="963.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="849.3" y="974.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (2 samples, 0.09%)</title><rect x="846.3" y="947.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="849.3" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (16 samples, 0.75%)</title><rect x="847.5" y="963.0" width="8.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="850.5" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.09%)</title><rect x="848.6" y="947.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="851.6" y="958.0"></text>
</g>
<g>
<title>RegMask::SUBTRACT(RegMask const&amp;) (1 samples, 0.05%)</title><rect x="849.7" y="947.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="852.7" y="958.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.09%)</title><rect x="850.2" y="947.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="853.2" y="958.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (9 samples, 0.42%)</title><rect x="851.3" y="947.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="854.3" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_node_if_not_used(Block*, unsigned int, Node*, unsigned int, IndexSet*) (1 samples, 0.05%)</title><rect x="856.4" y="963.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="859.4" y="974.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (1 samples, 0.05%)</title><rect x="856.9" y="963.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="859.9" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (6 samples, 0.28%)</title><rect x="857.5" y="979.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="860.5" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.19%)</title><rect x="858.6" y="963.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="861.6" y="974.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.05%)</title><rect x="858.6" y="947.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="861.6" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="859.1" y="947.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="862.1" y="958.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (2 samples, 0.09%)</title><rect x="859.7" y="947.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="862.7" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (2 samples, 0.09%)</title><rect x="860.8" y="979.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="863.8" y="990.0"></text>
</g>
<g>
<title>RegMask::is_NotEmpty() const (1 samples, 0.05%)</title><rect x="861.4" y="963.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="864.4" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (33 samples, 1.56%)</title><rect x="861.9" y="979.0" width="18.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="864.9" y="990.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.05%)</title><rect x="868.6" y="963.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="871.6" y="974.0"></text>
</g>
<g>
<title>rRegLOper::type() const (1 samples, 0.05%)</title><rect x="868.6" y="947.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="871.6" y="958.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.05%)</title><rect x="869.1" y="963.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="872.1" y="974.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.05%)</title><rect x="869.7" y="963.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="872.7" y="974.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (2 samples, 0.09%)</title><rect x="870.3" y="963.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="873.3" y="974.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.09%)</title><rect x="871.4" y="963.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="874.4" y="974.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.05%)</title><rect x="872.5" y="963.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="875.5" y="974.0"></text>
</g>
<g>
<title>RegMask::is_bound(unsigned int) const (3 samples, 0.14%)</title><rect x="873.0" y="963.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="876.0" y="974.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.05%)</title><rect x="873.6" y="947.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="876.6" y="958.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.05%)</title><rect x="874.1" y="947.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="877.1" y="958.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (9 samples, 0.42%)</title><rect x="874.7" y="963.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="877.7" y="974.0"></text>
</g>
<g>
<title>RegMask::Size() const (6 samples, 0.28%)</title><rect x="874.7" y="947.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="877.7" y="958.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (3 samples, 0.14%)</title><rect x="878.0" y="947.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="881.0" y="958.0"></text>
</g>
<g>
<title>addI_rRegNode::cisc_RegMask() const (1 samples, 0.05%)</title><rect x="879.7" y="963.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="882.7" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (4 samples, 0.19%)</title><rect x="880.3" y="979.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="883.3" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (38 samples, 1.79%)</title><rect x="882.5" y="979.0" width="21.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="885.5" y="990.0">P..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (3 samples, 0.14%)</title><rect x="890.3" y="963.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="893.3" y="974.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.09%)</title><rect x="890.3" y="947.0" width="1.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="893.3" y="958.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="891.4" y="947.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="894.4" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (14 samples, 0.66%)</title><rect x="891.9" y="963.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="894.9" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.05%)</title><rect x="899.2" y="947.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="902.2" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.05%)</title><rect x="899.7" y="963.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="902.7" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::yank(Node*, Block*, Node_List*, Node_List*) (1 samples, 0.05%)</title><rect x="899.7" y="947.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="902.7" y="958.0"></text>
</g>
<g>
<title>Block::find_node(Node const*) const (1 samples, 0.05%)</title><rect x="899.7" y="931.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="902.7" y="942.0"></text>
</g>
<g>
<title>RegMask::find_first_elem() const (5 samples, 0.24%)</title><rect x="900.3" y="963.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="903.3" y="974.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (4 samples, 0.19%)</title><rect x="900.8" y="947.0" width="2.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="903.8" y="958.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.05%)</title><rect x="903.1" y="963.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="906.1" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (5 samples, 0.24%)</title><rect x="903.6" y="979.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="906.6" y="990.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.05%)</title><rect x="905.3" y="963.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="908.3" y="974.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.05%)</title><rect x="905.8" y="963.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="908.8" y="974.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (15 samples, 0.71%)</title><rect x="906.4" y="979.0" width="8.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="909.4" y="990.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (3 samples, 0.14%)</title><rect x="906.4" y="963.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="909.4" y="974.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.05%)</title><rect x="907.5" y="947.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="910.5" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.05%)</title><rect x="907.5" y="931.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="910.5" y="942.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.05%)</title><rect x="907.5" y="915.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="910.5" y="926.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (12 samples, 0.57%)</title><rect x="908.1" y="963.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="911.1" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.05%)</title><rect x="908.1" y="947.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="911.1" y="958.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (11 samples, 0.52%)</title><rect x="908.6" y="947.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="911.6" y="958.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.14%)</title><rect x="908.6" y="931.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="911.6" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="908.6" y="915.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="911.6" y="926.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (2 samples, 0.09%)</title><rect x="909.2" y="915.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="912.2" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="910.3" y="931.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="913.3" y="942.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::union_helper(Node*, Node*, unsigned int, unsigned int, Node*, Node*, Node*, Block*, unsigned int) (1 samples, 0.05%)</title><rect x="910.8" y="931.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="913.8" y="942.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.05%)</title><rect x="910.8" y="915.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="913.8" y="926.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (5 samples, 0.24%)</title><rect x="911.4" y="931.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="914.4" y="942.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (3 samples, 0.14%)</title><rect x="912.0" y="915.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="915.0" y="926.0"></text>
</g>
<g>
<title>LRG::compute_degree(LRG&amp;) const (1 samples, 0.05%)</title><rect x="913.6" y="915.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="916.6" y="926.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.05%)</title><rect x="914.2" y="931.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="917.2" y="942.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (7 samples, 0.33%)</title><rect x="914.7" y="979.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="917.7" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (7 samples, 0.33%)</title><rect x="914.7" y="963.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="917.7" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.05%)</title><rect x="916.4" y="947.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="919.4" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.09%)</title><rect x="917.0" y="947.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="920.0" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="918.1" y="947.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="921.1" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (7 samples, 0.33%)</title><rect x="918.6" y="979.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="921.6" y="990.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.05%)</title><rect x="918.6" y="963.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="921.6" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (2 samples, 0.09%)</title><rect x="919.2" y="963.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="922.2" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.19%)</title><rect x="920.3" y="963.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="923.3" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (7 samples, 0.33%)</title><rect x="922.5" y="979.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="925.5" y="990.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (3 samples, 0.14%)</title><rect x="923.6" y="963.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="926.6" y="974.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="924.8" y="947.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="927.8" y="958.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.09%)</title><rect x="925.3" y="963.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="928.3" y="974.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (27 samples, 1.27%)</title><rect x="926.4" y="979.0" width="15.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="929.4" y="990.0"></text>
</g>
<g>
<title>IndexSet::clear() (2 samples, 0.09%)</title><rect x="933.1" y="963.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="936.1" y="974.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.05%)</title><rect x="934.2" y="963.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="937.2" y="974.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.05%)</title><rect x="934.8" y="963.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="937.8" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="935.3" y="963.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="938.3" y="974.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (9 samples, 0.42%)</title><rect x="935.9" y="963.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="938.9" y="974.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (6 samples, 0.28%)</title><rect x="937.0" y="947.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="940.0" y="958.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.05%)</title><rect x="939.8" y="931.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="942.8" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="940.3" y="947.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="943.3" y="958.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.05%)</title><rect x="940.9" y="963.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="943.9" y="974.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.05%)</title><rect x="940.9" y="947.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="943.9" y="958.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.05%)</title><rect x="940.9" y="931.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="943.9" y="942.0"></text>
</g>
<g>
<title>madvise (1 samples, 0.05%)</title><rect x="940.9" y="915.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="943.9" y="926.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.05%)</title><rect x="941.4" y="979.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="944.4" y="990.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.05%)</title><rect x="941.4" y="963.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="944.4" y="974.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.05%)</title><rect x="941.4" y="947.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="944.4" y="958.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.05%)</title><rect x="941.4" y="931.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="944.4" y="942.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (1 samples, 0.05%)</title><rect x="941.4" y="915.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="944.4" y="926.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (1 samples, 0.05%)</title><rect x="941.4" y="899.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="944.4" y="910.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.05%)</title><rect x="942.0" y="979.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="945.0" y="990.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.05%)</title><rect x="942.5" y="979.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="945.5" y="990.0"></text>
</g>
<g>
<title>Compile::Optimize() (214 samples, 10.08%)</title><rect x="943.1" y="1011.0" width="119.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="946.1" y="1022.0">Compile::Optimi..</text>
</g>
<g>
<title>AddPNode::Value(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="943.1" y="995.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="946.1" y="1006.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.09%)</title><rect x="943.7" y="995.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="946.7" y="1006.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.09%)</title><rect x="943.7" y="979.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="946.7" y="990.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.05%)</title><rect x="944.2" y="963.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="947.2" y="974.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.05%)</title><rect x="944.2" y="947.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="947.2" y="958.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (109 samples, 5.14%)</title><rect x="944.8" y="995.0" width="60.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="947.8" y="1006.0">Compil..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (109 samples, 5.14%)</title><rect x="944.8" y="979.0" width="60.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="947.8" y="990.0">PhaseI..</text>
</g>
<g>
<title>Compile::cleanup_loop_predicates(PhaseIterGVN&amp;) (1 samples, 0.05%)</title><rect x="944.8" y="963.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="947.8" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.05%)</title><rect x="944.8" y="947.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="947.8" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.05%)</title><rect x="944.8" y="931.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="947.8" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.05%)</title><rect x="944.8" y="915.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="947.8" y="926.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.05%)</title><rect x="944.8" y="899.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="947.8" y="910.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="944.8" y="883.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="947.8" y="894.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.05%)</title><rect x="944.8" y="867.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="947.8" y="878.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (5 samples, 0.24%)</title><rect x="945.3" y="963.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="948.3" y="974.0"></text>
</g>
<g>
<title>CmpUNode::Opcode() const (1 samples, 0.05%)</title><rect x="945.3" y="947.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="948.3" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (4 samples, 0.19%)</title><rect x="945.9" y="947.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="948.9" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (4 samples, 0.19%)</title><rect x="945.9" y="931.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="948.9" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (4 samples, 0.19%)</title><rect x="945.9" y="915.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="948.9" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (4 samples, 0.19%)</title><rect x="945.9" y="899.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="948.9" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::adjust_loop_exit_prob(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="945.9" y="883.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="948.9" y="894.0"></text>
</g>
<g>
<title>Node::req() const (1 samples, 0.05%)</title><rect x="945.9" y="867.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="948.9" y="878.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.14%)</title><rect x="946.4" y="883.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="949.4" y="894.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.09%)</title><rect x="946.4" y="867.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="949.4" y="878.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.09%)</title><rect x="946.4" y="851.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="949.4" y="862.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.09%)</title><rect x="946.4" y="835.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="949.4" y="846.0"></text>
</g>
<g>
<title>CountedLoopNode::Opcode() const (1 samples, 0.05%)</title><rect x="946.4" y="819.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="949.4" y="830.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="947.0" y="819.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="950.0" y="830.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="947.0" y="803.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="950.0" y="814.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="947.0" y="787.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="950.0" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.05%)</title><rect x="947.0" y="771.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="950.0" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_post_loop(IdealLoopTree*, Node_List&amp;, CountedLoopNode*, CountedLoopEndNode*, Node*, Node*, CountedLoopNode*&amp;) (1 samples, 0.05%)</title><rect x="947.0" y="755.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="950.0" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (1 samples, 0.05%)</title><rect x="947.0" y="739.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="950.0" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop_handle_data_uses(Node*, Node_List&amp;, IdealLoopTree*, IdealLoopTree*, Node_List*&amp;, Node_List*&amp;, Node_List*&amp;, Node_List&amp;, unsigned int, PhaseIdealLoop::CloneLoopMode) (1 samples, 0.05%)</title><rect x="947.0" y="723.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="950.0" y="734.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="947.5" y="867.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="950.5" y="878.0"></text>
</g>
<g>
<title>IdealLoopTree::policy_unroll(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="947.5" y="851.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="950.5" y="862.0"></text>
</g>
<g>
<title>IdealLoopTree::policy_unroll_slp_analysis(CountedLoopNode*, PhaseIdealLoop*, int) (1 samples, 0.05%)</title><rect x="947.5" y="835.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="950.5" y="846.0"></text>
</g>
<g>
<title>SuperWord::~SuperWord() (1 samples, 0.05%)</title><rect x="947.5" y="819.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="950.5" y="830.0"></text>
</g>
<g>
<title>SuperWord::~SuperWord() (1 samples, 0.05%)</title><rect x="947.5" y="803.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="950.5" y="814.0"></text>
</g>
<g>
<title>DepGraph::~DepGraph() (1 samples, 0.05%)</title><rect x="947.5" y="787.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="950.5" y="798.0"></text>
</g>
<g>
<title>DepGraph::~DepGraph() (1 samples, 0.05%)</title><rect x="947.5" y="771.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="950.5" y="782.0"></text>
</g>
<g>
<title>GrowableArray&lt;DepMem*&gt;::~GrowableArray() (1 samples, 0.05%)</title><rect x="947.5" y="755.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="950.5" y="766.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (4 samples, 0.19%)</title><rect x="948.1" y="963.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="951.1" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (3 samples, 0.14%)</title><rect x="948.1" y="947.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="951.1" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.09%)</title><rect x="948.1" y="931.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="951.1" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.09%)</title><rect x="948.1" y="915.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="951.1" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.09%)</title><rect x="948.1" y="899.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="951.1" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.09%)</title><rect x="948.1" y="883.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="951.1" y="894.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.09%)</title><rect x="948.1" y="867.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="951.1" y="878.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.09%)</title><rect x="948.1" y="851.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="951.1" y="862.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.09%)</title><rect x="948.1" y="835.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="951.1" y="846.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="948.1" y="819.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="951.1" y="830.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="948.1" y="803.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="951.1" y="814.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="948.1" y="787.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="951.1" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.05%)</title><rect x="948.1" y="771.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="951.1" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.05%)</title><rect x="948.1" y="755.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="951.1" y="766.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.05%)</title><rect x="948.1" y="739.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="951.1" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.05%)</title><rect x="948.7" y="819.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="951.7" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.05%)</title><rect x="948.7" y="803.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="951.7" y="814.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.05%)</title><rect x="948.7" y="787.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="951.7" y="798.0"></text>
</g>
<g>
<title>GrowableArray&lt;float&gt;::at_grow(int, float const&amp;) (1 samples, 0.05%)</title><rect x="948.7" y="771.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="951.7" y="782.0"></text>
</g>
<g>
<title>GrowableArray&lt;float&gt;::grow(int) (1 samples, 0.05%)</title><rect x="948.7" y="755.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="951.7" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.05%)</title><rect x="949.2" y="931.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="952.2" y="942.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.05%)</title><rect x="949.2" y="915.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="952.2" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.05%)</title><rect x="949.2" y="899.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="952.2" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.05%)</title><rect x="949.8" y="947.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="952.8" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.05%)</title><rect x="949.8" y="931.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="952.8" y="942.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_proj(Deoptimization::DeoptReason) (1 samples, 0.05%)</title><rect x="949.8" y="915.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="952.8" y="926.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.05%)</title><rect x="949.8" y="899.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="952.8" y="910.0"></text>
</g>
<g>
<title>_platform_strcmp (1 samples, 0.05%)</title><rect x="949.8" y="883.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="952.8" y="894.0"></text>
</g>
<g>
<title>IdealLoopTree::policy_range_check(PhaseIdealLoop*) const (1 samples, 0.05%)</title><rect x="950.3" y="963.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="953.3" y="974.0"></text>
</g>
<g>
<title>CountedLoopNode::phi() const (1 samples, 0.05%)</title><rect x="950.3" y="947.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="953.3" y="958.0"></text>
</g>
<g>
<title>CountedLoopEndNode::phi() const (1 samples, 0.05%)</title><rect x="950.3" y="931.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="953.3" y="942.0"></text>
</g>
<g>
<title>CountedLoopEndNode::incr() const (1 samples, 0.05%)</title><rect x="950.3" y="915.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="953.3" y="926.0"></text>
</g>
<g>
<title>CountedLoopEndNode::cmp_node() const (1 samples, 0.05%)</title><rect x="950.3" y="899.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="953.3" y="910.0"></text>
</g>
<g>
<title>Node::req() const (1 samples, 0.05%)</title><rect x="950.3" y="883.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="953.3" y="894.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.05%)</title><rect x="950.9" y="963.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="953.9" y="974.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.05%)</title><rect x="951.4" y="963.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="954.4" y="974.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="951.4" y="947.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="954.4" y="958.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="951.4" y="931.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="954.4" y="942.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="951.4" y="915.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="954.4" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (6 samples, 0.28%)</title><rect x="952.0" y="963.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="955.0" y="974.0"></text>
</g>
<g>
<title>HaltNode::is_CFG() const (1 samples, 0.05%)</title><rect x="953.1" y="947.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="956.1" y="958.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (3 samples, 0.14%)</title><rect x="953.7" y="947.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="956.7" y="958.0"></text>
</g>
<g>
<title>GrowableArray&lt;Node*&gt;::append(Node* const&amp;) (1 samples, 0.05%)</title><rect x="954.2" y="931.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="957.2" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.05%)</title><rect x="954.8" y="931.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="957.8" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (12 samples, 0.57%)</title><rect x="955.3" y="963.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="958.3" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (3 samples, 0.14%)</title><rect x="957.6" y="947.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="960.6" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (2 samples, 0.09%)</title><rect x="959.2" y="947.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="962.2" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.09%)</title><rect x="959.2" y="931.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="962.2" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.05%)</title><rect x="959.2" y="915.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="962.2" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.05%)</title><rect x="959.8" y="915.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="962.8" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.05%)</title><rect x="959.8" y="899.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="962.8" y="910.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (3 samples, 0.14%)</title><rect x="960.3" y="947.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="963.3" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (39 samples, 1.84%)</title><rect x="962.0" y="963.0" width="21.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="965.0" y="974.0">P..</text>
</g>
<g>
<title>IfFalseNode::Opcode() const (1 samples, 0.05%)</title><rect x="969.8" y="947.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="972.8" y="958.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() const (1 samples, 0.05%)</title><rect x="970.3" y="947.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="973.3" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.05%)</title><rect x="970.9" y="947.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="973.9" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (21 samples, 0.99%)</title><rect x="971.5" y="947.0" width="11.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="974.5" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.05%)</title><rect x="972.0" y="931.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="975.0" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.05%)</title><rect x="972.6" y="931.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="975.6" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.05%)</title><rect x="972.6" y="915.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="975.6" y="926.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.05%)</title><rect x="972.6" y="899.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="975.6" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (14 samples, 0.66%)</title><rect x="973.1" y="931.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="976.1" y="942.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.05%)</title><rect x="973.1" y="915.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="976.1" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (4 samples, 0.19%)</title><rect x="973.7" y="915.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="976.7" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (1 samples, 0.05%)</title><rect x="975.4" y="899.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="978.4" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.05%)</title><rect x="975.4" y="883.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="978.4" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.05%)</title><rect x="975.4" y="867.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="978.4" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.05%)</title><rect x="975.4" y="851.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="978.4" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (9 samples, 0.42%)</title><rect x="975.9" y="915.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="978.9" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.09%)</title><rect x="975.9" y="899.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="978.9" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (7 samples, 0.33%)</title><rect x="977.0" y="899.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="980.0" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (7 samples, 0.33%)</title><rect x="977.0" y="883.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="980.0" y="894.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (5 samples, 0.24%)</title><rect x="978.1" y="867.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="981.1" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (2 samples, 0.09%)</title><rect x="980.9" y="931.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="983.9" y="942.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.05%)</title><rect x="981.5" y="915.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="984.5" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.05%)</title><rect x="982.0" y="931.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="985.0" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.05%)</title><rect x="982.0" y="915.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="985.0" y="926.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.05%)</title><rect x="982.0" y="899.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="985.0" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.05%)</title><rect x="982.6" y="931.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="985.6" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.05%)</title><rect x="983.1" y="947.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="986.1" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (4 samples, 0.19%)</title><rect x="983.7" y="963.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="986.7" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (3 samples, 0.14%)</title><rect x="984.3" y="947.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="987.3" y="958.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="985.4" y="931.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="988.4" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (20 samples, 0.94%)</title><rect x="985.9" y="963.0" width="11.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="988.9" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.05%)</title><rect x="988.7" y="947.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="991.7" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (14 samples, 0.66%)</title><rect x="989.3" y="947.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="992.3" y="958.0"></text>
</g>
<g>
<title>CallDynamicJavaNode::Opcode() const (1 samples, 0.05%)</title><rect x="989.8" y="931.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="992.8" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (3 samples, 0.14%)</title><rect x="990.4" y="931.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="993.4" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (3 samples, 0.14%)</title><rect x="990.4" y="915.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="993.4" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (1 samples, 0.05%)</title><rect x="991.5" y="899.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="994.5" y="910.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.05%)</title><rect x="991.5" y="883.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="994.5" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.05%)</title><rect x="992.0" y="931.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="995.0" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.05%)</title><rect x="992.6" y="931.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="995.6" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.05%)</title><rect x="992.6" y="915.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="995.6" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (5 samples, 0.24%)</title><rect x="993.1" y="931.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="996.1" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (3 samples, 0.14%)</title><rect x="993.7" y="915.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="996.7" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (2 samples, 0.09%)</title><rect x="994.3" y="899.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="997.3" y="910.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.05%)</title><rect x="994.8" y="883.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="997.8" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.05%)</title><rect x="995.4" y="915.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="998.4" y="926.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.05%)</title><rect x="995.4" y="899.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="998.4" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.05%)</title><rect x="995.9" y="931.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="998.9" y="942.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="995.9" y="915.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="998.9" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::try_move_store_before_loop(Node*, Node*) (1 samples, 0.05%)</title><rect x="996.5" y="931.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="999.5" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.05%)</title><rect x="996.5" y="915.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="999.5" y="926.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.05%)</title><rect x="996.5" y="899.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="999.5" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (11 samples, 0.52%)</title><rect x="997.0" y="963.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1000.0" y="974.0"></text>
</g>
<g>
<title>Compile::check_node_count(unsigned int, char const*) (1 samples, 0.05%)</title><rect x="997.0" y="947.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1000.0" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (9 samples, 0.42%)</title><rect x="997.6" y="947.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1000.6" y="958.0"></text>
</g>
<g>
<title>AddNode::Value(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="997.6" y="931.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1000.6" y="942.0"></text>
</g>
<g>
<title>AddNode::add_of_identity(Type const*, Type const*) const (1 samples, 0.05%)</title><rect x="997.6" y="915.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1000.6" y="926.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.05%)</title><rect x="997.6" y="899.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1000.6" y="910.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.05%)</title><rect x="997.6" y="883.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1000.6" y="894.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.05%)</title><rect x="997.6" y="867.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1000.6" y="878.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseGVN*) (1 samples, 0.05%)</title><rect x="998.2" y="931.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1001.2" y="942.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="998.7" y="931.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1001.7" y="942.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="998.7" y="915.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1001.7" y="926.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="998.7" y="899.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1001.7" y="910.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.05%)</title><rect x="998.7" y="883.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1001.7" y="894.0"></text>
</g>
<g>
<title>ciEnv::compiler_data() (1 samples, 0.05%)</title><rect x="998.7" y="867.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1001.7" y="878.0"></text>
</g>
<g>
<title>CastIINode::Value(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="999.3" y="931.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1002.3" y="942.0"></text>
</g>
<g>
<title>ConstraintCastNode::Value(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="999.3" y="915.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1002.3" y="926.0"></text>
</g>
<g>
<title>TypeInt::filter_helper(Type const*, bool) const (1 samples, 0.05%)</title><rect x="999.3" y="899.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1002.3" y="910.0"></text>
</g>
<g>
<title>LoadBNode::Opcode() const (1 samples, 0.05%)</title><rect x="999.8" y="931.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1002.8" y="942.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1000.4" y="931.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1003.4" y="942.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1000.4" y="915.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1003.4" y="926.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.05%)</title><rect x="1000.4" y="899.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1003.4" y="910.0"></text>
</g>
<g>
<title>TypeAryPtr::xmeet_helper(Type const*) const (1 samples, 0.05%)</title><rect x="1000.4" y="883.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1003.4" y="894.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.05%)</title><rect x="1000.4" y="867.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1003.4" y="878.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.05%)</title><rect x="1000.4" y="851.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1003.4" y="862.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.05%)</title><rect x="1000.4" y="835.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1003.4" y="846.0"></text>
</g>
<g>
<title>TypeAryPtr::eq(Type const*) const (1 samples, 0.05%)</title><rect x="1000.4" y="819.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1003.4" y="830.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1000.9" y="931.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1003.9" y="942.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1000.9" y="915.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1003.9" y="926.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.05%)</title><rect x="1000.9" y="899.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1003.9" y="910.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.05%)</title><rect x="1000.9" y="883.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1003.9" y="894.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1001.5" y="931.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1004.5" y="942.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.05%)</title><rect x="1001.5" y="915.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1004.5" y="926.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.05%)</title><rect x="1001.5" y="899.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1004.5" y="910.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1002.0" y="931.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1005.0" y="942.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.05%)</title><rect x="1002.0" y="915.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1005.0" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.05%)</title><rect x="1002.0" y="899.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1005.0" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.05%)</title><rect x="1002.0" y="883.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1005.0" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.05%)</title><rect x="1002.0" y="867.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1005.0" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.05%)</title><rect x="1002.0" y="851.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1005.0" y="862.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.05%)</title><rect x="1002.0" y="835.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1005.0" y="846.0"></text>
</g>
<g>
<title>Node::find_exact_control(Node*) (1 samples, 0.05%)</title><rect x="1002.0" y="819.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1005.0" y="830.0"></text>
</g>
<g>
<title>Unique_Node_List::pop() (1 samples, 0.05%)</title><rect x="1002.6" y="947.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1005.6" y="958.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.09%)</title><rect x="1003.2" y="963.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1006.2" y="974.0"></text>
</g>
<g>
<title>Chunk::next_chop() (2 samples, 0.09%)</title><rect x="1003.2" y="947.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1006.2" y="958.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (2 samples, 0.09%)</title><rect x="1003.2" y="931.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1006.2" y="942.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.05%)</title><rect x="1003.2" y="915.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1006.2" y="926.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (1 samples, 0.05%)</title><rect x="1003.2" y="899.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1006.2" y="910.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (1 samples, 0.05%)</title><rect x="1003.2" y="883.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1006.2" y="894.0"></text>
</g>
<g>
<title>madvise (1 samples, 0.05%)</title><rect x="1003.7" y="915.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1006.7" y="926.0"></text>
</g>
<g>
<title>StartNode::pinned() const (1 samples, 0.05%)</title><rect x="1004.3" y="963.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1007.3" y="974.0"></text>
</g>
<g>
<title>SuperWord::SuperWord(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1004.8" y="963.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1007.8" y="974.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::GrowableArray(Arena*, int, int, int const&amp;) (1 samples, 0.05%)</title><rect x="1004.8" y="947.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1007.8" y="958.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.09%)</title><rect x="1005.4" y="995.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1008.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.05%)</title><rect x="1005.4" y="979.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1008.4" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.05%)</title><rect x="1005.4" y="963.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1008.4" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.05%)</title><rect x="1005.4" y="947.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1008.4" y="958.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.05%)</title><rect x="1005.4" y="931.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1008.4" y="942.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.05%)</title><rect x="1005.9" y="979.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1008.9" y="990.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.05%)</title><rect x="1005.9" y="963.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1008.9" y="974.0"></text>
</g>
<g>
<title>Node_Array::map(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1005.9" y="947.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1008.9" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (8 samples, 0.38%)</title><rect x="1006.5" y="995.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1009.5" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (7 samples, 0.33%)</title><rect x="1006.5" y="979.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1009.5" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (2 samples, 0.09%)</title><rect x="1006.5" y="963.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1009.5" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.05%)</title><rect x="1007.0" y="947.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1010.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.05%)</title><rect x="1007.0" y="931.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1010.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (3 samples, 0.14%)</title><rect x="1007.6" y="963.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1010.6" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.14%)</title><rect x="1007.6" y="947.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1010.6" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.14%)</title><rect x="1007.6" y="931.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1010.6" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (3 samples, 0.14%)</title><rect x="1007.6" y="915.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1010.6" y="926.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (3 samples, 0.14%)</title><rect x="1007.6" y="899.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1010.6" y="910.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (2 samples, 0.09%)</title><rect x="1009.3" y="963.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1012.3" y="974.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.05%)</title><rect x="1010.4" y="979.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1013.4" y="990.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (5 samples, 0.24%)</title><rect x="1010.9" y="995.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1013.9" y="1006.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="1010.9" y="979.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1013.9" y="990.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.05%)</title><rect x="1010.9" y="963.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1013.9" y="974.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.05%)</title><rect x="1010.9" y="947.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1013.9" y="958.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.05%)</title><rect x="1011.5" y="979.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1014.5" y="990.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.05%)</title><rect x="1011.5" y="963.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1014.5" y="974.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.05%)</title><rect x="1011.5" y="947.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1014.5" y="958.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.05%)</title><rect x="1011.5" y="931.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1014.5" y="942.0"></text>
</g>
<g>
<title>CallNode::Value(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="1012.1" y="979.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1015.1" y="990.0"></text>
</g>
<g>
<title>SubNode::Value(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="1012.6" y="979.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1015.6" y="990.0"></text>
</g>
<g>
<title>SubNode::Value_common(PhaseTransform*) const (1 samples, 0.05%)</title><rect x="1012.6" y="963.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1015.6" y="974.0"></text>
</g>
<g>
<title>Unique_Node_List::pop() (1 samples, 0.05%)</title><rect x="1013.2" y="979.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1016.2" y="990.0"></text>
</g>
<g>
<title>Node_Array::map(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1013.2" y="963.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1016.2" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, LoopOptsMode) (1 samples, 0.05%)</title><rect x="1013.7" y="995.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1016.7" y="1006.0"></text>
</g>
<g>
<title>PhaseTransform::PhaseTransform(Phase::PhaseNumber) (1 samples, 0.05%)</title><rect x="1013.7" y="979.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1016.7" y="990.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.05%)</title><rect x="1013.7" y="963.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1016.7" y="974.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="1013.7" y="947.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1016.7" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (59 samples, 2.78%)</title><rect x="1014.3" y="995.0" width="32.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1017.3" y="1006.0">Ph..</text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1014.3" y="979.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1017.3" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.05%)</title><rect x="1014.3" y="963.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1017.3" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.05%)</title><rect x="1014.3" y="947.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1017.3" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.05%)</title><rect x="1014.3" y="931.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1017.3" y="942.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.05%)</title><rect x="1014.3" y="915.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1017.3" y="926.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1014.3" y="899.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1017.3" y="910.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.05%)</title><rect x="1014.3" y="883.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1017.3" y="894.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.05%)</title><rect x="1014.3" y="867.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1017.3" y="878.0"></text>
</g>
<g>
<title>CompilerThread::current() (1 samples, 0.05%)</title><rect x="1014.3" y="851.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1017.3" y="862.0"></text>
</g>
<g>
<title>JavaThread::current() (1 samples, 0.05%)</title><rect x="1014.3" y="835.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1017.3" y="846.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.05%)</title><rect x="1014.3" y="819.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1017.3" y="830.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="1014.3" y="803.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1017.3" y="814.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (4 samples, 0.19%)</title><rect x="1014.8" y="979.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1017.8" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (4 samples, 0.19%)</title><rect x="1014.8" y="963.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1017.8" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.09%)</title><rect x="1014.8" y="947.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1017.8" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1014.8" y="931.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1017.8" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1014.8" y="915.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1017.8" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1014.8" y="899.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1017.8" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.05%)</title><rect x="1014.8" y="883.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1017.8" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (1 samples, 0.05%)</title><rect x="1014.8" y="867.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1017.8" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.05%)</title><rect x="1014.8" y="851.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1017.8" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.05%)</title><rect x="1014.8" y="835.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1017.8" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (1 samples, 0.05%)</title><rect x="1014.8" y="819.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1017.8" y="830.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1015.4" y="931.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1018.4" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.05%)</title><rect x="1015.4" y="915.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1018.4" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (1 samples, 0.05%)</title><rect x="1015.4" y="899.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1018.4" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop_handle_data_uses(Node*, Node_List&amp;, IdealLoopTree*, IdealLoopTree*, Node_List*&amp;, Node_List*&amp;, Node_List*&amp;, Node_List&amp;, unsigned int, PhaseIdealLoop::CloneLoopMode) (1 samples, 0.05%)</title><rect x="1015.4" y="883.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1018.4" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_input_of(Node*, int, Node*) (1 samples, 0.05%)</title><rect x="1015.4" y="867.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1018.4" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::rehash_node_delayed(Node*) (1 samples, 0.05%)</title><rect x="1015.4" y="851.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1018.4" y="862.0"></text>
</g>
<g>
<title>PhaseValues::hash_delete(Node*) (1 samples, 0.05%)</title><rect x="1015.4" y="835.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1018.4" y="846.0"></text>
</g>
<g>
<title>MergeMemNode::hash() const (1 samples, 0.05%)</title><rect x="1015.4" y="819.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1018.4" y="830.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.09%)</title><rect x="1015.9" y="947.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1018.9" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.05%)</title><rect x="1015.9" y="931.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1018.9" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (1 samples, 0.05%)</title><rect x="1015.9" y="915.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1018.9" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop_handle_data_uses(Node*, Node_List&amp;, IdealLoopTree*, IdealLoopTree*, Node_List*&amp;, Node_List*&amp;, Node_List*&amp;, Node_List&amp;, unsigned int, PhaseIdealLoop::CloneLoopMode) (1 samples, 0.05%)</title><rect x="1015.9" y="899.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1018.9" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::sink_use(Node*, Node*) (1 samples, 0.05%)</title><rect x="1015.9" y="883.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1018.9" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.05%)</title><rect x="1015.9" y="867.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1018.9" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.05%)</title><rect x="1016.5" y="931.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1019.5" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_post_loop(IdealLoopTree*, Node_List&amp;, CountedLoopNode*, CountedLoopEndNode*, Node*, Node*, CountedLoopNode*&amp;) (1 samples, 0.05%)</title><rect x="1016.5" y="915.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1019.5" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (1 samples, 0.05%)</title><rect x="1016.5" y="899.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1019.5" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop_handle_data_uses(Node*, Node_List&amp;, IdealLoopTree*, IdealLoopTree*, Node_List*&amp;, Node_List*&amp;, Node_List*&amp;, Node_List&amp;, unsigned int, PhaseIdealLoop::CloneLoopMode) (1 samples, 0.05%)</title><rect x="1016.5" y="883.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1019.5" y="894.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.05%)</title><rect x="1016.5" y="867.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1019.5" y="878.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.05%)</title><rect x="1016.5" y="851.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1019.5" y="862.0"></text>
</g>
<g>
<title>Type::hash() const (1 samples, 0.05%)</title><rect x="1016.5" y="835.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1019.5" y="846.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (5 samples, 0.24%)</title><rect x="1017.1" y="979.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1020.1" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (3 samples, 0.14%)</title><rect x="1017.1" y="963.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1020.1" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.09%)</title><rect x="1017.1" y="947.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1020.1" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.09%)</title><rect x="1017.1" y="931.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1020.1" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.09%)</title><rect x="1017.1" y="915.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1020.1" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (2 samples, 0.09%)</title><rect x="1017.1" y="899.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1020.1" y="910.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.05%)</title><rect x="1017.1" y="883.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1020.1" y="894.0"></text>
</g>
<g>
<title>GrowableArray&lt;float&gt;::at_grow(int, float const&amp;) (1 samples, 0.05%)</title><rect x="1017.1" y="867.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1020.1" y="878.0"></text>
</g>
<g>
<title>GrowableArray&lt;float&gt;::grow(int) (1 samples, 0.05%)</title><rect x="1017.1" y="851.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1020.1" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1017.6" y="883.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1020.6" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.05%)</title><rect x="1017.6" y="867.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1020.6" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.05%)</title><rect x="1017.6" y="851.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1020.6" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.05%)</title><rect x="1017.6" y="835.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1020.6" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.05%)</title><rect x="1018.2" y="947.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1021.2" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1018.2" y="931.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1021.2" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (2 samples, 0.09%)</title><rect x="1018.7" y="963.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1021.7" y="974.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.05%)</title><rect x="1018.7" y="947.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1021.7" y="958.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() const (1 samples, 0.05%)</title><rect x="1018.7" y="931.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1021.7" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.05%)</title><rect x="1019.3" y="947.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1022.3" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.05%)</title><rect x="1019.3" y="931.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1022.3" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (7 samples, 0.33%)</title><rect x="1019.8" y="979.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1022.8" y="990.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.09%)</title><rect x="1022.6" y="963.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1025.6" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.05%)</title><rect x="1023.2" y="947.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1026.2" y="958.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.05%)</title><rect x="1023.2" y="931.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1026.2" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (10 samples, 0.47%)</title><rect x="1023.7" y="979.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1026.7" y="990.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.05%)</title><rect x="1026.0" y="963.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1029.0" y="974.0"></text>
</g>
<g>
<title>ParmNode::is_CFG() const (1 samples, 0.05%)</title><rect x="1026.5" y="963.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1029.5" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (4 samples, 0.19%)</title><rect x="1027.1" y="963.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1030.1" y="974.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (3 samples, 0.14%)</title><rect x="1027.6" y="947.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1030.6" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (17 samples, 0.80%)</title><rect x="1029.3" y="979.0" width="9.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1032.3" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (14 samples, 0.66%)</title><rect x="1031.0" y="963.0" width="7.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1034.0" y="974.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.05%)</title><rect x="1031.0" y="947.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1034.0" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.05%)</title><rect x="1031.5" y="947.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1034.5" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (9 samples, 0.42%)</title><rect x="1032.1" y="947.0" width="5.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1035.1" y="958.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.05%)</title><rect x="1032.6" y="931.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1035.6" y="942.0"></text>
</g>
<g>
<title>_platform_strcmp (1 samples, 0.05%)</title><rect x="1032.6" y="915.0" width="0.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1035.6" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (3 samples, 0.14%)</title><rect x="1033.2" y="931.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1036.2" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (3 samples, 0.14%)</title><rect x="1033.2" y="915.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.2" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.14%)</title><rect x="1033.2" y="899.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.2" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.09%)</title><rect x="1033.2" y="883.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1036.2" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.05%)</title><rect x="1034.3" y="883.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1037.3" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.05%)</title><rect x="1034.3" y="867.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1037.3" y="878.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.05%)</title><rect x="1034.3" y="851.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1037.3" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (2 samples, 0.09%)</title><rect x="1034.9" y="931.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1037.9" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.09%)</title><rect x="1034.9" y="915.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1037.9" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.05%)</title><rect x="1035.4" y="899.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1038.4" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 0.09%)</title><rect x="1036.0" y="931.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1039.0" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.09%)</title><rect x="1036.0" y="915.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1039.0" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.09%)</title><rect x="1036.0" y="899.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1039.0" y="910.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (2 samples, 0.09%)</title><rect x="1036.0" y="883.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1039.0" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.05%)</title><rect x="1037.1" y="947.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1040.1" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.09%)</title><rect x="1037.6" y="947.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1040.6" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.09%)</title><rect x="1037.6" y="931.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1040.6" y="942.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.05%)</title><rect x="1038.2" y="915.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1041.2" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (7 samples, 0.33%)</title><rect x="1038.7" y="979.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1041.7" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.09%)</title><rect x="1041.5" y="963.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1044.5" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::sort(IdealLoopTree*, IdealLoopTree*) (1 samples, 0.05%)</title><rect x="1042.1" y="947.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1045.1" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (3 samples, 0.14%)</title><rect x="1042.6" y="979.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1045.6" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.14%)</title><rect x="1042.6" y="963.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1045.6" y="974.0"></text>
</g>
<g>
<title>LoadLNode::Opcode() const (1 samples, 0.05%)</title><rect x="1042.6" y="947.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1045.6" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.05%)</title><rect x="1043.2" y="947.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1046.2" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.05%)</title><rect x="1043.8" y="947.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1046.8" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.05%)</title><rect x="1043.8" y="931.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1046.8" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.14%)</title><rect x="1044.3" y="979.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1047.3" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.14%)</title><rect x="1044.3" y="963.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1047.3" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.05%)</title><rect x="1044.3" y="947.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1047.3" y="958.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.05%)</title><rect x="1044.3" y="931.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1047.3" y="942.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.05%)</title><rect x="1044.3" y="915.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1047.3" y="926.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1044.9" y="947.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1047.9" y="958.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1044.9" y="931.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1047.9" y="942.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1044.9" y="915.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1047.9" y="926.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.05%)</title><rect x="1044.9" y="899.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1047.9" y="910.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.05%)</title><rect x="1045.4" y="947.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1048.4" y="958.0"></text>
</g>
<g>
<title>TypeInt::xdual() const (1 samples, 0.05%)</title><rect x="1045.4" y="931.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1048.4" y="942.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.05%)</title><rect x="1046.0" y="979.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1049.0" y="990.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.05%)</title><rect x="1046.5" y="979.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1049.5" y="990.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.05%)</title><rect x="1046.5" y="963.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1049.5" y="974.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.05%)</title><rect x="1046.5" y="947.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1049.5" y="958.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.05%)</title><rect x="1046.5" y="931.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1049.5" y="942.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (1 samples, 0.05%)</title><rect x="1046.5" y="915.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1049.5" y="926.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (1 samples, 0.05%)</title><rect x="1046.5" y="899.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1049.5" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.05%)</title><rect x="1047.1" y="995.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1050.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.05%)</title><rect x="1047.1" y="979.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1050.1" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (16 samples, 0.75%)</title><rect x="1047.6" y="995.0" width="8.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1050.6" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (16 samples, 0.75%)</title><rect x="1047.6" y="979.0" width="8.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1050.6" y="990.0"></text>
</g>
<g>
<title>CProjNode::hash() const (1 samples, 0.05%)</title><rect x="1048.2" y="963.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1051.2" y="974.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1048.8" y="963.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1051.8" y="974.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1048.8" y="947.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1051.8" y="958.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.09%)</title><rect x="1049.3" y="963.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1052.3" y="974.0"></text>
</g>
<g>
<title>IfNode::Ideal_common(PhaseGVN*, bool) (2 samples, 0.09%)</title><rect x="1049.3" y="947.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1052.3" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.05%)</title><rect x="1049.9" y="931.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1052.9" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.05%)</title><rect x="1049.9" y="915.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1052.9" y="926.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.05%)</title><rect x="1049.9" y="899.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1052.9" y="910.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.05%)</title><rect x="1049.9" y="883.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1052.9" y="894.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.09%)</title><rect x="1050.4" y="963.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1053.4" y="974.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1050.4" y="947.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1053.4" y="958.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.05%)</title><rect x="1050.4" y="931.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1053.4" y="942.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.05%)</title><rect x="1050.4" y="915.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1053.4" y="926.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.05%)</title><rect x="1051.0" y="947.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1054.0" y="958.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.05%)</title><rect x="1051.0" y="931.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1054.0" y="942.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.05%)</title><rect x="1051.0" y="915.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1054.0" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.05%)</title><rect x="1051.0" y="899.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1054.0" y="910.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.05%)</title><rect x="1051.0" y="883.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1054.0" y="894.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.05%)</title><rect x="1051.0" y="867.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1054.0" y="878.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseGVN*) (2 samples, 0.09%)</title><rect x="1051.5" y="963.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1054.5" y="974.0"></text>
</g>
<g>
<title>LoadNode::is_instance_field_load_with_local_phi(Node*) (2 samples, 0.09%)</title><rect x="1051.5" y="947.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1054.5" y="958.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.05%)</title><rect x="1052.1" y="931.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1055.1" y="942.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.05%)</title><rect x="1052.1" y="915.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1055.1" y="926.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.05%)</title><rect x="1052.1" y="899.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1055.1" y="910.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.05%)</title><rect x="1052.1" y="883.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1055.1" y="894.0"></text>
</g>
<g>
<title>TypeOopPtr::hash() const (1 samples, 0.05%)</title><rect x="1052.1" y="867.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1055.1" y="878.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1052.6" y="963.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1055.6" y="974.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.05%)</title><rect x="1053.2" y="963.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1056.2" y="974.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.09%)</title><rect x="1053.8" y="963.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1056.8" y="974.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.05%)</title><rect x="1053.8" y="947.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1056.8" y="958.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (1 samples, 0.05%)</title><rect x="1053.8" y="931.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1056.8" y="942.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="1054.3" y="947.0" width="0.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1057.3" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.05%)</title><rect x="1054.9" y="963.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1057.9" y="974.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1055.4" y="963.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1058.4" y="974.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1056.0" y="963.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1059.0" y="974.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="1056.0" y="947.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1059.0" y="958.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.05%)</title><rect x="1056.5" y="995.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1059.5" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.05%)</title><rect x="1056.5" y="979.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1059.5" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.05%)</title><rect x="1056.5" y="963.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1059.5" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.05%)</title><rect x="1056.5" y="947.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1059.5" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.05%)</title><rect x="1056.5" y="931.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1059.5" y="942.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1056.5" y="915.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1059.5" y="926.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.05%)</title><rect x="1056.5" y="899.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1059.5" y="910.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (4 samples, 0.19%)</title><rect x="1057.1" y="995.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1060.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.14%)</title><rect x="1057.1" y="979.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1060.1" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.09%)</title><rect x="1057.1" y="963.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1060.1" y="974.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.05%)</title><rect x="1057.1" y="947.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1060.1" y="958.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="1057.7" y="947.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1060.7" y="958.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.05%)</title><rect x="1057.7" y="931.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1060.7" y="942.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.05%)</title><rect x="1057.7" y="915.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1060.7" y="926.0"></text>
</g>
<g>
<title>Unique_Node_List::pop() (1 samples, 0.05%)</title><rect x="1058.2" y="963.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.2" y="974.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.05%)</title><rect x="1058.2" y="947.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1061.2" y="958.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.05%)</title><rect x="1058.8" y="979.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1061.8" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::initialize_object(AllocateNode*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.05%)</title><rect x="1058.8" y="963.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1061.8" y="974.0"></text>
</g>
<g>
<title>InitializeNode::complete_stores(Node*, Node*, Node*, long, Node*, PhaseGVN*) (1 samples, 0.05%)</title><rect x="1058.8" y="947.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1061.8" y="958.0"></text>
</g>
<g>
<title>ClearArrayNode::clear_memory(Node*, Node*, Node*, long, long, PhaseGVN*) (1 samples, 0.05%)</title><rect x="1058.8" y="931.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1061.8" y="942.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.05%)</title><rect x="1058.8" y="915.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1061.8" y="926.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.05%)</title><rect x="1058.8" y="899.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1061.8" y="910.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.05%)</title><rect x="1058.8" y="883.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1061.8" y="894.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (3 samples, 0.14%)</title><rect x="1059.3" y="995.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1062.3" y="1006.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.09%)</title><rect x="1059.3" y="979.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1062.3" y="990.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.05%)</title><rect x="1060.4" y="979.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1063.4" y="990.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.05%)</title><rect x="1060.4" y="963.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1063.4" y="974.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.05%)</title><rect x="1060.4" y="947.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1063.4" y="958.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.05%)</title><rect x="1060.4" y="931.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1063.4" y="942.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="1061.0" y="995.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1064.0" y="1006.0"></text>
</g>
<g>
<title>URShiftLNode::bottom_type() const (1 samples, 0.05%)</title><rect x="1061.5" y="995.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1064.5" y="1006.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (3 samples, 0.14%)</title><rect x="1062.1" y="1011.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1065.1" y="1022.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.09%)</title><rect x="1062.1" y="995.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1065.1" y="1006.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.09%)</title><rect x="1062.1" y="979.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1065.1" y="990.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (2 samples, 0.09%)</title><rect x="1062.1" y="963.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1065.1" y="974.0"></text>
</g>
<g>
<title>PhaseStringOpts::PhaseStringOpts(PhaseGVN*, Unique_Node_List*) (1 samples, 0.05%)</title><rect x="1063.2" y="995.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1066.2" y="1006.0"></text>
</g>
<g>
<title>PhaseStringOpts::replace_string_concat(StringConcat*) (1 samples, 0.05%)</title><rect x="1063.2" y="979.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1066.2" y="990.0"></text>
</g>
<g>
<title>GraphKit::load_String_length(Node*, bool) (1 samples, 0.05%)</title><rect x="1063.2" y="963.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1066.2" y="974.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="1063.2" y="947.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1066.2" y="958.0"></text>
</g>
<g>
<title>ConstraintCastNode::Value(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="1063.2" y="931.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1066.2" y="942.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.05%)</title><rect x="1063.2" y="915.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1066.2" y="926.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.05%)</title><rect x="1063.2" y="899.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1066.2" y="910.0"></text>
</g>
<g>
<title>TypeAryPtr::xmeet_helper(Type const*) const (1 samples, 0.05%)</title><rect x="1063.2" y="883.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1066.2" y="894.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.05%)</title><rect x="1063.2" y="867.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1066.2" y="878.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.05%)</title><rect x="1063.2" y="851.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1066.2" y="862.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.09%)</title><rect x="1063.8" y="1011.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1066.8" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (55 samples, 2.59%)</title><rect x="1064.9" y="1011.0" width="30.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1067.9" y="1022.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (55 samples, 2.59%)</title><rect x="1064.9" y="995.0" width="30.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1067.9" y="1006.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (55 samples, 2.59%)</title><rect x="1064.9" y="979.0" width="30.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1067.9" y="990.0">Pa..</text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.05%)</title><rect x="1064.9" y="963.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1067.9" y="974.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.05%)</title><rect x="1064.9" y="947.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1067.9" y="958.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1064.9" y="931.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1067.9" y="942.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.05%)</title><rect x="1064.9" y="915.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1067.9" y="926.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.05%)</title><rect x="1064.9" y="899.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1067.9" y="910.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1064.9" y="883.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1067.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (54 samples, 2.54%)</title><rect x="1065.4" y="963.0" width="30.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1068.4" y="974.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (50 samples, 2.36%)</title><rect x="1065.4" y="947.0" width="27.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1068.4" y="958.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.09%)</title><rect x="1065.4" y="931.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1068.4" y="942.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.09%)</title><rect x="1065.4" y="915.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1068.4" y="926.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.09%)</title><rect x="1065.4" y="899.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1068.4" y="910.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (2 samples, 0.09%)</title><rect x="1065.4" y="883.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1068.4" y="894.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.05%)</title><rect x="1065.4" y="867.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1068.4" y="878.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle const&amp;, Thread*) (1 samples, 0.05%)</title><rect x="1065.4" y="851.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1068.4" y="862.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol_or_null() (1 samples, 0.05%)</title><rect x="1065.4" y="835.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1068.4" y="846.0"></text>
</g>
<g>
<title>is_init_with_ea(ciMethod*, ciMethod*, Compile*) (1 samples, 0.05%)</title><rect x="1066.0" y="867.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1069.0" y="878.0"></text>
</g>
<g>
<title>ciMethod::is_initializer() const (1 samples, 0.05%)</title><rect x="1066.0" y="851.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1069.0" y="862.0"></text>
</g>
<g>
<title>Method::is_initializer() const (1 samples, 0.05%)</title><rect x="1066.0" y="835.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1069.0" y="846.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1066.6" y="931.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1069.6" y="942.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.05%)</title><rect x="1066.6" y="915.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1069.6" y="926.0"></text>
</g>
<g>
<title>BarrierSetC2::ideal_node(PhaseGVN*, Node*, bool) const (1 samples, 0.05%)</title><rect x="1066.6" y="899.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1069.6" y="910.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*, ProfilePtrKind) (1 samples, 0.05%)</title><rect x="1067.1" y="931.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1070.1" y="942.0"></text>
</g>
<g>
<title>TypeKlassPtr::as_instance_type() const (1 samples, 0.05%)</title><rect x="1067.1" y="915.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1070.1" y="926.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="1067.1" y="899.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1070.1" y="910.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1067.7" y="931.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1070.7" y="942.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.05%)</title><rect x="1067.7" y="915.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1070.7" y="926.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_arraycopy() (1 samples, 0.05%)</title><rect x="1067.7" y="899.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1070.7" y="910.0"></text>
</g>
<g>
<title>GraphKit::load_object_klass(Node*) (1 samples, 0.05%)</title><rect x="1067.7" y="883.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1070.7" y="894.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.05%)</title><rect x="1067.7" y="867.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1070.7" y="878.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="1067.7" y="851.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1070.7" y="862.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1067.7" y="835.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1070.7" y="846.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.05%)</title><rect x="1067.7" y="819.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1070.7" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (39 samples, 1.84%)</title><rect x="1068.2" y="931.0" width="21.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1071.2" y="942.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (39 samples, 1.84%)</title><rect x="1068.2" y="915.0" width="21.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1071.2" y="926.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (39 samples, 1.84%)</title><rect x="1068.2" y="899.0" width="21.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1071.2" y="910.0">P..</text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.05%)</title><rect x="1068.2" y="883.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1071.2" y="894.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.05%)</title><rect x="1068.2" y="867.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1071.2" y="878.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*) (1 samples, 0.05%)</title><rect x="1068.2" y="851.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1071.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (38 samples, 1.79%)</title><rect x="1068.8" y="883.0" width="21.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1071.8" y="894.0">P..</text>
</g>
<g>
<title>Parse::do_call() (37 samples, 1.74%)</title><rect x="1068.8" y="867.0" width="20.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1071.8" y="878.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="1068.8" y="851.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1071.8" y="862.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.05%)</title><rect x="1068.8" y="835.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1071.8" y="846.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.05%)</title><rect x="1068.8" y="819.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1071.8" y="830.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.05%)</title><rect x="1068.8" y="803.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1071.8" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.05%)</title><rect x="1068.8" y="787.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1071.8" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.05%)</title><rect x="1068.8" y="771.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1071.8" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1068.8" y="755.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1071.8" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1068.8" y="739.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1071.8" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1068.8" y="723.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1071.8" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.05%)</title><rect x="1068.8" y="707.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1071.8" y="718.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="1068.8" y="691.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1071.8" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1068.8" y="675.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1071.8" y="686.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1068.8" y="659.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1071.8" y="670.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1068.8" y="643.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1071.8" y="654.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1068.8" y="627.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1071.8" y="638.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.05%)</title><rect x="1068.8" y="611.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1071.8" y="622.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.05%)</title><rect x="1068.8" y="595.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1071.8" y="606.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.05%)</title><rect x="1069.3" y="851.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1072.3" y="862.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.05%)</title><rect x="1069.3" y="835.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1072.3" y="846.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.05%)</title><rect x="1069.3" y="819.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1072.3" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (32 samples, 1.51%)</title><rect x="1069.9" y="851.0" width="17.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1072.9" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (32 samples, 1.51%)</title><rect x="1069.9" y="835.0" width="17.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1072.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (32 samples, 1.51%)</title><rect x="1069.9" y="819.0" width="17.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1072.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (32 samples, 1.51%)</title><rect x="1069.9" y="803.0" width="17.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1072.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (26 samples, 1.23%)</title><rect x="1069.9" y="787.0" width="14.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1072.9" y="798.0"></text>
</g>
<g>
<title>Compile::optimize_virtual_call(ciMethod*, int, ciInstanceKlass*, ciKlass*, ciMethod*, TypeOopPtr const*, bool, bool&amp;, int&amp;, bool) (1 samples, 0.05%)</title><rect x="1069.9" y="771.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1072.9" y="782.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.05%)</title><rect x="1069.9" y="755.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1072.9" y="766.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.05%)</title><rect x="1069.9" y="739.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1072.9" y="750.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.05%)</title><rect x="1069.9" y="723.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1072.9" y="734.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.05%)</title><rect x="1069.9" y="707.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1072.9" y="718.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.05%)</title><rect x="1069.9" y="691.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1072.9" y="702.0"></text>
</g>
<g>
<title>TypePtr::eq(Type const*) const (1 samples, 0.05%)</title><rect x="1069.9" y="675.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1072.9" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (19 samples, 0.90%)</title><rect x="1070.4" y="771.0" width="10.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1073.4" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (19 samples, 0.90%)</title><rect x="1070.4" y="755.0" width="10.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1073.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (18 samples, 0.85%)</title><rect x="1070.4" y="739.0" width="10.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1073.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (18 samples, 0.85%)</title><rect x="1070.4" y="723.0" width="10.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1073.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (15 samples, 0.71%)</title><rect x="1070.4" y="707.0" width="8.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1073.4" y="718.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.09%)</title><rect x="1070.4" y="691.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1073.4" y="702.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.09%)</title><rect x="1070.4" y="675.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1073.4" y="686.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.05%)</title><rect x="1070.4" y="659.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1073.4" y="670.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.05%)</title><rect x="1070.4" y="643.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1073.4" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.05%)</title><rect x="1070.4" y="627.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1073.4" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.05%)</title><rect x="1070.4" y="611.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1073.4" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1070.4" y="595.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1073.4" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1070.4" y="579.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1073.4" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1070.4" y="563.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1073.4" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.05%)</title><rect x="1070.4" y="547.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1073.4" y="558.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="1070.4" y="531.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1073.4" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1070.4" y="515.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1073.4" y="526.0"></text>
</g>
<g>
<title>ciObjectFactory::get_unloaded_method(ciInstanceKlass*, ciSymbol*, ciSymbol*, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1070.4" y="499.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1073.4" y="510.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(ciInstanceKlass*, ciSymbol*, ciSymbol*, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1070.4" y="483.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1073.4" y="494.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.05%)</title><rect x="1070.4" y="467.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1073.4" y="478.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.05%)</title><rect x="1070.4" y="451.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1073.4" y="462.0"></text>
</g>
<g>
<title>SymbolTable::lookup_common(char const*, int, unsigned int) (1 samples, 0.05%)</title><rect x="1070.4" y="435.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1073.4" y="446.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.05%)</title><rect x="1071.0" y="659.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1074.0" y="670.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.05%)</title><rect x="1071.0" y="643.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1074.0" y="654.0"></text>
</g>
<g>
<title>DirectiveSet::should_not_inline(ciMethod*) (1 samples, 0.05%)</title><rect x="1071.0" y="627.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1074.0" y="638.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.05%)</title><rect x="1071.6" y="691.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1074.6" y="702.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.05%)</title><rect x="1071.6" y="675.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1074.6" y="686.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.05%)</title><rect x="1071.6" y="659.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1074.6" y="670.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.05%)</title><rect x="1071.6" y="643.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1074.6" y="654.0"></text>
</g>
<g>
<title>MethodLiveness::init_gen_kill() (1 samples, 0.05%)</title><rect x="1071.6" y="627.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1074.6" y="638.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill(ciMethod*) (1 samples, 0.05%)</title><rect x="1071.6" y="611.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1074.6" y="622.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_range(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1071.6" y="595.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1074.6" y="606.0"></text>
</g>
<g>
<title>ciBytecodeStream::next() (1 samples, 0.05%)</title><rect x="1071.6" y="579.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1074.6" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.52%)</title><rect x="1072.1" y="691.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1075.1" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.52%)</title><rect x="1072.1" y="675.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1075.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.52%)</title><rect x="1072.1" y="659.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1075.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.52%)</title><rect x="1072.1" y="643.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1075.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.42%)</title><rect x="1072.1" y="627.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1075.1" y="638.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="1072.1" y="611.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1075.1" y="622.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.05%)</title><rect x="1072.1" y="595.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1075.1" y="606.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.05%)</title><rect x="1072.1" y="579.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1075.1" y="590.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.05%)</title><rect x="1072.1" y="563.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1075.1" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.05%)</title><rect x="1072.1" y="547.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1075.1" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.05%)</title><rect x="1072.1" y="531.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1075.1" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.05%)</title><rect x="1072.1" y="515.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1075.1" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1072.1" y="499.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1075.1" y="510.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciTypeFlow::Block*&gt;::GrowableArray(Arena*, int, int, ciTypeFlow::Block* const&amp;) (1 samples, 0.05%)</title><rect x="1072.1" y="483.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1075.1" y="494.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1072.1" y="467.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1075.1" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.38%)</title><rect x="1072.7" y="611.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1075.7" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.38%)</title><rect x="1072.7" y="595.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1075.7" y="606.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.05%)</title><rect x="1072.7" y="579.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1075.7" y="590.0"></text>
</g>
<g>
<title>RegionNode::RegionNode(unsigned int) (1 samples, 0.05%)</title><rect x="1072.7" y="563.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1075.7" y="574.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1072.7" y="547.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1075.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.33%)</title><rect x="1073.2" y="579.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1076.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.33%)</title><rect x="1073.2" y="563.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1076.2" y="574.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.05%)</title><rect x="1073.2" y="547.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1076.2" y="558.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long long) (1 samples, 0.05%)</title><rect x="1073.2" y="531.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1076.2" y="542.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.05%)</title><rect x="1073.2" y="515.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1076.2" y="526.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.05%)</title><rect x="1073.2" y="499.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1076.2" y="510.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.05%)</title><rect x="1073.2" y="483.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1076.2" y="494.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.05%)</title><rect x="1073.2" y="467.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1076.2" y="478.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.05%)</title><rect x="1073.2" y="451.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1076.2" y="462.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="1073.2" y="435.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1076.2" y="446.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1073.2" y="419.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1076.2" y="430.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1073.2" y="403.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1076.2" y="414.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.05%)</title><rect x="1073.2" y="387.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1076.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.19%)</title><rect x="1073.8" y="547.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1076.8" y="558.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="1073.8" y="531.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1076.8" y="542.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1074.3" y="531.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1077.3" y="542.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_access(bool, BasicType, LibraryCallKit::AccessKind, bool) (1 samples, 0.05%)</title><rect x="1074.3" y="515.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1077.3" y="526.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.05%)</title><rect x="1074.3" y="499.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1077.3" y="510.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.05%)</title><rect x="1074.3" y="483.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1077.3" y="494.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.05%)</title><rect x="1074.3" y="467.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1077.3" y="478.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.05%)</title><rect x="1074.3" y="451.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1077.3" y="462.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.05%)</title><rect x="1074.3" y="435.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1077.3" y="446.0"></text>
</g>
<g>
<title>IdealKit::copy_cvstate() (1 samples, 0.05%)</title><rect x="1074.3" y="419.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1077.3" y="430.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.05%)</title><rect x="1074.3" y="403.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1077.3" y="414.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.05%)</title><rect x="1074.3" y="387.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1077.3" y="398.0"></text>
</g>
<g>
<title>MergeMemStream::next_non_empty(bool) (1 samples, 0.05%)</title><rect x="1074.3" y="371.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1077.3" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.09%)</title><rect x="1074.9" y="531.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1077.9" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.09%)</title><rect x="1074.9" y="515.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1077.9" y="526.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.05%)</title><rect x="1074.9" y="499.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1077.9" y="510.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.05%)</title><rect x="1074.9" y="483.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1077.9" y="494.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.05%)</title><rect x="1074.9" y="467.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1077.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1075.4" y="499.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1078.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1075.4" y="483.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1078.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1075.4" y="467.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1078.4" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1075.4" y="451.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1078.4" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1075.4" y="435.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1078.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1075.4" y="419.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1078.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1075.4" y="403.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1078.4" y="414.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.05%)</title><rect x="1075.4" y="387.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1078.4" y="398.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long long) (1 samples, 0.05%)</title><rect x="1075.4" y="371.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1078.4" y="382.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.05%)</title><rect x="1075.4" y="355.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1078.4" y="366.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.05%)</title><rect x="1075.4" y="339.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1078.4" y="350.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.05%)</title><rect x="1075.4" y="323.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1078.4" y="334.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.05%)</title><rect x="1075.4" y="307.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1078.4" y="318.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="1075.4" y="291.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1078.4" y="302.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseGVN*) (1 samples, 0.05%)</title><rect x="1075.4" y="275.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1078.4" y="286.0"></text>
</g>
<g>
<title>LoadNode::is_instance_field_load_with_local_phi(Node*) (1 samples, 0.05%)</title><rect x="1075.4" y="259.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1078.4" y="270.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.05%)</title><rect x="1075.4" y="243.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1078.4" y="254.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.05%)</title><rect x="1075.4" y="227.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1078.4" y="238.0"></text>
</g>
<g>
<title>TypeAryPtr::make(TypePtr::PTR, ciObject*, TypeAry const*, ciKlass*, bool, int, int, TypePtr const*, int, bool) (1 samples, 0.05%)</title><rect x="1075.4" y="211.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1078.4" y="222.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1075.4" y="195.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1078.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.05%)</title><rect x="1076.0" y="547.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1079.0" y="558.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.05%)</title><rect x="1076.0" y="531.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1079.0" y="542.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.05%)</title><rect x="1076.0" y="515.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1079.0" y="526.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.05%)</title><rect x="1076.0" y="499.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1079.0" y="510.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.05%)</title><rect x="1076.0" y="483.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1079.0" y="494.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.05%)</title><rect x="1076.0" y="467.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1079.0" y="478.0"></text>
</g>
<g>
<title>MethodLiveness::propagate_liveness() (1 samples, 0.05%)</title><rect x="1076.0" y="451.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1079.0" y="462.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::propagate(MethodLiveness*) (1 samples, 0.05%)</title><rect x="1076.0" y="435.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1079.0" y="446.0"></text>
</g>
<g>
<title>Parse::set_parse_bci(int) (1 samples, 0.05%)</title><rect x="1076.6" y="547.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1079.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.05%)</title><rect x="1077.1" y="627.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1080.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.05%)</title><rect x="1077.1" y="611.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1080.1" y="622.0"></text>
</g>
<g>
<title>GraphKit::make_constant_from_field(ciField*, Node*) (1 samples, 0.05%)</title><rect x="1077.1" y="595.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1080.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1077.7" y="627.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1080.7" y="638.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="1077.7" y="611.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1080.7" y="622.0"></text>
</g>
<g>
<title>MulNode::Identity(PhaseGVN*) (1 samples, 0.05%)</title><rect x="1077.7" y="595.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1080.7" y="606.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.05%)</title><rect x="1077.7" y="579.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1080.7" y="590.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1078.2" y="691.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1081.2" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1078.2" y="675.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1081.2" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1078.2" y="659.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1081.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1078.2" y="643.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1081.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1078.2" y="627.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1081.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1078.2" y="611.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1081.2" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1078.2" y="595.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1081.2" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1078.2" y="579.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1081.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1078.2" y="563.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1081.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1078.2" y="547.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1081.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1078.2" y="531.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1081.2" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1078.2" y="515.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1081.2" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1078.2" y="499.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1081.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1078.2" y="483.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1081.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1078.2" y="467.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1081.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1078.2" y="451.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1081.2" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1078.2" y="435.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1081.2" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1078.2" y="419.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1081.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1078.2" y="403.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1081.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1078.2" y="387.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1081.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1078.2" y="371.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1081.2" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1078.2" y="355.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1081.2" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1078.2" y="339.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1081.2" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1078.2" y="323.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1081.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1078.2" y="307.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1081.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1078.2" y="291.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1081.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1078.2" y="275.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1081.2" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1078.2" y="259.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1081.2" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1078.2" y="243.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1081.2" y="254.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.05%)</title><rect x="1078.2" y="227.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1081.2" y="238.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.05%)</title><rect x="1078.2" y="211.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1081.2" y="222.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.05%)</title><rect x="1078.2" y="195.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1081.2" y="206.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.05%)</title><rect x="1078.2" y="179.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1081.2" y="190.0"></text>
</g>
<g>
<title>MergeMemStream::set_memory(Node*) (1 samples, 0.05%)</title><rect x="1078.2" y="163.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1081.2" y="174.0"></text>
</g>
<g>
<title>MergeMemNode::set_base_memory(Node*) (1 samples, 0.05%)</title><rect x="1078.2" y="147.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1081.2" y="158.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1078.2" y="131.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1081.2" y="142.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.05%)</title><rect x="1078.2" y="115.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1081.2" y="126.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.09%)</title><rect x="1078.8" y="707.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1081.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (2 samples, 0.09%)</title><rect x="1078.8" y="691.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1081.8" y="702.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long long) (1 samples, 0.05%)</title><rect x="1078.8" y="675.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1081.8" y="686.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.05%)</title><rect x="1078.8" y="659.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1081.8" y="670.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.05%)</title><rect x="1078.8" y="643.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1081.8" y="654.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.05%)</title><rect x="1078.8" y="627.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1081.8" y="638.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.05%)</title><rect x="1078.8" y="611.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1081.8" y="622.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="1078.8" y="595.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1081.8" y="606.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1078.8" y="579.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1081.8" y="590.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.05%)</title><rect x="1078.8" y="563.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1081.8" y="574.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.05%)</title><rect x="1078.8" y="547.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1081.8" y="558.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.05%)</title><rect x="1078.8" y="531.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1081.8" y="542.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.05%)</title><rect x="1078.8" y="515.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1081.8" y="526.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.05%)</title><rect x="1078.8" y="499.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1081.8" y="510.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.05%)</title><rect x="1078.8" y="483.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1081.8" y="494.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1079.3" y="675.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1082.3" y="686.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.05%)</title><rect x="1079.3" y="659.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1082.3" y="670.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.05%)</title><rect x="1079.3" y="643.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1082.3" y="654.0"></text>
</g>
<g>
<title>CompilerThread::current() (1 samples, 0.05%)</title><rect x="1079.3" y="627.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1082.3" y="638.0"></text>
</g>
<g>
<title>JavaThread::current() (1 samples, 0.05%)</title><rect x="1079.3" y="611.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1082.3" y="622.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.05%)</title><rect x="1079.3" y="595.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1082.3" y="606.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="1079.3" y="579.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1082.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1079.9" y="707.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1082.9" y="718.0"></text>
</g>
<g>
<title>Parse::add_safepoint() (1 samples, 0.05%)</title><rect x="1079.9" y="691.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1082.9" y="702.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1079.9" y="675.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1082.9" y="686.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.05%)</title><rect x="1079.9" y="659.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1082.9" y="670.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.05%)</title><rect x="1079.9" y="643.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1082.9" y="654.0"></text>
</g>
<g>
<title>Parse::make_node_notes(Node_Notes*) (1 samples, 0.05%)</title><rect x="1080.5" y="739.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1083.5" y="750.0"></text>
</g>
<g>
<title>JVMState::JVMState(ciMethod*, JVMState*) (1 samples, 0.05%)</title><rect x="1080.5" y="723.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1083.5" y="734.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (6 samples, 0.28%)</title><rect x="1081.0" y="771.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1084.0" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.28%)</title><rect x="1081.0" y="755.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1084.0" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.28%)</title><rect x="1081.0" y="739.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.28%)</title><rect x="1081.0" y="723.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1084.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.28%)</title><rect x="1081.0" y="707.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1084.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.28%)</title><rect x="1081.0" y="691.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1084.0" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.28%)</title><rect x="1081.0" y="675.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1084.0" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.28%)</title><rect x="1081.0" y="659.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.28%)</title><rect x="1081.0" y="643.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1084.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.28%)</title><rect x="1081.0" y="627.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1084.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.28%)</title><rect x="1081.0" y="611.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1084.0" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.28%)</title><rect x="1081.0" y="595.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1084.0" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.28%)</title><rect x="1081.0" y="579.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1084.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.24%)</title><rect x="1081.0" y="563.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1084.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.24%)</title><rect x="1081.0" y="547.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.24%)</title><rect x="1081.0" y="531.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1084.0" y="542.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="1081.0" y="515.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1084.0" y="526.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.05%)</title><rect x="1081.0" y="499.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1084.0" y="510.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.05%)</title><rect x="1081.0" y="483.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1084.0" y="494.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.05%)</title><rect x="1081.0" y="467.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1084.0" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.05%)</title><rect x="1081.0" y="451.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1084.0" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.05%)</title><rect x="1081.0" y="435.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1084.0" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1081.0" y="419.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1084.0" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1081.0" y="403.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1084.0" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1081.0" y="387.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1084.0" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.05%)</title><rect x="1081.0" y="371.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1084.0" y="382.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="1081.0" y="355.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1084.0" y="366.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1081.0" y="339.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1084.0" y="350.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1081.0" y="323.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1084.0" y="334.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1081.0" y="307.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.0" y="318.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1081.0" y="291.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1084.0" y="302.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.05%)</title><rect x="1081.0" y="275.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1084.0" y="286.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.05%)</title><rect x="1081.0" y="259.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1084.0" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.19%)</title><rect x="1081.6" y="515.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1084.6" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.19%)</title><rect x="1081.6" y="499.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1084.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.19%)</title><rect x="1081.6" y="483.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1084.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.19%)</title><rect x="1081.6" y="467.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1084.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.14%)</title><rect x="1081.6" y="451.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1084.6" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.14%)</title><rect x="1081.6" y="435.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1084.6" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.14%)</title><rect x="1081.6" y="419.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1084.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.14%)</title><rect x="1081.6" y="403.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1084.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.14%)</title><rect x="1081.6" y="387.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1084.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1081.6" y="371.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1084.6" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1081.6" y="355.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1084.6" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1081.6" y="339.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1084.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1081.6" y="323.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1084.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1081.6" y="307.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1084.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1081.6" y="291.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1084.6" y="302.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1081.6" y="275.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1084.6" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1081.6" y="259.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1084.6" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1081.6" y="243.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1084.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1081.6" y="227.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1084.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1081.6" y="211.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1084.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1081.6" y="195.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.6" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1081.6" y="179.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1084.6" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1081.6" y="163.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1084.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1081.6" y="147.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1084.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1081.6" y="131.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1084.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.05%)</title><rect x="1081.6" y="115.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1084.6" y="126.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.05%)</title><rect x="1081.6" y="99.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1084.6" y="110.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.05%)</title><rect x="1081.6" y="83.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1084.6" y="94.0"></text>
</g>
<g>
<title>GraphKit::create_and_map_if(Node*, Node*, float, float) (1 samples, 0.05%)</title><rect x="1081.6" y="67.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1084.6" y="78.0"></text>
</g>
<g>
<title>IfNode::IfNode(Node*, Node*, float, float) (1 samples, 0.05%)</title><rect x="1081.6" y="51.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1084.6" y="62.0"></text>
</g>
<g>
<title>Node::init_class_id(unsigned short) (1 samples, 0.05%)</title><rect x="1081.6" y="35.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1084.6" y="46.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.05%)</title><rect x="1082.1" y="371.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1085.1" y="382.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.05%)</title><rect x="1082.1" y="355.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1085.1" y="366.0"></text>
</g>
<g>
<title>GraphKit::gen_subtype_check(Node*, Node*) (1 samples, 0.05%)</title><rect x="1082.1" y="339.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1085.1" y="350.0"></text>
</g>
<g>
<title>Phase::gen_subtype_check(Node*, Node*, Node**, MergeMemNode*, PhaseGVN*) (1 samples, 0.05%)</title><rect x="1082.1" y="323.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1085.1" y="334.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.05%)</title><rect x="1082.1" y="307.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1085.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.05%)</title><rect x="1082.7" y="371.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1085.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.05%)</title><rect x="1082.7" y="355.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1085.7" y="366.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.05%)</title><rect x="1082.7" y="339.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1085.7" y="350.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.05%)</title><rect x="1082.7" y="323.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1085.7" y="334.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.05%)</title><rect x="1082.7" y="307.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1085.7" y="318.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.05%)</title><rect x="1082.7" y="291.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1085.7" y="302.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="1082.7" y="275.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1085.7" y="286.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1082.7" y="259.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1085.7" y="270.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.05%)</title><rect x="1082.7" y="243.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1085.7" y="254.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.05%)</title><rect x="1082.7" y="227.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1085.7" y="238.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.05%)</title><rect x="1082.7" y="211.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1085.7" y="222.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.05%)</title><rect x="1082.7" y="195.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1085.7" y="206.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.05%)</title><rect x="1082.7" y="179.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1085.7" y="190.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.05%)</title><rect x="1082.7" y="163.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1085.7" y="174.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.05%)</title><rect x="1082.7" y="147.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1085.7" y="158.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1082.7" y="131.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1085.7" y="142.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.05%)</title><rect x="1083.2" y="451.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1086.2" y="462.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.05%)</title><rect x="1083.2" y="435.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1086.2" y="446.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.05%)</title><rect x="1083.2" y="419.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1086.2" y="430.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.05%)</title><rect x="1083.2" y="403.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1086.2" y="414.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1083.2" y="387.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1086.2" y="398.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.05%)</title><rect x="1083.2" y="371.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1086.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_method_entry() (1 samples, 0.05%)</title><rect x="1083.8" y="563.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1086.8" y="574.0"></text>
</g>
<g>
<title>GraphKit::shared_lock(Node*) (1 samples, 0.05%)</title><rect x="1083.8" y="547.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1086.8" y="558.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="1083.8" y="531.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1086.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (3 samples, 0.14%)</title><rect x="1084.3" y="787.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1087.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (3 samples, 0.14%)</title><rect x="1084.3" y="771.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1087.3" y="782.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long long) (2 samples, 0.09%)</title><rect x="1084.3" y="755.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1087.3" y="766.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (2 samples, 0.09%)</title><rect x="1084.3" y="739.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1087.3" y="750.0"></text>
</g>
<g>
<title>C2AccessFence::~C2AccessFence() (1 samples, 0.05%)</title><rect x="1084.3" y="723.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1087.3" y="734.0"></text>
</g>
<g>
<title>MemBarNode::make(Compile*, int, int, Node*) (1 samples, 0.05%)</title><rect x="1084.3" y="707.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1087.3" y="718.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.05%)</title><rect x="1084.9" y="723.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1087.9" y="734.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.05%)</title><rect x="1084.9" y="707.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1087.9" y="718.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.05%)</title><rect x="1084.9" y="691.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1087.9" y="702.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.05%)</title><rect x="1084.9" y="675.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1087.9" y="686.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="1084.9" y="659.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1087.9" y="670.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1084.9" y="643.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1087.9" y="654.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1084.9" y="627.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1087.9" y="638.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.05%)</title><rect x="1084.9" y="611.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1087.9" y="622.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.05%)</title><rect x="1084.9" y="595.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1087.9" y="606.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.05%)</title><rect x="1084.9" y="579.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1087.9" y="590.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.05%)</title><rect x="1084.9" y="563.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1087.9" y="574.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="1085.5" y="755.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1088.5" y="766.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="1085.5" y="739.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1088.5" y="750.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.05%)</title><rect x="1085.5" y="723.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1088.5" y="734.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.05%)</title><rect x="1085.5" y="707.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1088.5" y="718.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.05%)</title><rect x="1085.5" y="691.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1088.5" y="702.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_boxed_value_offset(int) const (1 samples, 0.05%)</title><rect x="1085.5" y="675.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1088.5" y="686.0"></text>
</g>
<g>
<title>SystemDictionary::box_klass_type(Klass*) (1 samples, 0.05%)</title><rect x="1085.5" y="659.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1088.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.05%)</title><rect x="1086.0" y="787.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1089.0" y="798.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="1086.0" y="771.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1089.0" y="782.0"></text>
</g>
<g>
<title>BoolNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1086.0" y="755.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1089.0" y="766.0"></text>
</g>
<g>
<title>BoolNode::fold_cmpI(PhaseGVN*, SubNode*, Node*, int, int, TypeInt const*) (1 samples, 0.05%)</title><rect x="1086.0" y="739.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1089.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.09%)</title><rect x="1086.6" y="787.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1089.6" y="798.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.05%)</title><rect x="1086.6" y="771.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1089.6" y="782.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.05%)</title><rect x="1086.6" y="755.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1089.6" y="766.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="1086.6" y="739.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1089.6" y="750.0"></text>
</g>
<g>
<title>ConstraintCastNode::Value(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="1086.6" y="723.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1089.6" y="734.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.05%)</title><rect x="1086.6" y="707.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1089.6" y="718.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.05%)</title><rect x="1086.6" y="691.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1089.6" y="702.0"></text>
</g>
<g>
<title>TypeAryPtr::xmeet_helper(Type const*) const (1 samples, 0.05%)</title><rect x="1086.6" y="675.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1089.6" y="686.0"></text>
</g>
<g>
<title>TypeAryPtr::make(TypePtr::PTR, ciObject*, TypeAry const*, ciKlass*, bool, int, int, TypePtr const*, int, bool) (1 samples, 0.05%)</title><rect x="1086.6" y="659.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1089.6" y="670.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.05%)</title><rect x="1086.6" y="643.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1089.6" y="654.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.05%)</title><rect x="1087.1" y="771.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1090.1" y="782.0"></text>
</g>
<g>
<title>Parse::merge_memory_edges(MergeMemNode*, int, bool) (1 samples, 0.05%)</title><rect x="1087.1" y="755.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1090.1" y="766.0"></text>
</g>
<g>
<title>Parse::ensure_memory_phi(int, bool) (1 samples, 0.05%)</title><rect x="1087.1" y="739.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1090.1" y="750.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1087.1" y="723.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1090.1" y="734.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.05%)</title><rect x="1087.1" y="707.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1090.1" y="718.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.05%)</title><rect x="1087.1" y="691.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1090.1" y="702.0"></text>
</g>
<g>
<title>CompilerThread::env() (1 samples, 0.05%)</title><rect x="1087.1" y="675.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1090.1" y="686.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.14%)</title><rect x="1087.7" y="851.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1090.7" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.14%)</title><rect x="1087.7" y="835.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1090.7" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.14%)</title><rect x="1087.7" y="819.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1090.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.14%)</title><rect x="1087.7" y="803.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1090.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.14%)</title><rect x="1087.7" y="787.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1090.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.14%)</title><rect x="1087.7" y="771.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1090.7" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.14%)</title><rect x="1087.7" y="755.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1090.7" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.14%)</title><rect x="1087.7" y="739.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1090.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.14%)</title><rect x="1087.7" y="723.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1090.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.14%)</title><rect x="1087.7" y="707.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.14%)</title><rect x="1087.7" y="691.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1090.7" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.09%)</title><rect x="1087.7" y="675.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1090.7" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.09%)</title><rect x="1087.7" y="659.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1090.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.09%)</title><rect x="1087.7" y="643.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.09%)</title><rect x="1087.7" y="627.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1090.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.09%)</title><rect x="1087.7" y="611.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1090.7" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.09%)</title><rect x="1087.7" y="595.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1090.7" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.09%)</title><rect x="1087.7" y="579.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1090.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.09%)</title><rect x="1087.7" y="563.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1090.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.09%)</title><rect x="1087.7" y="547.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1090.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.09%)</title><rect x="1087.7" y="531.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1090.7" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.09%)</title><rect x="1087.7" y="515.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1090.7" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.09%)</title><rect x="1087.7" y="499.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1090.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.09%)</title><rect x="1087.7" y="483.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1090.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.09%)</title><rect x="1087.7" y="467.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1090.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1087.7" y="451.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1090.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1087.7" y="435.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1090.7" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1087.7" y="419.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1090.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1087.7" y="403.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1090.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1087.7" y="387.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1090.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1087.7" y="371.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.7" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1087.7" y="355.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1090.7" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1087.7" y="339.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1090.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1087.7" y="323.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1090.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1087.7" y="307.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1090.7" y="318.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.05%)</title><rect x="1087.7" y="291.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1090.7" y="302.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.05%)</title><rect x="1087.7" y="275.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1090.7" y="286.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.05%)</title><rect x="1087.7" y="259.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1090.7" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::uncommon_trap_Type() (1 samples, 0.05%)</title><rect x="1087.7" y="243.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1090.7" y="254.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.05%)</title><rect x="1087.7" y="227.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1090.7" y="238.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.05%)</title><rect x="1087.7" y="211.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1090.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.05%)</title><rect x="1088.2" y="451.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1091.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.05%)</title><rect x="1088.2" y="435.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1091.2" y="446.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.05%)</title><rect x="1088.2" y="419.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1091.2" y="430.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.05%)</title><rect x="1088.2" y="403.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1091.2" y="414.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.05%)</title><rect x="1088.2" y="387.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1091.2" y="398.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.05%)</title><rect x="1088.2" y="371.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1091.2" y="382.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="1088.2" y="355.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1091.2" y="366.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseGVN*) (1 samples, 0.05%)</title><rect x="1088.2" y="339.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1091.2" y="350.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.05%)</title><rect x="1088.2" y="323.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1091.2" y="334.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.05%)</title><rect x="1088.2" y="307.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1091.2" y="318.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.05%)</title><rect x="1088.2" y="291.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1091.2" y="302.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.05%)</title><rect x="1088.2" y="275.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1091.2" y="286.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.05%)</title><rect x="1088.2" y="259.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1091.2" y="270.0"></text>
</g>
<g>
<title>SystemDictionary::box_klass_type(Klass*) (1 samples, 0.05%)</title><rect x="1088.2" y="243.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1091.2" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1088.8" y="675.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1091.8" y="686.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.05%)</title><rect x="1088.8" y="659.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1091.8" y="670.0"></text>
</g>
<g>
<title>GraphKit::load_object_klass(Node*) (1 samples, 0.05%)</title><rect x="1088.8" y="643.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1091.8" y="654.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="1088.8" y="627.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1091.8" y="638.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="1088.8" y="611.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1091.8" y="622.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.05%)</title><rect x="1088.8" y="595.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1091.8" y="606.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.05%)</title><rect x="1088.8" y="579.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1091.8" y="590.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.05%)</title><rect x="1088.8" y="563.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1091.8" y="574.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.05%)</title><rect x="1088.8" y="547.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1091.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.05%)</title><rect x="1089.3" y="867.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1092.3" y="878.0"></text>
</g>
<g>
<title>Parse::adjust_map_after_if(BoolTest::mask, Node*, float, Parse::Block*, Parse::Block*) (1 samples, 0.05%)</title><rect x="1089.3" y="851.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1092.3" y="862.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.05%)</title><rect x="1089.3" y="835.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1092.3" y="846.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.05%)</title><rect x="1089.3" y="819.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.3" y="830.0"></text>
</g>
<g>
<title>TypeInt::make(int, int, int) (1 samples, 0.05%)</title><rect x="1089.3" y="803.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1092.3" y="814.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (6 samples, 0.28%)</title><rect x="1089.9" y="931.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1092.9" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.28%)</title><rect x="1089.9" y="915.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1092.9" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.28%)</title><rect x="1089.9" y="899.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1092.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.28%)</title><rect x="1089.9" y="883.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1092.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.28%)</title><rect x="1089.9" y="867.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.28%)</title><rect x="1089.9" y="851.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1092.9" y="862.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.09%)</title><rect x="1089.9" y="835.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.9" y="846.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.09%)</title><rect x="1089.9" y="819.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1092.9" y="830.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (2 samples, 0.09%)</title><rect x="1089.9" y="803.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1092.9" y="814.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.09%)</title><rect x="1089.9" y="787.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1092.9" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.05%)</title><rect x="1089.9" y="771.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1092.9" y="782.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.05%)</title><rect x="1089.9" y="755.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1092.9" y="766.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.05%)</title><rect x="1089.9" y="739.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1092.9" y="750.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.05%)</title><rect x="1089.9" y="723.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1092.9" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.05%)</title><rect x="1090.5" y="771.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1093.5" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.05%)</title><rect x="1090.5" y="755.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1093.5" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1090.5" y="739.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.5" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1090.5" y="723.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1093.5" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1090.5" y="707.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1093.5" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.14%)</title><rect x="1091.0" y="835.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1094.0" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.14%)</title><rect x="1091.0" y="819.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1094.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.14%)</title><rect x="1091.0" y="803.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1094.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.14%)</title><rect x="1091.0" y="787.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1094.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.14%)</title><rect x="1091.0" y="771.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1094.0" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.09%)</title><rect x="1091.0" y="755.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1094.0" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.09%)</title><rect x="1091.0" y="739.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1094.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.09%)</title><rect x="1091.0" y="723.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1094.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.09%)</title><rect x="1091.0" y="707.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1094.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.09%)</title><rect x="1091.0" y="691.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1094.0" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.09%)</title><rect x="1091.0" y="675.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1094.0" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.09%)</title><rect x="1091.0" y="659.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1094.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.09%)</title><rect x="1091.0" y="643.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1094.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.09%)</title><rect x="1091.0" y="627.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1094.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.05%)</title><rect x="1091.0" y="611.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1094.0" y="622.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.05%)</title><rect x="1091.0" y="595.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1094.0" y="606.0"></text>
</g>
<g>
<title>ciField::will_link(ciMethod*, Bytecodes::Code) (1 samples, 0.05%)</title><rect x="1091.0" y="579.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1094.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1091.6" y="611.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1094.6" y="622.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="1091.6" y="595.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1094.6" y="606.0"></text>
</g>
<g>
<title>CmpINode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1091.6" y="579.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1094.6" y="590.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.05%)</title><rect x="1091.6" y="563.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1094.6" y="574.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1092.1" y="755.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1095.1" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1092.1" y="739.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.1" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1092.1" y="723.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1095.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1092.1" y="707.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1095.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1092.1" y="691.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1095.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1092.1" y="675.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.1" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1092.1" y="659.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1095.1" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1092.1" y="643.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1095.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1092.1" y="627.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1095.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1092.1" y="611.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1095.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1092.1" y="595.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.1" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1092.1" y="579.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.1" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1092.1" y="563.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1095.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1092.1" y="547.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1095.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1092.1" y="531.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1095.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1092.1" y="515.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1095.1" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1092.1" y="499.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1095.1" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1092.1" y="483.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1092.1" y="467.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1095.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1092.1" y="451.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1095.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1092.1" y="435.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1095.1" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1092.1" y="419.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1095.1" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1092.1" y="403.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1095.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1092.1" y="387.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1095.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1092.1" y="371.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1095.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1092.1" y="355.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.1" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1092.1" y="339.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1095.1" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1092.1" y="323.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1095.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1092.1" y="307.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1092.1" y="291.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1095.1" y="302.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.05%)</title><rect x="1092.1" y="275.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1095.1" y="286.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.05%)</title><rect x="1092.1" y="259.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1095.1" y="270.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.05%)</title><rect x="1092.1" y="243.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1095.1" y="254.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.05%)</title><rect x="1092.1" y="227.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.1" y="238.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1092.1" y="211.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1095.1" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1092.7" y="835.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1095.7" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1092.7" y="819.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1095.7" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1092.7" y="803.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1092.7" y="787.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1095.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1092.7" y="771.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1095.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1092.7" y="755.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1095.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.05%)</title><rect x="1092.7" y="739.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1095.7" y="750.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.05%)</title><rect x="1092.7" y="723.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1095.7" y="734.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="1092.7" y="707.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1095.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.05%)</title><rect x="1093.2" y="947.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1096.2" y="958.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.05%)</title><rect x="1093.2" y="931.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1096.2" y="942.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="1093.2" y="915.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1096.2" y="926.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.05%)</title><rect x="1093.2" y="899.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1096.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (3 samples, 0.14%)</title><rect x="1093.8" y="947.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1096.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (2 samples, 0.09%)</title><rect x="1093.8" y="931.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1096.8" y="942.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long long) (2 samples, 0.09%)</title><rect x="1093.8" y="915.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1096.8" y="926.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (2 samples, 0.09%)</title><rect x="1093.8" y="899.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1096.8" y="910.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (2 samples, 0.09%)</title><rect x="1093.8" y="883.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1096.8" y="894.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (2 samples, 0.09%)</title><rect x="1093.8" y="867.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1096.8" y="878.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (2 samples, 0.09%)</title><rect x="1093.8" y="851.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1096.8" y="862.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (2 samples, 0.09%)</title><rect x="1093.8" y="835.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.8" y="846.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (2 samples, 0.09%)</title><rect x="1093.8" y="819.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1096.8" y="830.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (2 samples, 0.09%)</title><rect x="1093.8" y="803.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.8" y="814.0"></text>
</g>
<g>
<title>TypePtr::empty() const (2 samples, 0.09%)</title><rect x="1093.8" y="787.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1096.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.05%)</title><rect x="1094.9" y="931.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1097.9" y="942.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.05%)</title><rect x="1094.9" y="915.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1097.9" y="926.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.05%)</title><rect x="1094.9" y="899.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.9" y="910.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.05%)</title><rect x="1094.9" y="883.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1097.9" y="894.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.05%)</title><rect x="1094.9" y="867.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1097.9" y="878.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1094.9" y="851.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1097.9" y="862.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.05%)</title><rect x="1094.9" y="835.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1097.9" y="846.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.09%)</title><rect x="1095.5" y="1011.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1098.5" y="1022.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.05%)</title><rect x="1095.5" y="995.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1098.5" y="1006.0"></text>
</g>
<g>
<title>NodeHash::remove_useless_nodes(VectorSet&amp;) (1 samples, 0.05%)</title><rect x="1096.0" y="995.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1099.0" y="1006.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (3 samples, 0.14%)</title><rect x="1096.6" y="1011.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1099.6" y="1022.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.05%)</title><rect x="1096.6" y="995.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1099.6" y="1006.0"></text>
</g>
<g>
<title>CodeBuffer::finalize_oop_references(methodHandle const&amp;) (1 samples, 0.05%)</title><rect x="1096.6" y="979.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1099.6" y="990.0"></text>
</g>
<g>
<title>append_oop_references(GrowableArray&lt;oopDesc*&gt;*, Klass*) (1 samples, 0.05%)</title><rect x="1096.6" y="963.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1099.6" y="974.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (2 samples, 0.09%)</title><rect x="1097.1" y="995.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1100.1" y="1006.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.05%)</title><rect x="1097.1" y="979.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1100.1" y="990.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.05%)</title><rect x="1097.7" y="979.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1100.7" y="990.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.05%)</title><rect x="1097.7" y="963.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1100.7" y="974.0"></text>
</g>
<g>
<title>CompilationLog::log_compile(JavaThread*, CompileTask*) (1 samples, 0.05%)</title><rect x="1098.2" y="1043.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1101.2" y="1054.0"></text>
</g>
<g>
<title>CompileTask::print(outputStream*, char const*, bool, bool) (1 samples, 0.05%)</title><rect x="1098.2" y="1027.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1101.2" y="1038.0"></text>
</g>
<g>
<title>Method::print_short_name(outputStream*) (1 samples, 0.05%)</title><rect x="1098.2" y="1011.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1101.2" y="1022.0"></text>
</g>
<g>
<title>CompilationLog::log_nmethod(JavaThread*, nmethod*) (1 samples, 0.05%)</title><rect x="1098.8" y="1043.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1101.8" y="1054.0"></text>
</g>
<g>
<title>StringEventLog::log(Thread*, char const*, ...) (1 samples, 0.05%)</title><rect x="1098.8" y="1027.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1101.8" y="1038.0"></text>
</g>
<g>
<title>StringEventLog::logv(Thread*, char const*, __va_list_tag*) (1 samples, 0.05%)</title><rect x="1098.8" y="1011.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1101.8" y="1022.0"></text>
</g>
<g>
<title>os::elapsedTime() (1 samples, 0.05%)</title><rect x="1098.8" y="995.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1101.8" y="1006.0"></text>
</g>
<g>
<title>_res (1 samples, 0.05%)</title><rect x="1098.8" y="979.0" width="0.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1101.8" y="990.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (90 samples, 4.24%)</title><rect x="1099.4" y="1043.0" width="50.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1102.4" y="1054.0">Compi..</text>
</g>
<g>
<title>CodeBuffer::~CodeBuffer() (1 samples, 0.05%)</title><rect x="1099.4" y="1027.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1102.4" y="1038.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.05%)</title><rect x="1099.4" y="1011.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1102.4" y="1022.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (89 samples, 4.19%)</title><rect x="1099.9" y="1027.0" width="49.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1102.9" y="1038.0">Compi..</text>
</g>
<g>
<title>Compilation::compile_method() (89 samples, 4.19%)</title><rect x="1099.9" y="1011.0" width="49.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1102.9" y="1022.0">Compi..</text>
</g>
<g>
<title>Compilation::compile_java_method() (78 samples, 3.68%)</title><rect x="1099.9" y="995.0" width="43.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1102.9" y="1006.0">Comp..</text>
</g>
<g>
<title>Compilation::build_hir() (49 samples, 2.31%)</title><rect x="1099.9" y="979.0" width="27.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1102.9" y="990.0">C..</text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (2 samples, 0.09%)</title><rect x="1099.9" y="963.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1102.9" y="974.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (45 samples, 2.12%)</title><rect x="1101.0" y="963.0" width="25.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.0" y="974.0">I..</text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (45 samples, 2.12%)</title><rect x="1101.0" y="947.0" width="25.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1104.0" y="958.0">I..</text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (44 samples, 2.07%)</title><rect x="1101.0" y="931.0" width="24.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.0" y="942.0">G..</text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.05%)</title><rect x="1101.0" y="915.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1104.0" y="926.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.05%)</title><rect x="1101.0" y="899.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1104.0" y="910.0"></text>
</g>
<g>
<title>BlockListBuilder::make_block_at(int, BlockBegin*) (1 samples, 0.05%)</title><rect x="1101.0" y="883.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1104.0" y="894.0"></text>
</g>
<g>
<title>BlockBegin::BlockBegin(int) (1 samples, 0.05%)</title><rect x="1101.0" y="867.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1104.0" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (42 samples, 1.98%)</title><rect x="1101.6" y="915.0" width="23.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1104.6" y="926.0">G..</text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (41 samples, 1.93%)</title><rect x="1102.1" y="899.0" width="22.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1105.1" y="910.0">G..</text>
</g>
<g>
<title>BlockBegin::set_end(BlockEnd*) (1 samples, 0.05%)</title><rect x="1102.7" y="883.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1105.7" y="894.0"></text>
</g>
<g>
<title>BlockBegin::try_merge(ValueStack*) (2 samples, 0.09%)</title><rect x="1103.3" y="883.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.3" y="894.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (2 samples, 0.09%)</title><rect x="1103.3" y="867.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1106.3" y="878.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (2 samples, 0.09%)</title><rect x="1103.3" y="851.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1106.3" y="862.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.05%)</title><rect x="1103.8" y="835.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.8" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (2 samples, 0.09%)</title><rect x="1104.4" y="883.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1107.4" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.05%)</title><rect x="1104.4" y="867.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1107.4" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::handle_exception(Instruction*) (1 samples, 0.05%)</title><rect x="1104.4" y="851.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1107.4" y="862.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.05%)</title><rect x="1104.9" y="867.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1107.9" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="1104.9" y="851.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1107.9" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="1104.9" y="835.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1107.9" y="846.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="1104.9" y="819.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1107.9" y="830.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.05%)</title><rect x="1104.9" y="803.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1107.9" y="814.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.05%)</title><rect x="1104.9" y="787.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.9" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::check_cast(int) (1 samples, 0.05%)</title><rect x="1105.5" y="883.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1108.5" y="894.0"></text>
</g>
<g>
<title>ValueMap::find_insert(Instruction*) (1 samples, 0.05%)</title><rect x="1105.5" y="867.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1108.5" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (32 samples, 1.51%)</title><rect x="1106.0" y="883.0" width="17.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1109.0" y="894.0"></text>
</g>
<g>
<title>Dependencies::assert_common_1(Dependencies::DepType, ciBaseObject*) (1 samples, 0.05%)</title><rect x="1106.0" y="867.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1109.0" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (23 samples, 1.08%)</title><rect x="1106.6" y="867.0" width="12.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1109.6" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (23 samples, 1.08%)</title><rect x="1106.6" y="851.0" width="12.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1109.6" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (15 samples, 0.71%)</title><rect x="1106.6" y="835.0" width="8.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1109.6" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (15 samples, 0.71%)</title><rect x="1106.6" y="819.0" width="8.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1109.6" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (14 samples, 0.66%)</title><rect x="1106.6" y="803.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1109.6" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::null_check(Instruction*) (1 samples, 0.05%)</title><rect x="1106.6" y="787.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.6" y="798.0"></text>
</g>
<g>
<title>ObjectType::base() const (1 samples, 0.05%)</title><rect x="1106.6" y="771.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1109.6" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (11 samples, 0.52%)</title><rect x="1107.1" y="787.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.1" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (11 samples, 0.52%)</title><rect x="1107.1" y="771.0" width="6.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1110.1" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (8 samples, 0.38%)</title><rect x="1107.1" y="755.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1110.1" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (8 samples, 0.38%)</title><rect x="1107.1" y="739.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.1" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (2 samples, 0.09%)</title><rect x="1107.1" y="723.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1110.1" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.05%)</title><rect x="1107.1" y="707.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1110.1" y="718.0"></text>
</g>
<g>
<title>ValueMap::find_insert(Instruction*) (1 samples, 0.05%)</title><rect x="1107.1" y="691.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.1" y="702.0"></text>
</g>
<g>
<title>ciInstanceKlass::java_mirror() (1 samples, 0.05%)</title><rect x="1107.7" y="707.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.7" y="718.0"></text>
</g>
<g>
<title>ciKlass::java_mirror() (1 samples, 0.05%)</title><rect x="1107.7" y="691.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.7" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (6 samples, 0.28%)</title><rect x="1108.3" y="723.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.3" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (3 samples, 0.14%)</title><rect x="1108.3" y="707.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1111.3" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (3 samples, 0.14%)</title><rect x="1108.3" y="691.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.3" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.14%)</title><rect x="1108.3" y="675.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1111.3" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.14%)</title><rect x="1108.3" y="659.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1111.3" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.09%)</title><rect x="1108.3" y="643.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1111.3" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.05%)</title><rect x="1108.3" y="627.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1111.3" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.05%)</title><rect x="1108.3" y="611.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1111.3" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.05%)</title><rect x="1108.3" y="595.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.3" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.05%)</title><rect x="1108.3" y="579.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1111.3" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.05%)</title><rect x="1108.3" y="563.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1111.3" y="574.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="1108.3" y="547.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1111.3" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1108.3" y="531.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.3" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1108.3" y="515.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1111.3" y="526.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1108.3" y="499.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1111.3" y="510.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="1108.8" y="627.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1111.8" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1108.8" y="611.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.8" y="622.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1108.8" y="595.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1111.8" y="606.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciMetadata*&gt;::insert_before(int, ciMetadata* const&amp;) (1 samples, 0.05%)</title><rect x="1108.8" y="579.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1111.8" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::method_return(Instruction*, bool) (1 samples, 0.05%)</title><rect x="1109.4" y="643.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.4" y="654.0"></text>
</g>
<g>
<title>ValueStack::copy_for_parsing() (1 samples, 0.05%)</title><rect x="1109.4" y="627.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1112.4" y="638.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.05%)</title><rect x="1109.4" y="611.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1112.4" y="622.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.05%)</title><rect x="1109.4" y="595.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1112.4" y="606.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1109.4" y="579.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1112.4" y="590.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (3 samples, 0.14%)</title><rect x="1109.9" y="707.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1112.9" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (3 samples, 0.14%)</title><rect x="1109.9" y="691.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.9" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1109.9" y="675.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1112.9" y="686.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1109.9" y="659.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.9" y="670.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (2 samples, 0.09%)</title><rect x="1110.5" y="675.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1113.5" y="686.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (2 samples, 0.09%)</title><rect x="1110.5" y="659.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1113.5" y="670.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (2 samples, 0.09%)</title><rect x="1110.5" y="643.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1113.5" y="654.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (2 samples, 0.09%)</title><rect x="1110.5" y="627.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1113.5" y="638.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.05%)</title><rect x="1110.5" y="611.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1113.5" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.05%)</title><rect x="1110.5" y="595.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1113.5" y="606.0"></text>
</g>
<g>
<title>methodHandle::methodHandle(methodHandle const&amp;) (1 samples, 0.05%)</title><rect x="1111.0" y="611.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1114.0" y="622.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.05%)</title><rect x="1111.0" y="595.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1114.0" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (2 samples, 0.09%)</title><rect x="1111.6" y="755.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.6" y="766.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.05%)</title><rect x="1111.6" y="739.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1114.6" y="750.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.05%)</title><rect x="1111.6" y="723.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1114.6" y="734.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.05%)</title><rect x="1111.6" y="707.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1114.6" y="718.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.05%)</title><rect x="1111.6" y="691.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1114.6" y="702.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::BasicBlock(MethodLiveness*, int, int) (1 samples, 0.05%)</title><rect x="1111.6" y="675.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1114.6" y="686.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.05%)</title><rect x="1112.1" y="739.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1115.1" y="750.0"></text>
</g>
<g>
<title>GrowableArray&lt;IRScope*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.05%)</title><rect x="1112.1" y="723.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1115.1" y="734.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1112.1" y="707.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1115.1" y="718.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.05%)</title><rect x="1112.1" y="691.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1115.1" y="702.0"></text>
</g>
<g>
<title>ciMethod::has_jsrs() const (1 samples, 0.05%)</title><rect x="1112.7" y="755.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1115.7" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="1112.7" y="739.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1115.7" y="750.0"></text>
</g>
<g>
<title>mask_bits_are_true(long, long) (1 samples, 0.05%)</title><rect x="1112.7" y="723.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1115.7" y="734.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (2 samples, 0.09%)</title><rect x="1113.3" y="787.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.3" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 0.09%)</title><rect x="1113.3" y="771.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.3" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (2 samples, 0.09%)</title><rect x="1113.3" y="755.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.3" y="766.0"></text>
</g>
<g>
<title>ciInstanceKlass::loader() (1 samples, 0.05%)</title><rect x="1113.8" y="739.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1116.8" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::method_return(Instruction*, bool) (1 samples, 0.05%)</title><rect x="1114.4" y="803.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.4" y="814.0"></text>
</g>
<g>
<title>ciEnv::comp_level() (1 samples, 0.05%)</title><rect x="1114.4" y="787.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1117.4" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (2 samples, 0.09%)</title><rect x="1114.9" y="835.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1117.9" y="846.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (2 samples, 0.09%)</title><rect x="1114.9" y="819.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1117.9" y="830.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (2 samples, 0.09%)</title><rect x="1114.9" y="803.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1117.9" y="814.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (2 samples, 0.09%)</title><rect x="1114.9" y="787.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1117.9" y="798.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (2 samples, 0.09%)</title><rect x="1114.9" y="771.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.9" y="782.0"></text>
</g>
<g>
<title>MethodLiveness::init_gen_kill() (1 samples, 0.05%)</title><rect x="1114.9" y="755.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.9" y="766.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill(ciMethod*) (1 samples, 0.05%)</title><rect x="1114.9" y="739.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1117.9" y="750.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_range(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1114.9" y="723.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.9" y="734.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_single(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1114.9" y="707.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.9" y="718.0"></text>
</g>
<g>
<title>MethodLiveness::propagate_liveness() (1 samples, 0.05%)</title><rect x="1115.5" y="755.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1118.5" y="766.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::propagate(MethodLiveness*) (1 samples, 0.05%)</title><rect x="1115.5" y="739.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.5" y="750.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(IRScope*, ValueStack*) (1 samples, 0.05%)</title><rect x="1116.0" y="835.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1119.0" y="846.0"></text>
</g>
<g>
<title>ciKlass::is_subclass_of(ciKlass*) (1 samples, 0.05%)</title><rect x="1116.6" y="835.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1119.6" y="846.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (4 samples, 0.19%)</title><rect x="1117.2" y="835.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.2" y="846.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="1117.2" y="819.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1120.2" y="830.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.05%)</title><rect x="1117.2" y="803.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1120.2" y="814.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.05%)</title><rect x="1117.2" y="787.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1120.2" y="798.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.05%)</title><rect x="1117.2" y="771.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1120.2" y="782.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (3 samples, 0.14%)</title><rect x="1117.7" y="819.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1120.7" y="830.0"></text>
</g>
<g>
<title>Method::build_interpreter_method_data(methodHandle const&amp;, Thread*) (2 samples, 0.09%)</title><rect x="1117.7" y="803.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1120.7" y="814.0"></text>
</g>
<g>
<title>MethodData::allocate(ClassLoaderData*, methodHandle const&amp;, Thread*) (2 samples, 0.09%)</title><rect x="1117.7" y="787.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1120.7" y="798.0"></text>
</g>
<g>
<title>MethodData::initialize() (2 samples, 0.09%)</title><rect x="1117.7" y="771.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1120.7" y="782.0"></text>
</g>
<g>
<title>BytecodeStream::next() (1 samples, 0.05%)</title><rect x="1117.7" y="755.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1120.7" y="766.0"></text>
</g>
<g>
<title>MethodData::is_speculative_trap_bytecode(Bytecodes::Code) (1 samples, 0.05%)</title><rect x="1118.3" y="755.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1121.3" y="766.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1118.8" y="803.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.8" y="814.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1118.8" y="787.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.8" y="798.0"></text>
</g>
<g>
<title>ciMethodData::ciMethodData(MethodData*) (1 samples, 0.05%)</title><rect x="1118.8" y="771.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.8" y="782.0"></text>
</g>
<g>
<title>ValueNumberingVisitor::do_ProfileCall(ProfileCall*) (1 samples, 0.05%)</title><rect x="1119.4" y="867.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.4" y="878.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.05%)</title><rect x="1119.9" y="867.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1122.9" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1119.9" y="851.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.9" y="862.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.05%)</title><rect x="1119.9" y="835.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.9" y="846.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (5 samples, 0.24%)</title><rect x="1120.5" y="867.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1123.5" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (5 samples, 0.24%)</title><rect x="1120.5" y="851.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1123.5" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (2 samples, 0.09%)</title><rect x="1120.5" y="835.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1123.5" y="846.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle const&amp;, int) (1 samples, 0.05%)</title><rect x="1120.5" y="819.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1123.5" y="830.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;573558ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 573558ull&gt;::oop_access_barrier(oopDesc*, long) (1 samples, 0.05%)</title><rect x="1120.5" y="803.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1123.5" y="814.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1121.0" y="819.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1124.0" y="830.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (2 samples, 0.09%)</title><rect x="1121.6" y="835.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1124.6" y="846.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.05%)</title><rect x="1121.6" y="819.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1124.6" y="830.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.05%)</title><rect x="1121.6" y="803.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.6" y="814.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.05%)</title><rect x="1121.6" y="787.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1124.6" y="798.0"></text>
</g>
<g>
<title>LinkResolver::lookup_polymorphic_method(LinkInfo const&amp;, Handle*, Handle*, Thread*) (1 samples, 0.05%)</title><rect x="1121.6" y="771.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1124.6" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::find_method_handle_intrinsic(vmIntrinsics::ID, Symbol*, Thread*) (1 samples, 0.05%)</title><rect x="1121.6" y="755.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.6" y="766.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle const&amp;) (1 samples, 0.05%)</title><rect x="1121.6" y="739.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1124.6" y="750.0"></text>
</g>
<g>
<title>SharedRuntime::generate_native_wrapper(MacroAssembler*, methodHandle const&amp;, int, BasicType*, VMRegPair*, BasicType) (1 samples, 0.05%)</title><rect x="1121.6" y="723.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1124.6" y="734.0"></text>
</g>
<g>
<title>nmethod::new_native_nmethod(methodHandle const&amp;, int, CodeBuffer*, int, int, int, int, int, OopMapSet*) (1 samples, 0.05%)</title><rect x="1121.6" y="707.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1124.6" y="718.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, CompilerType, int, int, CodeOffsets*, CodeBuffer*, int, int, int, OopMapSet*) (1 samples, 0.05%)</title><rect x="1121.6" y="691.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1124.6" y="702.0"></text>
</g>
<g>
<title>OopRecorder::copy_values_to(nmethod*) (1 samples, 0.05%)</title><rect x="1121.6" y="675.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1124.6" y="686.0"></text>
</g>
<g>
<title>ValueRecorder&lt;_jobject*&gt;::copy_values_to(nmethod*) (1 samples, 0.05%)</title><rect x="1121.6" y="659.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1124.6" y="670.0"></text>
</g>
<g>
<title>ValueRecorder&lt;_jobject*&gt;::maybe_initialize() (1 samples, 0.05%)</title><rect x="1121.6" y="643.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.6" y="654.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1121.6" y="627.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1124.6" y="638.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.05%)</title><rect x="1121.6" y="611.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1124.6" y="622.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(LinkInfo const&amp;) (1 samples, 0.05%)</title><rect x="1122.2" y="819.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.2" y="830.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.05%)</title><rect x="1122.2" y="803.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.2" y="814.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(LinkInfo const&amp;, Thread*) (1 samples, 0.05%)</title><rect x="1122.2" y="787.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.2" y="798.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.05%)</title><rect x="1122.2" y="771.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.2" y="782.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.05%)</title><rect x="1122.2" y="755.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1125.2" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.05%)</title><rect x="1122.2" y="739.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1125.2" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.05%)</title><rect x="1122.2" y="723.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.2" y="734.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.05%)</title><rect x="1122.2" y="707.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1125.2" y="718.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1122.7" y="835.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.7" y="846.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1122.7" y="819.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1125.7" y="830.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1122.7" y="803.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1125.7" y="814.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.05%)</title><rect x="1122.7" y="787.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.7" y="798.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.05%)</title><rect x="1122.7" y="771.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.7" y="782.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.05%)</title><rect x="1122.7" y="755.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.7" y="766.0"></text>
</g>
<g>
<title>SymbolTable::lookup_common(char const*, int, unsigned int) (1 samples, 0.05%)</title><rect x="1122.7" y="739.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.7" y="750.0"></text>
</g>
<g>
<title>SymbolTable::lookup_shared(char const*, int, unsigned int) (1 samples, 0.05%)</title><rect x="1122.7" y="723.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1125.7" y="734.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_leaf_type() (1 samples, 0.05%)</title><rect x="1123.3" y="867.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.3" y="878.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.05%)</title><rect x="1123.3" y="851.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1126.3" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::new_instance(int) (1 samples, 0.05%)</title><rect x="1123.8" y="883.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.8" y="894.0"></text>
</g>
<g>
<title>NewInstance::visit(InstructionVisitor*) (1 samples, 0.05%)</title><rect x="1123.8" y="867.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.8" y="878.0"></text>
</g>
<g>
<title>Instruction::exact_type() const (1 samples, 0.05%)</title><rect x="1124.4" y="883.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1127.4" y="894.0"></text>
</g>
<g>
<title>PhiSimplifier::PhiSimplifier(BlockBegin*) (1 samples, 0.05%)</title><rect x="1124.9" y="915.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.9" y="926.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 0.05%)</title><rect x="1124.9" y="899.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.9" y="910.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.05%)</title><rect x="1124.9" y="883.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1127.9" y="894.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.05%)</title><rect x="1124.9" y="867.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.9" y="878.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.05%)</title><rect x="1124.9" y="851.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.9" y="862.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.05%)</title><rect x="1124.9" y="835.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1127.9" y="846.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.05%)</title><rect x="1124.9" y="819.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.9" y="830.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.05%)</title><rect x="1124.9" y="803.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.9" y="814.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.05%)</title><rect x="1124.9" y="787.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.9" y="798.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.05%)</title><rect x="1124.9" y="771.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1127.9" y="782.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.05%)</title><rect x="1124.9" y="755.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.9" y="766.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.05%)</title><rect x="1124.9" y="739.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1127.9" y="750.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.05%)</title><rect x="1124.9" y="723.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1127.9" y="734.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.05%)</title><rect x="1124.9" y="707.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.9" y="718.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.05%)</title><rect x="1124.9" y="691.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1127.9" y="702.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.05%)</title><rect x="1124.9" y="675.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.9" y="686.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.05%)</title><rect x="1124.9" y="659.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.9" y="670.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.05%)</title><rect x="1124.9" y="643.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.9" y="654.0"></text>
</g>
<g>
<title>PhiSimplifier::block_do(BlockBegin*) (1 samples, 0.05%)</title><rect x="1124.9" y="627.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1127.9" y="638.0"></text>
</g>
<g>
<title>XHandlers::XHandlers(ciMethod*) (1 samples, 0.05%)</title><rect x="1125.5" y="931.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.5" y="942.0"></text>
</g>
<g>
<title>ciMethod::load_code() (1 samples, 0.05%)</title><rect x="1125.5" y="915.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1128.5" y="926.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="1125.5" y="899.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.5" y="910.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.05%)</title><rect x="1125.5" y="883.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1128.5" y="894.0"></text>
</g>
<g>
<title>IR::eliminate_null_checks() (1 samples, 0.05%)</title><rect x="1126.1" y="963.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.1" y="974.0"></text>
</g>
<g>
<title>Optimizer::eliminate_null_checks() (1 samples, 0.05%)</title><rect x="1126.1" y="947.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.1" y="958.0"></text>
</g>
<g>
<title>NullCheckEliminator::iterate_all() (1 samples, 0.05%)</title><rect x="1126.1" y="931.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.1" y="942.0"></text>
</g>
<g>
<title>NullCheckEliminator::iterate_one(BlockBegin*) (1 samples, 0.05%)</title><rect x="1126.1" y="915.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.1" y="926.0"></text>
</g>
<g>
<title>RangeCheckElimination::eliminate(IR*) (1 samples, 0.05%)</title><rect x="1126.6" y="963.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.6" y="974.0"></text>
</g>
<g>
<title>RangeCheckEliminator::RangeCheckEliminator(IR*) (1 samples, 0.05%)</title><rect x="1126.6" y="947.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.6" y="958.0"></text>
</g>
<g>
<title>GrowableArray&lt;RangeCheckEliminator::AccessIndexedInfo*&gt;::GrowableArray(int, int, RangeCheckEliminator::AccessIndexedInfo* const&amp;, bool, MemoryType) (1 samples, 0.05%)</title><rect x="1126.6" y="931.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.6" y="942.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (9 samples, 0.42%)</title><rect x="1127.2" y="979.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.2" y="990.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (2 samples, 0.09%)</title><rect x="1127.2" y="963.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.2" y="974.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_stubs(CodeStubList*) (2 samples, 0.09%)</title><rect x="1127.2" y="947.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.2" y="958.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (2 samples, 0.09%)</title><rect x="1127.2" y="931.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.2" y="942.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (2 samples, 0.09%)</title><rect x="1127.2" y="915.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1130.2" y="926.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (2 samples, 0.09%)</title><rect x="1127.2" y="899.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.2" y="910.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (2 samples, 0.09%)</title><rect x="1127.2" y="883.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.2" y="894.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.05%)</title><rect x="1127.2" y="867.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.2" y="878.0"></text>
</g>
<g>
<title>DebugInformationRecorder::serialize_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.05%)</title><rect x="1127.2" y="851.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.2" y="862.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.05%)</title><rect x="1127.7" y="867.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.7" y="878.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.05%)</title><rect x="1127.7" y="851.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.7" y="862.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.05%)</title><rect x="1127.7" y="835.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.7" y="846.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (7 samples, 0.33%)</title><rect x="1128.3" y="963.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.3" y="974.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_lir_list(LIR_List*) (7 samples, 0.33%)</title><rect x="1128.3" y="947.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.3" y="958.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.05%)</title><rect x="1128.3" y="931.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.3" y="942.0"></text>
</g>
<g>
<title>LIR_Assembler::call(LIR_OpJavaCall*, relocInfo::relocType) (1 samples, 0.05%)</title><rect x="1128.3" y="915.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.3" y="926.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.05%)</title><rect x="1128.3" y="899.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.3" y="910.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.05%)</title><rect x="1128.3" y="883.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.3" y="894.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.05%)</title><rect x="1128.3" y="867.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.3" y="878.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.05%)</title><rect x="1128.3" y="851.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.3" y="862.0"></text>
</g>
<g>
<title>DebugInformationRecorder::serialize_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.05%)</title><rect x="1128.3" y="835.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1131.3" y="846.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op0(LIR_Op0*) (1 samples, 0.05%)</title><rect x="1128.8" y="931.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1131.8" y="942.0"></text>
</g>
<g>
<title>os::extra_bang_size_in_bytes() (1 samples, 0.05%)</title><rect x="1128.8" y="915.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.8" y="926.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (2 samples, 0.09%)</title><rect x="1129.4" y="931.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.4" y="942.0"></text>
</g>
<g>
<title>LIR_Assembler::reg2reg(LIR_OprDesc*, LIR_OprDesc*) (1 samples, 0.05%)</title><rect x="1129.4" y="915.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.4" y="926.0"></text>
</g>
<g>
<title>LIR_Assembler::stack2reg(LIR_OprDesc*, LIR_OprDesc*, BasicType) (1 samples, 0.05%)</title><rect x="1129.9" y="915.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.9" y="926.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (2 samples, 0.09%)</title><rect x="1130.5" y="931.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1133.5" y="942.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (1 samples, 0.05%)</title><rect x="1131.1" y="915.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1134.1" y="926.0"></text>
</g>
<g>
<title>DebugInformationRecorder::add_new_pc_offset(int) (1 samples, 0.05%)</title><rect x="1131.1" y="899.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.1" y="910.0"></text>
</g>
<g>
<title>LIR_OpConvert::emit_code(LIR_Assembler*) (1 samples, 0.05%)</title><rect x="1131.6" y="931.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.6" y="942.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_opConvert(LIR_OpConvert*) (1 samples, 0.05%)</title><rect x="1131.6" y="915.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.6" y="926.0"></text>
</g>
<g>
<title>LIR_OprDesc::as_register() const (1 samples, 0.05%)</title><rect x="1131.6" y="899.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.6" y="910.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (19 samples, 0.90%)</title><rect x="1132.2" y="979.0" width="10.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1135.2" y="990.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (3 samples, 0.14%)</title><rect x="1132.2" y="963.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.2" y="974.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (3 samples, 0.14%)</title><rect x="1132.2" y="947.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1135.2" y="958.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::raw_at_put_grow(int, Instruction* const&amp;, Instruction* const&amp;) (1 samples, 0.05%)</title><rect x="1132.2" y="931.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.2" y="942.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (1 samples, 0.05%)</title><rect x="1132.7" y="931.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.7" y="942.0"></text>
</g>
<g>
<title>LIRGenerator::move_to_phi(ValueStack*) (1 samples, 0.05%)</title><rect x="1132.7" y="915.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.7" y="926.0"></text>
</g>
<g>
<title>PhiResolverState::reset(int) (1 samples, 0.05%)</title><rect x="1132.7" y="899.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.7" y="910.0"></text>
</g>
<g>
<title>GrowableArray&lt;ResolveNode*&gt;::raw_at_put_grow(int, ResolveNode* const&amp;, ResolveNode* const&amp;) (1 samples, 0.05%)</title><rect x="1132.7" y="883.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.7" y="894.0"></text>
</g>
<g>
<title>LIR_List::std_entry(LIR_OprDesc*) (1 samples, 0.05%)</title><rect x="1133.3" y="931.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.3" y="942.0"></text>
</g>
<g>
<title>LIRGenerator::LIRGenerator(Compilation*, ciMethod*) (1 samples, 0.05%)</title><rect x="1133.8" y="963.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.8" y="974.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="1133.8" y="947.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1136.8" y="958.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (15 samples, 0.71%)</title><rect x="1134.4" y="963.0" width="8.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.4" y="974.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (4 samples, 0.19%)</title><rect x="1134.4" y="947.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.4" y="958.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (4 samples, 0.19%)</title><rect x="1134.4" y="931.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.4" y="942.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(IntervalState, int) (2 samples, 0.09%)</title><rect x="1134.4" y="915.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.4" y="926.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (2 samples, 0.09%)</title><rect x="1135.5" y="915.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.5" y="926.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_locked_reg(Interval*) (2 samples, 0.09%)</title><rect x="1135.5" y="899.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.5" y="910.0"></text>
</g>
<g>
<title>LinearScanWalker::spill_block_inactive_fixed(Interval*) (1 samples, 0.05%)</title><rect x="1135.5" y="883.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.5" y="894.0"></text>
</g>
<g>
<title>LinearScanWalker::split_for_spilling(Interval*) (1 samples, 0.05%)</title><rect x="1136.1" y="883.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.1" y="894.0"></text>
</g>
<g>
<title>Interval::split_child_before_op_id(int) (1 samples, 0.05%)</title><rect x="1136.1" y="867.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1139.1" y="878.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (6 samples, 0.28%)</title><rect x="1136.6" y="947.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.6" y="958.0"></text>
</g>
<g>
<title>GrowableArray&lt;Interval*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.05%)</title><rect x="1137.2" y="931.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1140.2" y="942.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1137.2" y="915.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.2" y="926.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1137.2" y="899.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.2" y="910.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1137.2" y="883.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1140.2" y="894.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.05%)</title><rect x="1137.2" y="867.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.2" y="878.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.05%)</title><rect x="1137.2" y="851.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1140.2" y="862.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.05%)</title><rect x="1137.2" y="835.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1140.2" y="846.0"></text>
</g>
<g>
<title>Interval::add_use_pos(int, IntervalUseKind) (1 samples, 0.05%)</title><rect x="1137.7" y="931.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1140.7" y="942.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (2 samples, 0.09%)</title><rect x="1138.3" y="931.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1141.3" y="942.0"></text>
</g>
<g>
<title>LIR_Address::as_address() (1 samples, 0.05%)</title><rect x="1138.3" y="915.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.3" y="926.0"></text>
</g>
<g>
<title>LIR_OpVisitState::append(LIR_OprDesc*&amp;, LIR_OpVisitState::OprMode) (1 samples, 0.05%)</title><rect x="1138.8" y="915.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.8" y="926.0"></text>
</g>
<g>
<title>LinearScan::add_use(int, int, int, IntervalUseKind, BasicType) (1 samples, 0.05%)</title><rect x="1139.4" y="931.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.4" y="942.0"></text>
</g>
<g>
<title>LinearScan::create_interval(int) (1 samples, 0.05%)</title><rect x="1139.4" y="915.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.4" y="926.0"></text>
</g>
<g>
<title>Interval::Interval(int) (1 samples, 0.05%)</title><rect x="1139.4" y="899.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.4" y="910.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.05%)</title><rect x="1139.4" y="883.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.4" y="894.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1139.4" y="867.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.4" y="878.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.05%)</title><rect x="1139.4" y="851.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.4" y="862.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (3 samples, 0.14%)</title><rect x="1140.0" y="947.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.0" y="958.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (2 samples, 0.09%)</title><rect x="1140.5" y="931.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.5" y="942.0"></text>
</g>
<g>
<title>LinearScan::init_compute_debug_info() (1 samples, 0.05%)</title><rect x="1141.6" y="947.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.6" y="958.0"></text>
</g>
<g>
<title>LinearScan::resolve_data_flow() (1 samples, 0.05%)</title><rect x="1142.2" y="947.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.2" y="958.0"></text>
</g>
<g>
<title>LinearScan::resolve_collect_mappings(BlockBegin*, BlockBegin*, MoveResolver&amp;) (1 samples, 0.05%)</title><rect x="1142.2" y="931.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1145.2" y="942.0"></text>
</g>
<g>
<title>LinearScan::split_child_at_op_id(Interval*, int, LIR_OpVisitState::OprMode) (1 samples, 0.05%)</title><rect x="1142.2" y="915.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.2" y="926.0"></text>
</g>
<g>
<title>Interval::split_child_at_op_id(int, LIR_OpVisitState::OprMode) (1 samples, 0.05%)</title><rect x="1142.2" y="899.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.2" y="910.0"></text>
</g>
<g>
<title>FrameMap::FrameMap(ciMethod*, int, int) (1 samples, 0.05%)</title><rect x="1142.7" y="979.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.7" y="990.0"></text>
</g>
<g>
<title>GrowableArray&lt;BasicType&gt;::append(BasicType const&amp;) (1 samples, 0.05%)</title><rect x="1142.7" y="963.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.7" y="974.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (10 samples, 0.47%)</title><rect x="1143.3" y="995.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.3" y="1006.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (10 samples, 0.47%)</title><rect x="1143.3" y="979.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.3" y="990.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.05%)</title><rect x="1143.3" y="963.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.3" y="974.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.05%)</title><rect x="1143.3" y="947.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.3" y="958.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.05%)</title><rect x="1143.3" y="931.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.3" y="942.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.05%)</title><rect x="1143.3" y="915.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.3" y="926.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="1143.3" y="899.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1146.3" y="910.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (4 samples, 0.19%)</title><rect x="1143.8" y="963.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1146.8" y="974.0"></text>
</g>
<g>
<title>CodeBlob::allocation_size(CodeBuffer*, int) (1 samples, 0.05%)</title><rect x="1143.8" y="947.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.8" y="958.0"></text>
</g>
<g>
<title>CodeBuffer::total_relocation_size() const (1 samples, 0.05%)</title><rect x="1143.8" y="931.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.8" y="942.0"></text>
</g>
<g>
<title>CodeBuffer::copy_relocations_to(unsigned char*, int, bool) const (1 samples, 0.05%)</title><rect x="1143.8" y="915.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.8" y="926.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, CompilerType, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (3 samples, 0.14%)</title><rect x="1144.4" y="947.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.4" y="958.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (2 samples, 0.09%)</title><rect x="1144.4" y="931.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.4" y="942.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.05%)</title><rect x="1144.4" y="915.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1147.4" y="926.0"></text>
</g>
<g>
<title>Relocation::fix_relocation_after_move(CodeBuffer const*, CodeBuffer*) (1 samples, 0.05%)</title><rect x="1145.0" y="915.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.0" y="926.0"></text>
</g>
<g>
<title>CompiledMethod::CompiledMethod(Method*, char const*, CompilerType, int, int, CodeBuffer*, int, int, OopMapSet*, bool) (1 samples, 0.05%)</title><rect x="1145.5" y="931.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.5" y="942.0"></text>
</g>
<g>
<title>CodeBlob::CodeBlob(char const*, CompilerType, CodeBlobLayout const&amp;, CodeBuffer*, int, int, OopMapSet*, bool) (1 samples, 0.05%)</title><rect x="1145.5" y="915.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.5" y="926.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::build_from(OopMapSet const*) (1 samples, 0.05%)</title><rect x="1145.5" y="899.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.5" y="910.0"></text>
</g>
<g>
<title>ImmutableOopMapBuilder::build() (1 samples, 0.05%)</title><rect x="1145.5" y="883.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.5" y="894.0"></text>
</g>
<g>
<title>ImmutableOopMapBuilder::heap_size() (1 samples, 0.05%)</title><rect x="1145.5" y="867.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.5" y="878.0"></text>
</g>
<g>
<title>OopMap::equals(OopMap const*) const (1 samples, 0.05%)</title><rect x="1145.5" y="851.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.5" y="862.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.05%)</title><rect x="1145.5" y="835.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1148.5" y="846.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (5 samples, 0.24%)</title><rect x="1146.1" y="963.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1149.1" y="974.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.24%)</title><rect x="1146.1" y="947.0" width="2.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1149.1" y="958.0"></text>
</g>
<g>
<title>Dependencies::assert_common_1(Dependencies::DepType, ciBaseObject*) (1 samples, 0.05%)</title><rect x="1148.9" y="995.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.9" y="1006.0"></text>
</g>
<g>
<title>Dependencies::note_dep_seen(int, ciBaseObject*) (1 samples, 0.05%)</title><rect x="1148.9" y="979.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.9" y="990.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::at_grow(int, int const&amp;) (1 samples, 0.05%)</title><rect x="1148.9" y="963.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.9" y="974.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.05%)</title><rect x="1149.4" y="1043.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.4" y="1054.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.05%)</title><rect x="1149.4" y="1027.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.4" y="1038.0"></text>
</g>
<g>
<title>ciObjectFactory::find_non_perm(oopDesc*) (1 samples, 0.05%)</title><rect x="1149.4" y="1011.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.4" y="1022.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1149.4" y="995.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.4" y="1006.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1149.4" y="979.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.4" y="990.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(Klass*) (1 samples, 0.05%)</title><rect x="1149.4" y="963.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.4" y="974.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;573558ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 573558ull&gt;::oop_access_barrier(oopDesc*, long) (1 samples, 0.05%)</title><rect x="1149.4" y="947.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.4" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (2 samples, 0.09%)</title><rect x="1150.0" y="1043.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.0" y="1054.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (2 samples, 0.09%)</title><rect x="1150.0" y="1027.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.0" y="1038.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (2 samples, 0.09%)</title><rect x="1150.0" y="1011.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.0" y="1022.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (2 samples, 0.09%)</title><rect x="1150.0" y="995.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.0" y="1006.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.05%)</title><rect x="1150.5" y="979.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.5" y="990.0"></text>
</g>
<g>
<title>ciType::make(BasicType) (1 samples, 0.05%)</title><rect x="1150.5" y="963.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1153.5" y="974.0"></text>
</g>
<g>
<title>CompileQueue::get() (21 samples, 0.99%)</title><rect x="1151.1" y="1059.0" width="11.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.1" y="1070.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (19 samples, 0.90%)</title><rect x="1151.1" y="1043.0" width="10.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.1" y="1054.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (19 samples, 0.90%)</title><rect x="1151.1" y="1027.0" width="10.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.1" y="1038.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (19 samples, 0.90%)</title><rect x="1151.1" y="1011.0" width="10.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.1" y="1022.0"></text>
</g>
<g>
<title>__psynch_cvwait (18 samples, 0.85%)</title><rect x="1151.1" y="995.0" width="10.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1154.1" y="1006.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.05%)</title><rect x="1161.1" y="995.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1164.1" y="1006.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::select_task(CompileQueue*) (2 samples, 0.09%)</title><rect x="1161.6" y="1043.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.6" y="1054.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::update_rate(long, Method*) (1 samples, 0.05%)</title><rect x="1162.2" y="1027.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.2" y="1038.0"></text>
</g>
<g>
<title>CompileBroker::possibly_add_compiler_threads() (1 samples, 0.05%)</title><rect x="1162.8" y="1075.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.8" y="1086.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (1 samples, 0.05%)</title><rect x="1163.3" y="1075.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.3" y="1086.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.05%)</title><rect x="1163.3" y="1059.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.3" y="1070.0"></text>
</g>
<g>
<title>CodeCache::reverse_free_ratio(int) (1 samples, 0.05%)</title><rect x="1163.3" y="1043.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.3" y="1054.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (15 samples, 0.71%)</title><rect x="1163.9" y="1075.0" width="8.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.9" y="1086.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (6 samples, 0.28%)</title><rect x="1163.9" y="1059.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.9" y="1070.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (6 samples, 0.28%)</title><rect x="1163.9" y="1043.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.9" y="1054.0"></text>
</g>
<g>
<title>JvmtiCompiledMethodLoadEventMark::JvmtiCompiledMethodLoadEventMark(JavaThread*, nmethod*, void*) (1 samples, 0.05%)</title><rect x="1163.9" y="1027.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.9" y="1038.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.05%)</title><rect x="1163.9" y="1011.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.9" y="1022.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.05%)</title><rect x="1163.9" y="995.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.9" y="1006.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1163.9" y="979.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.9" y="990.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (5 samples, 0.24%)</title><rect x="1164.4" y="1027.0" width="2.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1167.4" y="1038.0"></text>
</g>
<g>
<title>CompiledMethod::scope_desc_at(unsigned char*) (3 samples, 0.14%)</title><rect x="1164.4" y="1011.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.4" y="1022.0"></text>
</g>
<g>
<title>ScopeDesc::ScopeDesc(CompiledMethod const*, int, int, bool, bool, bool) (1 samples, 0.05%)</title><rect x="1165.0" y="995.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.0" y="1006.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.05%)</title><rect x="1165.5" y="995.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.5" y="1006.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int() (1 samples, 0.05%)</title><rect x="1165.5" y="979.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.5" y="990.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (2 samples, 0.09%)</title><rect x="1166.1" y="1011.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.1" y="1022.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (2 samples, 0.09%)</title><rect x="1166.1" y="995.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.1" y="1006.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (7 samples, 0.33%)</title><rect x="1167.2" y="1059.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.2" y="1070.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (7 samples, 0.33%)</title><rect x="1167.2" y="1043.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.2" y="1054.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (7 samples, 0.33%)</title><rect x="1167.2" y="1027.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.2" y="1038.0"></text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 0.33%)</title><rect x="1167.2" y="1011.0" width="3.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1170.2" y="1022.0"></text>
</g>
<g>
<title>ResolvedMethodTable::unlink() (1 samples, 0.05%)</title><rect x="1171.1" y="1059.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.1" y="1070.0"></text>
</g>
<g>
<title>OopStorage::release(oopDesc* const*) (1 samples, 0.05%)</title><rect x="1171.1" y="1043.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.1" y="1054.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.05%)</title><rect x="1171.6" y="1059.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.6" y="1070.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.05%)</title><rect x="1171.6" y="1043.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.6" y="1054.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.05%)</title><rect x="1171.6" y="1027.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.6" y="1038.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.05%)</title><rect x="1171.6" y="1011.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.6" y="1022.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="1171.6" y="995.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1174.6" y="1006.0"></text>
</g>
<g>
<title>VMThread::run() (15 samples, 0.71%)</title><rect x="1172.2" y="1107.0" width="8.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.2" y="1118.0"></text>
</g>
<g>
<title>VMThread::loop() (15 samples, 0.71%)</title><rect x="1172.2" y="1091.0" width="8.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.2" y="1102.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.14%)</title><rect x="1172.2" y="1075.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.2" y="1086.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.14%)</title><rect x="1172.2" y="1059.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.2" y="1070.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.14%)</title><rect x="1172.2" y="1043.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.2" y="1054.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.14%)</title><rect x="1172.2" y="1027.0" width="1.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1175.2" y="1038.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.05%)</title><rect x="1173.9" y="1075.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.9" y="1086.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (11 samples, 0.52%)</title><rect x="1174.4" y="1075.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.4" y="1086.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (11 samples, 0.52%)</title><rect x="1174.4" y="1059.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.4" y="1070.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (5 samples, 0.24%)</title><rect x="1174.4" y="1043.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.4" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (5 samples, 0.24%)</title><rect x="1174.4" y="1027.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.4" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(G1ParScanThreadStateSet*) (1 samples, 0.05%)</title><rect x="1174.4" y="1011.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.4" y="1022.0"></text>
</g>
<g>
<title>G1RootProcessor::G1RootProcessor(G1CollectedHeap*, unsigned int) (1 samples, 0.05%)</title><rect x="1174.4" y="995.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.4" y="1006.0"></text>
</g>
<g>
<title>SubTasksDone::SubTasksDone(unsigned int) (1 samples, 0.05%)</title><rect x="1174.4" y="979.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.4" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_prologue(bool) (2 samples, 0.09%)</title><rect x="1175.0" y="1011.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.0" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::ensure_parsability(bool) (2 samples, 0.09%)</title><rect x="1175.0" y="995.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.0" y="1006.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::retire(ThreadLocalAllocStats*) (1 samples, 0.05%)</title><rect x="1175.0" y="979.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.0" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.05%)</title><rect x="1175.0" y="963.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.0" y="974.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.05%)</title><rect x="1175.0" y="947.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.0" y="958.0"></text>
</g>
<g>
<title>ThreadLocalAllocStats::publish() (1 samples, 0.05%)</title><rect x="1175.5" y="979.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.5" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (1 samples, 0.05%)</title><rect x="1176.1" y="1011.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.1" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::merge_per_thread_state_info(G1ParScanThreadStateSet*) (1 samples, 0.05%)</title><rect x="1176.1" y="995.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.1" y="1006.0"></text>
</g>
<g>
<title>G1ParScanThreadStateSet::flush() (1 samples, 0.05%)</title><rect x="1176.1" y="979.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.1" y="990.0"></text>
</g>
<g>
<title>G1ParScanThreadState::~G1ParScanThreadState() (1 samples, 0.05%)</title><rect x="1176.1" y="963.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.1" y="974.0"></text>
</g>
<g>
<title>G1ParScanThreadState::~G1ParScanThreadState() (1 samples, 0.05%)</title><rect x="1176.1" y="947.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.1" y="958.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.05%)</title><rect x="1176.1" y="931.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1179.1" y="942.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.05%)</title><rect x="1176.1" y="915.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1179.1" y="926.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::print() (1 samples, 0.05%)</title><rect x="1176.7" y="1011.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.7" y="1022.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::print_post_evacuate_collection_set() const (1 samples, 0.05%)</title><rect x="1176.7" y="995.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.7" y="1006.0"></text>
</g>
<g>
<title>ReferenceProcessorPhaseTimes::print_all_references(unsigned int, bool) const (1 samples, 0.05%)</title><rect x="1176.7" y="979.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.7" y="990.0"></text>
</g>
<g>
<title>ReferenceProcessorPhaseTimes::print_phase(ReferenceProcessor::RefProcPhases, unsigned int) const (1 samples, 0.05%)</title><rect x="1176.7" y="963.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.7" y="974.0"></text>
</g>
<g>
<title>outputStream::print_cr(char const*, ...) (1 samples, 0.05%)</title><rect x="1176.7" y="947.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.7" y="958.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf_and_write(char const*, __va_list_tag*, bool) (1 samples, 0.05%)</title><rect x="1176.7" y="931.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.7" y="942.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf(char*, unsigned long, char const*, __va_list_tag*, bool, unsigned long&amp;) (1 samples, 0.05%)</title><rect x="1176.7" y="915.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.7" y="926.0"></text>
</g>
<g>
<title>os::vsnprintf(char*, unsigned long, char const*, __va_list_tag*) (1 samples, 0.05%)</title><rect x="1176.7" y="899.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.7" y="910.0"></text>
</g>
<g>
<title>vsnprintf (1 samples, 0.05%)</title><rect x="1176.7" y="883.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1179.7" y="894.0"></text>
</g>
<g>
<title>_vsnprintf (1 samples, 0.05%)</title><rect x="1176.7" y="867.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1179.7" y="878.0"></text>
</g>
<g>
<title>__v2printf (1 samples, 0.05%)</title><rect x="1176.7" y="851.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1179.7" y="862.0"></text>
</g>
<g>
<title>__vfprintf (1 samples, 0.05%)</title><rect x="1176.7" y="835.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1179.7" y="846.0"></text>
</g>
<g>
<title>__dtoa (1 samples, 0.05%)</title><rect x="1176.7" y="819.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1179.7" y="830.0"></text>
</g>
<g>
<title>VM_G1Concurrent::doit() (2 samples, 0.09%)</title><rect x="1177.2" y="1043.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.2" y="1054.0"></text>
</g>
<g>
<title>G1ConcurrentMark::remark() (2 samples, 0.09%)</title><rect x="1177.2" y="1027.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.2" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::resize_heap_if_necessary() (1 samples, 0.05%)</title><rect x="1177.2" y="1011.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.2" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::expand(unsigned long, WorkGang*, double*) (1 samples, 0.05%)</title><rect x="1177.2" y="995.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.2" y="1006.0"></text>
</g>
<g>
<title>HeapRegionManager::expand_at(unsigned int, unsigned int, WorkGang*) (1 samples, 0.05%)</title><rect x="1177.2" y="979.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.2" y="990.0"></text>
</g>
<g>
<title>HeapRegionManager::make_regions_available(unsigned int, unsigned int, WorkGang*) (1 samples, 0.05%)</title><rect x="1177.2" y="963.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.2" y="974.0"></text>
</g>
<g>
<title>HeapRegionManager::commit_regions(unsigned int, unsigned long, WorkGang*) (1 samples, 0.05%)</title><rect x="1177.2" y="947.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.2" y="958.0"></text>
</g>
<g>
<title>G1RegionsLargerThanCommitSizeMapper::commit_regions(unsigned int, unsigned long, WorkGang*) (1 samples, 0.05%)</title><rect x="1177.2" y="931.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.2" y="942.0"></text>
</g>
<g>
<title>G1PageBasedVirtualSpace::commit(unsigned long, unsigned long) (1 samples, 0.05%)</title><rect x="1177.2" y="915.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.2" y="926.0"></text>
</g>
<g>
<title>G1PageBasedVirtualSpace::commit_internal(unsigned long, unsigned long) (1 samples, 0.05%)</title><rect x="1177.2" y="899.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.2" y="910.0"></text>
</g>
<g>
<title>G1PageBasedVirtualSpace::commit_preferred_pages(unsigned long, unsigned long) (1 samples, 0.05%)</title><rect x="1177.2" y="883.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.2" y="894.0"></text>
</g>
<g>
<title>os::pd_commit_memory_or_exit(char*, unsigned long, bool, char const*) (1 samples, 0.05%)</title><rect x="1177.2" y="867.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.2" y="878.0"></text>
</g>
<g>
<title>G1ConcurrentMark::reclaim_empty_regions() (1 samples, 0.05%)</title><rect x="1177.8" y="1011.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.8" y="1022.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.05%)</title><rect x="1177.8" y="995.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.8" y="1006.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.05%)</title><rect x="1177.8" y="979.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.8" y="990.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (1 samples, 0.05%)</title><rect x="1177.8" y="963.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1180.8" y="974.0"></text>
</g>
<g>
<title>VM_HandshakeAllThreads::doit() (4 samples, 0.19%)</title><rect x="1178.3" y="1043.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.3" y="1054.0"></text>
</g>
<g>
<title>__block_literal_global (4 samples, 0.19%)</title><rect x="1178.3" y="1027.0" width="2.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1181.3" y="1038.0"></text>
</g>
<g>
<title>WatcherThread::run() (17 samples, 0.80%)</title><rect x="1180.5" y="1107.0" width="9.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.5" y="1118.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.05%)</title><rect x="1180.5" y="1091.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.5" y="1102.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.05%)</title><rect x="1181.1" y="1091.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.1" y="1102.0"></text>
</g>
<g>
<title>StatSampler::collect_sample() (1 samples, 0.05%)</title><rect x="1181.1" y="1075.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.1" y="1086.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (15 samples, 0.71%)</title><rect x="1181.7" y="1091.0" width="8.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="1102.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (15 samples, 0.71%)</title><rect x="1181.7" y="1075.0" width="8.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.7" y="1086.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (15 samples, 0.71%)</title><rect x="1181.7" y="1059.0" width="8.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.7" y="1070.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (15 samples, 0.71%)</title><rect x="1181.7" y="1043.0" width="8.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.7" y="1054.0"></text>
</g>
<g>
<title>__psynch_cvwait (14 samples, 0.66%)</title><rect x="1182.2" y="1027.0" width="7.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1185.2" y="1038.0"></text>
</g>
</g>
</svg>
