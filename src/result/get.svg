<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1190" onload="init(evt)" viewBox="0 0 1200 1190" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1173"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1173"> </text>
<g id="frames">
<g>
<title>all (6,104 samples, 100.00%)</title><rect x="10.0" y="1139.0" width="1180.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="13.0" y="1150.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=41475] (2,515 samples, 41.20%)</title><rect x="10.0" y="1123.0" width="486.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="13.0" y="1134.0">[NIO Selector #0 tid=41475]</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.05%)</title><rect x="10.0" y="1107.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.03%)</title><rect x="10.2" y="1091.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.2" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="10.2" y="1075.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.2" y="1086.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="10.2" y="1059.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.2" y="1070.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="10.2" y="1043.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.2" y="1054.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="10.2" y="1027.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.2" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (2 samples, 0.03%)</title><rect x="10.2" y="1011.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.2" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (2 samples, 0.03%)</title><rect x="10.2" y="995.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.2" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause(unsigned long, unsigned int, bool*, GCCause::Cause) (2 samples, 0.03%)</title><rect x="10.2" y="979.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.2" y="990.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (2 samples, 0.03%)</title><rect x="10.2" y="963.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.2" y="974.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.03%)</title><rect x="10.2" y="947.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.2" y="958.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.03%)</title><rect x="10.2" y="931.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.2" y="942.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (2 samples, 0.03%)</title><rect x="10.2" y="915.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.2" y="926.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.03%)</title><rect x="10.2" y="899.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="13.2" y="910.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.03%)</title><rect x="11.0" y="1107.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="14.0" y="1118.0"></text>
</g>
<g>
<title>[unknown_Java] (7 samples, 0.11%)</title><rect x="11.4" y="1107.0" width="1.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="14.4" y="1118.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,500 samples, 40.96%)</title><rect x="12.9" y="1107.0" width="483.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.9" y="1118.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (1,121 samples, 18.37%)</title><rect x="13.7" y="1091.0" width="216.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.7" y="1102.0">one/nio/net/JavaSelector.sel..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (5 samples, 0.08%)</title><rect x="13.7" y="1075.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.7" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (5 samples, 0.08%)</title><rect x="13.7" y="1059.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="16.7" y="1070.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (3 samples, 0.05%)</title><rect x="14.1" y="1043.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.1" y="1054.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (7 samples, 0.11%)</title><rect x="14.6" y="1075.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (7 samples, 0.11%)</title><rect x="14.6" y="1059.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (7 samples, 0.11%)</title><rect x="14.6" y="1043.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (3 samples, 0.05%)</title><rect x="15.0" y="1027.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="18.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.setRelease (2 samples, 0.03%)</title><rect x="15.2" y="1011.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.2" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.03%)</title><rect x="15.6" y="1027.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="18.6" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1,109 samples, 18.17%)</title><rect x="16.0" y="1075.0" width="214.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="19.0" y="1086.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1,109 samples, 18.17%)</title><rect x="16.0" y="1059.0" width="214.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="19.0" y="1070.0">sun/nio/ch/SelectorImpl.lock..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1,109 samples, 18.17%)</title><rect x="16.0" y="1043.0" width="214.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="19.0" y="1054.0">sun/nio/ch/KQueueSelectorImp..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (1,067 samples, 17.48%)</title><rect x="16.0" y="1027.0" width="206.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.0" y="1038.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (3 samples, 0.05%)</title><rect x="19.9" y="1011.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="22.9" y="1022.0"></text>
</g>
<g>
<title>kevent (1,044 samples, 17.10%)</title><rect x="20.4" y="1011.0" width="201.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="23.4" y="1022.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (9 samples, 0.15%)</title><rect x="222.3" y="1027.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.3" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (9 samples, 0.15%)</title><rect x="222.3" y="1011.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="225.3" y="1022.0"></text>
</g>
<g>
<title>java/util/HashSet.add (9 samples, 0.15%)</title><rect x="222.3" y="995.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="225.3" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.put (9 samples, 0.15%)</title><rect x="222.3" y="979.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="225.3" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (8 samples, 0.13%)</title><rect x="222.5" y="963.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="225.5" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.03%)</title><rect x="223.0" y="947.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="226.0" y="958.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.05%)</title><rect x="223.4" y="947.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="226.4" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (5 samples, 0.08%)</title><rect x="224.0" y="1027.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="227.0" y="1038.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (5 samples, 0.08%)</title><rect x="224.0" y="1011.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="227.0" y="1022.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (4 samples, 0.07%)</title><rect x="224.0" y="995.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="227.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (4 samples, 0.07%)</title><rect x="224.0" y="979.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="227.0" y="990.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (4 samples, 0.07%)</title><rect x="224.0" y="963.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.0" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (2 samples, 0.03%)</title><rect x="225.0" y="1027.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="228.0" y="1038.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (2 samples, 0.03%)</title><rect x="225.0" y="1011.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="228.0" y="1022.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.03%)</title><rect x="225.0" y="995.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="228.0" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (26 samples, 0.43%)</title><rect x="225.4" y="1027.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="228.4" y="1038.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (10 samples, 0.16%)</title><rect x="228.4" y="1011.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="231.4" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (3 samples, 0.05%)</title><rect x="228.8" y="995.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.8" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (3 samples, 0.05%)</title><rect x="228.8" y="979.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="231.8" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (3 samples, 0.05%)</title><rect x="228.8" y="963.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="231.8" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (5 samples, 0.08%)</title><rect x="229.4" y="995.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="232.4" y="1006.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,375 samples, 22.53%)</title><rect x="230.4" y="1091.0" width="265.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="233.4" y="1102.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,373 samples, 22.49%)</title><rect x="230.4" y="1075.0" width="265.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="233.4" y="1086.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,190 samples, 19.50%)</title><rect x="231.0" y="1059.0" width="230.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="234.0" y="1070.0">one/nio/http/HttpSession.proce..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,126 samples, 18.45%)</title><rect x="234.1" y="1043.0" width="217.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="237.1" y="1054.0">one/nio/http/HttpSession.hand..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,126 samples, 18.45%)</title><rect x="234.1" y="1027.0" width="217.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="237.1" y="1038.0">one/nio/http/HttpServer.handl..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,104 samples, 18.09%)</title><rect x="234.2" y="1011.0" width="213.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="237.2" y="1022.0">RequestHandler1_entity.handl..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (767 samples, 12.57%)</title><rect x="236.4" y="995.0" width="148.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="239.4" y="1006.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (763 samples, 12.50%)</title><rect x="236.6" y="979.0" width="147.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="239.6" y="990.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (22 samples, 0.36%)</title><rect x="236.6" y="963.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="239.6" y="974.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (20 samples, 0.33%)</title><rect x="237.0" y="947.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="240.0" y="958.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (4 samples, 0.07%)</title><rect x="237.1" y="931.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="240.1" y="942.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (4 samples, 0.07%)</title><rect x="237.1" y="915.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="240.1" y="926.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (9 samples, 0.15%)</title><rect x="237.9" y="931.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="240.9" y="942.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.10%)</title><rect x="239.7" y="931.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="242.7" y="942.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.10%)</title><rect x="239.7" y="915.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.7" y="926.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (741 samples, 12.14%)</title><rect x="240.8" y="963.0" width="143.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="243.8" y="974.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/net/Session.write (741 samples, 12.14%)</title><rect x="240.8" y="947.0" width="143.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="243.8" y="958.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>gettimeofday (4 samples, 0.07%)</title><rect x="241.6" y="931.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="244.6" y="942.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (726 samples, 11.89%)</title><rect x="242.4" y="931.0" width="140.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="245.4" y="942.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (726 samples, 11.89%)</title><rect x="242.4" y="915.0" width="140.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="245.4" y="926.0">one/nio/net/JavaSo..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.05%)</title><rect x="242.4" y="899.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="245.4" y="910.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="242.6" y="883.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="245.6" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (723 samples, 11.84%)</title><rect x="242.9" y="899.0" width="139.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="245.9" y="910.0">sun/nio/ch/Socket..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.03%)</title><rect x="243.1" y="883.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.03%)</title><rect x="243.1" y="867.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="246.1" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (720 samples, 11.80%)</title><rect x="243.5" y="883.0" width="139.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="246.5" y="894.0">sun/nio/ch/IOUtil..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (720 samples, 11.80%)</title><rect x="243.5" y="867.0" width="139.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.5" y="878.0">sun/nio/ch/IOUtil..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (5 samples, 0.08%)</title><rect x="243.7" y="851.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="246.7" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (5 samples, 0.08%)</title><rect x="243.7" y="835.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="246.7" y="846.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.05%)</title><rect x="244.1" y="819.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="247.1" y="830.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.05%)</title><rect x="244.1" y="803.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="247.1" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.05%)</title><rect x="244.1" y="787.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="247.1" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (695 samples, 11.39%)</title><rect x="244.7" y="851.0" width="134.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="247.7" y="862.0">sun/nio/ch/IOUtil..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (695 samples, 11.39%)</title><rect x="244.7" y="835.0" width="134.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="247.7" y="846.0">sun/nio/ch/Socket..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (695 samples, 11.39%)</title><rect x="244.7" y="819.0" width="134.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="247.7" y="830.0">sun/nio/ch/FileDi..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (8 samples, 0.13%)</title><rect x="246.6" y="803.0" width="1.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="249.6" y="814.0"></text>
</g>
<g>
<title>write (677 samples, 11.09%)</title><rect x="248.2" y="803.0" width="130.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="251.2" y="814.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (19 samples, 0.31%)</title><rect x="379.0" y="851.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="382.0" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.13%)</title><rect x="379.2" y="835.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="382.2" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.10%)</title><rect x="379.6" y="819.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="382.6" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (10 samples, 0.16%)</title><rect x="380.8" y="835.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="383.8" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="381.6" y="819.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="384.6" y="830.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="381.6" y="803.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="384.6" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (4 samples, 0.07%)</title><rect x="381.9" y="819.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="384.9" y="830.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.11%)</title><rect x="382.7" y="931.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="385.7" y="942.0"></text>
</g>
<g>
<title>__vsnprintf_chk (2 samples, 0.03%)</title><rect x="382.9" y="915.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="385.9" y="926.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.05%)</title><rect x="383.3" y="915.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="386.3" y="926.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.03%)</title><rect x="383.5" y="899.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="386.5" y="910.0"></text>
</g>
<g>
<title>_res (2 samples, 0.03%)</title><rect x="383.5" y="883.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="386.5" y="894.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.05%)</title><rect x="384.1" y="979.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="387.1" y="990.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="384.3" y="963.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="387.3" y="974.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5 samples, 0.08%)</title><rect x="384.6" y="995.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="387.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="384.8" y="979.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="387.8" y="990.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="384.8" y="963.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="387.8" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceImpl.entity (321 samples, 5.26%)</title><rect x="385.6" y="995.0" width="62.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="388.6" y="1006.0">ru/mai..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.05%)</title><rect x="385.8" y="979.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="388.8" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.05%)</title><rect x="385.8" y="963.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="388.8" y="974.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="386.0" y="947.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="389.0" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="386.0" y="931.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="389.0" y="942.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (5 samples, 0.08%)</title><rect x="386.4" y="979.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="389.4" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (304 samples, 4.98%)</title><rect x="387.4" y="979.0" width="58.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="390.4" y="990.0">ru/mai..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (6 samples, 0.10%)</title><rect x="387.5" y="963.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="390.5" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1763344271.invoke (5 samples, 0.08%)</title><rect x="387.7" y="947.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="390.7" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4 samples, 0.07%)</title><rect x="387.7" y="931.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="390.7" y="942.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (3 samples, 0.05%)</title><rect x="387.7" y="915.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="390.7" y="926.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.03%)</title><rect x="387.9" y="899.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="390.9" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (32 samples, 0.52%)</title><rect x="388.7" y="963.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="391.7" y="974.0"></text>
</g>
<g>
<title>java/lang/Class.getName (4 samples, 0.07%)</title><rect x="389.7" y="947.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="392.7" y="958.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (21 samples, 0.34%)</title><rect x="390.4" y="947.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="393.4" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (21 samples, 0.34%)</title><rect x="390.4" y="931.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="393.4" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 0.08%)</title><rect x="392.0" y="915.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="395.0" y="926.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.07%)</title><rect x="392.2" y="899.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="395.2" y="910.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.08%)</title><rect x="393.5" y="915.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="396.5" y="926.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (2 samples, 0.03%)</title><rect x="394.5" y="947.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="397.5" y="958.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (251 samples, 4.11%)</title><rect x="394.9" y="963.0" width="48.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="397.9" y="974.0">org/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (251 samples, 4.11%)</title><rect x="394.9" y="947.0" width="48.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="397.9" y="958.0">org/..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (249 samples, 4.08%)</title><rect x="395.3" y="931.0" width="48.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="398.3" y="942.0">Java..</text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.03%)</title><rect x="396.1" y="915.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="399.1" y="926.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (3 samples, 0.05%)</title><rect x="396.6" y="915.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="399.6" y="926.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (235 samples, 3.85%)</title><rect x="397.2" y="915.0" width="45.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="400.2" y="926.0">rock..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="398.2" y="899.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="401.2" y="910.0"></text>
</g>
<g>
<title>free (8 samples, 0.13%)</title><rect x="399.3" y="899.0" width="1.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="402.3" y="910.0"></text>
</g>
<g>
<title>tiny_size (5 samples, 0.08%)</title><rect x="399.9" y="883.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="402.9" y="894.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.07%)</title><rect x="400.9" y="899.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="403.9" y="910.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (8 samples, 0.13%)</title><rect x="401.7" y="899.0" width="1.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="404.7" y="910.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (3 samples, 0.05%)</title><rect x="401.9" y="883.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="404.9" y="894.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.05%)</title><rect x="402.6" y="883.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="405.6" y="894.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.05%)</title><rect x="402.6" y="867.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="405.6" y="878.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (22 samples, 0.36%)</title><rect x="403.2" y="899.0" width="4.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="406.2" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (9 samples, 0.15%)</title><rect x="404.4" y="883.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="407.4" y="894.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (6 samples, 0.10%)</title><rect x="404.6" y="867.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="407.6" y="878.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (5 samples, 0.08%)</title><rect x="404.6" y="851.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="407.6" y="862.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (5 samples, 0.08%)</title><rect x="404.6" y="835.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="407.6" y="846.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (5 samples, 0.08%)</title><rect x="404.6" y="819.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="407.6" y="830.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="405.1" y="803.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="408.1" y="814.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.08%)</title><rect x="406.1" y="883.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="409.1" y="894.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.03%)</title><rect x="406.7" y="867.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="409.7" y="878.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (165 samples, 2.70%)</title><rect x="407.8" y="899.0" width="31.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="410.8" y="910.0">ro..</text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (2 samples, 0.03%)</title><rect x="408.0" y="883.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="411.0" y="894.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (162 samples, 2.65%)</title><rect x="408.4" y="883.0" width="31.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="411.4" y="894.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (159 samples, 2.60%)</title><rect x="409.0" y="867.0" width="30.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="412.0" y="878.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (148 samples, 2.42%)</title><rect x="409.4" y="851.0" width="28.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="412.4" y="862.0">ro..</text>
</g>
<g>
<title>_dispatch_queue_attrs (8 samples, 0.13%)</title><rect x="412.3" y="835.0" width="1.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="415.3" y="846.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.05%)</title><rect x="413.8" y="835.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="416.8" y="846.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (12 samples, 0.20%)</title><rect x="414.8" y="835.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="417.8" y="846.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (6 samples, 0.10%)</title><rect x="415.6" y="819.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="418.6" y="830.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (2 samples, 0.03%)</title><rect x="416.3" y="803.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="419.3" y="814.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (2 samples, 0.03%)</title><rect x="416.7" y="819.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="419.7" y="830.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (2 samples, 0.03%)</title><rect x="417.1" y="835.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="420.1" y="846.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (92 samples, 1.51%)</title><rect x="417.7" y="835.0" width="17.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="420.7" y="846.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.03%)</title><rect x="419.6" y="819.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="422.6" y="830.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.03%)</title><rect x="420.0" y="819.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="423.0" y="830.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (78 samples, 1.28%)</title><rect x="420.4" y="819.0" width="15.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="423.4" y="830.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (33 samples, 0.54%)</title><rect x="428.7" y="803.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="431.7" y="814.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.05%)</title><rect x="430.7" y="787.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="433.7" y="798.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="431.2" y="787.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="434.2" y="798.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (15 samples, 0.25%)</title><rect x="431.6" y="787.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="434.6" y="798.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="434.1" y="771.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="437.1" y="782.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.05%)</title><rect x="434.5" y="787.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="437.5" y="798.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (10 samples, 0.16%)</title><rect x="436.1" y="835.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="439.1" y="846.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (3 samples, 0.05%)</title><rect x="437.0" y="819.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="440.0" y="830.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (3 samples, 0.05%)</title><rect x="437.0" y="803.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="440.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.03%)</title><rect x="438.0" y="851.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="441.0" y="862.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (2 samples, 0.03%)</title><rect x="438.6" y="851.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="441.6" y="862.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (4 samples, 0.07%)</title><rect x="439.0" y="851.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="442.0" y="862.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (12 samples, 0.20%)</title><rect x="440.3" y="899.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="443.3" y="910.0"></text>
</g>
<g>
<title>malloc (11 samples, 0.18%)</title><rect x="440.5" y="883.0" width="2.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="443.5" y="894.0"></text>
</g>
<g>
<title>malloc_zone_malloc (10 samples, 0.16%)</title><rect x="440.5" y="867.0" width="1.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="443.5" y="878.0"></text>
</g>
<g>
<title>default_zone_malloc (4 samples, 0.07%)</title><rect x="440.5" y="851.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="443.5" y="862.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.08%)</title><rect x="441.3" y="851.0" width="1.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="444.3" y="862.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.08%)</title><rect x="441.3" y="835.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="444.3" y="846.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="442.8" y="915.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="445.8" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.shiftBytes (8 samples, 0.13%)</title><rect x="443.4" y="963.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="446.4" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (3 samples, 0.05%)</title><rect x="443.6" y="947.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="446.6" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.clone (4 samples, 0.07%)</title><rect x="444.2" y="947.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="447.2" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2 samples, 0.03%)</title><rect x="444.2" y="931.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="447.2" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/NoSuchElementExceptionLite.&lt;init&gt; (6 samples, 0.10%)</title><rect x="445.0" y="963.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="448.0" y="974.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (6 samples, 0.10%)</title><rect x="445.0" y="947.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="448.0" y="958.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (6 samples, 0.10%)</title><rect x="445.0" y="931.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="448.0" y="942.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (6 samples, 0.10%)</title><rect x="445.0" y="915.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="448.0" y="926.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (5 samples, 0.08%)</title><rect x="445.2" y="899.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="448.2" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (6 samples, 0.10%)</title><rect x="446.1" y="979.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="449.1" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.shiftBytes (5 samples, 0.08%)</title><rect x="446.3" y="963.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="449.3" y="974.0"></text>
</g>
<g>
<title>unwind_exception Runtime1 stub (2 samples, 0.03%)</title><rect x="447.3" y="979.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="450.3" y="990.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (17 samples, 0.28%)</title><rect x="447.7" y="1011.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="450.7" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (17 samples, 0.28%)</title><rect x="447.7" y="995.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="450.7" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (17 samples, 0.28%)</title><rect x="447.7" y="979.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="450.7" y="990.0"></text>
</g>
<g>
<title>java/lang/String.equals (17 samples, 0.28%)</title><rect x="447.7" y="963.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="450.7" y="974.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.08%)</title><rect x="448.6" y="947.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="451.6" y="958.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.05%)</title><rect x="449.8" y="947.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="452.8" y="958.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (3 samples, 0.05%)</title><rect x="450.4" y="947.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="453.4" y="958.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (4 samples, 0.07%)</title><rect x="451.0" y="1011.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="454.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.07%)</title><rect x="451.0" y="995.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="454.0" y="1006.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (2 samples, 0.03%)</title><rect x="451.3" y="979.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="454.3" y="990.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (23 samples, 0.38%)</title><rect x="451.7" y="1043.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="454.7" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (7 samples, 0.11%)</title><rect x="451.7" y="1027.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="454.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.11%)</title><rect x="451.7" y="1011.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="454.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.11%)</title><rect x="451.7" y="995.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="454.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.05%)</title><rect x="452.5" y="979.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="455.5" y="990.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (16 samples, 0.26%)</title><rect x="453.1" y="1027.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="456.1" y="1038.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (16 samples, 0.26%)</title><rect x="453.1" y="1011.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="456.1" y="1022.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (2 samples, 0.03%)</title><rect x="455.8" y="995.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="458.8" y="1006.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (10 samples, 0.16%)</title><rect x="456.2" y="1043.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="459.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.03%)</title><rect x="456.2" y="1027.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="459.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.03%)</title><rect x="456.2" y="1011.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="459.2" y="1022.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (7 samples, 0.11%)</title><rect x="456.8" y="1027.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="459.8" y="1038.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (6 samples, 0.10%)</title><rect x="458.1" y="1043.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="461.1" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.05%)</title><rect x="459.5" y="1043.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="462.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="459.7" y="1027.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="462.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="459.7" y="1011.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="462.7" y="1022.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.08%)</title><rect x="460.0" y="1043.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="463.0" y="1054.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.08%)</title><rect x="460.0" y="1027.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="463.0" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (180 samples, 2.95%)</title><rect x="461.0" y="1059.0" width="34.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="464.0" y="1070.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (179 samples, 2.93%)</title><rect x="461.0" y="1043.0" width="34.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="464.0" y="1054.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 0.11%)</title><rect x="461.4" y="1027.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="464.4" y="1038.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="461.6" y="1011.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="464.6" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="461.6" y="995.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="464.6" y="1006.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="461.6" y="979.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="464.6" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="461.8" y="963.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="464.8" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.05%)</title><rect x="462.2" y="963.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="465.2" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.05%)</title><rect x="462.2" y="947.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="465.2" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.03%)</title><rect x="462.4" y="931.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="465.4" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (169 samples, 2.77%)</title><rect x="462.9" y="1027.0" width="32.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="465.9" y="1038.0">su..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.08%)</title><rect x="462.9" y="1011.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="465.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.08%)</title><rect x="462.9" y="995.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="465.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.08%)</title><rect x="462.9" y="979.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="465.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.08%)</title><rect x="462.9" y="963.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="465.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.08%)</title><rect x="462.9" y="947.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="465.9" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (5 samples, 0.08%)</title><rect x="462.9" y="931.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="465.9" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (160 samples, 2.62%)</title><rect x="464.5" y="1011.0" width="30.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="467.5" y="1022.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (160 samples, 2.62%)</title><rect x="464.5" y="995.0" width="30.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="467.5" y="1006.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (156 samples, 2.56%)</title><rect x="464.9" y="979.0" width="30.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="467.9" y="990.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (156 samples, 2.56%)</title><rect x="464.9" y="963.0" width="30.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="467.9" y="974.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (155 samples, 2.54%)</title><rect x="465.1" y="947.0" width="29.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="468.1" y="958.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (6 samples, 0.10%)</title><rect x="466.2" y="931.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="469.2" y="942.0"></text>
</g>
<g>
<title>fdval (3 samples, 0.05%)</title><rect x="466.8" y="915.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="469.8" y="926.0"></text>
</g>
<g>
<title>read (142 samples, 2.33%)</title><rect x="467.6" y="931.0" width="27.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="470.6" y="942.0">r..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.03%)</title><rect x="495.0" y="979.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="498.0" y="990.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="495.8" y="1075.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="498.8" y="1086.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="495.8" y="1059.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="498.8" y="1070.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=40707] (1,220 samples, 19.99%)</title><rect x="496.2" y="1123.0" width="235.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="499.2" y="1134.0">[NIO Selector #1 tid=40707]</text>
</g>
<g>
<title>[unknown_Java] (7 samples, 0.11%)</title><rect x="497.2" y="1107.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="500.2" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.05%)</title><rect x="497.9" y="1091.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="500.9" y="1102.0"></text>
</g>
<g>
<title>_res (3 samples, 0.05%)</title><rect x="497.9" y="1075.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="500.9" y="1086.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,208 samples, 19.79%)</title><rect x="498.5" y="1107.0" width="233.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="501.5" y="1118.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (2 samples, 0.03%)</title><rect x="499.1" y="1091.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="502.1" y="1102.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (2 samples, 0.03%)</title><rect x="499.5" y="1091.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="502.5" y="1102.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (2 samples, 0.03%)</title><rect x="499.5" y="1075.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="502.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.03%)</title><rect x="499.5" y="1059.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="502.5" y="1070.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (564 samples, 9.24%)</title><rect x="499.9" y="1091.0" width="109.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="502.9" y="1102.0">one/nio/net/J..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (15 samples, 0.25%)</title><rect x="500.1" y="1075.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="503.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (14 samples, 0.23%)</title><rect x="500.2" y="1059.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="503.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (13 samples, 0.21%)</title><rect x="500.4" y="1043.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="503.4" y="1054.0"></text>
</g>
<g>
<title>_res (3 samples, 0.05%)</title><rect x="500.6" y="1027.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="503.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.03%)</title><rect x="501.2" y="1027.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="504.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (2 samples, 0.03%)</title><rect x="501.2" y="1011.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="504.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (6 samples, 0.10%)</title><rect x="501.6" y="1027.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="504.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.setRelease (6 samples, 0.10%)</title><rect x="501.6" y="1011.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="504.6" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (548 samples, 8.98%)</title><rect x="503.0" y="1075.0" width="105.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="506.0" y="1086.0">sun/nio/ch/Se..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (548 samples, 8.98%)</title><rect x="503.0" y="1059.0" width="105.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="506.0" y="1070.0">sun/nio/ch/Se..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (548 samples, 8.98%)</title><rect x="503.0" y="1043.0" width="105.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="506.0" y="1054.0">sun/nio/ch/KQ..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (519 samples, 8.50%)</title><rect x="503.1" y="1027.0" width="100.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="506.1" y="1038.0">sun/nio/ch/K..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (5 samples, 0.08%)</title><rect x="508.2" y="1011.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="511.2" y="1022.0"></text>
</g>
<g>
<title>kevent (488 samples, 7.99%)</title><rect x="509.1" y="1011.0" width="94.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="512.1" y="1022.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (12 samples, 0.20%)</title><rect x="603.5" y="1027.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="606.5" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (12 samples, 0.20%)</title><rect x="603.5" y="1011.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="606.5" y="1022.0"></text>
</g>
<g>
<title>java/util/HashSet.add (12 samples, 0.20%)</title><rect x="603.5" y="995.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="606.5" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.put (12 samples, 0.20%)</title><rect x="603.5" y="979.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="606.5" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (12 samples, 0.20%)</title><rect x="603.5" y="963.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="606.5" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.03%)</title><rect x="603.9" y="947.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="606.9" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.05%)</title><rect x="604.3" y="947.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="607.3" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.&lt;init&gt; (2 samples, 0.03%)</title><rect x="604.4" y="931.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="607.4" y="942.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.08%)</title><rect x="604.8" y="947.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="607.8" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (14 samples, 0.23%)</title><rect x="606.2" y="1027.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="609.2" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.hasNext (2 samples, 0.03%)</title><rect x="607.9" y="1011.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="610.9" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.03%)</title><rect x="607.9" y="995.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="610.9" y="1006.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (3 samples, 0.05%)</title><rect x="608.3" y="1011.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="611.3" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.03%)</title><rect x="608.5" y="995.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="611.5" y="1006.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (637 samples, 10.44%)</title><rect x="608.9" y="1091.0" width="123.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="611.9" y="1102.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (634 samples, 10.39%)</title><rect x="609.1" y="1075.0" width="122.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="612.1" y="1086.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (510 samples, 8.36%)</title><rect x="609.3" y="1059.0" width="98.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="612.3" y="1070.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (486 samples, 7.96%)</title><rect x="610.1" y="1043.0" width="93.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="613.1" y="1054.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (486 samples, 7.96%)</title><rect x="610.1" y="1027.0" width="93.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="613.1" y="1038.0">one/nio/htt..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (471 samples, 7.72%)</title><rect x="610.2" y="1011.0" width="91.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="613.2" y="1022.0">RequestHand..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (277 samples, 4.54%)</title><rect x="611.0" y="995.0" width="53.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="614.0" y="1006.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (275 samples, 4.51%)</title><rect x="611.2" y="979.0" width="53.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="614.2" y="990.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (18 samples, 0.29%)</title><rect x="611.2" y="963.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="614.2" y="974.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (15 samples, 0.25%)</title><rect x="611.8" y="947.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="614.8" y="958.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 0.07%)</title><rect x="612.0" y="931.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="615.0" y="942.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (10 samples, 0.16%)</title><rect x="612.8" y="931.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="615.8" y="942.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (9 samples, 0.15%)</title><rect x="613.0" y="915.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="616.0" y="926.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.03%)</title><rect x="614.1" y="899.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="617.1" y="910.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (257 samples, 4.21%)</title><rect x="614.7" y="963.0" width="49.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="617.7" y="974.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session.write (257 samples, 4.21%)</title><rect x="614.7" y="947.0" width="49.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="617.7" y="958.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (254 samples, 4.16%)</title><rect x="615.3" y="931.0" width="49.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="618.3" y="942.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (254 samples, 4.16%)</title><rect x="615.3" y="915.0" width="49.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="618.3" y="926.0">one/n..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (254 samples, 4.16%)</title><rect x="615.3" y="899.0" width="49.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="618.3" y="910.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (253 samples, 4.14%)</title><rect x="615.5" y="883.0" width="48.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="618.5" y="894.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (253 samples, 4.14%)</title><rect x="615.5" y="867.0" width="48.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="618.5" y="878.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (246 samples, 4.03%)</title><rect x="615.9" y="851.0" width="47.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="618.9" y="862.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (246 samples, 4.03%)</title><rect x="615.9" y="835.0" width="47.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="618.9" y="846.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (246 samples, 4.03%)</title><rect x="615.9" y="819.0" width="47.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="618.9" y="830.0">sun/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.03%)</title><rect x="617.0" y="803.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="620.0" y="814.0"></text>
</g>
<g>
<title>convertReturnVal (2 samples, 0.03%)</title><rect x="617.4" y="803.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="620.4" y="814.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.03%)</title><rect x="617.8" y="803.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="620.8" y="814.0"></text>
</g>
<g>
<title>write (234 samples, 3.83%)</title><rect x="618.2" y="803.0" width="45.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="621.2" y="814.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (5 samples, 0.08%)</title><rect x="663.4" y="851.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="666.4" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.05%)</title><rect x="663.4" y="835.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="666.4" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.03%)</title><rect x="664.0" y="835.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="667.0" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5 samples, 0.08%)</title><rect x="664.6" y="995.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="667.6" y="1006.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceImpl.entity (185 samples, 3.03%)</title><rect x="665.5" y="995.0" width="35.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="668.5" y="1006.0">ru/..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="665.7" y="979.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="668.7" y="990.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.03%)</title><rect x="666.3" y="979.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="669.3" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (175 samples, 2.87%)</title><rect x="666.7" y="979.0" width="33.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="669.7" y="990.0">ru..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (6 samples, 0.10%)</title><rect x="666.7" y="963.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="669.7" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1763344271.invoke (5 samples, 0.08%)</title><rect x="666.7" y="947.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="669.7" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4 samples, 0.07%)</title><rect x="666.7" y="931.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="669.7" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (16 samples, 0.26%)</title><rect x="667.9" y="963.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="670.9" y="974.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (12 samples, 0.20%)</title><rect x="668.6" y="947.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="671.6" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 0.16%)</title><rect x="669.0" y="931.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="672.0" y="942.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (144 samples, 2.36%)</title><rect x="670.9" y="963.0" width="27.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="673.9" y="974.0">o..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (144 samples, 2.36%)</title><rect x="670.9" y="947.0" width="27.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="673.9" y="958.0">o..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (144 samples, 2.36%)</title><rect x="670.9" y="931.0" width="27.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="673.9" y="942.0">J..</text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (135 samples, 2.21%)</title><rect x="671.7" y="915.0" width="26.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="674.7" y="926.0">r..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (3 samples, 0.05%)</title><rect x="671.9" y="899.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="674.9" y="910.0"></text>
</g>
<g>
<title>_setcontext (2 samples, 0.03%)</title><rect x="673.1" y="899.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="676.1" y="910.0"></text>
</g>
<g>
<title>free (2 samples, 0.03%)</title><rect x="673.8" y="899.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="676.8" y="910.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.03%)</title><rect x="674.2" y="899.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="677.2" y="910.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.03%)</title><rect x="674.6" y="899.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="677.6" y="910.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (18 samples, 0.29%)</title><rect x="675.0" y="899.0" width="3.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="678.0" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (6 samples, 0.10%)</title><rect x="676.0" y="883.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="679.0" y="894.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (5 samples, 0.08%)</title><rect x="676.2" y="867.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="679.2" y="878.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.07%)</title><rect x="676.4" y="851.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="679.4" y="862.0"></text>
</g>
<g>
<title>Thread::polling_page_addr() (2 samples, 0.03%)</title><rect x="676.6" y="835.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="679.6" y="846.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.08%)</title><rect x="677.1" y="883.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="680.1" y="894.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.03%)</title><rect x="678.5" y="899.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="681.5" y="910.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (84 samples, 1.38%)</title><rect x="679.1" y="899.0" width="16.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="682.1" y="910.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (82 samples, 1.34%)</title><rect x="679.5" y="883.0" width="15.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="682.5" y="894.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (82 samples, 1.34%)</title><rect x="679.5" y="867.0" width="15.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="682.5" y="878.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.03%)</title><rect x="679.5" y="851.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="682.5" y="862.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (76 samples, 1.25%)</title><rect x="680.0" y="851.0" width="14.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="683.0" y="862.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (8 samples, 0.13%)</title><rect x="681.0" y="835.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="684.0" y="846.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (3 samples, 0.05%)</title><rect x="681.8" y="819.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="684.8" y="830.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (2 samples, 0.03%)</title><rect x="682.0" y="803.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="685.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (53 samples, 0.87%)</title><rect x="682.7" y="835.0" width="10.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="685.7" y="846.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.05%)</title><rect x="684.1" y="819.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="687.1" y="830.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (42 samples, 0.69%)</title><rect x="684.7" y="819.0" width="8.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="687.7" y="830.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (14 samples, 0.23%)</title><rect x="690.1" y="803.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="693.1" y="814.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.05%)</title><rect x="690.7" y="787.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="693.7" y="798.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="691.2" y="787.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="694.2" y="798.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.07%)</title><rect x="691.6" y="787.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="694.6" y="798.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="692.0" y="771.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="695.0" y="782.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="692.4" y="787.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="695.4" y="798.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (7 samples, 0.11%)</title><rect x="693.4" y="835.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="696.4" y="846.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, unsigned long long*, unsigned int*) (2 samples, 0.03%)</title><rect x="694.3" y="819.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="697.3" y="830.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.03%)</title><rect x="694.7" y="851.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="697.7" y="862.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (3 samples, 0.05%)</title><rect x="695.3" y="899.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="698.3" y="910.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (9 samples, 0.15%)</title><rect x="696.1" y="899.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="699.1" y="910.0"></text>
</g>
<g>
<title>malloc (9 samples, 0.15%)</title><rect x="696.1" y="883.0" width="1.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="699.1" y="894.0"></text>
</g>
<g>
<title>malloc_zone_malloc (7 samples, 0.11%)</title><rect x="696.1" y="867.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="699.1" y="878.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (7 samples, 0.11%)</title><rect x="696.1" y="851.0" width="1.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="699.1" y="862.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (6 samples, 0.10%)</title><rect x="696.3" y="835.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="699.3" y="846.0"></text>
</g>
<g>
<title>szone_malloc (2 samples, 0.03%)</title><rect x="697.4" y="867.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="700.4" y="878.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (4 samples, 0.07%)</title><rect x="698.0" y="915.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="701.0" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.shiftBytes (5 samples, 0.08%)</title><rect x="698.8" y="963.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="701.8" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.clone (2 samples, 0.03%)</title><rect x="699.4" y="947.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="702.4" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/NoSuchElementExceptionLite.&lt;init&gt; (4 samples, 0.07%)</title><rect x="699.8" y="963.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="702.8" y="974.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (3 samples, 0.05%)</title><rect x="699.9" y="947.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="702.9" y="958.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (3 samples, 0.05%)</title><rect x="699.9" y="931.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="702.9" y="942.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (3 samples, 0.05%)</title><rect x="699.9" y="915.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="702.9" y="926.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (2 samples, 0.03%)</title><rect x="700.1" y="899.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="703.1" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (4 samples, 0.07%)</title><rect x="700.5" y="979.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="703.5" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.shiftBytes (2 samples, 0.03%)</title><rect x="700.5" y="963.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="703.5" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.toArray (2 samples, 0.03%)</title><rect x="700.9" y="963.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="703.9" y="974.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.03%)</title><rect x="700.9" y="947.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="703.9" y="958.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (9 samples, 0.15%)</title><rect x="701.3" y="1011.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="704.3" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.15%)</title><rect x="701.3" y="995.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="704.3" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.11%)</title><rect x="701.5" y="979.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="704.5" y="990.0"></text>
</g>
<g>
<title>java/lang/String.equals (7 samples, 0.11%)</title><rect x="701.5" y="963.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="704.5" y="974.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="702.3" y="947.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="705.3" y="958.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (5 samples, 0.08%)</title><rect x="703.0" y="1011.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="706.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.07%)</title><rect x="703.2" y="995.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="706.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="703.6" y="979.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="706.6" y="990.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 0.11%)</title><rect x="704.0" y="1043.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="707.0" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (5 samples, 0.08%)</title><rect x="704.0" y="1027.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="707.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.07%)</title><rect x="704.2" y="1011.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="707.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.07%)</title><rect x="704.2" y="995.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="707.2" y="1006.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="705.0" y="1027.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="708.0" y="1038.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="705.0" y="1011.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="708.0" y="1022.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (6 samples, 0.10%)</title><rect x="705.4" y="1043.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="708.4" y="1054.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.05%)</title><rect x="705.7" y="1027.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="708.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.03%)</title><rect x="705.9" y="1011.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="708.9" y="1022.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.05%)</title><rect x="706.7" y="1043.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="709.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="706.9" y="1027.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="709.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="706.9" y="1011.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="709.9" y="1022.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.05%)</title><rect x="707.3" y="1043.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="710.3" y="1054.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.05%)</title><rect x="707.3" y="1027.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="710.3" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (123 samples, 2.02%)</title><rect x="707.9" y="1059.0" width="23.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="710.9" y="1070.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (122 samples, 2.00%)</title><rect x="708.1" y="1043.0" width="23.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="711.1" y="1054.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.07%)</title><rect x="708.3" y="1027.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="711.3" y="1038.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="708.3" y="1011.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="711.3" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="708.3" y="995.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="711.3" y="1006.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="708.3" y="979.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="711.3" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.07%)</title><rect x="708.3" y="963.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="711.3" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.07%)</title><rect x="708.3" y="947.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="711.3" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.03%)</title><rect x="708.6" y="931.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="711.6" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (117 samples, 1.92%)</title><rect x="709.0" y="1027.0" width="22.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="712.0" y="1038.0">s..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="709.0" y="1011.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="712.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="709.0" y="995.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="712.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="709.0" y="979.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="712.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="709.0" y="963.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="712.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.03%)</title><rect x="709.0" y="947.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="712.0" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.03%)</title><rect x="709.0" y="931.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="712.0" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (113 samples, 1.85%)</title><rect x="709.8" y="1011.0" width="21.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="712.8" y="1022.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (113 samples, 1.85%)</title><rect x="709.8" y="995.0" width="21.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="712.8" y="1006.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (112 samples, 1.83%)</title><rect x="709.8" y="979.0" width="21.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="712.8" y="990.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (109 samples, 1.79%)</title><rect x="710.4" y="963.0" width="21.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="713.4" y="974.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (109 samples, 1.79%)</title><rect x="710.4" y="947.0" width="21.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="713.4" y="958.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (6 samples, 0.10%)</title><rect x="711.3" y="931.0" width="1.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="714.3" y="942.0"></text>
</g>
<g>
<title>fdval (4 samples, 0.07%)</title><rect x="711.7" y="915.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="714.7" y="926.0"></text>
</g>
<g>
<title>read (98 samples, 1.61%)</title><rect x="712.5" y="931.0" width="19.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="715.5" y="942.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="731.6" y="1075.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="734.6" y="1086.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="731.6" y="1059.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="734.6" y="1070.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=25091] (1,238 samples, 20.28%)</title><rect x="732.0" y="1123.0" width="239.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="735.0" y="1134.0">[NIO Selector #3 tid=25091]</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="732.0" y="1107.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="735.0" y="1118.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.03%)</title><rect x="732.0" y="1091.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="735.0" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="732.0" y="1075.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="735.0" y="1086.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="732.0" y="1059.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="735.0" y="1070.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="732.0" y="1043.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="735.0" y="1054.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="732.0" y="1027.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="735.0" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="732.4" y="1107.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="735.4" y="1118.0"></text>
</g>
<g>
<title>[unknown_Java] (7 samples, 0.11%)</title><rect x="733.0" y="1107.0" width="1.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="736.0" y="1118.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,224 samples, 20.05%)</title><rect x="734.4" y="1107.0" width="236.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="737.4" y="1118.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (553 samples, 9.06%)</title><rect x="735.7" y="1091.0" width="106.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="738.7" y="1102.0">one/nio/net/J..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (10 samples, 0.16%)</title><rect x="736.3" y="1075.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="739.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (10 samples, 0.16%)</title><rect x="736.3" y="1059.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="739.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (10 samples, 0.16%)</title><rect x="736.3" y="1043.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="739.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (7 samples, 0.11%)</title><rect x="736.7" y="1027.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="739.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.setRelease (7 samples, 0.11%)</title><rect x="736.7" y="1011.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="739.7" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (540 samples, 8.85%)</title><rect x="738.2" y="1075.0" width="104.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="741.2" y="1086.0">sun/nio/ch/S..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (540 samples, 8.85%)</title><rect x="738.2" y="1059.0" width="104.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="741.2" y="1070.0">sun/nio/ch/S..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (540 samples, 8.85%)</title><rect x="738.2" y="1043.0" width="104.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="741.2" y="1054.0">sun/nio/ch/K..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (509 samples, 8.34%)</title><rect x="738.2" y="1027.0" width="98.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="741.2" y="1038.0">sun/nio/ch/K..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (3 samples, 0.05%)</title><rect x="745.0" y="1011.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="748.0" y="1022.0"></text>
</g>
<g>
<title>kevent (471 samples, 7.72%)</title><rect x="745.6" y="1011.0" width="91.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="748.6" y="1022.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (18 samples, 0.29%)</title><rect x="836.6" y="1027.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="839.6" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (18 samples, 0.29%)</title><rect x="836.6" y="1011.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="839.6" y="1022.0"></text>
</g>
<g>
<title>java/util/HashSet.add (18 samples, 0.29%)</title><rect x="836.6" y="995.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="839.6" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.put (18 samples, 0.29%)</title><rect x="836.6" y="979.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="839.6" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (18 samples, 0.29%)</title><rect x="836.6" y="963.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="839.6" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 0.15%)</title><rect x="837.2" y="947.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="840.2" y="958.0"></text>
</g>
<g>
<title>vtable stub (6 samples, 0.10%)</title><rect x="838.9" y="947.0" width="1.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="841.9" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (12 samples, 0.20%)</title><rect x="840.3" y="1027.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="843.3" y="1038.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (3 samples, 0.05%)</title><rect x="842.0" y="1011.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="845.0" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.03%)</title><rect x="842.0" y="995.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="845.0" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.03%)</title><rect x="842.0" y="979.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="845.0" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.03%)</title><rect x="842.0" y="963.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="845.0" y="974.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (664 samples, 10.88%)</title><rect x="842.6" y="1091.0" width="128.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="845.6" y="1102.0">one/nio/net/Sess..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (664 samples, 10.88%)</title><rect x="842.6" y="1075.0" width="128.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="845.6" y="1086.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (561 samples, 9.19%)</title><rect x="843.0" y="1059.0" width="108.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="846.0" y="1070.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (521 samples, 8.54%)</title><rect x="844.7" y="1043.0" width="100.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="847.7" y="1054.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (521 samples, 8.54%)</title><rect x="844.7" y="1027.0" width="100.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="847.7" y="1038.0">one/nio/http..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (507 samples, 8.31%)</title><rect x="844.9" y="1011.0" width="98.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="847.9" y="1022.0">RequestHandl..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (300 samples, 4.91%)</title><rect x="846.1" y="995.0" width="58.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="849.1" y="1006.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (298 samples, 4.88%)</title><rect x="846.3" y="979.0" width="57.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="849.3" y="990.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (18 samples, 0.29%)</title><rect x="846.3" y="963.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="849.3" y="974.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="846.9" y="947.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="849.9" y="958.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (13 samples, 0.21%)</title><rect x="847.3" y="947.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="850.3" y="958.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (9 samples, 0.15%)</title><rect x="847.4" y="931.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="850.4" y="942.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.05%)</title><rect x="849.2" y="931.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="852.2" y="942.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.05%)</title><rect x="849.2" y="915.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="852.2" y="926.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (280 samples, 4.59%)</title><rect x="849.8" y="963.0" width="54.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="852.8" y="974.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session.write (280 samples, 4.59%)</title><rect x="849.8" y="947.0" width="54.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="852.8" y="958.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (277 samples, 4.54%)</title><rect x="849.8" y="931.0" width="53.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="852.8" y="942.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (277 samples, 4.54%)</title><rect x="849.8" y="915.0" width="53.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="852.8" y="926.0">one/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.05%)</title><rect x="849.8" y="899.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="852.8" y="910.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="849.8" y="883.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="852.8" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="849.8" y="867.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="852.8" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (274 samples, 4.49%)</title><rect x="850.3" y="899.0" width="53.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="853.3" y="910.0">sun/n..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="850.3" y="883.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="853.3" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (271 samples, 4.44%)</title><rect x="850.9" y="883.0" width="52.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="853.9" y="894.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (270 samples, 4.42%)</title><rect x="851.1" y="867.0" width="52.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="854.1" y="878.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (263 samples, 4.31%)</title><rect x="851.3" y="851.0" width="50.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="854.3" y="862.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (263 samples, 4.31%)</title><rect x="851.3" y="835.0" width="50.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="854.3" y="846.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (263 samples, 4.31%)</title><rect x="851.3" y="819.0" width="50.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="854.3" y="830.0">sun/n..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (5 samples, 0.08%)</title><rect x="853.2" y="803.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="856.2" y="814.0"></text>
</g>
<g>
<title>write (247 samples, 4.05%)</title><rect x="854.4" y="803.0" width="47.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="857.4" y="814.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (6 samples, 0.10%)</title><rect x="902.2" y="851.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="905.2" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (3 samples, 0.05%)</title><rect x="902.7" y="835.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="905.7" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.05%)</title><rect x="903.3" y="931.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="906.3" y="942.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (12 samples, 0.20%)</title><rect x="904.1" y="995.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="907.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.07%)</title><rect x="904.1" y="979.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="907.1" y="990.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.07%)</title><rect x="904.1" y="963.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="907.1" y="974.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.03%)</title><rect x="904.5" y="947.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="907.5" y="958.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (3 samples, 0.05%)</title><rect x="904.9" y="979.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="907.9" y="990.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.05%)</title><rect x="905.4" y="979.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="908.4" y="990.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.03%)</title><rect x="906.0" y="979.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="909.0" y="990.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="906.0" y="963.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="909.0" y="974.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="906.0" y="947.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="909.0" y="958.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="906.0" y="931.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="909.0" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceImpl.entity (189 samples, 3.10%)</title><rect x="906.4" y="995.0" width="36.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="909.4" y="1006.0">ru/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="906.4" y="979.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="909.4" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="906.4" y="963.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="909.4" y="974.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="906.4" y="947.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="909.4" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="906.4" y="931.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="909.4" y="942.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3 samples, 0.05%)</title><rect x="907.0" y="979.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="910.0" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (180 samples, 2.95%)</title><rect x="907.6" y="979.0" width="34.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="910.6" y="990.0">ru..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.05%)</title><rect x="907.8" y="963.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="910.8" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1763344271.invoke (3 samples, 0.05%)</title><rect x="907.8" y="947.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="910.8" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.05%)</title><rect x="907.8" y="931.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="910.8" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (19 samples, 0.31%)</title><rect x="908.3" y="963.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="911.3" y="974.0"></text>
</g>
<g>
<title>java/lang/Class.getName (3 samples, 0.05%)</title><rect x="908.9" y="947.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="911.9" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/NoSuchElementExceptionLite.&lt;init&gt; (2 samples, 0.03%)</title><rect x="909.1" y="931.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="912.1" y="942.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="909.5" y="947.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="912.5" y="958.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (11 samples, 0.18%)</title><rect x="909.9" y="947.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="912.9" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 0.15%)</title><rect x="910.3" y="931.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="913.3" y="942.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="911.6" y="915.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="914.6" y="926.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (150 samples, 2.46%)</title><rect x="912.0" y="963.0" width="29.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="915.0" y="974.0">or..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (150 samples, 2.46%)</title><rect x="912.0" y="947.0" width="29.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="915.0" y="958.0">or..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (148 samples, 2.42%)</title><rect x="912.4" y="931.0" width="28.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="915.4" y="942.0">Ja..</text>
</g>
<g>
<title>free (2 samples, 0.03%)</title><rect x="913.6" y="915.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="916.6" y="926.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.03%)</title><rect x="913.9" y="915.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="916.9" y="926.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (135 samples, 2.21%)</title><rect x="914.3" y="915.0" width="26.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="917.3" y="926.0">r..</text>
</g>
<g>
<title>free (5 samples, 0.08%)</title><rect x="915.9" y="899.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="918.9" y="910.0"></text>
</g>
<g>
<title>tiny_size (4 samples, 0.07%)</title><rect x="916.1" y="883.0" width="0.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="919.1" y="894.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.08%)</title><rect x="916.8" y="899.0" width="1.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="919.8" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.05%)</title><rect x="917.2" y="883.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="920.2" y="894.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.05%)</title><rect x="917.2" y="867.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="920.2" y="878.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="917.2" y="851.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="920.2" y="862.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="917.2" y="835.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="920.2" y="846.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="917.2" y="819.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="920.2" y="830.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (15 samples, 0.25%)</title><rect x="917.8" y="899.0" width="2.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="920.8" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (5 samples, 0.08%)</title><rect x="918.4" y="883.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="921.4" y="894.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (5 samples, 0.08%)</title><rect x="918.4" y="867.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="921.4" y="878.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.05%)</title><rect x="918.4" y="851.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="921.4" y="862.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.05%)</title><rect x="918.4" y="835.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="921.4" y="846.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="918.6" y="819.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="921.6" y="830.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.05%)</title><rect x="919.6" y="883.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="922.6" y="894.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.03%)</title><rect x="919.7" y="867.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="922.7" y="878.0"></text>
</g>
<g>
<title>oopDesc* BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (2 samples, 0.03%)</title><rect x="920.1" y="883.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="923.1" y="894.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (90 samples, 1.47%)</title><rect x="920.9" y="899.0" width="17.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="923.9" y="910.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (90 samples, 1.47%)</title><rect x="920.9" y="883.0" width="17.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="923.9" y="894.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (90 samples, 1.47%)</title><rect x="920.9" y="867.0" width="17.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="923.9" y="878.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (86 samples, 1.41%)</title><rect x="920.9" y="851.0" width="16.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="923.9" y="862.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.07%)</title><rect x="922.8" y="835.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="925.8" y="846.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (7 samples, 0.11%)</title><rect x="923.6" y="835.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="926.6" y="846.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (2 samples, 0.03%)</title><rect x="924.2" y="819.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="927.2" y="830.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (2 samples, 0.03%)</title><rect x="924.6" y="819.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="927.6" y="830.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (2 samples, 0.03%)</title><rect x="924.6" y="803.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="927.6" y="814.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (2 samples, 0.03%)</title><rect x="925.0" y="835.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="928.0" y="846.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (52 samples, 0.85%)</title><rect x="925.4" y="835.0" width="10.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="928.4" y="846.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (4 samples, 0.07%)</title><rect x="926.1" y="819.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="929.1" y="830.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (44 samples, 0.72%)</title><rect x="926.9" y="819.0" width="8.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="929.9" y="830.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (13 samples, 0.21%)</title><rect x="932.5" y="803.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="935.5" y="814.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (8 samples, 0.13%)</title><rect x="933.5" y="787.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="936.5" y="798.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.05%)</title><rect x="934.4" y="771.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="937.4" y="782.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (8 samples, 0.13%)</title><rect x="936.0" y="835.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="939.0" y="846.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.03%)</title><rect x="937.7" y="851.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="940.7" y="862.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.03%)</title><rect x="938.5" y="899.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="941.5" y="910.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (8 samples, 0.13%)</title><rect x="938.9" y="899.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="941.9" y="910.0"></text>
</g>
<g>
<title>malloc (8 samples, 0.13%)</title><rect x="938.9" y="883.0" width="1.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="941.9" y="894.0"></text>
</g>
<g>
<title>default_zone_malloc (3 samples, 0.05%)</title><rect x="938.9" y="867.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="941.9" y="878.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.08%)</title><rect x="939.5" y="867.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="942.5" y="878.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.07%)</title><rect x="939.7" y="851.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="942.7" y="862.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.07%)</title><rect x="939.7" y="835.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="942.7" y="846.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="940.6" y="915.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="943.6" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.shiftBytes (7 samples, 0.11%)</title><rect x="941.0" y="963.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="944.0" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.clone (4 samples, 0.07%)</title><rect x="941.6" y="947.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="944.6" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (4 samples, 0.07%)</title><rect x="941.6" y="931.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="944.6" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="941.6" y="915.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="944.6" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="941.6" y="899.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="944.6" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="942.0" y="883.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="945.0" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (3 samples, 0.05%)</title><rect x="942.4" y="979.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="945.4" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.shiftBytes (2 samples, 0.03%)</title><rect x="942.4" y="963.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="945.4" y="974.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (11 samples, 0.18%)</title><rect x="942.9" y="1011.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="945.9" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (11 samples, 0.18%)</title><rect x="942.9" y="995.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="945.9" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (11 samples, 0.18%)</title><rect x="942.9" y="979.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="945.9" y="990.0"></text>
</g>
<g>
<title>java/lang/String.equals (11 samples, 0.18%)</title><rect x="942.9" y="963.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="945.9" y="974.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="944.3" y="947.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="947.3" y="958.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.03%)</title><rect x="945.1" y="1011.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="948.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="945.1" y="995.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="948.1" y="1006.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (14 samples, 0.23%)</title><rect x="945.5" y="1043.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="948.5" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (10 samples, 0.16%)</title><rect x="945.6" y="1027.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="948.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (10 samples, 0.16%)</title><rect x="945.6" y="1011.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="948.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (10 samples, 0.16%)</title><rect x="945.6" y="995.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="948.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.08%)</title><rect x="946.6" y="979.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="949.6" y="990.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.05%)</title><rect x="947.6" y="1027.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="950.6" y="1038.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.05%)</title><rect x="947.6" y="1011.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="950.6" y="1022.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (9 samples, 0.15%)</title><rect x="948.2" y="1043.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="951.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 0.08%)</title><rect x="948.4" y="1027.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="951.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 0.08%)</title><rect x="948.4" y="1011.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="951.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.03%)</title><rect x="948.5" y="995.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="951.5" y="1006.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (2 samples, 0.03%)</title><rect x="949.3" y="1027.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="952.3" y="1038.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (3 samples, 0.05%)</title><rect x="949.9" y="1043.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="952.9" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="950.5" y="1043.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="953.5" y="1054.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.05%)</title><rect x="950.9" y="1043.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="953.9" y="1054.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.05%)</title><rect x="950.9" y="1027.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="953.9" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (101 samples, 1.65%)</title><rect x="951.4" y="1059.0" width="19.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="954.4" y="1070.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (101 samples, 1.65%)</title><rect x="951.4" y="1043.0" width="19.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="954.4" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.08%)</title><rect x="951.6" y="1027.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="954.6" y="1038.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.08%)</title><rect x="951.6" y="1011.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="954.6" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.08%)</title><rect x="951.6" y="995.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="954.6" y="1006.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="951.8" y="979.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="954.8" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.05%)</title><rect x="952.0" y="963.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="955.0" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.05%)</title><rect x="952.0" y="947.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="955.0" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.03%)</title><rect x="952.2" y="931.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="955.2" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (95 samples, 1.56%)</title><rect x="952.6" y="1027.0" width="18.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="955.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.05%)</title><rect x="952.8" y="1011.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="955.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.05%)</title><rect x="952.8" y="995.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="955.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.05%)</title><rect x="952.8" y="979.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="955.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.05%)</title><rect x="952.8" y="963.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="955.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.03%)</title><rect x="952.8" y="947.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="955.8" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (90 samples, 1.47%)</title><rect x="953.6" y="1011.0" width="17.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="956.6" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (90 samples, 1.47%)</title><rect x="953.6" y="995.0" width="17.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="956.6" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (90 samples, 1.47%)</title><rect x="953.6" y="979.0" width="17.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="956.6" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (90 samples, 1.47%)</title><rect x="953.6" y="963.0" width="17.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="956.6" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (90 samples, 1.47%)</title><rect x="953.6" y="947.0" width="17.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="956.6" y="958.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (4 samples, 0.07%)</title><rect x="954.2" y="931.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="957.2" y="942.0"></text>
</g>
<g>
<title>read (83 samples, 1.36%)</title><rect x="954.9" y="931.0" width="16.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="957.9" y="942.0"></text>
</g>
<g>
<title>[tid=16131] (1,099 samples, 18.00%)</title><rect x="971.4" y="1123.0" width="212.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="974.4" y="1134.0">[tid=16131]</text>
</g>
<g>
<title>thread_start (1,099 samples, 18.00%)</title><rect x="971.4" y="1107.0" width="212.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="974.4" y="1118.0">thread_start</text>
</g>
<g>
<title>_pthread_start (1,099 samples, 18.00%)</title><rect x="971.4" y="1091.0" width="212.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="974.4" y="1102.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (1,099 samples, 18.00%)</title><rect x="971.4" y="1075.0" width="212.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="974.4" y="1086.0">_pthread_body</text>
</g>
<g>
<title>thread_native_entry(Thread*) (1,099 samples, 18.00%)</title><rect x="971.4" y="1059.0" width="212.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="974.4" y="1070.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (1,099 samples, 18.00%)</title><rect x="971.4" y="1043.0" width="212.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="974.4" y="1054.0">Thread::call_run()</text>
</g>
<g>
<title>JavaThread::run() (1,099 samples, 18.00%)</title><rect x="971.4" y="1027.0" width="212.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="974.4" y="1038.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1,099 samples, 18.00%)</title><rect x="971.4" y="1011.0" width="212.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="974.4" y="1022.0">JavaThread::thread_main_inne..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (1,099 samples, 18.00%)</title><rect x="971.4" y="995.0" width="212.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="974.4" y="1006.0">CompileBroker::compiler_thre..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (1,099 samples, 18.00%)</title><rect x="971.4" y="979.0" width="212.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="974.4" y="990.0">CompileBroker::invoke_compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1,096 samples, 17.96%)</title><rect x="971.4" y="963.0" width="211.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="974.4" y="974.0">C2Compiler::compile_method(c..</text>
</g>
<g>
<title>Arena::~Arena() (2 samples, 0.03%)</title><rect x="971.4" y="947.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="974.4" y="958.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (2 samples, 0.03%)</title><rect x="971.4" y="931.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="974.4" y="942.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (2 samples, 0.03%)</title><rect x="971.4" y="915.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="974.4" y="926.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (1,094 samples, 17.92%)</title><rect x="971.7" y="947.0" width="211.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="974.7" y="958.0">Compile::Compile(ciEnv*, C2C..</text>
</g>
<g>
<title>Compile::Code_Gen() (388 samples, 6.36%)</title><rect x="971.7" y="931.0" width="75.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="974.7" y="942.0">Compile:..</text>
</g>
<g>
<title>Compile::Output() (18 samples, 0.29%)</title><rect x="971.7" y="915.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="974.7" y="926.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (14 samples, 0.23%)</title><rect x="971.7" y="899.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="974.7" y="910.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (3 samples, 0.05%)</title><rect x="973.9" y="883.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="976.9" y="894.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 0.05%)</title><rect x="974.5" y="899.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="977.5" y="910.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (3 samples, 0.05%)</title><rect x="974.5" y="883.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="977.5" y="894.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (13 samples, 0.21%)</title><rect x="975.2" y="915.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="978.2" y="926.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (4 samples, 0.07%)</title><rect x="975.2" y="899.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="978.2" y="910.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.03%)</title><rect x="975.6" y="883.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="978.6" y="894.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.03%)</title><rect x="975.6" y="867.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="978.6" y="878.0"></text>
</g>
<g>
<title>DIR_Chunk* GrowableArray&lt;DIR_Chunk*&gt;::insert_sorted&lt;&amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;) (2 samples, 0.03%)</title><rect x="975.6" y="851.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="978.6" y="862.0"></text>
</g>
<g>
<title>int GrowableArray&lt;DIR_Chunk*&gt;::find_sorted&lt;DIR_Chunk*, &amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;, bool&amp;) (2 samples, 0.03%)</title><rect x="975.6" y="835.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="978.6" y="846.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (5 samples, 0.08%)</title><rect x="976.6" y="899.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="979.6" y="910.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (5 samples, 0.08%)</title><rect x="976.6" y="883.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="979.6" y="894.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (5 samples, 0.08%)</title><rect x="976.6" y="867.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="979.6" y="878.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (4 samples, 0.07%)</title><rect x="976.8" y="851.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="979.8" y="862.0"></text>
</g>
<g>
<title>DIR_Chunk* GrowableArray&lt;DIR_Chunk*&gt;::insert_sorted&lt;&amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;) (4 samples, 0.07%)</title><rect x="976.8" y="835.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="979.8" y="846.0"></text>
</g>
<g>
<title>int GrowableArray&lt;DIR_Chunk*&gt;::find_sorted&lt;DIR_Chunk*, &amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;, bool&amp;) (4 samples, 0.07%)</title><rect x="976.8" y="819.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="979.8" y="830.0"></text>
</g>
<g>
<title>DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;) (3 samples, 0.05%)</title><rect x="977.0" y="803.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="980.0" y="814.0"></text>
</g>
<g>
<title>Matcher::match() (26 samples, 0.43%)</title><rect x="977.7" y="915.0" width="5.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="980.7" y="926.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.03%)</title><rect x="977.9" y="899.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="980.9" y="910.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (23 samples, 0.38%)</title><rect x="978.3" y="899.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="981.3" y="910.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (11 samples, 0.18%)</title><rect x="978.7" y="883.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="981.7" y="894.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (5 samples, 0.08%)</title><rect x="981.0" y="883.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="984.0" y="894.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.05%)</title><rect x="981.0" y="867.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="984.0" y="878.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.03%)</title><rect x="981.2" y="851.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="984.2" y="862.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (3 samples, 0.05%)</title><rect x="982.2" y="883.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="985.2" y="894.0"></text>
</g>
<g>
<title>Compile::current() (2 samples, 0.03%)</title><rect x="982.4" y="867.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="985.4" y="878.0"></text>
</g>
<g>
<title>ciEnv::current() (2 samples, 0.03%)</title><rect x="982.4" y="851.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="985.4" y="862.0"></text>
</g>
<g>
<title>CompilerThread::current() (2 samples, 0.03%)</title><rect x="982.4" y="835.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="985.4" y="846.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (2 samples, 0.03%)</title><rect x="982.8" y="915.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="985.8" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (33 samples, 0.54%)</title><rect x="983.3" y="915.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="986.3" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (32 samples, 0.52%)</title><rect x="983.5" y="899.0" width="6.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="986.5" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.03%)</title><rect x="983.9" y="883.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="986.9" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (6 samples, 0.10%)</title><rect x="984.3" y="883.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="987.3" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (5 samples, 0.08%)</title><rect x="984.3" y="867.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="987.3" y="878.0"></text>
</g>
<g>
<title>GrowableArray&lt;unsigned int&gt;::at_grow(int, unsigned int const&amp;) (2 samples, 0.03%)</title><rect x="984.9" y="851.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="987.9" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (6 samples, 0.10%)</title><rect x="985.5" y="883.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="988.5" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (2 samples, 0.03%)</title><rect x="985.9" y="867.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="988.9" y="878.0"></text>
</g>
<g>
<title>add_call_kills(MachProjNode*, RegMask&amp;, char const*, bool) (2 samples, 0.03%)</title><rect x="985.9" y="851.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="988.9" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.07%)</title><rect x="986.6" y="883.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="989.6" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (3 samples, 0.05%)</title><rect x="987.4" y="883.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="990.4" y="894.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (3 samples, 0.05%)</title><rect x="987.4" y="867.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="990.4" y="878.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (9 samples, 0.15%)</title><rect x="988.0" y="883.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="991.0" y="894.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.05%)</title><rect x="988.6" y="867.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="991.6" y="878.0"></text>
</g>
<g>
<title>PhaseLive::freeset(Block*) (3 samples, 0.05%)</title><rect x="989.1" y="867.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="992.1" y="878.0"></text>
</g>
<g>
<title>PhaseLive::add_livein(Block*, IndexSet*) (3 samples, 0.05%)</title><rect x="989.1" y="851.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="992.1" y="862.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.03%)</title><rect x="989.1" y="835.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="992.1" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (294 samples, 4.82%)</title><rect x="989.9" y="915.0" width="56.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="992.9" y="926.0">PhaseC..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (16 samples, 0.26%)</title><rect x="990.9" y="899.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="993.9" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (11 samples, 0.18%)</title><rect x="994.0" y="899.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="997.0" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (3 samples, 0.05%)</title><rect x="994.4" y="883.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="997.4" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (5 samples, 0.08%)</title><rect x="994.9" y="883.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="997.9" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (5 samples, 0.08%)</title><rect x="994.9" y="867.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="997.9" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (12 samples, 0.20%)</title><rect x="996.1" y="899.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="999.1" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (7 samples, 0.11%)</title><rect x="997.1" y="883.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1000.1" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.05%)</title><rect x="997.7" y="867.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1000.7" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (44 samples, 0.72%)</title><rect x="998.4" y="899.0" width="8.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1001.4" y="910.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (2 samples, 0.03%)</title><rect x="1005.2" y="883.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1008.2" y="894.0"></text>
</g>
<g>
<title>Node::rematerialize() const (3 samples, 0.05%)</title><rect x="1005.6" y="883.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1008.6" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (2 samples, 0.03%)</title><rect x="1006.5" y="883.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1009.5" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (67 samples, 1.10%)</title><rect x="1006.9" y="899.0" width="13.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1009.9" y="910.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.03%)</title><rect x="1007.9" y="883.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1010.9" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (9 samples, 0.15%)</title><rect x="1008.5" y="883.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1011.5" y="894.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (2 samples, 0.03%)</title><rect x="1009.4" y="867.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1012.4" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.03%)</title><rect x="1009.8" y="867.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1012.8" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (7 samples, 0.11%)</title><rect x="1010.2" y="883.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1013.2" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.03%)</title><rect x="1010.2" y="867.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1013.2" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (5 samples, 0.08%)</title><rect x="1010.6" y="867.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1013.6" y="878.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (2 samples, 0.03%)</title><rect x="1011.0" y="851.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1014.0" y="862.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (2 samples, 0.03%)</title><rect x="1011.0" y="835.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1014.0" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (25 samples, 0.41%)</title><rect x="1011.6" y="883.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1014.6" y="894.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (12 samples, 0.20%)</title><rect x="1012.0" y="867.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1015.0" y="878.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.03%)</title><rect x="1013.9" y="851.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1016.9" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (5 samples, 0.08%)</title><rect x="1014.3" y="867.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1017.3" y="878.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (5 samples, 0.08%)</title><rect x="1015.4" y="867.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1018.4" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (15 samples, 0.25%)</title><rect x="1016.6" y="883.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1019.6" y="894.0"></text>
</g>
<g>
<title>RegMask::SUBTRACT(RegMask const&amp;) (3 samples, 0.05%)</title><rect x="1017.4" y="867.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1020.4" y="878.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (7 samples, 0.11%)</title><rect x="1018.1" y="867.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1021.1" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (4 samples, 0.07%)</title><rect x="1019.9" y="899.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1022.9" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.03%)</title><rect x="1020.3" y="883.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1023.3" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (30 samples, 0.49%)</title><rect x="1021.0" y="899.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1024.0" y="910.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (3 samples, 0.05%)</title><rect x="1023.4" y="883.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1026.4" y="894.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (2 samples, 0.03%)</title><rect x="1023.9" y="883.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1026.9" y="894.0"></text>
</g>
<g>
<title>RegMask::is_bound(unsigned int) const (2 samples, 0.03%)</title><rect x="1024.3" y="883.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1027.3" y="894.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (2 samples, 0.03%)</title><rect x="1024.3" y="867.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1027.3" y="878.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (8 samples, 0.13%)</title><rect x="1025.1" y="883.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1028.1" y="894.0"></text>
</g>
<g>
<title>RegMask::Size() const (7 samples, 0.11%)</title><rect x="1025.3" y="867.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1028.3" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (5 samples, 0.08%)</title><rect x="1026.8" y="899.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1029.8" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (24 samples, 0.39%)</title><rect x="1027.8" y="899.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1030.8" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (13 samples, 0.21%)</title><rect x="1029.4" y="883.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1032.4" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1031.5" y="867.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1034.5" y="878.0"></text>
</g>
<g>
<title>RegMask::find_first_elem() const (3 samples, 0.05%)</title><rect x="1031.9" y="883.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1034.9" y="894.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (3 samples, 0.05%)</title><rect x="1031.9" y="867.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1034.9" y="878.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (17 samples, 0.28%)</title><rect x="1032.4" y="899.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1035.4" y="910.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (17 samples, 0.28%)</title><rect x="1032.4" y="883.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1035.4" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (4 samples, 0.07%)</title><rect x="1032.4" y="867.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1035.4" y="878.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (13 samples, 0.21%)</title><rect x="1033.2" y="867.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1036.2" y="878.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (6 samples, 0.10%)</title><rect x="1033.4" y="851.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1036.4" y="862.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (5 samples, 0.08%)</title><rect x="1033.6" y="835.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1036.6" y="846.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (5 samples, 0.08%)</title><rect x="1034.8" y="851.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1037.8" y="862.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (4 samples, 0.07%)</title><rect x="1035.0" y="835.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1038.0" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (8 samples, 0.13%)</title><rect x="1035.7" y="899.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1038.7" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (7 samples, 0.11%)</title><rect x="1035.9" y="883.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1038.9" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (2 samples, 0.03%)</title><rect x="1036.1" y="867.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1039.1" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.03%)</title><rect x="1036.5" y="867.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1039.5" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.03%)</title><rect x="1036.9" y="867.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1039.9" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (9 samples, 0.15%)</title><rect x="1037.3" y="899.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1040.3" y="910.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (5 samples, 0.08%)</title><rect x="1037.3" y="883.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1040.3" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.03%)</title><rect x="1038.4" y="883.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1041.4" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (5 samples, 0.08%)</title><rect x="1039.0" y="899.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1042.0" y="910.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (5 samples, 0.08%)</title><rect x="1039.0" y="883.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1042.0" y="894.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (31 samples, 0.51%)</title><rect x="1040.0" y="899.0" width="6.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1043.0" y="910.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.03%)</title><rect x="1042.9" y="883.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1045.9" y="894.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (13 samples, 0.21%)</title><rect x="1043.3" y="883.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1046.3" y="894.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (5 samples, 0.08%)</title><rect x="1044.0" y="867.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1047.0" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (3 samples, 0.05%)</title><rect x="1045.2" y="867.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1048.2" y="878.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.03%)</title><rect x="1046.4" y="899.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1049.4" y="910.0"></text>
</g>
<g>
<title>Chunk::next_chop() (2 samples, 0.03%)</title><rect x="1046.4" y="883.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1049.4" y="894.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (2 samples, 0.03%)</title><rect x="1046.4" y="867.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1049.4" y="878.0"></text>
</g>
<g>
<title>madvise (2 samples, 0.03%)</title><rect x="1046.4" y="851.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1049.4" y="862.0"></text>
</g>
<g>
<title>Compile::Optimize() (648 samples, 10.62%)</title><rect x="1046.8" y="931.0" width="125.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1049.8" y="942.0">Compile::Optimi..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.03%)</title><rect x="1046.8" y="915.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1049.8" y="926.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.03%)</title><rect x="1046.8" y="899.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1049.8" y="910.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (5 samples, 0.08%)</title><rect x="1047.1" y="915.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1050.1" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.07%)</title><rect x="1047.3" y="899.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1050.3" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.07%)</title><rect x="1047.3" y="883.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1050.3" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (8 samples, 0.13%)</title><rect x="1048.1" y="915.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1051.1" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (8 samples, 0.13%)</title><rect x="1048.1" y="899.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1051.1" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (5 samples, 0.08%)</title><rect x="1048.3" y="883.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1051.3" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.05%)</title><rect x="1048.3" y="867.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1051.3" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.03%)</title><rect x="1048.5" y="851.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1051.5" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (2 samples, 0.03%)</title><rect x="1048.9" y="867.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1051.9" y="878.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (2 samples, 0.03%)</title><rect x="1048.9" y="851.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1051.9" y="862.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (5 samples, 0.08%)</title><rect x="1049.7" y="915.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1052.7" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (581 samples, 9.52%)</title><rect x="1050.6" y="915.0" width="112.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1053.6" y="926.0">PhaseIdealLoop..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.03%)</title><rect x="1050.8" y="899.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1053.8" y="910.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (2 samples, 0.03%)</title><rect x="1051.4" y="899.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1054.4" y="910.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="1051.4" y="883.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1054.4" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (20 samples, 0.33%)</title><rect x="1051.8" y="899.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1054.8" y="910.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (9 samples, 0.15%)</title><rect x="1053.5" y="883.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1056.5" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (10 samples, 0.16%)</title><rect x="1055.6" y="899.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1058.6" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (4 samples, 0.07%)</title><rect x="1056.8" y="883.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1059.8" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (4 samples, 0.07%)</title><rect x="1056.8" y="867.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1059.8" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.03%)</title><rect x="1057.2" y="851.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1060.2" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (2 samples, 0.03%)</title><rect x="1057.2" y="835.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1060.2" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (507 samples, 8.31%)</title><rect x="1057.6" y="899.0" width="98.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1060.6" y="910.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (492 samples, 8.06%)</title><rect x="1060.3" y="883.0" width="95.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1063.3" y="894.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (5 samples, 0.08%)</title><rect x="1060.5" y="867.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1063.5" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (3 samples, 0.05%)</title><rect x="1060.9" y="851.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1063.9" y="862.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (3 samples, 0.05%)</title><rect x="1060.9" y="835.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1063.9" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (479 samples, 7.85%)</title><rect x="1061.4" y="867.0" width="92.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1064.4" y="878.0">PhaseIdealL..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (5 samples, 0.08%)</title><rect x="1064.3" y="851.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1067.3" y="862.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.03%)</title><rect x="1064.3" y="835.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1067.3" y="846.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="1064.3" y="819.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1067.3" y="830.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (3 samples, 0.05%)</title><rect x="1064.7" y="835.0" width="0.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1067.7" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (13 samples, 0.21%)</title><rect x="1065.3" y="851.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1068.3" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (11 samples, 0.18%)</title><rect x="1065.5" y="835.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1068.5" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (11 samples, 0.18%)</title><rect x="1065.5" y="819.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1068.5" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.03%)</title><rect x="1066.1" y="803.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1069.1" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (5 samples, 0.08%)</title><rect x="1066.5" y="803.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1069.5" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (4 samples, 0.07%)</title><rect x="1066.7" y="787.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1069.7" y="798.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (3 samples, 0.05%)</title><rect x="1066.9" y="771.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1069.9" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (5 samples, 0.08%)</title><rect x="1067.8" y="851.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1070.8" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (8 samples, 0.13%)</title><rect x="1068.8" y="851.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1071.8" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (8 samples, 0.13%)</title><rect x="1068.8" y="835.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1071.8" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.05%)</title><rect x="1069.6" y="819.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1072.6" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.03%)</title><rect x="1070.3" y="851.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1073.3" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (2 samples, 0.03%)</title><rect x="1070.3" y="835.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1073.3" y="846.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (2 samples, 0.03%)</title><rect x="1070.3" y="819.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1073.3" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (18 samples, 0.29%)</title><rect x="1070.7" y="851.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1073.7" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (413 samples, 6.77%)</title><rect x="1074.2" y="851.0" width="79.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1077.2" y="862.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (79 samples, 1.29%)</title><rect x="1077.9" y="835.0" width="15.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1080.9" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (300 samples, 4.91%)</title><rect x="1093.1" y="835.0" width="58.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1096.1" y="846.0">PhaseI..</text>
</g>
<g>
<title>Node::in(unsigned int) const (5 samples, 0.08%)</title><rect x="1100.3" y="819.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1103.3" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (258 samples, 4.23%)</title><rect x="1101.3" y="819.0" width="49.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.3" y="830.0">Phase..</text>
</g>
<g>
<title>Node::in(unsigned int) const (189 samples, 3.10%)</title><rect x="1114.6" y="803.0" width="36.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1117.6" y="814.0">Nod..</text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (15 samples, 0.25%)</title><rect x="1151.1" y="835.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.1" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (4 samples, 0.07%)</title><rect x="1154.0" y="867.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.0" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.03%)</title><rect x="1154.8" y="867.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.8" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.03%)</title><rect x="1154.8" y="851.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.8" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (7 samples, 0.11%)</title><rect x="1155.6" y="899.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.6" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (15 samples, 0.25%)</title><rect x="1156.9" y="899.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.9" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (4 samples, 0.07%)</title><rect x="1158.3" y="883.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.3" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (4 samples, 0.07%)</title><rect x="1159.1" y="883.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.1" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (10 samples, 0.16%)</title><rect x="1159.8" y="899.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.8" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (9 samples, 0.15%)</title><rect x="1159.8" y="883.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.8" y="894.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (3 samples, 0.05%)</title><rect x="1161.0" y="867.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.0" y="878.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (3 samples, 0.05%)</title><rect x="1161.0" y="851.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.0" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.05%)</title><rect x="1161.0" y="835.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.0" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.05%)</title><rect x="1161.0" y="819.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.0" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.05%)</title><rect x="1161.0" y="803.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.0" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.05%)</title><rect x="1161.0" y="787.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.0" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.05%)</title><rect x="1161.0" y="771.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.0" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.05%)</title><rect x="1161.0" y="755.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.0" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.05%)</title><rect x="1161.0" y="739.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.0" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.05%)</title><rect x="1161.0" y="723.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.0" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.05%)</title><rect x="1161.0" y="707.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.0" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.05%)</title><rect x="1161.0" y="691.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.0" y="702.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.03%)</title><rect x="1161.2" y="675.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.2" y="686.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.05%)</title><rect x="1162.0" y="899.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.0" y="910.0"></text>
</g>
<g>
<title>Chunk::next_chop() (3 samples, 0.05%)</title><rect x="1162.0" y="883.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.0" y="894.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (3 samples, 0.05%)</title><rect x="1162.0" y="867.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.0" y="878.0"></text>
</g>
<g>
<title>free_large (3 samples, 0.05%)</title><rect x="1162.0" y="851.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1165.0" y="862.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (3 samples, 0.05%)</title><rect x="1162.0" y="835.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1165.0" y="846.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (3 samples, 0.05%)</title><rect x="1162.0" y="819.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1165.0" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (27 samples, 0.44%)</title><rect x="1163.1" y="915.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.1" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (24 samples, 0.39%)</title><rect x="1163.5" y="899.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.5" y="910.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (3 samples, 0.05%)</title><rect x="1164.5" y="883.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.5" y="894.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (3 samples, 0.05%)</title><rect x="1164.5" y="867.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.5" y="878.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (3 samples, 0.05%)</title><rect x="1164.5" y="851.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.5" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.05%)</title><rect x="1165.4" y="883.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.4" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (3 samples, 0.05%)</title><rect x="1165.4" y="867.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.4" y="878.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (3 samples, 0.05%)</title><rect x="1165.4" y="851.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.4" y="862.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (3 samples, 0.05%)</title><rect x="1165.4" y="835.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.4" y="846.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (3 samples, 0.05%)</title><rect x="1165.4" y="819.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.4" y="830.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (4 samples, 0.07%)</title><rect x="1166.0" y="883.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.0" y="894.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (2 samples, 0.03%)</title><rect x="1166.4" y="867.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.4" y="878.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.05%)</title><rect x="1167.0" y="883.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.0" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (2 samples, 0.03%)</title><rect x="1167.0" y="867.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.0" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.03%)</title><rect x="1167.0" y="851.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.0" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.03%)</title><rect x="1167.0" y="835.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.0" y="846.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (2 samples, 0.03%)</title><rect x="1167.0" y="819.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.0" y="830.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.03%)</title><rect x="1167.8" y="883.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.8" y="894.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.03%)</title><rect x="1167.8" y="867.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.8" y="878.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (4 samples, 0.07%)</title><rect x="1168.3" y="915.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.3" y="926.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_locking_node(AbstractLockNode*) (4 samples, 0.07%)</title><rect x="1168.3" y="899.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.3" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (4 samples, 0.07%)</title><rect x="1168.3" y="883.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.3" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.05%)</title><rect x="1168.5" y="867.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.5" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.03%)</title><rect x="1168.5" y="851.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.5" y="862.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (2 samples, 0.03%)</title><rect x="1168.5" y="835.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.5" y="846.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (2 samples, 0.03%)</title><rect x="1168.5" y="819.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.5" y="830.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (2 samples, 0.03%)</title><rect x="1168.5" y="803.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.5" y="814.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (13 samples, 0.21%)</title><rect x="1169.1" y="915.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.1" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 0.13%)</title><rect x="1169.1" y="899.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.1" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 0.11%)</title><rect x="1169.3" y="883.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.3" y="894.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (2 samples, 0.03%)</title><rect x="1169.3" y="867.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.3" y="878.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (2 samples, 0.03%)</title><rect x="1169.3" y="851.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.3" y="862.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (2 samples, 0.03%)</title><rect x="1169.3" y="835.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.3" y="846.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (2 samples, 0.03%)</title><rect x="1169.3" y="819.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.3" y="830.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (2 samples, 0.03%)</title><rect x="1170.3" y="867.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.3" y="878.0"></text>
</g>
<g>
<title>Node::hash() const (2 samples, 0.03%)</title><rect x="1170.3" y="851.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.3" y="862.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (2 samples, 0.03%)</title><rect x="1170.7" y="899.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.7" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (2 samples, 0.03%)</title><rect x="1170.7" y="883.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.7" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.03%)</title><rect x="1170.7" y="867.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.7" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.03%)</title><rect x="1170.7" y="851.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.7" y="862.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (2 samples, 0.03%)</title><rect x="1170.7" y="835.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.7" y="846.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_arraycopy_node(ArrayCopyNode*) (3 samples, 0.05%)</title><rect x="1171.1" y="899.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.1" y="910.0"></text>
</g>
<g>
<title>PhaseMacroExpand::generate_arraycopy(ArrayCopyNode*, AllocateArrayNode*, Node**, MergeMemNode*, Node**, TypePtr const*, BasicType, Node*, Node*, Node*, Node*, Node*, bool, bool, RegionNode*) (3 samples, 0.05%)</title><rect x="1171.1" y="883.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.1" y="894.0"></text>
</g>
<g>
<title>PhaseMacroExpand::generate_slow_arraycopy(ArrayCopyNode*, Node**, Node*, Node**, TypePtr const*, Node*, Node*, Node*, Node*, Node*, bool) (2 samples, 0.03%)</title><rect x="1171.2" y="867.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.2" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (2 samples, 0.03%)</title><rect x="1171.2" y="851.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.2" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.03%)</title><rect x="1171.2" y="835.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.2" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.03%)</title><rect x="1171.2" y="819.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.2" y="830.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (2 samples, 0.03%)</title><rect x="1171.2" y="803.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.2" y="814.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (2 samples, 0.03%)</title><rect x="1171.2" y="787.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.2" y="798.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (2 samples, 0.03%)</title><rect x="1171.2" y="771.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.2" y="782.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (12 samples, 0.20%)</title><rect x="1172.0" y="931.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.0" y="942.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (6 samples, 0.10%)</title><rect x="1172.0" y="915.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.0" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.10%)</title><rect x="1172.0" y="899.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.0" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.10%)</title><rect x="1172.0" y="883.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.10%)</title><rect x="1172.0" y="867.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.10%)</title><rect x="1172.0" y="851.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.10%)</title><rect x="1172.0" y="835.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.0" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.08%)</title><rect x="1172.2" y="819.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.2" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.08%)</title><rect x="1172.2" y="803.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.08%)</title><rect x="1172.2" y="787.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.08%)</title><rect x="1172.2" y="771.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.07%)</title><rect x="1172.2" y="755.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.2" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.07%)</title><rect x="1172.2" y="739.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.2" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.07%)</title><rect x="1172.2" y="723.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.07%)</title><rect x="1172.2" y="707.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.07%)</title><rect x="1172.2" y="691.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="1172.2" y="675.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.2" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="1172.2" y="659.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.2" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.05%)</title><rect x="1172.2" y="643.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.05%)</title><rect x="1172.2" y="627.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.05%)</title><rect x="1172.2" y="611.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.2" y="622.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (4 samples, 0.07%)</title><rect x="1173.2" y="915.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.2" y="926.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.03%)</title><rect x="1173.4" y="899.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.4" y="910.0"></text>
</g>
<g>
<title>PhaseStringOpts::PhaseStringOpts(PhaseGVN*, Unique_Node_List*) (2 samples, 0.03%)</title><rect x="1174.0" y="915.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.0" y="926.0"></text>
</g>
<g>
<title>PhaseStringOpts::replace_string_concat(StringConcat*) (2 samples, 0.03%)</title><rect x="1174.0" y="899.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.0" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (41 samples, 0.67%)</title><rect x="1174.3" y="931.0" width="8.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.3" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (41 samples, 0.67%)</title><rect x="1174.3" y="915.0" width="8.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (41 samples, 0.67%)</title><rect x="1174.3" y="899.0" width="8.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (41 samples, 0.67%)</title><rect x="1174.3" y="883.0" width="8.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (39 samples, 0.64%)</title><rect x="1174.3" y="867.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.3" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (32 samples, 0.52%)</title><rect x="1174.5" y="851.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.5" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (32 samples, 0.52%)</title><rect x="1174.5" y="835.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (32 samples, 0.52%)</title><rect x="1174.5" y="819.0" width="6.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (32 samples, 0.52%)</title><rect x="1174.5" y="803.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (30 samples, 0.49%)</title><rect x="1174.5" y="787.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.5" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (18 samples, 0.29%)</title><rect x="1174.5" y="771.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.5" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (18 samples, 0.29%)</title><rect x="1174.5" y="755.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (17 samples, 0.28%)</title><rect x="1174.5" y="739.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (17 samples, 0.28%)</title><rect x="1174.5" y="723.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (16 samples, 0.26%)</title><rect x="1174.5" y="707.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.5" y="718.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.03%)</title><rect x="1174.5" y="691.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.5" y="702.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.03%)</title><rect x="1174.5" y="675.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.5" y="686.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (2 samples, 0.03%)</title><rect x="1174.5" y="659.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.5" y="670.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.03%)</title><rect x="1174.5" y="643.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.5" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.03%)</title><rect x="1174.5" y="627.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.5" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.03%)</title><rect x="1174.5" y="611.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.5" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="1175.1" y="691.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.1" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.05%)</title><rect x="1175.1" y="675.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.05%)</title><rect x="1175.1" y="659.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.05%)</title><rect x="1175.1" y="643.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="1175.1" y="627.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.1" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="1175.1" y="611.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.1" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.05%)</title><rect x="1175.1" y="595.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.05%)</title><rect x="1175.1" y="579.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.05%)</title><rect x="1175.1" y="563.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1175.1" y="547.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.1" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1175.1" y="531.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.1" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1175.1" y="515.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1175.1" y="499.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1175.1" y="483.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1175.1" y="467.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.1" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (10 samples, 0.16%)</title><rect x="1175.7" y="691.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.7" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.16%)</title><rect x="1175.7" y="675.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.7" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.16%)</title><rect x="1175.7" y="659.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.16%)</title><rect x="1175.7" y="643.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.16%)</title><rect x="1175.7" y="627.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.16%)</title><rect x="1175.7" y="611.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.7" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.16%)</title><rect x="1175.7" y="595.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.7" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.16%)</title><rect x="1175.7" y="579.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.16%)</title><rect x="1175.7" y="563.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.16%)</title><rect x="1175.7" y="547.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.16%)</title><rect x="1175.7" y="531.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.7" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.08%)</title><rect x="1175.7" y="515.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.7" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.08%)</title><rect x="1175.7" y="499.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.08%)</title><rect x="1175.7" y="483.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.08%)</title><rect x="1175.7" y="467.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="1175.7" y="451.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="1175.7" y="435.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.7" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.05%)</title><rect x="1175.7" y="419.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.05%)</title><rect x="1175.7" y="403.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.05%)</title><rect x="1175.7" y="387.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.7" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.08%)</title><rect x="1176.7" y="515.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.7" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.08%)</title><rect x="1176.7" y="499.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.7" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.08%)</title><rect x="1176.7" y="483.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.08%)</title><rect x="1176.7" y="467.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.08%)</title><rect x="1176.7" y="451.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.08%)</title><rect x="1176.7" y="435.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.7" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.08%)</title><rect x="1176.7" y="419.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.7" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.08%)</title><rect x="1176.7" y="403.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.08%)</title><rect x="1176.7" y="387.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.08%)</title><rect x="1176.7" y="371.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.07%)</title><rect x="1176.7" y="355.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.7" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.07%)</title><rect x="1176.7" y="339.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.7" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.07%)</title><rect x="1176.7" y="323.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.07%)</title><rect x="1176.7" y="307.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.07%)</title><rect x="1176.7" y="291.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.07%)</title><rect x="1176.7" y="275.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.7" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.07%)</title><rect x="1176.7" y="259.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.7" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.07%)</title><rect x="1176.7" y="243.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.07%)</title><rect x="1176.7" y="227.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.07%)</title><rect x="1176.7" y="211.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.07%)</title><rect x="1176.7" y="195.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.7" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.07%)</title><rect x="1176.7" y="179.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.7" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.07%)</title><rect x="1176.7" y="163.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.07%)</title><rect x="1176.7" y="147.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.7" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.07%)</title><rect x="1176.7" y="131.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.7" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="1176.7" y="115.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1176.7" y="99.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.7" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1176.7" y="83.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.7" y="94.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1176.7" y="67.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.7" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1176.7" y="51.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.7" y="62.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1176.7" y="35.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.7" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (12 samples, 0.20%)</title><rect x="1178.0" y="771.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.0" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 0.20%)</title><rect x="1178.0" y="755.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.0" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 0.20%)</title><rect x="1178.0" y="739.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 0.20%)</title><rect x="1178.0" y="723.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 0.20%)</title><rect x="1178.0" y="707.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (12 samples, 0.20%)</title><rect x="1178.0" y="691.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.0" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.18%)</title><rect x="1178.2" y="675.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.2" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.18%)</title><rect x="1178.2" y="659.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.18%)</title><rect x="1178.2" y="643.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.18%)</title><rect x="1178.2" y="627.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.15%)</title><rect x="1178.2" y="611.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.2" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.10%)</title><rect x="1178.4" y="595.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.4" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.10%)</title><rect x="1178.4" y="579.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.10%)</title><rect x="1178.4" y="563.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.10%)</title><rect x="1178.4" y="547.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.10%)</title><rect x="1178.4" y="531.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.4" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.10%)</title><rect x="1178.4" y="515.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.4" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.10%)</title><rect x="1178.4" y="499.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.10%)</title><rect x="1178.4" y="483.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.10%)</title><rect x="1178.4" y="467.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.08%)</title><rect x="1178.4" y="451.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.4" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.08%)</title><rect x="1178.4" y="435.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.4" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.08%)</title><rect x="1178.4" y="419.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.08%)</title><rect x="1178.4" y="403.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.08%)</title><rect x="1178.4" y="387.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.07%)</title><rect x="1178.4" y="371.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.4" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="1178.6" y="355.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.6" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.05%)</title><rect x="1178.6" y="339.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.05%)</title><rect x="1178.6" y="323.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.05%)</title><rect x="1178.6" y="307.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1178.6" y="291.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.6" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1178.6" y="275.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.6" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1178.6" y="259.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1178.6" y="243.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1178.6" y="227.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.6" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1179.6" y="595.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (2 samples, 0.03%)</title><rect x="1179.9" y="611.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.9" y="622.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (2 samples, 0.03%)</title><rect x="1179.9" y="595.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.9" y="606.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (2 samples, 0.03%)</title><rect x="1179.9" y="579.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.03%)</title><rect x="1180.3" y="787.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.3" y="798.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (6 samples, 0.10%)</title><rect x="1180.7" y="851.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.08%)</title><rect x="1180.9" y="835.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.08%)</title><rect x="1180.9" y="819.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.08%)</title><rect x="1180.9" y="803.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.08%)</title><rect x="1180.9" y="787.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.08%)</title><rect x="1180.9" y="771.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.9" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.08%)</title><rect x="1180.9" y="755.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.08%)</title><rect x="1180.9" y="739.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.08%)</title><rect x="1180.9" y="723.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.08%)</title><rect x="1180.9" y="707.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.08%)</title><rect x="1180.9" y="691.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="1180.9" y="675.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.05%)</title><rect x="1180.9" y="659.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.05%)</title><rect x="1180.9" y="643.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.05%)</title><rect x="1180.9" y="627.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="1180.9" y="611.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="1180.9" y="595.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.05%)</title><rect x="1180.9" y="579.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.05%)</title><rect x="1180.9" y="563.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.05%)</title><rect x="1180.9" y="547.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="1180.9" y="531.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="1180.9" y="515.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.05%)</title><rect x="1180.9" y="499.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1181.1" y="483.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1181.1" y="467.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.1" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1181.5" y="675.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.5" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1181.5" y="659.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.5" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1181.5" y="643.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1181.5" y="627.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1181.5" y="611.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1181.5" y="595.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.5" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1181.5" y="579.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.5" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1181.5" y="563.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1181.5" y="547.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1181.5" y="531.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1181.5" y="515.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.5" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1181.5" y="499.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.5" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1181.5" y="483.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1181.5" y="467.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1181.5" y="451.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1181.5" y="435.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.5" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1181.5" y="419.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.5" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1181.5" y="403.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1181.5" y="387.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1181.5" y="371.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.5" y="382.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (4 samples, 0.07%)</title><rect x="1182.5" y="931.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.5" y="942.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.03%)</title><rect x="1182.5" y="915.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.5" y="926.0"></text>
</g>
<g>
<title>[tid=16643] (3 samples, 0.05%)</title><rect x="1183.8" y="1123.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1186.8" y="1134.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.05%)</title><rect x="1183.8" y="1107.0" width="0.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1186.8" y="1118.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.05%)</title><rect x="1183.8" y="1091.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1186.8" y="1102.0"></text>
</g>
<g>
<title>_pthread_body (3 samples, 0.05%)</title><rect x="1183.8" y="1075.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1186.8" y="1086.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.05%)</title><rect x="1183.8" y="1059.0" width="0.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1186.8" y="1070.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.05%)</title><rect x="1183.8" y="1043.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.8" y="1054.0"></text>
</g>
<g>
<title>JavaThread::run() (3 samples, 0.05%)</title><rect x="1183.8" y="1027.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.8" y="1038.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (3 samples, 0.05%)</title><rect x="1183.8" y="1011.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.8" y="1022.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (3 samples, 0.05%)</title><rect x="1183.8" y="995.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.8" y="1006.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (3 samples, 0.05%)</title><rect x="1183.8" y="979.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.8" y="990.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.05%)</title><rect x="1183.8" y="963.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.8" y="974.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (3 samples, 0.05%)</title><rect x="1183.8" y="947.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.8" y="958.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.05%)</title><rect x="1183.8" y="931.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.8" y="942.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.05%)</title><rect x="1183.8" y="915.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.8" y="926.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (3 samples, 0.05%)</title><rect x="1183.8" y="899.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.8" y="910.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.03%)</title><rect x="1184.0" y="883.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.0" y="894.0"></text>
</g>
<g>
<title>[tid=22531] (5 samples, 0.08%)</title><rect x="1184.4" y="1123.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1187.4" y="1134.0"></text>
</g>
<g>
<title>thread_start (5 samples, 0.08%)</title><rect x="1184.4" y="1107.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1187.4" y="1118.0"></text>
</g>
<g>
<title>_pthread_start (5 samples, 0.08%)</title><rect x="1184.4" y="1091.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1187.4" y="1102.0"></text>
</g>
<g>
<title>_pthread_body (5 samples, 0.08%)</title><rect x="1184.4" y="1075.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1187.4" y="1086.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (5 samples, 0.08%)</title><rect x="1184.4" y="1059.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1187.4" y="1070.0"></text>
</g>
<g>
<title>Thread::call_run() (5 samples, 0.08%)</title><rect x="1184.4" y="1043.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.4" y="1054.0"></text>
</g>
<g>
<title>JavaThread::run() (5 samples, 0.08%)</title><rect x="1184.4" y="1027.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.4" y="1038.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (5 samples, 0.08%)</title><rect x="1184.4" y="1011.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.4" y="1022.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (5 samples, 0.08%)</title><rect x="1184.4" y="995.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.4" y="1006.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (4 samples, 0.07%)</title><rect x="1184.4" y="979.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.4" y="990.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (4 samples, 0.07%)</title><rect x="1184.4" y="963.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.4" y="974.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (4 samples, 0.07%)</title><rect x="1184.4" y="947.0" width="0.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1187.4" y="958.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (2 samples, 0.03%)</title><rect x="1184.6" y="931.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.6" y="942.0"></text>
</g>
<g>
<title>[tid=42499] (22 samples, 0.36%)</title><rect x="1185.7" y="1123.0" width="4.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1188.7" y="1134.0"></text>
</g>
<g>
<title>thread_start (22 samples, 0.36%)</title><rect x="1185.7" y="1107.0" width="4.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1188.7" y="1118.0"></text>
</g>
<g>
<title>_pthread_start (22 samples, 0.36%)</title><rect x="1185.7" y="1091.0" width="4.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1188.7" y="1102.0"></text>
</g>
<g>
<title>_pthread_body (22 samples, 0.36%)</title><rect x="1185.7" y="1075.0" width="4.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1188.7" y="1086.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (22 samples, 0.36%)</title><rect x="1185.7" y="1059.0" width="4.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1188.7" y="1070.0"></text>
</g>
<g>
<title>Thread::call_run() (22 samples, 0.36%)</title><rect x="1185.7" y="1043.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.7" y="1054.0"></text>
</g>
<g>
<title>VMError::is_error_reported() (2 samples, 0.03%)</title><rect x="1185.7" y="1027.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.7" y="1038.0"></text>
</g>
<g>
<title>WatcherThread::run() (20 samples, 0.33%)</title><rect x="1186.1" y="1027.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.1" y="1038.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (17 samples, 0.28%)</title><rect x="1186.7" y="1011.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.7" y="1022.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (17 samples, 0.28%)</title><rect x="1186.7" y="995.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.7" y="1006.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (15 samples, 0.25%)</title><rect x="1186.9" y="979.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.9" y="990.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (13 samples, 0.21%)</title><rect x="1187.1" y="963.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.1" y="974.0"></text>
</g>
<g>
<title>__psynch_cvwait (9 samples, 0.15%)</title><rect x="1187.3" y="947.0" width="1.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1190.3" y="958.0"></text>
</g>
</g>
</svg>
