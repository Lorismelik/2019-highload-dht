<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="533"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="533"> </text>
<g id="frames">
<g>
<title>all (8,375 samples, 100.00%)</title><rect x="10.0" y="499.0" width="1180.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="13.0" y="510.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=41475] (1,966 samples, 23.47%)</title><rect x="10.0" y="483.0" width="277.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="13.0" y="494.0">[NIO Selector #0 tid=41475]</text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.04%)</title><rect x="10.1" y="467.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="13.1" y="478.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,960 samples, 23.40%)</title><rect x="10.6" y="467.0" width="276.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.6" y="478.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (501 samples, 5.98%)</title><rect x="11.1" y="451.0" width="70.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.1" y="462.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.02%)</title><rect x="11.3" y="435.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.3" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (3 samples, 0.04%)</title><rect x="11.5" y="435.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (3 samples, 0.04%)</title><rect x="11.5" y="419.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (3 samples, 0.04%)</title><rect x="11.5" y="403.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.5" y="414.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.02%)</title><rect x="11.7" y="387.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.7" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (495 samples, 5.91%)</title><rect x="12.0" y="435.0" width="69.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.0" y="446.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (494 samples, 5.90%)</title><rect x="12.1" y="419.0" width="69.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.1" y="430.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (494 samples, 5.90%)</title><rect x="12.1" y="403.0" width="69.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.1" y="414.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (472 samples, 5.64%)</title><rect x="12.3" y="387.0" width="66.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.3" y="398.0">sun/nio..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.02%)</title><rect x="14.2" y="371.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="17.2" y="382.0"></text>
</g>
<g>
<title>kevent (456 samples, 5.44%)</title><rect x="14.5" y="371.0" width="64.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="17.5" y="382.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (11 samples, 0.13%)</title><rect x="78.8" y="387.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="81.8" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (11 samples, 0.13%)</title><rect x="78.8" y="371.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="81.8" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.add (11 samples, 0.13%)</title><rect x="78.8" y="355.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="81.8" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.put (11 samples, 0.13%)</title><rect x="78.8" y="339.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.8" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (11 samples, 0.13%)</title><rect x="78.8" y="323.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="81.8" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 0.06%)</title><rect x="79.2" y="307.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="82.2" y="318.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.04%)</title><rect x="79.9" y="307.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="82.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (2 samples, 0.02%)</title><rect x="80.4" y="387.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="83.4" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (2 samples, 0.02%)</title><rect x="80.4" y="371.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="83.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (7 samples, 0.08%)</title><rect x="80.7" y="387.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="83.7" y="398.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (3 samples, 0.04%)</title><rect x="81.3" y="371.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="84.3" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.02%)</title><rect x="81.3" y="355.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="84.3" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.02%)</title><rect x="81.3" y="339.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="84.3" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.02%)</title><rect x="81.3" y="323.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="84.3" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,455 samples, 17.37%)</title><rect x="81.7" y="451.0" width="205.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="84.7" y="462.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,453 samples, 17.35%)</title><rect x="81.9" y="435.0" width="204.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="84.9" y="446.0">one/nio/http/HttpSession.pr..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,367 samples, 16.32%)</title><rect x="81.9" y="419.0" width="192.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="84.9" y="430.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,333 samples, 15.92%)</title><rect x="82.6" y="403.0" width="187.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="85.6" y="414.0">one/nio/http/HttpSession..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,332 samples, 15.90%)</title><rect x="82.7" y="387.0" width="187.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="85.7" y="398.0">one/nio/http/HttpServer...</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,330 samples, 15.88%)</title><rect x="82.7" y="371.0" width="187.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="85.7" y="382.0">RequestHandler1_entity.h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (243 samples, 2.90%)</title><rect x="82.8" y="355.0" width="34.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="85.8" y="366.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (235 samples, 2.81%)</title><rect x="82.8" y="339.0" width="33.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="85.8" y="350.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (10 samples, 0.12%)</title><rect x="82.8" y="323.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="85.8" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="83.1" y="307.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="86.1" y="318.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.07%)</title><rect x="83.4" y="307.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="86.4" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 0.05%)</title><rect x="83.5" y="291.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="86.5" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (225 samples, 2.69%)</title><rect x="84.3" y="323.0" width="31.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="87.3" y="334.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (225 samples, 2.69%)</title><rect x="84.3" y="307.0" width="31.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="87.3" y="318.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (221 samples, 2.64%)</title><rect x="84.4" y="291.0" width="31.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="87.4" y="302.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (221 samples, 2.64%)</title><rect x="84.4" y="275.0" width="31.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="87.4" y="286.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.02%)</title><rect x="84.5" y="259.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="87.5" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (218 samples, 2.60%)</title><rect x="84.8" y="259.0" width="30.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="87.8" y="270.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (217 samples, 2.59%)</title><rect x="85.0" y="243.0" width="30.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="88.0" y="254.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (217 samples, 2.59%)</title><rect x="85.0" y="227.0" width="30.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="88.0" y="238.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (208 samples, 2.48%)</title><rect x="85.0" y="211.0" width="29.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="88.0" y="222.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (208 samples, 2.48%)</title><rect x="85.0" y="195.0" width="29.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="88.0" y="206.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (208 samples, 2.48%)</title><rect x="85.0" y="179.0" width="29.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="88.0" y="190.0">su..</text>
</g>
<g>
<title>write (204 samples, 2.44%)</title><rect x="85.5" y="163.0" width="28.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="88.5" y="174.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (9 samples, 0.11%)</title><rect x="114.3" y="211.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="117.3" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.02%)</title><rect x="114.7" y="195.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="117.7" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (4 samples, 0.05%)</title><rect x="115.0" y="195.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="118.0" y="206.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.04%)</title><rect x="115.5" y="291.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="118.5" y="302.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.02%)</title><rect x="115.5" y="275.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="118.5" y="286.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.02%)</title><rect x="115.5" y="259.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="118.5" y="270.0"></text>
</g>
<g>
<title>_res (2 samples, 0.02%)</title><rect x="115.5" y="243.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="118.5" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8 samples, 0.10%)</title><rect x="116.0" y="339.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="119.0" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.05%)</title><rect x="116.1" y="323.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="119.1" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.05%)</title><rect x="116.1" y="307.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="119.1" y="318.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.02%)</title><rect x="116.4" y="291.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="119.4" y="302.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.02%)</title><rect x="116.4" y="275.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="119.4" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.04%)</title><rect x="116.7" y="323.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="119.7" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.04%)</title><rect x="117.1" y="355.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="120.1" y="366.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.02%)</title><rect x="117.2" y="339.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="120.2" y="350.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="117.2" y="323.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="120.2" y="334.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="117.2" y="307.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="120.2" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.02%)</title><rect x="117.2" y="291.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="120.2" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceImpl.entity (1,083 samples, 12.93%)</title><rect x="117.5" y="355.0" width="152.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="120.5" y="366.0">ru/mail/polis/servi..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (1,081 samples, 12.91%)</title><rect x="117.8" y="339.0" width="152.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="120.8" y="350.0">ru/mail/polis/dao/R..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,078 samples, 12.87%)</title><rect x="117.8" y="323.0" width="151.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="120.8" y="334.0">org/rocksdb/RocksDB..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,078 samples, 12.87%)</title><rect x="117.8" y="307.0" width="151.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="120.8" y="318.0">org/rocksdb/RocksDB..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,074 samples, 12.82%)</title><rect x="118.2" y="291.0" width="151.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="121.2" y="302.0">Java_org_rocksdb_Ro..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,066 samples, 12.73%)</title><rect x="118.8" y="275.0" width="150.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="121.8" y="286.0">rocksdb_put_helper(..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.02%)</title><rect x="119.6" y="259.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="122.6" y="270.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (7 samples, 0.08%)</title><rect x="120.5" y="259.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="123.5" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (5 samples, 0.06%)</title><rect x="120.7" y="243.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="123.7" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.05%)</title><rect x="120.7" y="227.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="123.7" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.05%)</title><rect x="120.7" y="211.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="123.7" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.05%)</title><rect x="120.7" y="195.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="123.7" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.05%)</title><rect x="120.7" y="179.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="123.7" y="190.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (2 samples, 0.02%)</title><rect x="120.7" y="163.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="123.7" y="174.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.02%)</title><rect x="121.0" y="163.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="124.0" y="174.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.02%)</title><rect x="121.0" y="147.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="124.0" y="158.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (21 samples, 0.25%)</title><rect x="121.4" y="259.0" width="3.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="124.4" y="270.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.02%)</title><rect x="122.0" y="243.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="125.0" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (8 samples, 0.10%)</title><rect x="122.3" y="243.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="125.3" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (6 samples, 0.07%)</title><rect x="122.4" y="227.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="125.4" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (5 samples, 0.06%)</title><rect x="122.4" y="211.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="125.4" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.05%)</title><rect x="122.6" y="195.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="125.6" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.05%)</title><rect x="122.6" y="179.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="125.6" y="190.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (2 samples, 0.02%)</title><rect x="122.9" y="163.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="125.9" y="174.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.06%)</title><rect x="123.4" y="243.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="126.4" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,012 samples, 12.08%)</title><rect x="124.5" y="259.0" width="142.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="127.5" y="270.0">rocksdb::Compacted..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,011 samples, 12.07%)</title><rect x="124.7" y="243.0" width="142.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="127.7" y="254.0">rocksdb::DBImpl::P..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,010 samples, 12.06%)</title><rect x="124.7" y="227.0" width="142.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="127.7" y="238.0">rocksdb::DB::Put(r..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (2 samples, 0.02%)</title><rect x="124.8" y="211.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="127.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (980 samples, 11.70%)</title><rect x="125.1" y="211.0" width="138.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="128.1" y="222.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (978 samples, 11.68%)</title><rect x="125.3" y="195.0" width="137.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="128.3" y="206.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (187 samples, 2.23%)</title><rect x="128.6" y="179.0" width="26.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="131.6" y="190.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (181 samples, 2.16%)</title><rect x="129.3" y="163.0" width="25.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="132.3" y="174.0">r..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (176 samples, 2.10%)</title><rect x="129.9" y="147.0" width="24.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="132.9" y="158.0">r..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (2 samples, 0.02%)</title><rect x="129.9" y="131.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="132.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (174 samples, 2.08%)</title><rect x="130.2" y="131.0" width="24.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="133.2" y="142.0">r..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (2 samples, 0.02%)</title><rect x="130.5" y="115.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="133.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (170 samples, 2.03%)</title><rect x="130.7" y="115.0" width="24.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="133.7" y="126.0">r..</text>
</g>
<g>
<title>rocksdb::SetPerfLevel(rocksdb::PerfLevel) (2 samples, 0.02%)</title><rect x="131.2" y="99.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="134.2" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (165 samples, 1.97%)</title><rect x="131.5" y="99.0" width="23.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="134.5" y="110.0">r..</text>
</g>
<g>
<title>write (165 samples, 1.97%)</title><rect x="131.5" y="83.0" width="23.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="134.5" y="94.0">w..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (36 samples, 0.43%)</title><rect x="155.3" y="179.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="158.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (35 samples, 0.42%)</title><rect x="155.4" y="163.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="158.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (35 samples, 0.42%)</title><rect x="155.4" y="147.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="158.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (32 samples, 0.38%)</title><rect x="155.8" y="131.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="158.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (29 samples, 0.35%)</title><rect x="156.1" y="115.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="159.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (27 samples, 0.32%)</title><rect x="156.4" y="99.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="159.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (13 samples, 0.16%)</title><rect x="158.2" y="83.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="161.2" y="94.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.02%)</title><rect x="158.5" y="67.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="161.5" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (9 samples, 0.11%)</title><rect x="158.8" y="67.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="161.8" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (6 samples, 0.07%)</title><rect x="159.2" y="51.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="162.2" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (40 samples, 0.48%)</title><rect x="160.3" y="179.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="163.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (34 samples, 0.41%)</title><rect x="161.2" y="163.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="164.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (34 samples, 0.41%)</title><rect x="161.2" y="147.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="164.2" y="158.0"></text>
</g>
<g>
<title>Java_org_rocksdb_Statistics_toString (2 samples, 0.02%)</title><rect x="161.3" y="131.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="164.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (29 samples, 0.35%)</title><rect x="161.9" y="131.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="164.9" y="142.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.02%)</title><rect x="162.2" y="115.0" width="0.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="165.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (23 samples, 0.27%)</title><rect x="162.4" y="115.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="165.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (22 samples, 0.26%)</title><rect x="162.6" y="99.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="165.6" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (20 samples, 0.24%)</title><rect x="162.9" y="83.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="165.9" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.02%)</title><rect x="164.7" y="67.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="167.7" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (5 samples, 0.06%)</title><rect x="165.0" y="67.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="168.0" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.04%)</title><rect x="165.3" y="51.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="168.3" y="62.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.04%)</title><rect x="165.3" y="35.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="168.3" y="46.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.02%)</title><rect x="165.7" y="115.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="168.7" y="126.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.02%)</title><rect x="165.7" y="99.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="168.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (2 samples, 0.02%)</title><rect x="166.1" y="179.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="169.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (461 samples, 5.50%)</title><rect x="166.4" y="179.0" width="64.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="169.4" y="190.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (460 samples, 5.49%)</title><rect x="166.5" y="163.0" width="64.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="169.5" y="174.0">rocksdb..</text>
</g>
<g>
<title>sched_yield (2 samples, 0.02%)</title><rect x="167.8" y="147.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="170.8" y="158.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (6 samples, 0.07%)</title><rect x="168.1" y="147.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="171.1" y="158.0"></text>
</g>
<g>
<title>clock_gettime (6 samples, 0.07%)</title><rect x="168.1" y="131.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="171.1" y="142.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (3 samples, 0.04%)</title><rect x="168.2" y="115.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="171.2" y="126.0"></text>
</g>
<g>
<title>_res (3 samples, 0.04%)</title><rect x="168.2" y="99.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="171.2" y="110.0"></text>
</g>
<g>
<title>mach_timebase_info (2 samples, 0.02%)</title><rect x="168.6" y="115.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="171.6" y="126.0"></text>
</g>
<g>
<title>xdrrec_ops (443 samples, 5.29%)</title><rect x="168.9" y="147.0" width="62.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="171.9" y="158.0">xdrrec..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (3 samples, 0.04%)</title><rect x="231.3" y="179.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="234.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (3 samples, 0.04%)</title><rect x="231.3" y="163.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="234.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (10 samples, 0.12%)</title><rect x="231.8" y="179.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="234.8" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (7 samples, 0.08%)</title><rect x="232.2" y="163.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="235.2" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.08%)</title><rect x="232.2" y="147.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="235.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (196 samples, 2.34%)</title><rect x="233.2" y="179.0" width="27.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="236.2" y="190.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (194 samples, 2.32%)</title><rect x="233.2" y="163.0" width="27.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="236.2" y="174.0">r..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (137 samples, 1.64%)</title><rect x="235.6" y="147.0" width="19.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="238.6" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (134 samples, 1.60%)</title><rect x="235.7" y="131.0" width="18.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="238.7" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.02%)</title><rect x="254.6" y="131.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="257.6" y="142.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (3 samples, 0.04%)</title><rect x="254.9" y="147.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="257.9" y="158.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (2 samples, 0.02%)</title><rect x="254.9" y="131.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="257.9" y="142.0"></text>
</g>
<g>
<title>xdrrec_ops (36 samples, 0.43%)</title><rect x="255.4" y="147.0" width="5.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="258.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (12 samples, 0.14%)</title><rect x="260.8" y="179.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="263.8" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (8 samples, 0.10%)</title><rect x="261.1" y="163.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="264.1" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (8 samples, 0.10%)</title><rect x="261.1" y="147.0" width="1.1" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="264.1" y="158.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (2 samples, 0.02%)</title><rect x="262.2" y="163.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="265.2" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.02%)</title><rect x="262.2" y="147.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="265.2" y="158.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.02%)</title><rect x="262.6" y="179.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="265.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (3 samples, 0.04%)</title><rect x="263.2" y="211.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="266.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (12 samples, 0.14%)</title><rect x="263.6" y="211.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="266.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (2 samples, 0.02%)</title><rect x="263.8" y="195.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="266.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 0.07%)</title><rect x="264.2" y="195.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="267.2" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (2 samples, 0.02%)</title><rect x="264.6" y="179.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="267.6" y="190.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (2 samples, 0.02%)</title><rect x="265.0" y="195.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="268.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (9 samples, 0.11%)</title><rect x="265.3" y="211.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="268.3" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (6 samples, 0.07%)</title><rect x="265.4" y="195.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="268.4" y="206.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (6 samples, 0.07%)</title><rect x="265.4" y="179.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="268.4" y="190.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.07%)</title><rect x="265.4" y="163.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="268.4" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.06%)</title><rect x="265.6" y="147.0" width="0.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="268.6" y="158.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.06%)</title><rect x="265.6" y="131.0" width="0.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="268.6" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.06%)</title><rect x="265.6" y="115.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="268.6" y="126.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (4 samples, 0.05%)</title><rect x="265.7" y="99.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="268.7" y="110.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.02%)</title><rect x="266.3" y="195.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="269.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (3 samples, 0.04%)</title><rect x="266.6" y="211.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="269.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (3 samples, 0.04%)</title><rect x="267.1" y="259.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="270.1" y="270.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (10 samples, 0.12%)</title><rect x="267.6" y="259.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="270.6" y="270.0"></text>
</g>
<g>
<title>malloc (10 samples, 0.12%)</title><rect x="267.6" y="243.0" width="1.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="270.6" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (7 samples, 0.08%)</title><rect x="267.6" y="227.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="270.6" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (6 samples, 0.07%)</title><rect x="267.7" y="211.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="270.7" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.06%)</title><rect x="267.8" y="195.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="270.8" y="206.0"></text>
</g>
<g>
<title>szone_malloc (3 samples, 0.04%)</title><rect x="268.5" y="227.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="271.5" y="238.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (3 samples, 0.04%)</title><rect x="269.1" y="275.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="272.1" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.shiftBytes (2 samples, 0.02%)</title><rect x="269.7" y="323.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="272.7" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.clone (2 samples, 0.02%)</title><rect x="269.7" y="307.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="272.7" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2 samples, 0.02%)</title><rect x="269.7" y="291.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="272.7" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="269.7" y="275.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="272.7" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 0.08%)</title><rect x="270.4" y="403.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.4" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.02%)</title><rect x="270.4" y="387.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.4" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.06%)</title><rect x="270.7" y="387.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="273.7" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.06%)</title><rect x="270.7" y="371.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="273.7" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.06%)</title><rect x="270.7" y="355.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="273.7" y="366.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.06%)</title><rect x="270.7" y="339.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="273.7" y="350.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (3 samples, 0.04%)</title><rect x="270.9" y="323.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="273.9" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (7 samples, 0.08%)</title><rect x="271.4" y="403.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="274.4" y="414.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.04%)</title><rect x="271.4" y="387.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.4" y="398.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.04%)</title><rect x="271.4" y="371.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="274.4" y="382.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.04%)</title><rect x="271.4" y="355.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="274.4" y="366.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="272.1" y="387.0" width="0.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="275.1" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (10 samples, 0.12%)</title><rect x="272.5" y="403.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.5" y="414.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.06%)</title><rect x="272.6" y="387.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="275.6" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.04%)</title><rect x="272.8" y="371.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="275.8" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="272.9" y="355.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="275.9" y="366.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.05%)</title><rect x="273.3" y="387.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.3" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.04%)</title><rect x="273.5" y="371.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="276.5" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.04%)</title><rect x="273.5" y="355.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="276.5" y="366.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (3 samples, 0.04%)</title><rect x="273.5" y="339.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="276.5" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.05%)</title><rect x="273.9" y="403.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="276.9" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.05%)</title><rect x="273.9" y="387.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="276.9" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.02%)</title><rect x="274.2" y="371.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="277.2" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.02%)</title><rect x="274.2" y="355.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="277.2" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (86 samples, 1.03%)</title><rect x="274.5" y="419.0" width="12.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="277.5" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (85 samples, 1.01%)</title><rect x="274.5" y="403.0" width="11.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="277.5" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.05%)</title><rect x="274.7" y="387.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.7" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="274.7" y="371.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="277.7" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="274.7" y="355.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="277.7" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="274.7" y="339.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="277.7" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.02%)</title><rect x="275.0" y="323.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="278.0" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.02%)</title><rect x="275.0" y="307.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="278.0" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (79 samples, 0.94%)</title><rect x="275.3" y="387.0" width="11.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="278.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.06%)</title><rect x="275.3" y="371.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="278.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.06%)</title><rect x="275.3" y="355.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="278.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.06%)</title><rect x="275.3" y="339.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.06%)</title><rect x="275.3" y="323.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="278.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.04%)</title><rect x="275.4" y="307.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="278.4" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.04%)</title><rect x="275.4" y="291.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="278.4" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (72 samples, 0.86%)</title><rect x="276.2" y="371.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (72 samples, 0.86%)</title><rect x="276.2" y="355.0" width="10.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="279.2" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (72 samples, 0.86%)</title><rect x="276.2" y="339.0" width="10.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.2" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (72 samples, 0.86%)</title><rect x="276.2" y="323.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (72 samples, 0.86%)</title><rect x="276.2" y="307.0" width="10.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="279.2" y="318.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (4 samples, 0.05%)</title><rect x="276.4" y="291.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="279.4" y="302.0"></text>
</g>
<g>
<title>fdval (4 samples, 0.05%)</title><rect x="276.4" y="275.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="279.4" y="286.0"></text>
</g>
<g>
<title>read (66 samples, 0.79%)</title><rect x="277.0" y="291.0" width="9.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="280.0" y="302.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=40707] (2,523 samples, 30.13%)</title><rect x="287.0" y="483.0" width="355.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="290.0" y="494.0">[NIO Selector #1 tid=40707]</text>
</g>
<g>
<title>[unknown_Java] (6 samples, 0.07%)</title><rect x="287.1" y="467.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="290.1" y="478.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,511 samples, 29.98%)</title><rect x="288.0" y="467.0" width="353.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="291.0" y="478.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (4 samples, 0.05%)</title><rect x="288.7" y="451.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="291.7" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (506 samples, 6.04%)</title><rect x="289.4" y="451.0" width="71.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="292.4" y="462.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.02%)</title><rect x="289.5" y="435.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="292.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (2 samples, 0.02%)</title><rect x="289.5" y="419.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="292.5" y="430.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.02%)</title><rect x="289.5" y="403.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="292.5" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.02%)</title><rect x="289.5" y="387.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="292.5" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.02%)</title><rect x="289.5" y="371.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="292.5" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.02%)</title><rect x="289.5" y="355.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="292.5" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (3 samples, 0.04%)</title><rect x="289.8" y="435.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="292.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (3 samples, 0.04%)</title><rect x="289.8" y="419.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="292.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (3 samples, 0.04%)</title><rect x="289.8" y="403.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="292.8" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (500 samples, 5.97%)</title><rect x="290.2" y="435.0" width="70.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="293.2" y="446.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (500 samples, 5.97%)</title><rect x="290.2" y="419.0" width="70.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="293.2" y="430.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (499 samples, 5.96%)</title><rect x="290.4" y="403.0" width="70.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="293.4" y="414.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (474 samples, 5.66%)</title><rect x="290.7" y="387.0" width="66.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="293.7" y="398.0">sun/nio..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (4 samples, 0.05%)</title><rect x="292.2" y="371.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="295.2" y="382.0"></text>
</g>
<g>
<title>kevent (459 samples, 5.48%)</title><rect x="292.8" y="371.0" width="64.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="295.8" y="382.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (16 samples, 0.19%)</title><rect x="357.4" y="387.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="360.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (16 samples, 0.19%)</title><rect x="357.4" y="371.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="360.4" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.add (16 samples, 0.19%)</title><rect x="357.4" y="355.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="360.4" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.put (16 samples, 0.19%)</title><rect x="357.4" y="339.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="360.4" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (16 samples, 0.19%)</title><rect x="357.4" y="323.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="360.4" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (7 samples, 0.08%)</title><rect x="358.0" y="307.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="361.0" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.&lt;init&gt; (3 samples, 0.04%)</title><rect x="358.6" y="291.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="361.6" y="302.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.06%)</title><rect x="359.0" y="307.0" width="0.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="362.0" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (7 samples, 0.08%)</title><rect x="359.7" y="387.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="362.7" y="398.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (3 samples, 0.04%)</title><rect x="360.3" y="371.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="363.3" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (3 samples, 0.04%)</title><rect x="360.3" y="355.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="363.3" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (3 samples, 0.04%)</title><rect x="360.3" y="339.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="363.3" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (3 samples, 0.04%)</title><rect x="360.3" y="323.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="363.3" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,994 samples, 23.81%)</title><rect x="360.8" y="451.0" width="281.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="363.8" y="462.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,988 samples, 23.74%)</title><rect x="361.3" y="435.0" width="280.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="364.3" y="446.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,851 samples, 22.10%)</title><rect x="361.5" y="419.0" width="260.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="364.5" y="430.0">one/nio/http/HttpSession.processHtt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,777 samples, 21.22%)</title><rect x="362.0" y="403.0" width="250.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="365.0" y="414.0">one/nio/http/HttpSession.handlePa..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="362.0" y="387.0" width="0.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="365.0" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,775 samples, 21.19%)</title><rect x="362.2" y="387.0" width="250.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="365.2" y="398.0">one/nio/http/HttpServer.handleReq..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,768 samples, 21.11%)</title><rect x="362.2" y="371.0" width="249.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="365.2" y="382.0">RequestHandler1_entity.handleRequ..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (522 samples, 6.23%)</title><rect x="362.2" y="355.0" width="73.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="365.2" y="366.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (501 samples, 5.98%)</title><rect x="362.5" y="339.0" width="70.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="365.5" y="350.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (18 samples, 0.21%)</title><rect x="362.5" y="323.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="365.5" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="363.1" y="307.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="366.1" y="318.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (12 samples, 0.14%)</title><rect x="363.4" y="307.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="366.4" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (6 samples, 0.07%)</title><rect x="363.6" y="291.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="366.6" y="302.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.02%)</title><rect x="364.2" y="275.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="367.2" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.05%)</title><rect x="364.5" y="291.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="367.5" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.04%)</title><rect x="364.6" y="275.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="367.6" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (483 samples, 5.77%)</title><rect x="365.1" y="323.0" width="68.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="368.1" y="334.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/Session.write (483 samples, 5.77%)</title><rect x="365.1" y="307.0" width="68.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="368.1" y="318.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (477 samples, 5.70%)</title><rect x="365.3" y="291.0" width="67.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="368.3" y="302.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (477 samples, 5.70%)</title><rect x="365.3" y="275.0" width="67.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="368.3" y="286.0">one/nio..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (477 samples, 5.70%)</title><rect x="365.3" y="259.0" width="67.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="368.3" y="270.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (476 samples, 5.68%)</title><rect x="365.5" y="243.0" width="67.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="368.5" y="254.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (476 samples, 5.68%)</title><rect x="365.5" y="227.0" width="67.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="368.5" y="238.0">sun/nio..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.04%)</title><rect x="365.5" y="211.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="368.5" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.04%)</title><rect x="365.5" y="195.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="368.5" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.04%)</title><rect x="365.5" y="179.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="368.5" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.04%)</title><rect x="365.5" y="163.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="368.5" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.04%)</title><rect x="365.5" y="147.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="368.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (458 samples, 5.47%)</title><rect x="365.9" y="211.0" width="64.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="368.9" y="222.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (458 samples, 5.47%)</title><rect x="365.9" y="195.0" width="64.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="368.9" y="206.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (458 samples, 5.47%)</title><rect x="365.9" y="179.0" width="64.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="368.9" y="190.0">sun/nio..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.02%)</title><rect x="367.0" y="163.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="370.0" y="174.0"></text>
</g>
<g>
<title>write (446 samples, 5.33%)</title><rect x="367.6" y="163.0" width="62.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="370.6" y="174.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (15 samples, 0.18%)</title><rect x="430.4" y="211.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="433.4" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.06%)</title><rect x="430.7" y="195.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="433.7" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.06%)</title><rect x="430.7" y="179.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="433.7" y="190.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.05%)</title><rect x="430.9" y="163.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="433.9" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (8 samples, 0.10%)</title><rect x="431.4" y="195.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="434.4" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="432.1" y="179.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="435.1" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.02%)</title><rect x="432.1" y="163.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="435.1" y="174.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.05%)</title><rect x="432.5" y="291.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="435.5" y="302.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.04%)</title><rect x="432.5" y="275.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="435.5" y="286.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (3 samples, 0.04%)</title><rect x="432.5" y="259.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="435.5" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (16 samples, 0.19%)</title><rect x="433.1" y="339.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="436.1" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (13 samples, 0.16%)</title><rect x="433.1" y="323.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="436.1" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.08%)</title><rect x="434.0" y="307.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="437.0" y="318.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.02%)</title><rect x="434.2" y="291.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="437.2" y="302.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.04%)</title><rect x="434.5" y="291.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="437.5" y="302.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.04%)</title><rect x="434.5" y="275.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="437.5" y="286.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.02%)</title><rect x="434.7" y="259.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="437.7" y="270.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.04%)</title><rect x="434.9" y="323.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="437.9" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.02%)</title><rect x="435.1" y="307.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="438.1" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (3 samples, 0.04%)</title><rect x="435.4" y="339.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="438.4" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6 samples, 0.07%)</title><rect x="435.8" y="355.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="438.8" y="366.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.04%)</title><rect x="436.2" y="339.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="439.2" y="350.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="436.3" y="323.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="439.3" y="334.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="436.3" y="307.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="439.3" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.02%)</title><rect x="436.3" y="291.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="439.3" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceImpl.entity (1,240 samples, 14.81%)</title><rect x="436.6" y="355.0" width="174.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="439.6" y="366.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.02%)</title><rect x="436.9" y="339.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="439.9" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (1,236 samples, 14.76%)</title><rect x="437.2" y="339.0" width="174.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="440.2" y="350.0">ru/mail/polis/dao/Rock..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,228 samples, 14.66%)</title><rect x="437.2" y="323.0" width="173.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="440.2" y="334.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,228 samples, 14.66%)</title><rect x="437.2" y="307.0" width="173.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="440.2" y="318.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,207 samples, 14.41%)</title><rect x="440.2" y="291.0" width="170.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="443.2" y="302.0">Java_org_rocksdb_Rocks..</text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.04%)</title><rect x="441.3" y="275.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="444.3" y="286.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,192 samples, 14.23%)</title><rect x="441.8" y="275.0" width="168.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="444.8" y="286.0">rocksdb_put_helper(JN..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (4 samples, 0.05%)</title><rect x="442.1" y="259.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="445.1" y="270.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.02%)</title><rect x="442.8" y="259.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="445.8" y="270.0"></text>
</g>
<g>
<title>compiler_barrier() (2 samples, 0.02%)</title><rect x="443.7" y="259.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="446.7" y="270.0"></text>
</g>
<g>
<title>free (2 samples, 0.02%)</title><rect x="444.1" y="259.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="447.1" y="270.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.05%)</title><rect x="444.4" y="259.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="447.4" y="270.0"></text>
</g>
<g>
<title>tiny_free_no_lock (4 samples, 0.05%)</title><rect x="444.4" y="243.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="447.4" y="254.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (11 samples, 0.13%)</title><rect x="444.9" y="259.0" width="1.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="447.9" y="270.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (4 samples, 0.05%)</title><rect x="444.9" y="243.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="447.9" y="254.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.02%)</title><rect x="445.6" y="243.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="448.6" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.04%)</title><rect x="445.9" y="243.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="448.9" y="254.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.02%)</title><rect x="445.9" y="227.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="448.9" y="238.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (22 samples, 0.26%)</title><rect x="446.5" y="259.0" width="3.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="449.5" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (8 samples, 0.10%)</title><rect x="447.9" y="243.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="450.9" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (6 samples, 0.07%)</title><rect x="447.9" y="227.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="450.9" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (5 samples, 0.06%)</title><rect x="447.9" y="211.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="450.9" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (5 samples, 0.06%)</title><rect x="447.9" y="195.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="450.9" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (5 samples, 0.06%)</title><rect x="447.9" y="179.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="450.9" y="190.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.04%)</title><rect x="449.2" y="243.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="452.2" y="254.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.02%)</title><rect x="449.6" y="259.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="452.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,120 samples, 13.37%)</title><rect x="449.9" y="259.0" width="157.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="452.9" y="270.0">rocksdb::CompactedDB..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,118 samples, 13.35%)</title><rect x="450.2" y="243.0" width="157.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="453.2" y="254.0">rocksdb::DBImpl::Put..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,114 samples, 13.30%)</title><rect x="450.3" y="227.0" width="157.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="453.3" y="238.0">rocksdb::DB::Put(roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,077 samples, 12.86%)</title><rect x="450.6" y="211.0" width="151.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="453.6" y="222.0">rocksdb::DBImpl::Wr..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,072 samples, 12.80%)</title><rect x="450.7" y="195.0" width="151.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="453.7" y="206.0">rocksdb::DBImpl::Wr..</text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (4 samples, 0.05%)</title><rect x="454.7" y="179.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="457.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (240 samples, 2.87%)</title><rect x="455.2" y="179.0" width="33.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="458.2" y="190.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (233 samples, 2.78%)</title><rect x="455.5" y="163.0" width="32.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="458.5" y="174.0">ro..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (229 samples, 2.73%)</title><rect x="455.8" y="147.0" width="32.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="458.8" y="158.0">ro..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (7 samples, 0.08%)</title><rect x="455.8" y="131.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="458.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (222 samples, 2.65%)</title><rect x="456.8" y="131.0" width="31.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="459.8" y="142.0">ro..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (5 samples, 0.06%)</title><rect x="457.5" y="115.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="460.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (212 samples, 2.53%)</title><rect x="458.2" y="115.0" width="29.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="461.2" y="126.0">ro..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.02%)</title><rect x="458.5" y="99.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="461.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (207 samples, 2.47%)</title><rect x="458.9" y="99.0" width="29.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="461.9" y="110.0">ro..</text>
</g>
<g>
<title>write (205 samples, 2.45%)</title><rect x="459.2" y="83.0" width="28.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="462.2" y="94.0">wr..</text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (2 samples, 0.02%)</title><rect x="488.1" y="147.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="491.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.02%)</title><rect x="489.0" y="179.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="492.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (2 samples, 0.02%)</title><rect x="489.3" y="179.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="492.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (62 samples, 0.74%)</title><rect x="489.6" y="179.0" width="8.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="492.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (58 samples, 0.69%)</title><rect x="490.2" y="163.0" width="8.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="493.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (2 samples, 0.02%)</title><rect x="490.6" y="147.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="493.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (53 samples, 0.63%)</title><rect x="490.9" y="147.0" width="7.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="493.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (52 samples, 0.62%)</title><rect x="491.0" y="131.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="494.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (50 samples, 0.60%)</title><rect x="491.3" y="115.0" width="7.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="494.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (45 samples, 0.54%)</title><rect x="492.0" y="99.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="495.0" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.06%)</title><rect x="494.3" y="83.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="497.3" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.02%)</title><rect x="495.0" y="83.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="498.0" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.02%)</title><rect x="495.0" y="67.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="498.0" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (20 samples, 0.24%)</title><rect x="495.4" y="83.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="498.4" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (12 samples, 0.14%)</title><rect x="496.5" y="67.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="499.5" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (7 samples, 0.08%)</title><rect x="497.2" y="51.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="500.2" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (52 samples, 0.62%)</title><rect x="498.3" y="179.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="501.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (44 samples, 0.53%)</title><rect x="499.5" y="163.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="502.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (43 samples, 0.51%)</title><rect x="499.6" y="147.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="502.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (2 samples, 0.02%)</title><rect x="499.8" y="131.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="502.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (39 samples, 0.47%)</title><rect x="500.2" y="131.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="503.2" y="142.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.02%)</title><rect x="500.5" y="115.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="503.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (29 samples, 0.35%)</title><rect x="500.9" y="115.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="503.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (27 samples, 0.32%)</title><rect x="501.2" y="99.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="504.2" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (24 samples, 0.29%)</title><rect x="501.6" y="83.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="504.6" y="94.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.02%)</title><rect x="504.3" y="67.0" width="0.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="507.3" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.04%)</title><rect x="504.5" y="67.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="507.5" y="78.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (5 samples, 0.06%)</title><rect x="505.0" y="115.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="508.0" y="126.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.06%)</title><rect x="505.0" y="99.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="508.0" y="110.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.05%)</title><rect x="505.0" y="83.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="508.0" y="94.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.04%)</title><rect x="505.1" y="67.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="508.1" y="78.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.04%)</title><rect x="505.1" y="51.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="508.1" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (317 samples, 3.79%)</title><rect x="505.8" y="179.0" width="44.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="508.8" y="190.0">rock..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (313 samples, 3.74%)</title><rect x="506.0" y="163.0" width="44.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="509.0" y="174.0">rock..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (5 samples, 0.06%)</title><rect x="507.2" y="147.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="510.2" y="158.0"></text>
</g>
<g>
<title>clock_gettime (5 samples, 0.06%)</title><rect x="507.2" y="131.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="510.2" y="142.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (2 samples, 0.02%)</title><rect x="507.5" y="115.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="510.5" y="126.0"></text>
</g>
<g>
<title>xdrrec_ops (298 samples, 3.56%)</title><rect x="508.1" y="147.0" width="42.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="511.1" y="158.0">xdr..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (2 samples, 0.02%)</title><rect x="550.2" y="163.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="553.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (9 samples, 0.11%)</title><rect x="550.5" y="179.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="553.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (8 samples, 0.10%)</title><rect x="550.5" y="163.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="553.5" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (7 samples, 0.08%)</title><rect x="550.5" y="147.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="553.5" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.07%)</title><rect x="550.5" y="131.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="553.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (12 samples, 0.14%)</title><rect x="551.7" y="179.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="554.7" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.02%)</title><rect x="551.9" y="163.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="554.9" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (8 samples, 0.10%)</title><rect x="552.2" y="163.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="555.2" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (8 samples, 0.10%)</title><rect x="552.2" y="147.0" width="1.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="555.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (316 samples, 3.77%)</title><rect x="553.4" y="179.0" width="44.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="556.4" y="190.0">rock..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (314 samples, 3.75%)</title><rect x="553.6" y="163.0" width="44.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="556.6" y="174.0">rock..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (2 samples, 0.02%)</title><rect x="556.8" y="147.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="559.8" y="158.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.02%)</title><rect x="556.8" y="131.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="559.8" y="142.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (249 samples, 2.97%)</title><rect x="557.1" y="147.0" width="35.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="560.1" y="158.0">std..</text>
</g>
<g>
<title>__psynch_cvwait (238 samples, 2.84%)</title><rect x="557.2" y="131.0" width="33.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="560.2" y="142.0">__..</text>
</g>
<g>
<title>_pthread_cond_wait (9 samples, 0.11%)</title><rect x="590.9" y="131.0" width="1.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="593.9" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (5 samples, 0.06%)</title><rect x="591.5" y="115.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="594.5" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (5 samples, 0.06%)</title><rect x="591.5" y="99.0" width="0.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="594.5" y="110.0"></text>
</g>
<g>
<title>xdrrec_ops (38 samples, 0.45%)</title><rect x="592.5" y="147.0" width="5.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="595.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (13 samples, 0.16%)</title><rect x="598.0" y="179.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="601.0" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (13 samples, 0.16%)</title><rect x="598.0" y="163.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="601.0" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (13 samples, 0.16%)</title><rect x="598.0" y="147.0" width="1.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="601.0" y="158.0"></text>
</g>
<g>
<title>std::__1::condition_variable::~condition_variable() (2 samples, 0.02%)</title><rect x="600.2" y="179.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="603.2" y="190.0"></text>
</g>
<g>
<title>pthread_cond_destroy (2 samples, 0.02%)</title><rect x="600.2" y="163.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="603.2" y="174.0"></text>
</g>
<g>
<title>std::__1::mutex::~mutex() (2 samples, 0.02%)</title><rect x="600.5" y="179.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="603.5" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_destroy (2 samples, 0.02%)</title><rect x="600.5" y="163.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="603.5" y="174.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.02%)</title><rect x="600.9" y="179.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="603.9" y="190.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (4 samples, 0.05%)</title><rect x="601.2" y="179.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="604.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (3 samples, 0.04%)</title><rect x="601.3" y="163.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="604.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (2 samples, 0.02%)</title><rect x="601.9" y="195.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="604.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (9 samples, 0.11%)</title><rect x="602.3" y="211.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="605.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (5 samples, 0.06%)</title><rect x="602.6" y="195.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="605.6" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (3 samples, 0.04%)</title><rect x="602.7" y="179.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="605.7" y="190.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.02%)</title><rect x="602.9" y="163.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="605.9" y="174.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (2 samples, 0.02%)</title><rect x="603.3" y="195.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="606.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (12 samples, 0.14%)</title><rect x="603.6" y="211.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="606.6" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (9 samples, 0.11%)</title><rect x="603.9" y="195.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="606.9" y="206.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (8 samples, 0.10%)</title><rect x="604.0" y="179.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="607.0" y="190.0"></text>
</g>
<g>
<title>malloc (8 samples, 0.10%)</title><rect x="604.0" y="163.0" width="1.1" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="607.0" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (8 samples, 0.10%)</title><rect x="604.0" y="147.0" width="1.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="607.0" y="158.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (6 samples, 0.07%)</title><rect x="604.3" y="131.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="607.3" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (6 samples, 0.07%)</title><rect x="604.3" y="115.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="607.3" y="126.0"></text>
</g>
<g>
<title>set_tiny_meta_header_in_use (2 samples, 0.02%)</title><rect x="604.6" y="99.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="607.6" y="110.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (2 samples, 0.02%)</title><rect x="604.9" y="99.0" width="0.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="607.9" y="110.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (9 samples, 0.11%)</title><rect x="605.3" y="211.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="608.3" y="222.0"></text>
</g>
<g>
<title>free (2 samples, 0.02%)</title><rect x="605.4" y="195.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="608.4" y="206.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.02%)</title><rect x="605.4" y="179.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="608.4" y="190.0"></text>
</g>
<g>
<title>free_tiny (5 samples, 0.06%)</title><rect x="605.7" y="195.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="608.7" y="206.0"></text>
</g>
<g>
<title>tiny_free_no_lock (3 samples, 0.04%)</title><rect x="606.0" y="179.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="609.0" y="190.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (4 samples, 0.05%)</title><rect x="606.6" y="211.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="609.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (2 samples, 0.02%)</title><rect x="607.7" y="259.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="610.7" y="270.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (13 samples, 0.16%)</title><rect x="608.0" y="259.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="611.0" y="270.0"></text>
</g>
<g>
<title>malloc (12 samples, 0.14%)</title><rect x="608.0" y="243.0" width="1.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="611.0" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (12 samples, 0.14%)</title><rect x="608.0" y="227.0" width="1.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="611.0" y="238.0"></text>
</g>
<g>
<title>default_zone_malloc (4 samples, 0.05%)</title><rect x="608.1" y="211.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="611.1" y="222.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (7 samples, 0.08%)</title><rect x="608.7" y="211.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="611.7" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (6 samples, 0.07%)</title><rect x="608.8" y="195.0" width="0.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="611.8" y="206.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.02%)</title><rect x="609.9" y="275.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="612.9" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.shiftBytes (5 samples, 0.06%)</title><rect x="610.2" y="323.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="613.2" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.clone (5 samples, 0.06%)</title><rect x="610.2" y="307.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="613.2" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (4 samples, 0.05%)</title><rect x="610.2" y="291.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="613.2" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="610.2" y="275.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="613.2" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="610.5" y="259.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="613.5" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.toArray (3 samples, 0.04%)</title><rect x="610.9" y="323.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="613.9" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.04%)</title><rect x="610.9" y="307.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="613.9" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="610.9" y="291.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="613.9" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="611.1" y="275.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="614.1" y="286.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (3 samples, 0.04%)</title><rect x="611.5" y="371.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="614.5" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.04%)</title><rect x="611.5" y="355.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="614.5" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.02%)</title><rect x="611.6" y="339.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="614.6" y="350.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.02%)</title><rect x="611.6" y="323.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="614.6" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 0.04%)</title><rect x="611.9" y="371.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="614.9" y="382.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.04%)</title><rect x="611.9" y="355.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="614.9" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.02%)</title><rect x="612.0" y="339.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="615.0" y="350.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.02%)</title><rect x="612.0" y="323.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="615.0" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (14 samples, 0.17%)</title><rect x="612.3" y="403.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="615.3" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (9 samples, 0.11%)</title><rect x="612.3" y="387.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="615.3" y="398.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.04%)</title><rect x="613.2" y="371.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="616.2" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="613.3" y="355.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="616.3" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.06%)</title><rect x="613.6" y="387.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="616.6" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.06%)</title><rect x="613.6" y="371.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="616.6" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.05%)</title><rect x="613.7" y="355.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="616.7" y="366.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.05%)</title><rect x="613.7" y="339.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="616.7" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (33 samples, 0.39%)</title><rect x="614.3" y="403.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="617.3" y="414.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (25 samples, 0.30%)</title><rect x="614.4" y="387.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="617.4" y="398.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (25 samples, 0.30%)</title><rect x="614.4" y="371.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="617.4" y="382.0"></text>
</g>
<g>
<title>java/lang/String.charAt (25 samples, 0.30%)</title><rect x="614.4" y="355.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="617.4" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.02%)</title><rect x="616.3" y="339.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="619.3" y="350.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.07%)</title><rect x="616.7" y="339.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="619.7" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.02%)</title><rect x="617.5" y="339.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="620.5" y="350.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="618.1" y="387.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="621.1" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (4 samples, 0.05%)</title><rect x="618.4" y="387.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="621.4" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (4 samples, 0.05%)</title><rect x="619.0" y="403.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="622.0" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (15 samples, 0.18%)</title><rect x="619.5" y="403.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="622.5" y="414.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8 samples, 0.10%)</title><rect x="619.9" y="387.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="622.9" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (5 samples, 0.06%)</title><rect x="620.4" y="371.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="623.4" y="382.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.05%)</title><rect x="621.1" y="387.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="624.1" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.05%)</title><rect x="621.1" y="371.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="624.1" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.04%)</title><rect x="621.2" y="355.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="624.2" y="366.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (2 samples, 0.02%)</title><rect x="621.3" y="339.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="624.3" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.06%)</title><rect x="621.6" y="403.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="624.6" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.06%)</title><rect x="621.6" y="387.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="624.6" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.04%)</title><rect x="621.9" y="371.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="624.9" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.04%)</title><rect x="621.9" y="355.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="624.9" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (135 samples, 1.61%)</title><rect x="622.3" y="419.0" width="19.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="625.3" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (135 samples, 1.61%)</title><rect x="622.3" y="403.0" width="19.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="625.3" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.02%)</title><rect x="623.0" y="387.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="626.0" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="623.0" y="371.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="626.0" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="623.0" y="355.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="626.0" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="623.0" y="339.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="626.0" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (128 samples, 1.53%)</title><rect x="623.3" y="387.0" width="18.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="626.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.07%)</title><rect x="623.3" y="371.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="626.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.07%)</title><rect x="623.3" y="355.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="626.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.07%)</title><rect x="623.3" y="339.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="626.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.07%)</title><rect x="623.3" y="323.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="626.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.04%)</title><rect x="623.6" y="307.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="626.6" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.04%)</title><rect x="623.6" y="291.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="626.6" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (122 samples, 1.46%)</title><rect x="624.2" y="371.0" width="17.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="627.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (122 samples, 1.46%)</title><rect x="624.2" y="355.0" width="17.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="627.2" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (121 samples, 1.44%)</title><rect x="624.3" y="339.0" width="17.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="627.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (121 samples, 1.44%)</title><rect x="624.3" y="323.0" width="17.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="627.3" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (121 samples, 1.44%)</title><rect x="624.3" y="307.0" width="17.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="627.3" y="318.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (3 samples, 0.04%)</title><rect x="624.7" y="291.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="627.7" y="302.0"></text>
</g>
<g>
<title>read (114 samples, 1.36%)</title><rect x="625.3" y="291.0" width="16.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="628.3" y="302.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.04%)</title><rect x="641.4" y="435.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="644.4" y="446.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.02%)</title><rect x="641.4" y="419.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="644.4" y="430.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.02%)</title><rect x="641.4" y="403.0" width="0.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="644.4" y="414.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (4 samples, 0.05%)</title><rect x="641.9" y="467.0" width="0.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="644.9" y="478.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=24835] (1,967 samples, 23.49%)</title><rect x="642.5" y="483.0" width="277.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="645.5" y="494.0">[NIO Selector #2 tid=24835]</text>
</g>
<g>
<title>[unknown_Java] (6 samples, 0.07%)</title><rect x="642.8" y="467.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="645.8" y="478.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.02%)</title><rect x="643.3" y="451.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="646.3" y="462.0"></text>
</g>
<g>
<title>_res (2 samples, 0.02%)</title><rect x="643.3" y="435.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="646.3" y="446.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,956 samples, 23.36%)</title><rect x="643.6" y="467.0" width="275.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="646.6" y="478.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (3 samples, 0.04%)</title><rect x="643.6" y="451.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="646.6" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (3 samples, 0.04%)</title><rect x="643.6" y="435.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="646.6" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (518 samples, 6.19%)</title><rect x="644.2" y="451.0" width="73.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="647.2" y="462.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (8 samples, 0.10%)</title><rect x="644.3" y="435.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="647.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (8 samples, 0.10%)</title><rect x="644.3" y="419.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="647.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (6 samples, 0.07%)</title><rect x="644.6" y="403.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="647.6" y="414.0"></text>
</g>
<g>
<title>_res (2 samples, 0.02%)</title><rect x="644.6" y="387.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="647.6" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.02%)</title><rect x="644.9" y="387.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="647.9" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.setRelease (2 samples, 0.02%)</title><rect x="644.9" y="371.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="647.9" y="382.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.02%)</title><rect x="645.2" y="387.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="648.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (509 samples, 6.08%)</title><rect x="645.4" y="435.0" width="71.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="648.4" y="446.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (509 samples, 6.08%)</title><rect x="645.4" y="419.0" width="71.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="648.4" y="430.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (509 samples, 6.08%)</title><rect x="645.4" y="403.0" width="71.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="648.4" y="414.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (493 samples, 5.89%)</title><rect x="645.4" y="387.0" width="69.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="648.4" y="398.0">sun/nio..</text>
</g>
<g>
<title>kevent (473 samples, 5.65%)</title><rect x="648.3" y="371.0" width="66.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="651.3" y="382.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.04%)</title><rect x="714.9" y="387.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="717.9" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.04%)</title><rect x="714.9" y="371.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="717.9" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.04%)</title><rect x="714.9" y="355.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="717.9" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.04%)</title><rect x="714.9" y="339.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="717.9" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.04%)</title><rect x="714.9" y="323.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="717.9" y="334.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.02%)</title><rect x="715.0" y="307.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="718.0" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.02%)</title><rect x="715.3" y="387.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="718.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (10 samples, 0.12%)</title><rect x="715.7" y="387.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="718.7" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,434 samples, 17.12%)</title><rect x="717.2" y="451.0" width="202.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="720.2" y="462.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,433 samples, 17.11%)</title><rect x="717.2" y="435.0" width="201.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="720.2" y="446.0">one/nio/http/HttpSession.p..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,362 samples, 16.26%)</title><rect x="717.4" y="419.0" width="191.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="720.4" y="430.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,322 samples, 15.79%)</title><rect x="717.9" y="403.0" width="186.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="720.9" y="414.0">one/nio/http/HttpSession..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,322 samples, 15.79%)</title><rect x="717.9" y="387.0" width="186.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="720.9" y="398.0">one/nio/http/HttpServer...</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,321 samples, 15.77%)</title><rect x="717.9" y="371.0" width="186.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="720.9" y="382.0">RequestHandler1_entity.h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (264 samples, 3.15%)</title><rect x="717.9" y="355.0" width="37.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="720.9" y="366.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (257 samples, 3.07%)</title><rect x="718.1" y="339.0" width="36.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="721.1" y="350.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (9 samples, 0.11%)</title><rect x="718.1" y="323.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="721.1" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="718.1" y="307.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="721.1" y="318.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (7 samples, 0.08%)</title><rect x="718.4" y="307.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="721.4" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.06%)</title><rect x="718.7" y="291.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="721.7" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.06%)</title><rect x="718.7" y="275.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="721.7" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (248 samples, 2.96%)</title><rect x="719.4" y="323.0" width="35.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="722.4" y="334.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (248 samples, 2.96%)</title><rect x="719.4" y="307.0" width="35.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="722.4" y="318.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (237 samples, 2.83%)</title><rect x="719.7" y="291.0" width="33.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="722.7" y="302.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (237 samples, 2.83%)</title><rect x="719.7" y="275.0" width="33.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="722.7" y="286.0">on..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (236 samples, 2.82%)</title><rect x="719.8" y="259.0" width="33.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="722.8" y="270.0">su..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.02%)</title><rect x="719.8" y="243.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="722.8" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (233 samples, 2.78%)</title><rect x="720.3" y="243.0" width="32.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="723.3" y="254.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (233 samples, 2.78%)</title><rect x="720.3" y="227.0" width="32.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="723.3" y="238.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (230 samples, 2.75%)</title><rect x="720.3" y="211.0" width="32.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="723.3" y="222.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (230 samples, 2.75%)</title><rect x="720.3" y="195.0" width="32.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="723.3" y="206.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (230 samples, 2.75%)</title><rect x="720.3" y="179.0" width="32.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="723.3" y="190.0">su..</text>
</g>
<g>
<title>write (220 samples, 2.63%)</title><rect x="721.7" y="163.0" width="31.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="724.7" y="174.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.04%)</title><rect x="752.7" y="211.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="755.7" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.02%)</title><rect x="752.8" y="195.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="755.8" y="206.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.11%)</title><rect x="753.1" y="291.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="756.1" y="302.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.06%)</title><rect x="753.2" y="275.0" width="0.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="756.2" y="286.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.05%)</title><rect x="753.4" y="259.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="756.4" y="270.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (3 samples, 0.04%)</title><rect x="753.9" y="275.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="756.9" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.06%)</title><rect x="754.4" y="339.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="757.4" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.02%)</title><rect x="754.5" y="323.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="757.5" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.02%)</title><rect x="754.5" y="307.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="757.5" y="318.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.02%)</title><rect x="754.8" y="323.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="757.8" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.02%)</title><rect x="755.1" y="355.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="758.1" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceImpl.entity (1,055 samples, 12.60%)</title><rect x="755.3" y="355.0" width="148.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="758.3" y="366.0">ru/mail/polis/servi..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.06%)</title><rect x="755.6" y="339.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="758.6" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.06%)</title><rect x="755.6" y="323.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="758.6" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="755.9" y="307.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="758.9" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="755.9" y="291.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="758.9" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="756.0" y="275.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="759.0" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.02%)</title><rect x="756.0" y="259.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="759.0" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.02%)</title><rect x="756.0" y="243.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="759.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (1,048 samples, 12.51%)</title><rect x="756.3" y="339.0" width="147.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="759.3" y="350.0">ru/mail/polis/dao/R..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,046 samples, 12.49%)</title><rect x="756.3" y="323.0" width="147.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="759.3" y="334.0">org/rocksdb/RocksDB..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,046 samples, 12.49%)</title><rect x="756.3" y="307.0" width="147.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="759.3" y="318.0">org/rocksdb/RocksDB..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,039 samples, 12.41%)</title><rect x="757.3" y="291.0" width="146.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="760.3" y="302.0">Java_org_rocksdb_R..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,032 samples, 12.32%)</title><rect x="757.9" y="275.0" width="145.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="760.9" y="286.0">rocksdb_put_helper..</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.02%)</title><rect x="758.3" y="259.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="761.3" y="270.0"></text>
</g>
<g>
<title>compiler_barrier() (2 samples, 0.02%)</title><rect x="758.7" y="259.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="761.7" y="270.0"></text>
</g>
<g>
<title>default_zone_free_definite_size (2 samples, 0.02%)</title><rect x="759.0" y="259.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="762.0" y="270.0"></text>
</g>
<g>
<title>free (2 samples, 0.02%)</title><rect x="759.3" y="259.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="762.3" y="270.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.02%)</title><rect x="759.6" y="259.0" width="0.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="762.6" y="270.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.05%)</title><rect x="759.8" y="259.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="762.8" y="270.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (16 samples, 0.19%)</title><rect x="760.4" y="259.0" width="2.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="763.4" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (5 samples, 0.06%)</title><rect x="760.8" y="243.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="763.8" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.04%)</title><rect x="761.0" y="227.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="764.0" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.04%)</title><rect x="761.0" y="211.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="764.0" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.02%)</title><rect x="761.1" y="195.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="764.1" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.02%)</title><rect x="761.1" y="179.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="764.1" y="190.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.06%)</title><rect x="761.7" y="243.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="764.7" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (989 samples, 11.81%)</title><rect x="762.7" y="259.0" width="139.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="765.7" y="270.0">rocksdb::Compacte..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (988 samples, 11.80%)</title><rect x="762.8" y="243.0" width="139.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="765.8" y="254.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (986 samples, 11.77%)</title><rect x="762.8" y="227.0" width="138.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="765.8" y="238.0">rocksdb::DB::Put(..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (3 samples, 0.04%)</title><rect x="763.1" y="211.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="766.1" y="222.0"></text>
</g>
<g>
<title>free (2 samples, 0.02%)</title><rect x="763.5" y="211.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="766.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (961 samples, 11.47%)</title><rect x="763.8" y="211.0" width="135.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="766.8" y="222.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (2 samples, 0.02%)</title><rect x="764.1" y="195.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="767.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (953 samples, 11.38%)</title><rect x="764.4" y="195.0" width="134.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="767.4" y="206.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (204 samples, 2.44%)</title><rect x="766.7" y="179.0" width="28.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="769.7" y="190.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (198 samples, 2.36%)</title><rect x="767.2" y="163.0" width="27.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="770.2" y="174.0">r..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (197 samples, 2.35%)</title><rect x="767.3" y="147.0" width="27.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="770.3" y="158.0">r..</text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (197 samples, 2.35%)</title><rect x="767.3" y="131.0" width="27.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="770.3" y="142.0">r..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Flush() (2 samples, 0.02%)</title><rect x="768.2" y="115.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="771.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (5 samples, 0.06%)</title><rect x="768.4" y="115.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="771.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::EnvOptions::EnvOptions() (2 samples, 0.02%)</title><rect x="768.9" y="99.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="771.9" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (183 samples, 2.19%)</title><rect x="769.1" y="115.0" width="25.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="772.1" y="126.0">r..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (180 samples, 2.15%)</title><rect x="769.6" y="99.0" width="25.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="772.6" y="110.0">r..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (3 samples, 0.04%)</title><rect x="769.7" y="83.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="772.7" y="94.0"></text>
</g>
<g>
<title>write (176 samples, 2.10%)</title><rect x="770.1" y="83.0" width="24.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="773.1" y="94.0">w..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::IsLatestPersistentState(rocksdb::WriteBatch const*) (2 samples, 0.02%)</title><rect x="795.2" y="163.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="798.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (3 samples, 0.04%)</title><rect x="795.8" y="179.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="798.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (37 samples, 0.44%)</title><rect x="796.2" y="179.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="799.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (36 samples, 0.43%)</title><rect x="796.3" y="163.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="799.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (35 samples, 0.42%)</title><rect x="796.5" y="147.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="799.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (33 samples, 0.39%)</title><rect x="796.8" y="131.0" width="4.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="799.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (30 samples, 0.36%)</title><rect x="796.8" y="115.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="799.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (28 samples, 0.33%)</title><rect x="797.0" y="99.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="800.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (10 samples, 0.12%)</title><rect x="799.6" y="83.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="802.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (5 samples, 0.06%)</title><rect x="800.3" y="67.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="803.3" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.02%)</title><rect x="800.7" y="51.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="803.7" y="62.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long long, rocksdb::ValueType) (2 samples, 0.02%)</title><rect x="801.0" y="115.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="804.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (35 samples, 0.42%)</title><rect x="801.4" y="179.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="804.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (31 samples, 0.37%)</title><rect x="802.0" y="163.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="805.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (30 samples, 0.36%)</title><rect x="802.1" y="147.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="805.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (28 samples, 0.33%)</title><rect x="802.4" y="131.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="805.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (20 samples, 0.24%)</title><rect x="802.7" y="115.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="805.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (17 samples, 0.20%)</title><rect x="803.1" y="99.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="806.1" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (17 samples, 0.20%)</title><rect x="803.1" y="83.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="806.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (8 samples, 0.10%)</title><rect x="804.4" y="67.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="807.4" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.05%)</title><rect x="804.8" y="51.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="807.8" y="62.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.02%)</title><rect x="805.1" y="35.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="808.1" y="46.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.02%)</title><rect x="805.5" y="115.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="808.5" y="126.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (4 samples, 0.05%)</title><rect x="805.8" y="115.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="808.8" y="126.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.04%)</title><rect x="805.9" y="99.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="808.9" y="110.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.02%)</title><rect x="805.9" y="83.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="808.9" y="94.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (417 samples, 4.98%)</title><rect x="806.3" y="179.0" width="58.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="809.3" y="190.0">rocksd..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (416 samples, 4.97%)</title><rect x="806.5" y="163.0" width="58.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="809.5" y="174.0">rocksd..</text>
</g>
<g>
<title>sched_yield (2 samples, 0.02%)</title><rect x="807.5" y="147.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="810.5" y="158.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (4 samples, 0.05%)</title><rect x="807.8" y="147.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="810.8" y="158.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.04%)</title><rect x="807.8" y="131.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="810.8" y="142.0"></text>
</g>
<g>
<title>_res (2 samples, 0.02%)</title><rect x="807.8" y="115.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="810.8" y="126.0"></text>
</g>
<g>
<title>xdrrec_ops (403 samples, 4.81%)</title><rect x="808.3" y="147.0" width="56.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="811.3" y="158.0">xdrrec..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (5 samples, 0.06%)</title><rect x="865.2" y="179.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="868.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (5 samples, 0.06%)</title><rect x="865.2" y="163.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="868.2" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (5 samples, 0.06%)</title><rect x="865.2" y="147.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="868.2" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.06%)</title><rect x="865.2" y="131.0" width="0.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="868.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (10 samples, 0.12%)</title><rect x="865.9" y="179.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="868.9" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (7 samples, 0.08%)</title><rect x="866.2" y="163.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="869.2" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.08%)</title><rect x="866.2" y="147.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="869.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (207 samples, 2.47%)</title><rect x="867.3" y="179.0" width="29.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="870.3" y="190.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (205 samples, 2.45%)</title><rect x="867.3" y="163.0" width="28.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="870.3" y="174.0">ro..</text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.02%)</title><rect x="870.9" y="147.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="873.9" y="158.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (151 samples, 1.80%)</title><rect x="871.3" y="147.0" width="21.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="874.3" y="158.0">s..</text>
</g>
<g>
<title>__psynch_cvwait (140 samples, 1.67%)</title><rect x="871.3" y="131.0" width="19.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="874.3" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (10 samples, 0.12%)</title><rect x="891.0" y="131.0" width="1.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="894.0" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (5 samples, 0.06%)</title><rect x="891.7" y="115.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="894.7" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (5 samples, 0.06%)</title><rect x="891.7" y="99.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="894.7" y="110.0"></text>
</g>
<g>
<title>xdrrec_ops (25 samples, 0.30%)</title><rect x="892.7" y="147.0" width="3.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="895.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (9 samples, 0.11%)</title><rect x="896.5" y="179.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="899.5" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (8 samples, 0.10%)</title><rect x="896.7" y="163.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="899.7" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.08%)</title><rect x="896.8" y="147.0" width="1.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="899.8" y="158.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.02%)</title><rect x="898.2" y="179.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="901.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (3 samples, 0.04%)</title><rect x="898.6" y="195.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="901.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (5 samples, 0.06%)</title><rect x="899.2" y="211.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="902.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.02%)</title><rect x="899.5" y="195.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="902.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (8 samples, 0.10%)</title><rect x="899.9" y="211.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="902.9" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (5 samples, 0.06%)</title><rect x="900.2" y="195.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="903.2" y="206.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (4 samples, 0.05%)</title><rect x="900.3" y="179.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="903.3" y="190.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.05%)</title><rect x="900.3" y="163.0" width="0.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="903.3" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.04%)</title><rect x="900.5" y="147.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="903.5" y="158.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="900.6" y="131.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="903.6" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.02%)</title><rect x="900.6" y="115.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="903.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (5 samples, 0.06%)</title><rect x="901.0" y="211.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="904.0" y="222.0"></text>
</g>
<g>
<title>free (2 samples, 0.02%)</title><rect x="901.0" y="195.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="904.0" y="206.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.02%)</title><rect x="901.3" y="195.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="904.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (3 samples, 0.04%)</title><rect x="902.0" y="259.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="905.0" y="270.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (6 samples, 0.07%)</title><rect x="902.4" y="259.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="905.4" y="270.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.07%)</title><rect x="902.4" y="243.0" width="0.9" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="905.4" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.07%)</title><rect x="902.4" y="227.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="905.4" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.05%)</title><rect x="902.7" y="211.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="905.7" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.05%)</title><rect x="902.7" y="195.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="905.7" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (4 samples, 0.05%)</title><rect x="902.7" y="179.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="905.7" y="190.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (3 samples, 0.04%)</title><rect x="903.3" y="275.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="906.3" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (11 samples, 0.13%)</title><rect x="904.1" y="403.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="907.1" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (7 samples, 0.08%)</title><rect x="904.1" y="387.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="907.1" y="398.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.05%)</title><rect x="904.5" y="371.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="907.5" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.04%)</title><rect x="904.7" y="355.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="907.7" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.02%)</title><rect x="904.8" y="339.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="907.8" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.05%)</title><rect x="905.1" y="387.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="908.1" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.05%)</title><rect x="905.1" y="371.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="908.1" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.05%)</title><rect x="905.1" y="355.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="908.1" y="366.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.04%)</title><rect x="905.3" y="339.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="908.3" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (9 samples, 0.11%)</title><rect x="905.7" y="403.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="908.7" y="414.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (6 samples, 0.07%)</title><rect x="905.7" y="387.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="908.7" y="398.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (6 samples, 0.07%)</title><rect x="905.7" y="371.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="908.7" y="382.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 0.06%)</title><rect x="905.7" y="355.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="908.7" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (3 samples, 0.04%)</title><rect x="906.5" y="387.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="909.5" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (9 samples, 0.11%)</title><rect x="906.9" y="403.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="909.9" y="414.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.02%)</title><rect x="907.9" y="387.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="910.9" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.02%)</title><rect x="907.9" y="371.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="910.9" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.02%)</title><rect x="907.9" y="355.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="910.9" y="366.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (2 samples, 0.02%)</title><rect x="907.9" y="339.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="910.9" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.10%)</title><rect x="908.2" y="403.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="911.2" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.10%)</title><rect x="908.2" y="387.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="911.2" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.05%)</title><rect x="908.8" y="371.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="911.8" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.05%)</title><rect x="908.8" y="355.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="911.8" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (69 samples, 0.82%)</title><rect x="909.3" y="419.0" width="9.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="912.3" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (69 samples, 0.82%)</title><rect x="909.3" y="403.0" width="9.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="912.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (67 samples, 0.80%)</title><rect x="909.6" y="387.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="912.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.04%)</title><rect x="909.6" y="371.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="912.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.04%)</title><rect x="909.6" y="355.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="912.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.04%)</title><rect x="909.6" y="339.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="912.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.04%)</title><rect x="909.6" y="323.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="912.6" y="334.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="910.0" y="371.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="913.0" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (61 samples, 0.73%)</title><rect x="910.5" y="371.0" width="8.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="913.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (61 samples, 0.73%)</title><rect x="910.5" y="355.0" width="8.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="913.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (59 samples, 0.70%)</title><rect x="910.5" y="339.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="913.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (59 samples, 0.70%)</title><rect x="910.5" y="323.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="913.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (59 samples, 0.70%)</title><rect x="910.5" y="307.0" width="8.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="913.5" y="318.0"></text>
</g>
<g>
<title>read (56 samples, 0.67%)</title><rect x="910.9" y="291.0" width="7.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="913.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.02%)</title><rect x="918.8" y="339.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="921.8" y="350.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (2 samples, 0.02%)</title><rect x="919.3" y="467.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="922.3" y="478.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=25091] (1,912 samples, 22.83%)</title><rect x="919.6" y="483.0" width="269.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="922.6" y="494.0">[NIO Selector #3 tid=25091]</text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.04%)</title><rect x="919.6" y="467.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="922.6" y="478.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,905 samples, 22.75%)</title><rect x="920.0" y="467.0" width="268.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="923.0" y="478.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (3 samples, 0.04%)</title><rect x="920.0" y="451.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="923.0" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (3 samples, 0.04%)</title><rect x="920.0" y="435.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="923.0" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (451 samples, 5.39%)</title><rect x="920.5" y="451.0" width="63.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="923.5" y="462.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.02%)</title><rect x="920.5" y="435.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="923.5" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (6 samples, 0.07%)</title><rect x="920.7" y="435.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="923.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (6 samples, 0.07%)</title><rect x="920.7" y="419.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="923.7" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (5 samples, 0.06%)</title><rect x="920.9" y="403.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="923.9" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (3 samples, 0.04%)</title><rect x="920.9" y="387.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="923.9" y="398.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.02%)</title><rect x="921.3" y="387.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="924.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (443 samples, 5.29%)</title><rect x="921.6" y="435.0" width="62.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="924.6" y="446.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (443 samples, 5.29%)</title><rect x="921.6" y="419.0" width="62.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="924.6" y="430.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (442 samples, 5.28%)</title><rect x="921.7" y="403.0" width="62.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="924.7" y="414.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (430 samples, 5.13%)</title><rect x="921.7" y="387.0" width="60.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="924.7" y="398.0">sun/ni..</text>
</g>
<g>
<title>kevent (418 samples, 4.99%)</title><rect x="923.4" y="371.0" width="58.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="926.4" y="382.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (5 samples, 0.06%)</title><rect x="982.3" y="387.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="985.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (5 samples, 0.06%)</title><rect x="982.3" y="371.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="985.3" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.add (5 samples, 0.06%)</title><rect x="982.3" y="355.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="985.3" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 0.06%)</title><rect x="982.3" y="339.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="985.3" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.06%)</title><rect x="982.3" y="323.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="985.3" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.02%)</title><rect x="982.5" y="307.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="985.5" y="318.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.02%)</title><rect x="982.7" y="307.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="985.7" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (6 samples, 0.07%)</title><rect x="983.2" y="387.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="986.2" y="398.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.02%)</title><rect x="983.7" y="371.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="986.7" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.02%)</title><rect x="983.7" y="355.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="986.7" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.02%)</title><rect x="983.7" y="339.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="986.7" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.02%)</title><rect x="983.7" y="323.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="986.7" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,451 samples, 17.33%)</title><rect x="984.0" y="451.0" width="204.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="987.0" y="462.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,450 samples, 17.31%)</title><rect x="984.2" y="435.0" width="204.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="987.2" y="446.0">one/nio/http/HttpSession.pr..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,383 samples, 16.51%)</title><rect x="984.3" y="419.0" width="194.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="987.3" y="430.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,360 samples, 16.24%)</title><rect x="984.4" y="403.0" width="191.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="987.4" y="414.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,360 samples, 16.24%)</title><rect x="984.4" y="387.0" width="191.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="987.4" y="398.0">one/nio/http/HttpServer.h..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,359 samples, 16.23%)</title><rect x="984.4" y="371.0" width="191.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="987.4" y="382.0">RequestHandler1_entity.ha..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (287 samples, 3.43%)</title><rect x="984.7" y="355.0" width="40.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="987.7" y="366.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (276 samples, 3.30%)</title><rect x="985.0" y="339.0" width="38.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="988.0" y="350.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (13 samples, 0.16%)</title><rect x="985.0" y="323.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="988.0" y="334.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (11 samples, 0.13%)</title><rect x="985.3" y="307.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="988.3" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.04%)</title><rect x="985.4" y="291.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="988.4" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 0.08%)</title><rect x="985.8" y="291.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="988.8" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 0.08%)</title><rect x="985.8" y="275.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="988.8" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (263 samples, 3.14%)</title><rect x="986.8" y="323.0" width="37.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="989.8" y="334.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (263 samples, 3.14%)</title><rect x="986.8" y="307.0" width="37.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="989.8" y="318.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (251 samples, 3.00%)</title><rect x="987.4" y="291.0" width="35.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="990.4" y="302.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (251 samples, 3.00%)</title><rect x="987.4" y="275.0" width="35.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="990.4" y="286.0">one..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (250 samples, 2.99%)</title><rect x="987.5" y="259.0" width="35.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="990.5" y="270.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (249 samples, 2.97%)</title><rect x="987.7" y="243.0" width="35.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="990.7" y="254.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (249 samples, 2.97%)</title><rect x="987.7" y="227.0" width="35.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="990.7" y="238.0">sun..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.02%)</title><rect x="987.7" y="211.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="990.7" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (241 samples, 2.88%)</title><rect x="988.0" y="211.0" width="33.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="991.0" y="222.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (241 samples, 2.88%)</title><rect x="988.0" y="195.0" width="33.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="991.0" y="206.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (241 samples, 2.88%)</title><rect x="988.0" y="179.0" width="33.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="991.0" y="190.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (3 samples, 0.04%)</title><rect x="988.5" y="163.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="991.5" y="174.0"></text>
</g>
<g>
<title>write (234 samples, 2.79%)</title><rect x="988.9" y="163.0" width="33.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="991.9" y="174.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (6 samples, 0.07%)</title><rect x="1021.9" y="211.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1024.9" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.02%)</title><rect x="1022.3" y="195.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1025.3" y="206.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.10%)</title><rect x="1022.8" y="291.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1025.8" y="302.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.05%)</title><rect x="1022.9" y="275.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1025.9" y="286.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (3 samples, 0.04%)</title><rect x="1023.0" y="259.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1026.0" y="270.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (3 samples, 0.04%)</title><rect x="1023.5" y="275.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1026.5" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8 samples, 0.10%)</title><rect x="1023.9" y="339.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1026.9" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.06%)</title><rect x="1024.2" y="323.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1027.2" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.05%)</title><rect x="1024.3" y="307.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1027.3" y="318.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.04%)</title><rect x="1024.4" y="291.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1027.4" y="302.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.04%)</title><rect x="1024.4" y="275.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1027.4" y="286.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (3 samples, 0.04%)</title><rect x="1024.4" y="259.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1027.4" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceImpl.entity (1,070 samples, 12.78%)</title><rect x="1025.2" y="355.0" width="150.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1028.2" y="366.0">ru/mail/polis/servi..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (1,066 samples, 12.73%)</title><rect x="1025.7" y="339.0" width="150.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1028.7" y="350.0">ru/mail/polis/dao/R..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,063 samples, 12.69%)</title><rect x="1025.7" y="323.0" width="149.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1028.7" y="334.0">org/rocksdb/RocksDB..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,063 samples, 12.69%)</title><rect x="1025.7" y="307.0" width="149.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1028.7" y="318.0">org/rocksdb/RocksDB..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,056 samples, 12.61%)</title><rect x="1026.7" y="291.0" width="148.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1029.7" y="302.0">Java_org_rocksdb_Ro..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,047 samples, 12.50%)</title><rect x="1027.7" y="275.0" width="147.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1030.7" y="286.0">rocksdb_put_helper(..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.02%)</title><rect x="1028.0" y="259.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1031.0" y="270.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.02%)</title><rect x="1028.4" y="259.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1031.4" y="270.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.02%)</title><rect x="1028.8" y="259.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1031.8" y="270.0"></text>
</g>
<g>
<title>free_tiny (5 samples, 0.06%)</title><rect x="1029.5" y="259.0" width="0.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1032.5" y="270.0"></text>
</g>
<g>
<title>tiny_free_no_lock (4 samples, 0.05%)</title><rect x="1029.7" y="243.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1032.7" y="254.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.05%)</title><rect x="1030.2" y="259.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1033.2" y="270.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.04%)</title><rect x="1030.2" y="243.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1033.2" y="254.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (17 samples, 0.20%)</title><rect x="1030.8" y="259.0" width="2.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1033.8" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (5 samples, 0.06%)</title><rect x="1031.1" y="243.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1034.1" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.05%)</title><rect x="1031.1" y="227.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1034.1" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.05%)</title><rect x="1031.1" y="211.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1034.1" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.05%)</title><rect x="1031.1" y="195.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1034.1" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.05%)</title><rect x="1031.1" y="179.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1034.1" y="190.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.04%)</title><rect x="1031.8" y="243.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1034.8" y="254.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (7 samples, 0.08%)</title><rect x="1032.2" y="243.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1035.2" y="254.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.04%)</title><rect x="1032.8" y="227.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1035.8" y="238.0"></text>
</g>
<g>
<title>Chunk::next() const (3 samples, 0.04%)</title><rect x="1032.8" y="211.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1035.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,001 samples, 11.95%)</title><rect x="1033.2" y="259.0" width="141.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1036.2" y="270.0">rocksdb::Compacted..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,000 samples, 11.94%)</title><rect x="1033.3" y="243.0" width="140.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1036.3" y="254.0">rocksdb::DBImpl::P..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (998 samples, 11.92%)</title><rect x="1033.3" y="227.0" width="140.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1036.3" y="238.0">rocksdb::DB::Put(r..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (971 samples, 11.59%)</title><rect x="1033.6" y="211.0" width="136.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1036.6" y="222.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (965 samples, 11.52%)</title><rect x="1033.7" y="195.0" width="136.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1036.7" y="206.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (174 samples, 2.08%)</title><rect x="1036.1" y="179.0" width="24.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1039.1" y="190.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (168 samples, 2.01%)</title><rect x="1036.4" y="163.0" width="23.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1039.4" y="174.0">r..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (165 samples, 1.97%)</title><rect x="1036.7" y="147.0" width="23.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1039.7" y="158.0">r..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (3 samples, 0.04%)</title><rect x="1036.7" y="131.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1039.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (162 samples, 1.93%)</title><rect x="1037.1" y="131.0" width="22.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1040.1" y="142.0">r..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (4 samples, 0.05%)</title><rect x="1037.6" y="115.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1040.6" y="126.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.02%)</title><rect x="1037.8" y="99.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1040.8" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (155 samples, 1.85%)</title><rect x="1038.1" y="115.0" width="21.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1041.1" y="126.0">r..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.02%)</title><rect x="1038.1" y="99.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1041.1" y="110.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::GetFileSize() (2 samples, 0.02%)</title><rect x="1038.4" y="99.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1041.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (150 samples, 1.79%)</title><rect x="1038.8" y="99.0" width="21.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1041.8" y="110.0">r..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (2 samples, 0.02%)</title><rect x="1039.0" y="83.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1042.0" y="94.0"></text>
</g>
<g>
<title>write (147 samples, 1.76%)</title><rect x="1039.2" y="83.0" width="20.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1042.2" y="94.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Clear() (2 samples, 0.02%)</title><rect x="1060.1" y="163.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1063.1" y="174.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.02%)</title><rect x="1060.1" y="147.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1063.1" y="158.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (2 samples, 0.02%)</title><rect x="1060.1" y="131.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1063.1" y="142.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (2 samples, 0.02%)</title><rect x="1060.1" y="115.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1063.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::IsLatestPersistentState(rocksdb::WriteBatch const*) (2 samples, 0.02%)</title><rect x="1060.4" y="163.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1063.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (2 samples, 0.02%)</title><rect x="1060.8" y="179.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1063.8" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.02%)</title><rect x="1060.8" y="163.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1063.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (38 samples, 0.45%)</title><rect x="1061.1" y="179.0" width="5.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1064.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::Continue() (2 samples, 0.02%)</title><rect x="1061.1" y="163.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1064.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (34 samples, 0.41%)</title><rect x="1061.4" y="163.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1064.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (28 samples, 0.33%)</title><rect x="1062.2" y="147.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1065.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (28 samples, 0.33%)</title><rect x="1062.2" y="131.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1065.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (24 samples, 0.29%)</title><rect x="1062.6" y="115.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1065.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (21 samples, 0.25%)</title><rect x="1063.1" y="99.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1066.1" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 0.08%)</title><rect x="1065.0" y="83.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1068.0" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.04%)</title><rect x="1065.6" y="67.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1068.6" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.02%)</title><rect x="1065.7" y="51.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1068.7" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.02%)</title><rect x="1066.2" y="163.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1069.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (28 samples, 0.33%)</title><rect x="1066.4" y="179.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1069.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (25 samples, 0.30%)</title><rect x="1066.9" y="163.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1069.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (24 samples, 0.29%)</title><rect x="1067.0" y="147.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1070.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (24 samples, 0.29%)</title><rect x="1067.0" y="131.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1070.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (17 samples, 0.20%)</title><rect x="1067.3" y="115.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1070.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (14 samples, 0.17%)</title><rect x="1067.7" y="99.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1070.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (11 samples, 0.13%)</title><rect x="1068.1" y="83.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1071.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.04%)</title><rect x="1069.3" y="67.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1072.3" y="78.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.04%)</title><rect x="1069.7" y="115.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1072.7" y="126.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.02%)</title><rect x="1070.1" y="115.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1073.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (451 samples, 5.39%)</title><rect x="1070.5" y="179.0" width="63.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1073.5" y="190.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (446 samples, 5.33%)</title><rect x="1070.7" y="163.0" width="62.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1073.7" y="174.0">rocksd..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (2 samples, 0.02%)</title><rect x="1072.4" y="147.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1075.4" y="158.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.02%)</title><rect x="1072.4" y="131.0" width="0.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1075.4" y="142.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (2 samples, 0.02%)</title><rect x="1072.4" y="115.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1075.4" y="126.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (3 samples, 0.04%)</title><rect x="1072.6" y="147.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1075.6" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.04%)</title><rect x="1072.6" y="131.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1075.6" y="142.0"></text>
</g>
<g>
<title>xdrrec_ops (429 samples, 5.12%)</title><rect x="1073.1" y="147.0" width="60.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1076.1" y="158.0">xdrrec..</text>
</g>
<g>
<title>sched_yield (3 samples, 0.04%)</title><rect x="1133.5" y="163.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1136.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (4 samples, 0.05%)</title><rect x="1134.1" y="179.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (4 samples, 0.05%)</title><rect x="1134.1" y="163.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.1" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (4 samples, 0.05%)</title><rect x="1134.1" y="147.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.1" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.05%)</title><rect x="1134.1" y="131.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1137.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (5 samples, 0.06%)</title><rect x="1134.6" y="179.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.6" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (4 samples, 0.05%)</title><rect x="1134.8" y="163.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.8" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.05%)</title><rect x="1134.8" y="147.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1137.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (223 samples, 2.66%)</title><rect x="1135.3" y="179.0" width="31.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.3" y="190.0">ro..</text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (2 samples, 0.02%)</title><rect x="1135.5" y="163.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (219 samples, 2.61%)</title><rect x="1135.8" y="163.0" width="30.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.8" y="174.0">ro..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (165 samples, 1.97%)</title><rect x="1138.6" y="147.0" width="23.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1141.6" y="158.0">s..</text>
</g>
<g>
<title>__psynch_cvwait (156 samples, 1.86%)</title><rect x="1138.6" y="131.0" width="22.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1141.6" y="142.0">_..</text>
</g>
<g>
<title>_pthread_cond_wait (9 samples, 0.11%)</title><rect x="1160.6" y="131.0" width="1.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1163.6" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (8 samples, 0.10%)</title><rect x="1160.7" y="115.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1163.7" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (8 samples, 0.10%)</title><rect x="1160.7" y="99.0" width="1.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1163.7" y="110.0"></text>
</g>
<g>
<title>xdrrec_ops (33 samples, 0.39%)</title><rect x="1162.0" y="147.0" width="4.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1165.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (16 samples, 0.19%)</title><rect x="1166.8" y="179.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.8" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (14 samples, 0.17%)</title><rect x="1166.9" y="163.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.9" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (14 samples, 0.17%)</title><rect x="1166.9" y="147.0" width="2.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1169.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (11 samples, 0.13%)</title><rect x="1170.6" y="211.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (2 samples, 0.02%)</title><rect x="1170.8" y="195.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 0.08%)</title><rect x="1171.1" y="195.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.1" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (4 samples, 0.05%)</title><rect x="1171.5" y="179.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (11 samples, 0.13%)</title><rect x="1172.1" y="211.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.1" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (7 samples, 0.08%)</title><rect x="1172.1" y="195.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.1" y="206.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (6 samples, 0.07%)</title><rect x="1172.2" y="179.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.2" y="190.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.07%)</title><rect x="1172.2" y="163.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1175.2" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.07%)</title><rect x="1172.2" y="147.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1175.2" y="158.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.02%)</title><rect x="1172.2" y="131.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1175.2" y="142.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.05%)</title><rect x="1172.5" y="131.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1175.5" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.05%)</title><rect x="1172.5" y="115.0" width="0.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1175.5" y="126.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (2 samples, 0.02%)</title><rect x="1172.8" y="99.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1175.8" y="110.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.02%)</title><rect x="1173.1" y="195.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.1" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (2 samples, 0.02%)</title><rect x="1173.1" y="179.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (2 samples, 0.02%)</title><rect x="1173.7" y="211.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.7" y="222.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (6 samples, 0.07%)</title><rect x="1174.4" y="259.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.4" y="270.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.07%)</title><rect x="1174.4" y="243.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1177.4" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.06%)</title><rect x="1174.5" y="227.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1177.5" y="238.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.02%)</title><rect x="1174.6" y="211.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1177.6" y="222.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="1174.9" y="211.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1177.9" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.02%)</title><rect x="1174.9" y="195.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1177.9" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.shiftBytes (3 samples, 0.04%)</title><rect x="1175.5" y="323.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1178.5" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.clone (2 samples, 0.02%)</title><rect x="1175.6" y="307.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1178.6" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (9 samples, 0.11%)</title><rect x="1176.1" y="403.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1179.1" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4 samples, 0.05%)</title><rect x="1176.2" y="387.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1179.2" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.04%)</title><rect x="1176.8" y="387.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1179.8" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.04%)</title><rect x="1176.8" y="371.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1179.8" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1176.9" y="355.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1179.9" y="366.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1176.9" y="339.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1179.9" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (7 samples, 0.08%)</title><rect x="1177.3" y="403.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1180.3" y="414.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (7 samples, 0.08%)</title><rect x="1177.3" y="387.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1180.3" y="398.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (7 samples, 0.08%)</title><rect x="1177.3" y="371.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1180.3" y="382.0"></text>
</g>
<g>
<title>java/lang/String.charAt (7 samples, 0.08%)</title><rect x="1177.3" y="355.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1180.3" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.05%)</title><rect x="1178.3" y="403.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1181.3" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.02%)</title><rect x="1178.9" y="403.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1181.9" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.02%)</title><rect x="1178.9" y="387.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1181.9" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1178.9" y="371.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1181.9" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1178.9" y="355.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1181.9" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (66 samples, 0.79%)</title><rect x="1179.2" y="419.0" width="9.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1182.2" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (66 samples, 0.79%)</title><rect x="1179.2" y="403.0" width="9.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1182.2" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (65 samples, 0.78%)</title><rect x="1179.3" y="387.0" width="9.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1182.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.07%)</title><rect x="1179.3" y="371.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1182.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.07%)</title><rect x="1179.3" y="355.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1182.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.07%)</title><rect x="1179.3" y="339.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1182.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.07%)</title><rect x="1179.3" y="323.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1182.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.06%)</title><rect x="1179.4" y="307.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1182.4" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (5 samples, 0.06%)</title><rect x="1179.4" y="291.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1182.4" y="302.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="1180.1" y="371.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1183.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (55 samples, 0.66%)</title><rect x="1180.7" y="371.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1183.7" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (55 samples, 0.66%)</title><rect x="1180.7" y="355.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1183.7" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (55 samples, 0.66%)</title><rect x="1180.7" y="339.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1183.7" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (54 samples, 0.64%)</title><rect x="1180.8" y="323.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1183.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (54 samples, 0.64%)</title><rect x="1180.8" y="307.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1183.8" y="318.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.02%)</title><rect x="1181.3" y="291.0" width="0.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1184.3" y="302.0"></text>
</g>
<g>
<title>read (48 samples, 0.57%)</title><rect x="1181.7" y="291.0" width="6.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1184.7" y="302.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (2 samples, 0.02%)</title><rect x="1188.7" y="467.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1191.7" y="478.0"></text>
</g>
<g>
<title>[tid=13315] (2 samples, 0.02%)</title><rect x="1189.0" y="483.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1192.0" y="494.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.02%)</title><rect x="1189.0" y="467.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1192.0" y="478.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.02%)</title><rect x="1189.0" y="451.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1192.0" y="462.0"></text>
</g>
<g>
<title>_pthread_body (2 samples, 0.02%)</title><rect x="1189.0" y="435.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1192.0" y="446.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.02%)</title><rect x="1189.0" y="419.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1192.0" y="430.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.02%)</title><rect x="1189.0" y="403.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.0" y="414.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.02%)</title><rect x="1189.0" y="387.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.0" y="398.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.02%)</title><rect x="1189.0" y="371.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.0" y="382.0"></text>
</g>
<g>
<title>[tid=19459] (2 samples, 0.02%)</title><rect x="1189.3" y="483.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1192.3" y="494.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.02%)</title><rect x="1189.3" y="467.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1192.3" y="478.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.02%)</title><rect x="1189.3" y="451.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1192.3" y="462.0"></text>
</g>
<g>
<title>_pthread_body (2 samples, 0.02%)</title><rect x="1189.3" y="435.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1192.3" y="446.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.02%)</title><rect x="1189.3" y="419.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1192.3" y="430.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.02%)</title><rect x="1189.3" y="403.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.3" y="414.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (2 samples, 0.02%)</title><rect x="1189.3" y="387.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.3" y="398.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (2 samples, 0.02%)</title><rect x="1189.3" y="371.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.3" y="382.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (2 samples, 0.02%)</title><rect x="1189.3" y="355.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.3" y="366.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.02%)</title><rect x="1189.3" y="339.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.3" y="350.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.02%)</title><rect x="1189.3" y="323.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.3" y="334.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.02%)</title><rect x="1189.3" y="307.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.3" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.02%)</title><rect x="1189.3" y="291.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1192.3" y="302.0"></text>
</g>
</g>
</svg>
