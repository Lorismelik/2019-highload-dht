<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="533"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="533"> </text>
<g id="frames">
<g>
<title>all (4,682 samples, 100.00%)</title><rect x="10.0" y="499.0" width="1180.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="13.0" y="510.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=24579] (1,530 samples, 32.68%)</title><rect x="10.0" y="483.0" width="385.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="13.0" y="494.0">[NIO Selector #0 tid=24579]</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.04%)</title><rect x="10.0" y="467.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.02%)</title><rect x="10.0" y="451.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="10.0" y="435.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="10.0" y="419.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="10.0" y="403.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="10.0" y="387.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (1 samples, 0.02%)</title><rect x="10.0" y="371.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.02%)</title><rect x="10.0" y="355.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (1 samples, 0.02%)</title><rect x="10.0" y="339.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="10.3" y="451.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.3" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="10.3" y="435.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.3" y="446.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="10.3" y="419.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.3" y="430.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="10.3" y="403.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.3" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="10.3" y="387.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.3" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.02%)</title><rect x="10.3" y="371.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.3" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="10.5" y="467.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.5" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="10.5" y="451.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.5" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="10.8" y="467.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.8" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="10.8" y="451.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.8" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="10.8" y="435.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.8" y="446.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="10.8" y="419.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.8" y="430.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="10.8" y="403.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.8" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="10.8" y="387.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.8" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.02%)</title><rect x="10.8" y="371.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.8" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.02%)</title><rect x="10.8" y="355.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.8" y="366.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.02%)</title><rect x="10.8" y="339.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.8" y="350.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire_region(HeapRegion*, unsigned long) (1 samples, 0.02%)</title><rect x="10.8" y="323.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.8" y="334.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (1 samples, 0.02%)</title><rect x="11.0" y="467.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.0" y="478.0"></text>
</g>
<g>
<title>[not_walkable_Java] (18 samples, 0.38%)</title><rect x="11.3" y="467.0" width="4.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="14.3" y="478.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.04%)</title><rect x="11.8" y="451.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.8" y="462.0"></text>
</g>
<g>
<title>Method::from_compiled_entry_no_trampoline() const (1 samples, 0.02%)</title><rect x="12.3" y="451.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="15.3" y="462.0"></text>
</g>
<g>
<title>Method::get_c2i_entry() (3 samples, 0.06%)</title><rect x="12.5" y="451.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="15.5" y="462.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (7 samples, 0.15%)</title><rect x="13.3" y="451.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="16.3" y="462.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="13.3" y="435.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="16.3" y="446.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title><rect x="13.3" y="419.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="16.3" y="430.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.04%)</title><rect x="13.5" y="435.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="16.5" y="446.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (4 samples, 0.09%)</title><rect x="14.0" y="435.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="17.0" y="446.0"></text>
</g>
<g>
<title>nmethod::verified_entry_point() const (3 samples, 0.06%)</title><rect x="15.0" y="451.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="18.0" y="462.0"></text>
</g>
<g>
<title>[unknown_Java] (14 samples, 0.30%)</title><rect x="15.8" y="467.0" width="3.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="18.8" y="478.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (5 samples, 0.11%)</title><rect x="17.6" y="451.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="20.6" y="462.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="17.6" y="435.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="20.6" y="446.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title><rect x="17.6" y="419.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="20.6" y="430.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.02%)</title><rect x="17.6" y="403.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="20.6" y="414.0"></text>
</g>
<g>
<title>Method::from_compiled_entry_no_trampoline() const (1 samples, 0.02%)</title><rect x="17.8" y="435.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="20.8" y="446.0"></text>
</g>
<g>
<title>Method::get_c2i_entry() (3 samples, 0.06%)</title><rect x="18.1" y="435.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="21.1" y="446.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.04%)</title><rect x="18.8" y="451.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="21.8" y="462.0"></text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="18.8" y="435.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="21.8" y="446.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,491 samples, 31.85%)</title><rect x="19.3" y="467.0" width="375.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="22.3" y="478.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (3 samples, 0.06%)</title><rect x="19.6" y="451.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.6" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (3 samples, 0.06%)</title><rect x="19.6" y="435.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.6" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (278 samples, 5.94%)</title><rect x="20.3" y="451.0" width="70.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="23.3" y="462.0">one/nio/..</text>
</g>
<g>
<title>_res (1 samples, 0.02%)</title><rect x="20.6" y="435.0" width="0.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="23.6" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.04%)</title><rect x="20.8" y="435.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="23.8" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.02%)</title><rect x="21.1" y="419.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.1" y="430.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.02%)</title><rect x="21.1" y="403.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.1" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.02%)</title><rect x="21.1" y="387.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="24.1" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="21.1" y="371.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.1" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="21.1" y="355.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="24.1" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (2 samples, 0.04%)</title><rect x="21.3" y="435.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="24.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (2 samples, 0.04%)</title><rect x="21.3" y="419.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="24.3" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (272 samples, 5.81%)</title><rect x="21.8" y="435.0" width="68.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="24.8" y="446.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (272 samples, 5.81%)</title><rect x="21.8" y="419.0" width="68.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.8" y="430.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (272 samples, 5.81%)</title><rect x="21.8" y="403.0" width="68.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.8" y="414.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (253 samples, 5.40%)</title><rect x="21.8" y="387.0" width="63.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.8" y="398.0">sun/nio..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.04%)</title><rect x="24.6" y="371.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="27.6" y="382.0"></text>
</g>
<g>
<title>kevent (240 samples, 5.13%)</title><rect x="25.1" y="371.0" width="60.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="28.1" y="382.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (8 samples, 0.17%)</title><rect x="85.6" y="387.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="88.6" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (8 samples, 0.17%)</title><rect x="85.6" y="371.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="88.6" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.add (5 samples, 0.11%)</title><rect x="85.9" y="355.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="88.9" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 0.11%)</title><rect x="85.9" y="339.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="88.9" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.11%)</title><rect x="85.9" y="323.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="88.9" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.06%)</title><rect x="86.1" y="307.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="89.1" y="318.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.02%)</title><rect x="86.9" y="307.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="89.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioReadyOps (1 samples, 0.02%)</title><rect x="87.1" y="355.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="90.1" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (1 samples, 0.02%)</title><rect x="87.4" y="355.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="90.4" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.04%)</title><rect x="87.6" y="387.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="90.6" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (5 samples, 0.11%)</title><rect x="88.1" y="387.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="91.1" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (5 samples, 0.11%)</title><rect x="88.1" y="371.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="91.1" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (5 samples, 0.11%)</title><rect x="88.1" y="355.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="91.1" y="366.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (5 samples, 0.11%)</title><rect x="88.1" y="339.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="91.1" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (5 samples, 0.11%)</title><rect x="88.1" y="323.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="91.1" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (4 samples, 0.09%)</title><rect x="89.4" y="387.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="92.4" y="398.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4 samples, 0.09%)</title><rect x="89.4" y="371.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="92.4" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (4 samples, 0.09%)</title><rect x="89.4" y="355.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="92.4" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (4 samples, 0.09%)</title><rect x="89.4" y="339.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="92.4" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (4 samples, 0.09%)</title><rect x="89.4" y="323.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="92.4" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,209 samples, 25.82%)</title><rect x="90.4" y="451.0" width="304.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="93.4" y="462.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,209 samples, 25.82%)</title><rect x="90.4" y="435.0" width="304.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="93.4" y="446.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,159 samples, 24.75%)</title><rect x="90.4" y="419.0" width="292.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="93.4" y="430.0">one/nio/http/HttpSession.processHttpBuf..</text>
</g>
<g>
<title>I2C/C2I adapters (11 samples, 0.23%)</title><rect x="120.6" y="403.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="123.6" y="414.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (10 samples, 0.21%)</title><rect x="123.4" y="403.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="126.4" y="414.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (8 samples, 0.17%)</title><rect x="123.4" y="387.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="126.4" y="398.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.04%)</title><rect x="123.7" y="371.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="126.7" y="382.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.02%)</title><rect x="123.7" y="355.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="126.7" y="366.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="123.9" y="355.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="126.9" y="366.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title><rect x="123.9" y="339.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="126.9" y="350.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.02%)</title><rect x="123.9" y="323.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="126.9" y="334.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (5 samples, 0.11%)</title><rect x="124.2" y="371.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="127.2" y="382.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::create_mdo(methodHandle const&amp;, JavaThread*) (1 samples, 0.02%)</title><rect x="124.4" y="355.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="127.4" y="366.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::method_back_branch_event(methodHandle const&amp;, methodHandle const&amp;, int, CompLevel, CompiledMethod*, JavaThread*) (3 samples, 0.06%)</title><rect x="124.7" y="355.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="127.7" y="366.0"></text>
</g>
<g>
<title>CompilationPolicy::is_compilation_enabled() (1 samples, 0.02%)</title><rect x="124.7" y="339.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="127.7" y="350.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::create_mdo(methodHandle const&amp;, JavaThread*) (1 samples, 0.02%)</title><rect x="124.9" y="339.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="127.9" y="350.0"></text>
</g>
<g>
<title>Method::is_accessor() const (1 samples, 0.02%)</title><rect x="124.9" y="323.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="127.9" y="334.0"></text>
</g>
<g>
<title>Method::is_getter() const (1 samples, 0.02%)</title><rect x="124.9" y="307.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="127.9" y="318.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.02%)</title><rect x="125.2" y="339.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="128.2" y="350.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="125.2" y="323.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="128.2" y="334.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.02%)</title><rect x="125.2" y="307.0" width="0.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="128.2" y="318.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.02%)</title><rect x="125.4" y="387.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="128.4" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="125.4" y="371.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="128.4" y="382.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title><rect x="125.4" y="355.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="128.4" y="366.0"></text>
</g>
<g>
<title>ThreadInVMfromJava::~ThreadInVMfromJava() (1 samples, 0.02%)</title><rect x="125.7" y="387.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="128.7" y="398.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="125.9" y="403.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="128.9" y="414.0"></text>
</g>
<g>
<title>SharedRuntime::OSR_migration_begin(JavaThread*) (1 samples, 0.02%)</title><rect x="126.2" y="403.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="129.2" y="414.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="126.2" y="387.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="129.2" y="398.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, NativeCallStack const&amp;, AllocFailStrategy::AllocFailEnum) (1 samples, 0.02%)</title><rect x="126.2" y="371.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="129.2" y="382.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.02%)</title><rect x="126.2" y="355.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="129.2" y="366.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.02%)</title><rect x="126.2" y="339.0" width="0.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="129.2" y="350.0"></text>
</g>
<g>
<title>szone_malloc (1 samples, 0.02%)</title><rect x="126.2" y="323.0" width="0.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="129.2" y="334.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.02%)</title><rect x="126.4" y="403.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="129.4" y="414.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.02%)</title><rect x="126.4" y="387.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="129.4" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (989 samples, 21.12%)</title><rect x="126.7" y="403.0" width="249.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="129.7" y="414.0">one/nio/http/HttpSession.handlePa..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (987 samples, 21.08%)</title><rect x="127.2" y="387.0" width="248.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="130.2" y="398.0">one/nio/http/HttpServer.handleReq..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (978 samples, 20.89%)</title><rect x="127.7" y="371.0" width="246.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="130.7" y="382.0">RequestHandler1_entity.handleRequ..</text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.02%)</title><rect x="127.7" y="355.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="130.7" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (222 samples, 4.74%)</title><rect x="127.9" y="355.0" width="56.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="130.9" y="366.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (216 samples, 4.61%)</title><rect x="127.9" y="339.0" width="54.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="130.9" y="350.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (8 samples, 0.17%)</title><rect x="127.9" y="323.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="130.9" y="334.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 0.11%)</title><rect x="128.7" y="307.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="131.7" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.11%)</title><rect x="128.7" y="291.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="131.7" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.11%)</title><rect x="128.7" y="275.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="131.7" y="286.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 0.11%)</title><rect x="128.7" y="259.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="131.7" y="270.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="129.5" y="243.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="132.5" y="254.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (208 samples, 4.44%)</title><rect x="130.0" y="323.0" width="52.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="133.0" y="334.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.02%)</title><rect x="130.2" y="307.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="133.2" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (206 samples, 4.40%)</title><rect x="130.5" y="307.0" width="51.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="133.5" y="318.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (204 samples, 4.36%)</title><rect x="130.5" y="291.0" width="51.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="133.5" y="302.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (204 samples, 4.36%)</title><rect x="130.5" y="275.0" width="51.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="133.5" y="286.0">one/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.17%)</title><rect x="130.5" y="259.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="133.5" y="270.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.02%)</title><rect x="130.5" y="243.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="133.5" y="254.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="130.7" y="243.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="133.7" y="254.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.13%)</title><rect x="131.0" y="243.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="134.0" y="254.0"></text>
</g>
<g>
<title>__vsnprintf_chk (1 samples, 0.02%)</title><rect x="131.2" y="227.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="134.2" y="238.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.06%)</title><rect x="131.5" y="227.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="134.5" y="238.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (3 samples, 0.06%)</title><rect x="131.5" y="211.0" width="0.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="134.5" y="222.0"></text>
</g>
<g>
<title>_res (1 samples, 0.02%)</title><rect x="132.0" y="195.0" width="0.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="135.0" y="206.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.02%)</title><rect x="132.2" y="227.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="135.2" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (196 samples, 4.19%)</title><rect x="132.5" y="259.0" width="49.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="135.5" y="270.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (196 samples, 4.19%)</title><rect x="132.5" y="243.0" width="49.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="135.5" y="254.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (195 samples, 4.16%)</title><rect x="132.7" y="227.0" width="49.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="135.7" y="238.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (195 samples, 4.16%)</title><rect x="132.7" y="211.0" width="49.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="135.7" y="222.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (5 samples, 0.11%)</title><rect x="132.7" y="195.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="135.7" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1 samples, 0.02%)</title><rect x="133.7" y="179.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="136.7" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (190 samples, 4.06%)</title><rect x="134.0" y="195.0" width="47.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="137.0" y="206.0">sun/..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="134.8" y="179.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="137.8" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (186 samples, 3.97%)</title><rect x="135.0" y="179.0" width="46.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="138.0" y="190.0">sun/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.04%)</title><rect x="136.0" y="163.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="139.0" y="174.0"></text>
</g>
<g>
<title>fdval (3 samples, 0.06%)</title><rect x="136.5" y="163.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="139.5" y="174.0"></text>
</g>
<g>
<title>write (177 samples, 3.78%)</title><rect x="137.3" y="163.0" width="44.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="140.3" y="174.0">write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (2 samples, 0.04%)</title><rect x="181.9" y="291.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="184.9" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.13%)</title><rect x="182.4" y="339.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="185.4" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.06%)</title><rect x="183.1" y="323.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="186.1" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.06%)</title><rect x="183.1" y="307.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="186.1" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.04%)</title><rect x="183.9" y="355.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="186.9" y="366.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.04%)</title><rect x="183.9" y="339.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="186.9" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.04%)</title><rect x="183.9" y="323.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="186.9" y="334.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="183.9" y="307.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="186.9" y="318.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="184.2" y="307.0" width="0.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="187.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/ServiceImpl.entity (753 samples, 16.08%)</title><rect x="184.4" y="355.0" width="189.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="187.4" y="366.0">ru/mail/polis/service/lor..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.02%)</title><rect x="184.4" y="339.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="187.4" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/lorismelik/RocksDAO.upsert (752 samples, 16.06%)</title><rect x="184.7" y="339.0" width="189.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="187.7" y="350.0">ru/mail/polis/dao/lorisme..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (733 samples, 15.66%)</title><rect x="184.9" y="323.0" width="184.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="187.9" y="334.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (733 samples, 15.66%)</title><rect x="184.9" y="307.0" width="184.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="187.9" y="318.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (728 samples, 15.55%)</title><rect x="186.2" y="291.0" width="183.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="189.2" y="302.0">Java_org_rocksdb_RocksDB..</text>
</g>
<g>
<title>free (1 samples, 0.02%)</title><rect x="186.9" y="275.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="189.9" y="286.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.04%)</title><rect x="187.2" y="275.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="190.2" y="286.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (722 samples, 15.42%)</title><rect x="187.7" y="275.0" width="181.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="190.7" y="286.0">rocksdb_put_helper(JNIE..</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.04%)</title><rect x="189.2" y="259.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="192.2" y="270.0"></text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (1 samples, 0.02%)</title><rect x="189.7" y="259.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="192.7" y="270.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="189.9" y="259.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="192.9" y="270.0"></text>
</g>
<g>
<title>_setcontext (1 samples, 0.02%)</title><rect x="190.2" y="259.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="193.2" y="270.0"></text>
</g>
<g>
<title>free (2 samples, 0.04%)</title><rect x="190.5" y="259.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="193.5" y="270.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.02%)</title><rect x="190.7" y="243.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="193.7" y="254.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.02%)</title><rect x="191.0" y="259.0" width="0.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="194.0" y="270.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.02%)</title><rect x="191.0" y="243.0" width="0.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="194.0" y="254.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (6 samples, 0.13%)</title><rect x="191.2" y="259.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="194.2" y="270.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.02%)</title><rect x="191.2" y="243.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="194.2" y="254.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.02%)</title><rect x="191.5" y="243.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="194.5" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.09%)</title><rect x="191.7" y="243.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="194.7" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.04%)</title><rect x="192.0" y="227.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="195.0" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="192.0" y="211.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="195.0" y="222.0"></text>
</g>
<g>
<title>JavaThread::get_polling_page() (1 samples, 0.02%)</title><rect x="192.0" y="195.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="195.0" y="206.0"></text>
</g>
<g>
<title>Thread::polling_page_addr() (1 samples, 0.02%)</title><rect x="192.0" y="179.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="195.0" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="192.2" y="195.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="195.2" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.02%)</title><rect x="192.2" y="179.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="195.2" y="190.0"></text>
</g>
<g>
<title>OrderAccess::acquire() (1 samples, 0.02%)</title><rect x="192.2" y="163.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="195.2" y="174.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.02%)</title><rect x="192.5" y="227.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="195.5" y="238.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (9 samples, 0.19%)</title><rect x="192.7" y="259.0" width="2.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="195.7" y="270.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.02%)</title><rect x="193.0" y="243.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="196.0" y="254.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.02%)</title><rect x="193.0" y="227.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="196.0" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.09%)</title><rect x="193.2" y="243.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="196.2" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.06%)</title><rect x="193.5" y="227.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="196.5" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.06%)</title><rect x="193.5" y="211.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="196.5" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.06%)</title><rect x="193.5" y="195.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="196.5" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.06%)</title><rect x="193.5" y="179.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="196.5" y="190.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.02%)</title><rect x="193.5" y="163.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="196.5" y="174.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.02%)</title><rect x="193.7" y="163.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="196.7" y="174.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="194.0" y="163.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="197.0" y="174.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="194.0" y="147.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="197.0" y="158.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.06%)</title><rect x="194.2" y="243.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="197.2" y="254.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.04%)</title><rect x="194.5" y="227.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="197.5" y="238.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.02%)</title><rect x="194.7" y="211.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="197.7" y="222.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="195.0" y="259.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="198.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (684 samples, 14.61%)</title><rect x="195.5" y="259.0" width="172.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="198.5" y="270.0">rocksdb::CompactedDBIm..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (684 samples, 14.61%)</title><rect x="195.5" y="243.0" width="172.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="198.5" y="254.0">rocksdb::DBImpl::Put(r..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (684 samples, 14.61%)</title><rect x="195.5" y="227.0" width="172.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="198.5" y="238.0">rocksdb::DB::Put(rocks..</text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (1 samples, 0.02%)</title><rect x="195.7" y="211.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="198.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (2 samples, 0.04%)</title><rect x="196.0" y="211.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="199.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (655 samples, 13.99%)</title><rect x="196.5" y="211.0" width="165.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="199.5" y="222.0">rocksdb::DBImpl::Writ..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (647 samples, 13.82%)</title><rect x="196.5" y="195.0" width="163.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="199.5" y="206.0">rocksdb::DBImpl::Writ..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="201.5" y="179.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="204.5" y="190.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.02%)</title><rect x="202.0" y="179.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="205.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (4 samples, 0.09%)</title><rect x="202.3" y="179.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="205.3" y="190.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="203.1" y="163.0" width="0.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="206.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (209 samples, 4.46%)</title><rect x="203.3" y="179.0" width="52.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="206.3" y="190.0">rocks..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (204 samples, 4.36%)</title><rect x="203.8" y="163.0" width="51.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="206.8" y="174.0">rocks..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (204 samples, 4.36%)</title><rect x="203.8" y="147.0" width="51.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="206.8" y="158.0">rocks..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (7 samples, 0.15%)</title><rect x="204.1" y="131.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="207.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (196 samples, 4.19%)</title><rect x="205.8" y="131.0" width="49.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="208.8" y="142.0">rocks..</text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync() (2 samples, 0.04%)</title><rect x="206.1" y="115.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="209.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (1 samples, 0.02%)</title><rect x="206.6" y="115.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="209.6" y="126.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="206.6" y="99.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="209.6" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (192 samples, 4.10%)</title><rect x="206.8" y="115.0" width="48.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="209.8" y="126.0">rock..</text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.11%)</title><rect x="206.8" y="99.0" width="1.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="209.8" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (187 samples, 3.99%)</title><rect x="208.1" y="99.0" width="47.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="211.1" y="110.0">rock..</text>
</g>
<g>
<title>write (187 samples, 3.99%)</title><rect x="208.1" y="83.0" width="47.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="211.1" y="94.0">write</text>
</g>
<g>
<title>rocksdb::WriteBatch::Clear() (1 samples, 0.02%)</title><rect x="255.2" y="163.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="258.2" y="174.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (1 samples, 0.02%)</title><rect x="255.2" y="147.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="258.2" y="158.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (1 samples, 0.02%)</title><rect x="255.2" y="131.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="258.2" y="142.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="255.2" y="115.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="258.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (1 samples, 0.02%)</title><rect x="255.5" y="163.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="258.5" y="174.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (1 samples, 0.02%)</title><rect x="255.7" y="163.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="258.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (2 samples, 0.04%)</title><rect x="256.0" y="179.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="259.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (5 samples, 0.11%)</title><rect x="256.5" y="179.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="259.5" y="190.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="256.7" y="163.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="259.7" y="174.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.04%)</title><rect x="257.2" y="163.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="260.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::HasMerge() const (1 samples, 0.02%)</title><rect x="257.7" y="179.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="260.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (78 samples, 1.67%)</title><rect x="258.0" y="179.0" width="19.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="261.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::Continue() (1 samples, 0.02%)</title><rect x="258.5" y="163.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="261.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (74 samples, 1.58%)</title><rect x="258.8" y="163.0" width="18.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="261.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (1 samples, 0.02%)</title><rect x="259.3" y="147.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="262.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (71 samples, 1.52%)</title><rect x="259.5" y="147.0" width="17.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="262.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (71 samples, 1.52%)</title><rect x="259.5" y="131.0" width="17.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="262.5" y="142.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.02%)</title><rect x="259.5" y="115.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="262.5" y="126.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="259.8" y="115.0" width="0.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="262.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (2 samples, 0.04%)</title><rect x="260.0" y="115.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="263.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (62 samples, 1.32%)</title><rect x="260.5" y="115.0" width="15.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="263.5" y="126.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="262.0" y="99.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="265.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.02%)</title><rect x="262.3" y="99.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="265.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.04%)</title><rect x="262.5" y="99.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="265.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.02%)</title><rect x="263.0" y="99.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="266.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (51 samples, 1.09%)</title><rect x="263.3" y="99.0" width="12.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="266.3" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="269.6" y="83.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="272.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (4 samples, 0.09%)</title><rect x="269.8" y="83.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="272.8" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.06%)</title><rect x="270.1" y="67.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="273.1" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.02%)</title><rect x="270.9" y="83.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="273.9" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (20 samples, 0.43%)</title><rect x="271.1" y="83.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="274.1" y="94.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="272.9" y="67.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="275.9" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.06%)</title><rect x="273.1" y="67.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="276.1" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (9 samples, 0.19%)</title><rect x="273.9" y="67.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="276.9" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (7 samples, 0.15%)</title><rect x="274.4" y="51.0" width="1.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="277.4" y="62.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long long, rocksdb::ValueType) (2 samples, 0.04%)</title><rect x="276.1" y="115.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="279.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.02%)</title><rect x="276.6" y="115.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="279.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.04%)</title><rect x="276.9" y="115.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="279.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.02%)</title><rect x="277.4" y="163.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="280.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (32 samples, 0.68%)</title><rect x="277.7" y="179.0" width="8.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="280.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (31 samples, 0.66%)</title><rect x="277.9" y="163.0" width="7.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="280.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (1 samples, 0.02%)</title><rect x="277.9" y="147.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="280.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (30 samples, 0.64%)</title><rect x="278.2" y="147.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="281.2" y="158.0"></text>
</g>
<g>
<title>Java_org_rocksdb_Statistics_toString (1 samples, 0.02%)</title><rect x="278.2" y="131.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="281.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (1 samples, 0.02%)</title><rect x="278.4" y="131.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="281.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (28 samples, 0.60%)</title><rect x="278.7" y="131.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="281.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (1 samples, 0.02%)</title><rect x="278.7" y="115.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="281.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (24 samples, 0.51%)</title><rect x="278.9" y="115.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="281.9" y="126.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="279.7" y="99.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="282.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (20 samples, 0.43%)</title><rect x="279.9" y="99.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="282.9" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (20 samples, 0.43%)</title><rect x="279.9" y="83.0" width="5.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="282.9" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.02%)</title><rect x="283.7" y="67.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="286.7" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.02%)</title><rect x="283.7" y="51.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="286.7" y="62.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.02%)</title><rect x="283.7" y="35.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="286.7" y="46.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.06%)</title><rect x="284.0" y="67.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="287.0" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.02%)</title><rect x="284.5" y="51.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="287.5" y="62.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.02%)</title><rect x="284.7" y="67.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="287.7" y="78.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.02%)</title><rect x="285.0" y="115.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="288.0" y="126.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="285.2" y="115.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="288.2" y="126.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="285.2" y="99.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="288.2" y="110.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.04%)</title><rect x="285.2" y="83.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="288.2" y="94.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="285.5" y="67.0" width="0.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="288.5" y="78.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="285.5" y="51.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="288.5" y="62.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="285.5" y="35.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="288.5" y="46.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetSequence(rocksdb::WriteBatch*, unsigned long long) (1 samples, 0.02%)</title><rect x="285.7" y="179.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="288.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteController::IsStopped() const (1 samples, 0.02%)</title><rect x="286.0" y="179.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="289.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (81 samples, 1.73%)</title><rect x="286.2" y="179.0" width="20.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="289.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (81 samples, 1.73%)</title><rect x="286.2" y="163.0" width="20.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="289.2" y="174.0"></text>
</g>
<g>
<title>sched_yield (1 samples, 0.02%)</title><rect x="287.2" y="147.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="290.2" y="158.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (2 samples, 0.04%)</title><rect x="287.5" y="147.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="290.5" y="158.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.04%)</title><rect x="287.5" y="131.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="290.5" y="142.0"></text>
</g>
<g>
<title>_res (1 samples, 0.02%)</title><rect x="287.5" y="115.0" width="0.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="290.5" y="126.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (1 samples, 0.02%)</title><rect x="287.7" y="115.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="290.7" y="126.0"></text>
</g>
<g>
<title>xdrrec_ops (74 samples, 1.58%)</title><rect x="288.0" y="147.0" width="18.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="291.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (2 samples, 0.04%)</title><rect x="306.6" y="179.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="309.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (2 samples, 0.04%)</title><rect x="307.1" y="179.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="310.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (2 samples, 0.04%)</title><rect x="307.1" y="163.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="310.1" y="174.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (2 samples, 0.04%)</title><rect x="307.1" y="147.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="310.1" y="158.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.04%)</title><rect x="307.1" y="131.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="310.1" y="142.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.04%)</title><rect x="307.1" y="115.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="310.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (17 samples, 0.36%)</title><rect x="307.6" y="179.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="310.6" y="190.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.02%)</title><rect x="307.9" y="163.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="310.9" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (10 samples, 0.21%)</title><rect x="308.2" y="163.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="311.2" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (10 samples, 0.21%)</title><rect x="308.2" y="147.0" width="2.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="311.2" y="158.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (4 samples, 0.09%)</title><rect x="310.7" y="163.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="313.7" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (4 samples, 0.09%)</title><rect x="310.7" y="147.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="313.7" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (4 samples, 0.09%)</title><rect x="310.7" y="131.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="313.7" y="142.0"></text>
</g>
<g>
<title>std::bad_variant_access::~bad_variant_access() (1 samples, 0.02%)</title><rect x="311.7" y="163.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="314.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (173 samples, 3.70%)</title><rect x="311.9" y="179.0" width="43.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="314.9" y="190.0">rock..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.02%)</title><rect x="312.2" y="163.0" width="0.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="315.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (169 samples, 3.61%)</title><rect x="312.4" y="163.0" width="42.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="315.4" y="174.0">rock..</text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="317.0" y="147.0" width="0.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="320.0" y="158.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.02%)</title><rect x="317.2" y="147.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="320.2" y="158.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="317.5" y="147.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="320.5" y="158.0"></text>
</g>
<g>
<title>sched_yield (1 samples, 0.02%)</title><rect x="317.7" y="147.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="320.7" y="158.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (1 samples, 0.02%)</title><rect x="318.0" y="147.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="321.0" y="158.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.02%)</title><rect x="318.0" y="131.0" width="0.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="321.0" y="142.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (1 samples, 0.02%)</title><rect x="318.0" y="115.0" width="0.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="321.0" y="126.0"></text>
</g>
<g>
<title>_res (1 samples, 0.02%)</title><rect x="318.0" y="99.0" width="0.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="321.0" y="110.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (105 samples, 2.24%)</title><rect x="318.2" y="147.0" width="26.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="321.2" y="158.0">s..</text>
</g>
<g>
<title>__psynch_cvwait (96 samples, 2.05%)</title><rect x="318.5" y="131.0" width="24.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="321.5" y="142.0">_..</text>
</g>
<g>
<title>_pthread_cond_wait (7 samples, 0.15%)</title><rect x="342.7" y="131.0" width="1.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="345.7" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (6 samples, 0.13%)</title><rect x="342.9" y="115.0" width="1.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="345.9" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (6 samples, 0.13%)</title><rect x="342.9" y="99.0" width="1.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="345.9" y="110.0"></text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.02%)</title><rect x="344.4" y="131.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="347.4" y="142.0"></text>
</g>
<g>
<title>xdrrec_ops (41 samples, 0.88%)</title><rect x="344.7" y="147.0" width="10.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="347.7" y="158.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (2 samples, 0.04%)</title><rect x="355.0" y="163.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="358.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (11 samples, 0.23%)</title><rect x="355.5" y="179.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="358.5" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (7 samples, 0.15%)</title><rect x="355.8" y="163.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="358.8" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.15%)</title><rect x="355.8" y="147.0" width="1.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="358.8" y="158.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (3 samples, 0.06%)</title><rect x="357.5" y="163.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="360.5" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (3 samples, 0.06%)</title><rect x="357.5" y="147.0" width="0.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="360.5" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (3 samples, 0.06%)</title><rect x="357.5" y="131.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="360.5" y="142.0"></text>
</g>
<g>
<title>std::__1::condition_variable::~condition_variable() (1 samples, 0.02%)</title><rect x="358.3" y="179.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="361.3" y="190.0"></text>
</g>
<g>
<title>pthread_cond_destroy (1 samples, 0.02%)</title><rect x="358.3" y="163.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="361.3" y="174.0"></text>
</g>
<g>
<title>std::bad_variant_access::~bad_variant_access() (1 samples, 0.02%)</title><rect x="358.6" y="179.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="361.6" y="190.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.02%)</title><rect x="358.8" y="179.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="361.8" y="190.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (1 samples, 0.02%)</title><rect x="359.1" y="179.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="362.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.02%)</title><rect x="359.1" y="163.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="362.1" y="174.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;wchar_t, std::__1::istreambuf_iterator&lt;wchar_t, std::__1::char_traits&lt;wchar_t&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="359.3" y="179.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="362.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.04%)</title><rect x="359.6" y="195.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="362.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (1 samples, 0.02%)</title><rect x="360.1" y="195.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="363.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (1 samples, 0.02%)</title><rect x="360.3" y="195.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="363.3" y="206.0"></text>
</g>
<g>
<title>std::__1::condition_variable::~condition_variable() (2 samples, 0.04%)</title><rect x="360.6" y="195.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="363.6" y="206.0"></text>
</g>
<g>
<title>std::__1::mutex::~mutex() (1 samples, 0.02%)</title><rect x="361.1" y="195.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="364.1" y="206.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.02%)</title><rect x="361.3" y="195.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="364.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (1 samples, 0.02%)</title><rect x="361.6" y="211.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="364.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (5 samples, 0.11%)</title><rect x="361.8" y="211.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="364.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (1 samples, 0.02%)</title><rect x="361.8" y="195.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="364.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.06%)</title><rect x="362.1" y="195.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="365.1" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (3 samples, 0.06%)</title><rect x="362.1" y="179.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="365.1" y="190.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="362.3" y="163.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="365.3" y="174.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (1 samples, 0.02%)</title><rect x="362.8" y="195.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="365.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (10 samples, 0.21%)</title><rect x="363.1" y="211.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="366.1" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (7 samples, 0.15%)</title><rect x="363.6" y="195.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="366.6" y="206.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (4 samples, 0.09%)</title><rect x="364.4" y="179.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="367.4" y="190.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.09%)</title><rect x="364.4" y="163.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="367.4" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.09%)</title><rect x="364.4" y="147.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="367.4" y="158.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.02%)</title><rect x="364.4" y="131.0" width="0.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="367.4" y="142.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.06%)</title><rect x="364.6" y="131.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="367.6" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="364.9" y="115.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="367.9" y="126.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="365.1" y="99.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="368.1" y="110.0"></text>
</g>
<g>
<title>std::bad_variant_access::~bad_variant_access() (1 samples, 0.02%)</title><rect x="365.4" y="195.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="368.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (9 samples, 0.19%)</title><rect x="365.6" y="211.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="368.6" y="222.0"></text>
</g>
<g>
<title>free (1 samples, 0.02%)</title><rect x="365.9" y="195.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="368.9" y="206.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.02%)</title><rect x="365.9" y="179.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="368.9" y="190.0"></text>
</g>
<g>
<title>free_tiny (5 samples, 0.11%)</title><rect x="366.1" y="195.0" width="1.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="369.1" y="206.0"></text>
</g>
<g>
<title>tiny_free_no_lock (3 samples, 0.06%)</title><rect x="366.6" y="179.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="369.6" y="190.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="367.1" y="163.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="370.1" y="174.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.04%)</title><rect x="367.4" y="195.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="370.4" y="206.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.02%)</title><rect x="367.9" y="259.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="370.9" y="270.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (6 samples, 0.13%)</title><rect x="368.1" y="259.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="371.1" y="270.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.09%)</title><rect x="368.6" y="243.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="371.6" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.09%)</title><rect x="368.6" y="227.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="371.6" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.09%)</title><rect x="368.6" y="211.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="371.6" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.09%)</title><rect x="368.6" y="195.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="371.6" y="206.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="369.4" y="179.0" width="0.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="372.4" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.shiftBytes (6 samples, 0.13%)</title><rect x="369.6" y="323.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="372.6" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.02%)</title><rect x="369.6" y="307.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="372.6" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.02%)</title><rect x="369.6" y="291.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="372.6" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.02%)</title><rect x="369.6" y="275.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="372.6" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.clone (5 samples, 0.11%)</title><rect x="369.9" y="307.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="372.9" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.06%)</title><rect x="369.9" y="291.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="372.9" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="369.9" y="275.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="372.9" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="369.9" y="259.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="372.9" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="370.4" y="243.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="373.4" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.rewind (2 samples, 0.04%)</title><rect x="370.7" y="291.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="373.7" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.rewind (2 samples, 0.04%)</title><rect x="370.7" y="275.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="373.7" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.toArray (12 samples, 0.26%)</title><rect x="371.2" y="323.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="374.2" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (4 samples, 0.09%)</title><rect x="371.2" y="307.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="374.2" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.09%)</title><rect x="371.2" y="291.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="374.2" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.09%)</title><rect x="371.2" y="275.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="374.2" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.06%)</title><rect x="371.2" y="259.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="374.2" y="270.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1 samples, 0.02%)</title><rect x="371.9" y="259.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="374.9" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (8 samples, 0.17%)</title><rect x="372.2" y="307.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="375.2" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.17%)</title><rect x="372.2" y="291.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="375.2" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.13%)</title><rect x="372.4" y="275.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="375.4" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.13%)</title><rect x="372.4" y="259.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="375.4" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.09%)</title><rect x="372.7" y="243.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="375.7" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.09%)</title><rect x="372.7" y="227.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="375.7" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.06%)</title><rect x="372.9" y="211.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="375.9" y="222.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="373.7" y="243.0" width="0.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="376.7" y="254.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="373.9" y="275.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="376.9" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (1 samples, 0.02%)</title><rect x="374.2" y="371.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="377.2" y="382.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (4 samples, 0.09%)</title><rect x="374.4" y="371.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="377.4" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.09%)</title><rect x="374.4" y="355.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="377.4" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.02%)</title><rect x="374.7" y="339.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="377.7" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.04%)</title><rect x="374.9" y="339.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="377.9" y="350.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.04%)</title><rect x="374.9" y="323.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="377.9" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.02%)</title><rect x="375.2" y="307.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="378.2" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.04%)</title><rect x="375.4" y="371.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="378.4" y="382.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.04%)</title><rect x="375.4" y="355.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="378.4" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.04%)</title><rect x="375.4" y="339.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="378.4" y="350.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title><rect x="375.4" y="323.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="378.4" y="334.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.02%)</title><rect x="375.4" y="307.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="378.4" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.02%)</title><rect x="375.7" y="323.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="378.7" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6 samples, 0.13%)</title><rect x="375.9" y="403.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="378.9" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.02%)</title><rect x="376.7" y="387.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="379.7" y="398.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.02%)</title><rect x="376.7" y="371.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="379.7" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.02%)</title><rect x="376.7" y="355.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="379.7" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.02%)</title><rect x="376.7" y="339.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="379.7" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.02%)</title><rect x="377.0" y="387.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="380.0" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.02%)</title><rect x="377.0" y="371.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="380.0" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.02%)</title><rect x="377.2" y="387.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="380.2" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2 samples, 0.04%)</title><rect x="377.5" y="403.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="380.5" y="414.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.02%)</title><rect x="377.7" y="387.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="380.7" y="398.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.02%)</title><rect x="377.7" y="371.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="380.7" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (2 samples, 0.04%)</title><rect x="378.0" y="403.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="381.0" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (10 samples, 0.21%)</title><rect x="378.5" y="403.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="381.5" y="414.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.06%)</title><rect x="378.7" y="387.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="381.7" y="398.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.11%)</title><rect x="379.5" y="387.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="382.5" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.09%)</title><rect x="379.7" y="371.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="382.7" y="382.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="380.2" y="355.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="383.2" y="366.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.02%)</title><rect x="380.7" y="387.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="383.7" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="380.7" y="371.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="383.7" y="382.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.02%)</title><rect x="380.7" y="355.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="383.7" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeaderCount (1 samples, 0.02%)</title><rect x="381.0" y="403.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="384.0" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.11%)</title><rect x="381.2" y="403.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="384.2" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.09%)</title><rect x="381.5" y="387.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="384.5" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (50 samples, 1.07%)</title><rect x="382.5" y="419.0" width="12.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="385.5" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (50 samples, 1.07%)</title><rect x="382.5" y="403.0" width="12.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="385.5" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (50 samples, 1.07%)</title><rect x="382.5" y="387.0" width="12.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="385.5" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (50 samples, 1.07%)</title><rect x="382.5" y="371.0" width="12.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="385.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (50 samples, 1.07%)</title><rect x="382.5" y="355.0" width="12.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="385.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (43 samples, 0.92%)</title><rect x="382.5" y="339.0" width="10.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="385.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (43 samples, 0.92%)</title><rect x="382.5" y="323.0" width="10.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="385.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (42 samples, 0.90%)</title><rect x="382.8" y="307.0" width="10.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="385.8" y="318.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.02%)</title><rect x="383.0" y="291.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="386.0" y="302.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.02%)</title><rect x="383.3" y="291.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="386.3" y="302.0"></text>
</g>
<g>
<title>read (39 samples, 0.83%)</title><rect x="383.5" y="291.0" width="9.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="386.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (7 samples, 0.15%)</title><rect x="393.3" y="339.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="396.3" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.15%)</title><rect x="393.3" y="323.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="396.3" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 0.15%)</title><rect x="393.3" y="307.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="396.3" y="318.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="394.6" y="291.0" width="0.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="397.6" y="302.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="394.8" y="291.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="397.8" y="302.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.02%)</title><rect x="395.1" y="467.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="398.1" y="478.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="395.4" y="467.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="398.4" y="478.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=25091] (1,248 samples, 26.66%)</title><rect x="395.6" y="483.0" width="314.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="398.6" y="494.0">[NIO Selector #2 tid=25091]</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="395.6" y="467.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="398.6" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.02%)</title><rect x="395.6" y="451.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="398.6" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="395.6" y="435.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="398.6" y="446.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="395.6" y="419.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="398.6" y="430.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="395.6" y="403.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="398.6" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="395.6" y="387.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="398.6" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.02%)</title><rect x="395.6" y="371.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="398.6" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.02%)</title><rect x="395.6" y="355.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="398.6" y="366.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.02%)</title><rect x="395.6" y="339.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="398.6" y="350.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.02%)</title><rect x="395.6" y="323.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="398.6" y="334.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.02%)</title><rect x="395.6" y="307.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="398.6" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.02%)</title><rect x="395.6" y="291.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="398.6" y="302.0"></text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.06%)</title><rect x="395.9" y="467.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="398.9" y="478.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.02%)</title><rect x="396.4" y="451.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="399.4" y="462.0"></text>
</g>
<g>
<title>_res (1 samples, 0.02%)</title><rect x="396.4" y="435.0" width="0.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="399.4" y="446.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,242 samples, 26.53%)</title><rect x="396.6" y="467.0" width="313.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="399.6" y="478.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (270 samples, 5.77%)</title><rect x="397.1" y="451.0" width="68.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="400.1" y="462.0">one/nio..</text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="397.1" y="435.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="400.1" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (1 samples, 0.02%)</title><rect x="397.6" y="435.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="400.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.02%)</title><rect x="397.6" y="419.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="400.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (267 samples, 5.70%)</title><rect x="397.9" y="435.0" width="67.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="400.9" y="446.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (267 samples, 5.70%)</title><rect x="397.9" y="419.0" width="67.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="400.9" y="430.0">sun/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (1 samples, 0.02%)</title><rect x="397.9" y="403.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="400.9" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (266 samples, 5.68%)</title><rect x="398.1" y="403.0" width="67.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="401.1" y="414.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (247 samples, 5.28%)</title><rect x="398.1" y="387.0" width="62.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="401.1" y="398.0">sun/ni..</text>
</g>
<g>
<title>kevent (237 samples, 5.06%)</title><rect x="400.6" y="371.0" width="59.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="403.6" y="382.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (11 samples, 0.23%)</title><rect x="460.4" y="387.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="463.4" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.04%)</title><rect x="460.4" y="371.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="463.4" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.02%)</title><rect x="460.4" y="355.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="463.4" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.02%)</title><rect x="460.6" y="355.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="463.6" y="366.0"></text>
</g>
<g>
<title>java/lang/Integer.hashCode (1 samples, 0.02%)</title><rect x="460.6" y="339.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="463.6" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.getFilter (1 samples, 0.02%)</title><rect x="460.9" y="371.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="463.9" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getShort (1 samples, 0.02%)</title><rect x="460.9" y="355.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="463.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (8 samples, 0.17%)</title><rect x="461.1" y="371.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="464.1" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.add (5 samples, 0.11%)</title><rect x="461.1" y="355.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="464.1" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 0.11%)</title><rect x="461.1" y="339.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="464.1" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.11%)</title><rect x="461.1" y="323.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="464.1" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.02%)</title><rect x="461.6" y="307.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="464.6" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.02%)</title><rect x="461.9" y="307.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="464.9" y="318.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.02%)</title><rect x="462.1" y="307.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="465.1" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.02%)</title><rect x="462.4" y="355.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="465.4" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.02%)</title><rect x="462.4" y="339.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="465.4" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.02%)</title><rect x="462.4" y="323.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="465.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioReadyOps (2 samples, 0.04%)</title><rect x="462.6" y="355.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="465.6" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (3 samples, 0.06%)</title><rect x="463.1" y="387.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="466.1" y="398.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.02%)</title><rect x="463.7" y="371.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="466.7" y="382.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.elementAt (1 samples, 0.02%)</title><rect x="463.7" y="355.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="466.7" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (2 samples, 0.04%)</title><rect x="463.9" y="387.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="466.9" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (2 samples, 0.04%)</title><rect x="463.9" y="371.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="466.9" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.04%)</title><rect x="463.9" y="355.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="466.9" y="366.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.04%)</title><rect x="463.9" y="339.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="466.9" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.04%)</title><rect x="463.9" y="323.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="466.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (1 samples, 0.02%)</title><rect x="464.4" y="387.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="467.4" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.02%)</title><rect x="464.4" y="371.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="467.4" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.02%)</title><rect x="464.4" y="355.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="467.4" y="366.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.02%)</title><rect x="464.4" y="339.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="467.4" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.02%)</title><rect x="464.4" y="323.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="467.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.04%)</title><rect x="464.7" y="387.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="467.7" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (970 samples, 20.72%)</title><rect x="465.2" y="451.0" width="244.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="468.2" y="462.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (970 samples, 20.72%)</title><rect x="465.2" y="435.0" width="244.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="468.2" y="446.0">one/nio/http/HttpSession.process..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (915 samples, 19.54%)</title><rect x="465.4" y="419.0" width="230.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="468.4" y="430.0">one/nio/http/HttpSession.proce..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (886 samples, 18.92%)</title><rect x="465.9" y="403.0" width="223.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="468.9" y="414.0">one/nio/http/HttpSession.hand..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (885 samples, 18.90%)</title><rect x="466.2" y="387.0" width="223.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="469.2" y="398.0">one/nio/http/HttpServer.handl..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (881 samples, 18.82%)</title><rect x="466.2" y="371.0" width="222.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="469.2" y="382.0">RequestHandler1_entity.handle..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (241 samples, 5.15%)</title><rect x="466.2" y="355.0" width="60.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="469.2" y="366.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (233 samples, 4.98%)</title><rect x="466.2" y="339.0" width="58.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="469.2" y="350.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (14 samples, 0.30%)</title><rect x="466.4" y="323.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="469.4" y="334.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.13%)</title><rect x="468.4" y="307.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="471.4" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.13%)</title><rect x="468.4" y="291.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="471.4" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.13%)</title><rect x="468.4" y="275.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="471.4" y="286.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.13%)</title><rect x="468.4" y="259.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="471.4" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (218 samples, 4.66%)</title><rect x="470.0" y="323.0" width="54.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="473.0" y="334.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session.write (216 samples, 4.61%)</title><rect x="470.5" y="307.0" width="54.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="473.5" y="318.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (216 samples, 4.61%)</title><rect x="470.5" y="291.0" width="54.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="473.5" y="302.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (216 samples, 4.61%)</title><rect x="470.5" y="275.0" width="54.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="473.5" y="286.0">one/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.17%)</title><rect x="470.5" y="259.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="473.5" y="270.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (3 samples, 0.06%)</title><rect x="470.7" y="243.0" width="0.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="473.7" y="254.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="471.5" y="243.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="474.5" y="254.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="472.0" y="243.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="475.0" y="254.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="472.0" y="227.0" width="0.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="475.0" y="238.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.02%)</title><rect x="472.0" y="211.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="475.0" y="222.0"></text>
</g>
<g>
<title>_res (1 samples, 0.02%)</title><rect x="472.0" y="195.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="475.0" y="206.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.02%)</title><rect x="472.2" y="227.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="475.2" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (208 samples, 4.44%)</title><rect x="472.5" y="259.0" width="52.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="475.5" y="270.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (208 samples, 4.44%)</title><rect x="472.5" y="243.0" width="52.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="475.5" y="254.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (206 samples, 4.40%)</title><rect x="473.0" y="227.0" width="51.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="476.0" y="238.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (206 samples, 4.40%)</title><rect x="473.0" y="211.0" width="51.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="476.0" y="222.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (1 samples, 0.02%)</title><rect x="473.0" y="195.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="476.0" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1 samples, 0.02%)</title><rect x="473.0" y="179.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="476.0" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (205 samples, 4.38%)</title><rect x="473.2" y="195.0" width="51.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="476.2" y="206.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (203 samples, 4.34%)</title><rect x="473.7" y="179.0" width="51.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="476.7" y="190.0">sun/n..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (4 samples, 0.09%)</title><rect x="474.5" y="163.0" width="1.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="477.5" y="174.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.02%)</title><rect x="475.2" y="147.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="478.2" y="158.0"></text>
</g>
<g>
<title>write (196 samples, 4.19%)</title><rect x="475.5" y="163.0" width="49.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="478.5" y="174.0">write</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8 samples, 0.17%)</title><rect x="524.9" y="339.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="527.9" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.02%)</title><rect x="526.7" y="323.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="529.7" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.02%)</title><rect x="526.7" y="307.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="529.7" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5 samples, 0.11%)</title><rect x="526.9" y="355.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="529.9" y="366.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.11%)</title><rect x="526.9" y="339.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="529.9" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.09%)</title><rect x="527.2" y="323.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="530.2" y="334.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.04%)</title><rect x="527.2" y="307.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="530.2" y="318.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.04%)</title><rect x="527.2" y="291.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="530.2" y="302.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.04%)</title><rect x="527.7" y="307.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="530.7" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/ServiceImpl.entity (635 samples, 13.56%)</title><rect x="528.2" y="355.0" width="160.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="531.2" y="366.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.06%)</title><rect x="528.4" y="339.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="531.4" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.06%)</title><rect x="528.4" y="323.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="531.4" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="528.7" y="307.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="531.7" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="528.7" y="291.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="531.7" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="528.9" y="275.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="531.9" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="528.9" y="259.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="531.9" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="528.9" y="243.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="531.9" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.04%)</title><rect x="529.2" y="339.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="532.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/lorismelik/RocksDAO.upsert (628 samples, 13.41%)</title><rect x="529.7" y="339.0" width="158.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="532.7" y="350.0">ru/mail/polis/dao/lo..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (621 samples, 13.26%)</title><rect x="529.7" y="323.0" width="156.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="532.7" y="334.0">org/rocksdb/RocksDB...</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (621 samples, 13.26%)</title><rect x="529.7" y="307.0" width="156.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="532.7" y="318.0">org/rocksdb/RocksDB...</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (619 samples, 13.22%)</title><rect x="530.2" y="291.0" width="156.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="533.2" y="302.0">Java_org_rocksdb_Roc..</text>
</g>
<g>
<title>default_zone_free_definite_size (1 samples, 0.02%)</title><rect x="530.7" y="275.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="533.7" y="286.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2 samples, 0.04%)</title><rect x="530.9" y="275.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="533.9" y="286.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (609 samples, 13.01%)</title><rect x="531.4" y="275.0" width="153.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="534.4" y="286.0">rocksdb_put_helper(..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="532.0" y="259.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="535.0" y="270.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.02%)</title><rect x="532.2" y="259.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="535.2" y="270.0"></text>
</g>
<g>
<title>__ulock_wake (1 samples, 0.02%)</title><rect x="532.5" y="259.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="535.5" y="270.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="532.7" y="259.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="535.7" y="270.0"></text>
</g>
<g>
<title>free (1 samples, 0.02%)</title><rect x="533.0" y="259.0" width="0.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="536.0" y="270.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.02%)</title><rect x="533.0" y="243.0" width="0.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="536.0" y="254.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.09%)</title><rect x="533.2" y="259.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="536.2" y="270.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (2 samples, 0.04%)</title><rect x="533.5" y="243.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="536.5" y="254.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.02%)</title><rect x="534.0" y="243.0" width="0.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="537.0" y="254.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="534.0" y="227.0" width="0.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="537.0" y="238.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (6 samples, 0.13%)</title><rect x="534.2" y="259.0" width="1.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="537.2" y="270.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.04%)</title><rect x="534.5" y="243.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="537.5" y="254.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.02%)</title><rect x="535.0" y="243.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="538.0" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.04%)</title><rect x="535.2" y="243.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="538.2" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.02%)</title><rect x="535.2" y="227.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="538.2" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.02%)</title><rect x="535.2" y="211.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="538.2" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="535.2" y="195.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="538.2" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.02%)</title><rect x="535.2" y="179.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="538.2" y="190.0"></text>
</g>
<g>
<title>mask_bits_are_true(long, long) (1 samples, 0.02%)</title><rect x="535.5" y="227.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="538.5" y="238.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.11%)</title><rect x="535.7" y="259.0" width="1.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="538.7" y="270.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (1 samples, 0.02%)</title><rect x="536.0" y="243.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="539.0" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.04%)</title><rect x="536.2" y="243.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="539.2" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.04%)</title><rect x="536.2" y="227.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="539.2" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="536.2" y="211.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="539.2" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="536.2" y="195.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="539.2" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.02%)</title><rect x="536.2" y="179.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="539.2" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="536.2" y="163.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="539.2" y="174.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.02%)</title><rect x="536.5" y="179.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="539.5" y="190.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.02%)</title><rect x="536.7" y="243.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="539.7" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (579 samples, 12.37%)</title><rect x="537.0" y="259.0" width="145.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="540.0" y="270.0">rocksdb::Compacted..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (578 samples, 12.35%)</title><rect x="537.2" y="243.0" width="145.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="540.2" y="254.0">rocksdb::DBImpl::P..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (577 samples, 12.32%)</title><rect x="537.2" y="227.0" width="145.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="540.2" y="238.0">rocksdb::DB::Put(r..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (1 samples, 0.02%)</title><rect x="537.2" y="211.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="540.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (552 samples, 11.79%)</title><rect x="537.5" y="211.0" width="139.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="540.5" y="222.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="538.0" y="195.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="541.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (1 samples, 0.02%)</title><rect x="538.3" y="195.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="541.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (537 samples, 11.47%)</title><rect x="538.5" y="195.0" width="135.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="541.5" y="206.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.09%)</title><rect x="541.8" y="179.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="544.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (1 samples, 0.02%)</title><rect x="542.8" y="179.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="545.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (1 samples, 0.02%)</title><rect x="543.0" y="179.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="546.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (205 samples, 4.38%)</title><rect x="543.3" y="179.0" width="51.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="546.3" y="190.0">rocks..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (1 samples, 0.02%)</title><rect x="543.5" y="163.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="546.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (200 samples, 4.27%)</title><rect x="543.8" y="163.0" width="50.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="546.8" y="174.0">rocks..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (199 samples, 4.25%)</title><rect x="544.0" y="147.0" width="50.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="547.0" y="158.0">rocks..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (2 samples, 0.04%)</title><rect x="544.0" y="131.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="547.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (197 samples, 4.21%)</title><rect x="544.6" y="131.0" width="49.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="547.6" y="142.0">rocks..</text>
</g>
<g>
<title>rocksdb::EnvOptions::EnvOptions() (2 samples, 0.04%)</title><rect x="544.6" y="115.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="547.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (4 samples, 0.09%)</title><rect x="545.1" y="115.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="548.1" y="126.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.06%)</title><rect x="545.3" y="99.0" width="0.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="548.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (190 samples, 4.06%)</title><rect x="546.1" y="115.0" width="47.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="549.1" y="126.0">rock..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (190 samples, 4.06%)</title><rect x="546.1" y="99.0" width="47.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="549.1" y="110.0">rock..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (4 samples, 0.09%)</title><rect x="546.6" y="83.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="549.6" y="94.0"></text>
</g>
<g>
<title>write (184 samples, 3.93%)</title><rect x="547.6" y="83.0" width="46.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="550.6" y="94.0">write</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (1 samples, 0.02%)</title><rect x="594.0" y="115.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="597.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Clear() (2 samples, 0.04%)</title><rect x="594.2" y="163.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="597.2" y="174.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (1 samples, 0.02%)</title><rect x="594.5" y="147.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="597.5" y="158.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (1 samples, 0.02%)</title><rect x="594.5" y="131.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="597.5" y="142.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="594.5" y="115.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="597.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::IsLatestPersistentState(rocksdb::WriteBatch const*) (1 samples, 0.02%)</title><rect x="594.7" y="163.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="597.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (56 samples, 1.20%)</title><rect x="595.0" y="179.0" width="14.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="598.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::Continue() (1 samples, 0.02%)</title><rect x="595.5" y="163.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="598.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (53 samples, 1.13%)</title><rect x="595.7" y="163.0" width="13.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="598.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (50 samples, 1.07%)</title><rect x="596.5" y="147.0" width="12.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="599.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (1 samples, 0.02%)</title><rect x="596.5" y="131.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="599.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (49 samples, 1.05%)</title><rect x="596.7" y="131.0" width="12.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="599.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (1 samples, 0.02%)</title><rect x="597.2" y="115.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="600.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (44 samples, 0.94%)</title><rect x="597.5" y="115.0" width="11.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="600.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.06%)</title><rect x="597.7" y="99.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="600.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.04%)</title><rect x="598.5" y="99.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="601.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.04%)</title><rect x="599.0" y="99.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="602.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (36 samples, 0.77%)</title><rect x="599.5" y="99.0" width="9.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="602.5" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="604.0" y="83.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="607.0" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.02%)</title><rect x="604.3" y="83.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="607.3" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.02%)</title><rect x="604.3" y="67.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="607.3" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.02%)</title><rect x="604.5" y="83.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="607.5" y="94.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="604.5" y="67.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="607.5" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (13 samples, 0.28%)</title><rect x="604.8" y="83.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="607.8" y="94.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="605.0" y="67.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="608.0" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.02%)</title><rect x="605.3" y="67.0" width="0.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="608.3" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (10 samples, 0.21%)</title><rect x="605.5" y="67.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="608.5" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (5 samples, 0.11%)</title><rect x="606.8" y="51.0" width="1.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="609.8" y="62.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.02%)</title><rect x="608.1" y="83.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="611.1" y="94.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.02%)</title><rect x="608.3" y="83.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="611.3" y="94.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long long, rocksdb::ValueType) (1 samples, 0.02%)</title><rect x="608.6" y="115.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="611.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.02%)</title><rect x="608.8" y="115.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="611.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (29 samples, 0.62%)</title><rect x="609.1" y="179.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="612.1" y="190.0"></text>
</g>
<g>
<title>Java_org_rocksdb_MemoryUtil_getApproximateMemoryUsageByType (1 samples, 0.02%)</title><rect x="609.8" y="163.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="612.8" y="174.0"></text>
</g>
<g>
<title>free (2 samples, 0.04%)</title><rect x="610.1" y="163.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="613.1" y="174.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.04%)</title><rect x="610.1" y="147.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="613.1" y="158.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.02%)</title><rect x="610.6" y="163.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="613.6" y="174.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.02%)</title><rect x="610.6" y="147.0" width="0.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="613.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (1 samples, 0.02%)</title><rect x="610.8" y="163.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="613.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (21 samples, 0.45%)</title><rect x="611.1" y="163.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="614.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (1 samples, 0.02%)</title><rect x="611.6" y="147.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="614.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (18 samples, 0.38%)</title><rect x="611.8" y="147.0" width="4.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="614.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (17 samples, 0.36%)</title><rect x="612.1" y="131.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="615.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (15 samples, 0.32%)</title><rect x="612.3" y="115.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="615.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (12 samples, 0.26%)</title><rect x="613.1" y="99.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="616.1" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.02%)</title><rect x="613.1" y="83.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="616.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.02%)</title><rect x="613.1" y="67.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="616.1" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.02%)</title><rect x="613.4" y="83.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="616.4" y="94.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (10 samples, 0.21%)</title><rect x="613.6" y="83.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="616.6" y="94.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="615.6" y="67.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="618.6" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.02%)</title><rect x="615.9" y="67.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="618.9" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.02%)</title><rect x="615.9" y="51.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="618.9" y="62.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="616.1" y="115.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="619.1" y="126.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.02%)</title><rect x="616.1" y="99.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="619.1" y="110.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.02%)</title><rect x="616.1" y="83.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="619.1" y="94.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="616.1" y="67.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="619.1" y="78.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="616.1" y="51.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="619.1" y="62.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="616.1" y="35.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="619.1" y="46.0"></text>
</g>
<g>
<title>rocksdb::WriteController::IsStopped() const (1 samples, 0.02%)</title><rect x="616.4" y="179.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="619.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (80 samples, 1.71%)</title><rect x="616.6" y="179.0" width="20.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="619.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (79 samples, 1.69%)</title><rect x="616.6" y="163.0" width="19.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="619.6" y="174.0"></text>
</g>
<g>
<title>sched_yield (1 samples, 0.02%)</title><rect x="617.9" y="147.0" width="0.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="620.9" y="158.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (7 samples, 0.15%)</title><rect x="618.1" y="147.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="621.1" y="158.0"></text>
</g>
<g>
<title>clock_gettime (7 samples, 0.15%)</title><rect x="618.1" y="131.0" width="1.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="621.1" y="142.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (6 samples, 0.13%)</title><rect x="618.4" y="115.0" width="1.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="621.4" y="126.0"></text>
</g>
<g>
<title>_res (4 samples, 0.09%)</title><rect x="618.7" y="99.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="621.7" y="110.0"></text>
</g>
<g>
<title>mach_timebase_info (1 samples, 0.02%)</title><rect x="619.7" y="99.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="622.7" y="110.0"></text>
</g>
<g>
<title>xdrrec_ops (66 samples, 1.41%)</title><rect x="619.9" y="147.0" width="16.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="622.9" y="158.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (1 samples, 0.02%)</title><rect x="636.5" y="163.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="639.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (12 samples, 0.26%)</title><rect x="636.8" y="179.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="639.8" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (8 samples, 0.17%)</title><rect x="637.3" y="163.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="640.3" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.15%)</title><rect x="637.3" y="147.0" width="1.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="640.3" y="158.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.02%)</title><rect x="639.1" y="147.0" width="0.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="642.1" y="158.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (1 samples, 0.02%)</title><rect x="639.3" y="163.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="642.3" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.02%)</title><rect x="639.3" y="147.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="642.3" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.02%)</title><rect x="639.3" y="131.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="642.3" y="142.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (1 samples, 0.02%)</title><rect x="639.6" y="163.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="642.6" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (1 samples, 0.02%)</title><rect x="639.6" y="147.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="642.6" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (1 samples, 0.02%)</title><rect x="639.6" y="131.0" width="0.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="642.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (118 samples, 2.52%)</title><rect x="639.8" y="179.0" width="29.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="642.8" y="190.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (118 samples, 2.52%)</title><rect x="639.8" y="163.0" width="29.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="642.8" y="174.0">ro..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.02%)</title><rect x="641.6" y="147.0" width="0.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="644.6" y="158.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (1 samples, 0.02%)</title><rect x="641.8" y="147.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="644.8" y="158.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.02%)</title><rect x="641.8" y="131.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="644.8" y="142.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (1 samples, 0.02%)</title><rect x="641.8" y="115.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="644.8" y="126.0"></text>
</g>
<g>
<title>_res (1 samples, 0.02%)</title><rect x="641.8" y="99.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="644.8" y="110.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (75 samples, 1.60%)</title><rect x="642.1" y="147.0" width="18.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="645.1" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (67 samples, 1.43%)</title><rect x="642.1" y="131.0" width="16.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="645.1" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (8 samples, 0.17%)</title><rect x="659.0" y="131.0" width="2.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="662.0" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (8 samples, 0.17%)</title><rect x="659.0" y="115.0" width="2.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="662.0" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (7 samples, 0.15%)</title><rect x="659.0" y="99.0" width="1.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="662.0" y="110.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_wait (1 samples, 0.02%)</title><rect x="660.7" y="99.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="663.7" y="110.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.02%)</title><rect x="661.0" y="147.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="664.0" y="158.0"></text>
</g>
<g>
<title>xdrrec_ops (33 samples, 0.70%)</title><rect x="661.2" y="147.0" width="8.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="664.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (14 samples, 0.30%)</title><rect x="669.6" y="179.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="672.6" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (12 samples, 0.26%)</title><rect x="669.6" y="163.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="672.6" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (11 samples, 0.23%)</title><rect x="669.6" y="147.0" width="2.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="672.6" y="158.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.02%)</title><rect x="672.3" y="147.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="675.3" y="158.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (2 samples, 0.04%)</title><rect x="672.6" y="163.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="675.6" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.04%)</title><rect x="672.6" y="147.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="675.6" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.04%)</title><rect x="672.6" y="131.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="675.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.02%)</title><rect x="673.1" y="179.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="676.1" y="190.0"></text>
</g>
<g>
<title>std::__1::mutex::~mutex() (1 samples, 0.02%)</title><rect x="673.3" y="179.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="676.3" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_destroy (1 samples, 0.02%)</title><rect x="673.3" y="163.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="676.3" y="174.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.02%)</title><rect x="673.6" y="179.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="676.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.02%)</title><rect x="673.8" y="195.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="676.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (4 samples, 0.09%)</title><rect x="674.1" y="195.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="677.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (1 samples, 0.02%)</title><rect x="675.1" y="195.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="678.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (1 samples, 0.02%)</title><rect x="675.4" y="195.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="678.4" y="206.0"></text>
</g>
<g>
<title>std::__1::mutex::~mutex() (1 samples, 0.02%)</title><rect x="675.6" y="195.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="678.6" y="206.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.02%)</title><rect x="675.9" y="195.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="678.9" y="206.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (2 samples, 0.04%)</title><rect x="676.1" y="195.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="679.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (3 samples, 0.06%)</title><rect x="676.6" y="211.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="679.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (4 samples, 0.09%)</title><rect x="677.4" y="211.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="680.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (1 samples, 0.02%)</title><rect x="677.4" y="195.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="680.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.02%)</title><rect x="677.6" y="195.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="680.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.02%)</title><rect x="677.9" y="195.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="680.9" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (1 samples, 0.02%)</title><rect x="677.9" y="179.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="680.9" y="190.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (1 samples, 0.02%)</title><rect x="678.1" y="195.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="681.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (5 samples, 0.11%)</title><rect x="678.4" y="211.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="681.4" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (3 samples, 0.06%)</title><rect x="678.4" y="195.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="681.4" y="206.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="678.9" y="179.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="681.9" y="190.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.02%)</title><rect x="678.9" y="163.0" width="0.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="681.9" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.02%)</title><rect x="678.9" y="147.0" width="0.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="681.9" y="158.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="678.9" y="131.0" width="0.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="681.9" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="678.9" y="115.0" width="0.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="681.9" y="126.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="678.9" y="99.0" width="0.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="681.9" y="110.0"></text>
</g>
<g>
<title>std::bad_variant_access::~bad_variant_access() (2 samples, 0.04%)</title><rect x="679.1" y="195.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="682.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (7 samples, 0.15%)</title><rect x="679.6" y="211.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="682.6" y="222.0"></text>
</g>
<g>
<title>free (3 samples, 0.06%)</title><rect x="679.6" y="195.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="682.6" y="206.0"></text>
</g>
<g>
<title>tiny_size (3 samples, 0.06%)</title><rect x="679.6" y="179.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="682.6" y="190.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.06%)</title><rect x="680.4" y="195.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="683.4" y="206.0"></text>
</g>
<g>
<title>__ulock_wait (1 samples, 0.02%)</title><rect x="680.9" y="179.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="683.9" y="190.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.02%)</title><rect x="681.2" y="195.0" width="0.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="684.2" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (3 samples, 0.06%)</title><rect x="681.4" y="211.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="684.4" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.04%)</title><rect x="682.2" y="211.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="685.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.02%)</title><rect x="682.7" y="227.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="685.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (1 samples, 0.02%)</title><rect x="682.9" y="259.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="685.9" y="270.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (7 samples, 0.15%)</title><rect x="683.2" y="259.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="686.2" y="270.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.13%)</title><rect x="683.4" y="243.0" width="1.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="686.4" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.13%)</title><rect x="683.4" y="227.0" width="1.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="686.4" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.11%)</title><rect x="683.7" y="211.0" width="1.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="686.7" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.11%)</title><rect x="683.7" y="195.0" width="1.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="686.7" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="684.7" y="179.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="687.7" y="190.0"></text>
</g>
<g>
<title>vtable for std::__1::codecvt_byname&lt;wchar_t, char, __mbstate_t&gt; (1 samples, 0.02%)</title><rect x="684.9" y="275.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="687.9" y="286.0"></text>
</g>
<g>
<title>vtable for std::__1::messages&lt;char&gt; (3 samples, 0.06%)</title><rect x="685.2" y="275.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="688.2" y="286.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;wchar_t, std::__1::istreambuf_iterator&lt;wchar_t, std::__1::char_traits&lt;wchar_t&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="685.9" y="275.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="688.9" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.toArray (7 samples, 0.15%)</title><rect x="686.2" y="323.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="689.2" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (3 samples, 0.06%)</title><rect x="686.2" y="307.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="689.2" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.06%)</title><rect x="686.2" y="291.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="689.2" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="686.4" y="275.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="689.4" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (4 samples, 0.09%)</title><rect x="687.0" y="307.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="690.0" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.09%)</title><rect x="687.0" y="291.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="690.0" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="687.5" y="275.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="690.5" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="687.5" y="259.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="690.5" y="270.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="687.7" y="259.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="690.7" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/ServiceImpl.doGet (1 samples, 0.02%)</title><rect x="688.0" y="339.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="691.0" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (1 samples, 0.02%)</title><rect x="688.2" y="371.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="691.2" y="382.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (3 samples, 0.06%)</title><rect x="688.5" y="371.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="691.5" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.06%)</title><rect x="688.5" y="355.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="691.5" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.02%)</title><rect x="689.0" y="339.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="692.0" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (9 samples, 0.19%)</title><rect x="689.2" y="403.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="692.2" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (6 samples, 0.13%)</title><rect x="689.5" y="387.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="692.5" y="398.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.02%)</title><rect x="690.7" y="371.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="693.7" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.02%)</title><rect x="690.7" y="355.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="693.7" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="691.0" y="387.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="694.0" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="691.0" y="371.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="694.0" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (6 samples, 0.13%)</title><rect x="691.5" y="403.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="694.5" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="691.7" y="387.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="694.7" y="398.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="692.0" y="387.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="695.0" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.02%)</title><rect x="692.5" y="387.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="695.5" y="398.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1 samples, 0.02%)</title><rect x="692.7" y="387.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="695.7" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (4 samples, 0.09%)</title><rect x="693.0" y="403.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="696.0" y="414.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.02%)</title><rect x="693.8" y="387.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="696.8" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.13%)</title><rect x="694.0" y="403.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="697.0" y="414.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="694.0" y="387.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="697.0" y="398.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.09%)</title><rect x="694.3" y="387.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="697.3" y="398.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.02%)</title><rect x="694.3" y="371.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="697.3" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.06%)</title><rect x="694.5" y="371.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="697.5" y="382.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.04%)</title><rect x="694.8" y="355.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="697.8" y="366.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.04%)</title><rect x="694.8" y="339.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="697.8" y="350.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.04%)</title><rect x="694.8" y="323.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="697.8" y="334.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.02%)</title><rect x="695.3" y="387.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="698.3" y="398.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="695.3" y="371.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="698.3" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="695.5" y="403.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="698.5" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="695.5" y="387.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="698.5" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (54 samples, 1.15%)</title><rect x="696.0" y="419.0" width="13.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="699.0" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (52 samples, 1.11%)</title><rect x="696.5" y="403.0" width="13.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="699.5" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (52 samples, 1.11%)</title><rect x="696.5" y="387.0" width="13.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="699.5" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (52 samples, 1.11%)</title><rect x="696.5" y="371.0" width="13.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="699.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (52 samples, 1.11%)</title><rect x="696.5" y="355.0" width="13.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="699.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (48 samples, 1.03%)</title><rect x="696.5" y="339.0" width="12.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="699.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (48 samples, 1.03%)</title><rect x="696.5" y="323.0" width="12.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="699.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (44 samples, 0.94%)</title><rect x="697.5" y="307.0" width="11.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="700.5" y="318.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (4 samples, 0.09%)</title><rect x="698.5" y="291.0" width="1.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="701.5" y="302.0"></text>
</g>
<g>
<title>fdval (3 samples, 0.06%)</title><rect x="698.8" y="275.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="701.8" y="286.0"></text>
</g>
<g>
<title>read (36 samples, 0.77%)</title><rect x="699.6" y="291.0" width="9.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="702.6" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.09%)</title><rect x="708.6" y="339.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="711.6" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.09%)</title><rect x="708.6" y="323.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="711.6" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.09%)</title><rect x="708.6" y="307.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="711.6" y="318.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.02%)</title><rect x="709.4" y="291.0" width="0.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="712.4" y="302.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="709.6" y="467.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="712.6" y="478.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="709.9" y="467.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="712.9" y="478.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=39939] (1,893 samples, 40.43%)</title><rect x="710.1" y="483.0" width="477.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="713.1" y="494.0">[NIO Selector #3 tid=39939]</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="710.1" y="467.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="713.1" y="478.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="710.1" y="451.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="713.1" y="462.0"></text>
</g>
<g>
<title>[unknown_Java] (7 samples, 0.15%)</title><rect x="710.4" y="467.0" width="1.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="713.4" y="478.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.06%)</title><rect x="711.4" y="451.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="714.4" y="462.0"></text>
</g>
<g>
<title>_res (3 samples, 0.06%)</title><rect x="711.4" y="435.0" width="0.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="714.4" y="446.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,880 samples, 40.15%)</title><rect x="712.2" y="467.0" width="473.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="715.2" y="478.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (3 samples, 0.06%)</title><rect x="713.7" y="451.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="716.7" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (265 samples, 5.66%)</title><rect x="714.4" y="451.0" width="66.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="717.4" y="462.0">one/nio..</text>
</g>
<g>
<title>_res (4 samples, 0.09%)</title><rect x="714.9" y="435.0" width="1.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="717.9" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (6 samples, 0.13%)</title><rect x="715.9" y="435.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="718.9" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (1 samples, 0.02%)</title><rect x="717.4" y="435.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="720.4" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.02%)</title><rect x="717.4" y="419.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="720.4" y="430.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.02%)</title><rect x="717.7" y="435.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="720.7" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (251 samples, 5.36%)</title><rect x="717.9" y="435.0" width="63.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="720.9" y="446.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (251 samples, 5.36%)</title><rect x="717.9" y="419.0" width="63.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="720.9" y="430.0">sun/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (1 samples, 0.02%)</title><rect x="718.2" y="403.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="721.2" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (249 samples, 5.32%)</title><rect x="718.5" y="403.0" width="62.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="721.5" y="414.0">sun/ni..</text>
</g>
<g>
<title>ThreadSafepointState::handle_polling_page_exception() (1 samples, 0.02%)</title><rect x="718.7" y="387.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="721.7" y="398.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.02%)</title><rect x="718.7" y="371.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="721.7" y="382.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.02%)</title><rect x="718.7" y="355.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="721.7" y="366.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.02%)</title><rect x="718.7" y="339.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="721.7" y="350.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.02%)</title><rect x="718.7" y="323.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="721.7" y="334.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.02%)</title><rect x="718.7" y="307.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="721.7" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (220 samples, 4.70%)</title><rect x="719.0" y="387.0" width="55.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="722.0" y="398.0">sun/n..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.04%)</title><rect x="721.5" y="371.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="724.5" y="382.0"></text>
</g>
<g>
<title>kevent (208 samples, 4.44%)</title><rect x="722.0" y="371.0" width="52.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="725.0" y="382.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (12 samples, 0.26%)</title><rect x="774.4" y="387.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="777.4" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.02%)</title><rect x="774.9" y="371.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="777.9" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.02%)</title><rect x="774.9" y="355.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="777.9" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.02%)</title><rect x="775.2" y="371.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="778.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.getFilter (1 samples, 0.02%)</title><rect x="775.4" y="371.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="778.4" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getShort (1 samples, 0.02%)</title><rect x="775.4" y="355.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="778.4" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (7 samples, 0.15%)</title><rect x="775.7" y="371.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="778.7" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4 samples, 0.09%)</title><rect x="775.7" y="355.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="778.7" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.09%)</title><rect x="775.7" y="339.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="778.7" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.09%)</title><rect x="775.7" y="323.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="778.7" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.04%)</title><rect x="776.2" y="307.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="779.2" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.02%)</title><rect x="776.7" y="355.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="779.7" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.02%)</title><rect x="776.7" y="339.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="779.7" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.02%)</title><rect x="776.7" y="323.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="779.7" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (2 samples, 0.04%)</title><rect x="776.9" y="355.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="779.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetReadyOps (1 samples, 0.02%)</title><rect x="777.2" y="339.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="780.2" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateReadyOps (1 samples, 0.02%)</title><rect x="777.2" y="323.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="780.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.isConnected (1 samples, 0.02%)</title><rect x="777.2" y="307.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="780.2" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.04%)</title><rect x="777.4" y="387.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="780.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (8 samples, 0.17%)</title><rect x="777.9" y="387.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="780.9" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (8 samples, 0.17%)</title><rect x="777.9" y="371.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="780.9" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (8 samples, 0.17%)</title><rect x="777.9" y="355.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="780.9" y="366.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (8 samples, 0.17%)</title><rect x="777.9" y="339.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="780.9" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (8 samples, 0.17%)</title><rect x="777.9" y="323.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="780.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (1 samples, 0.02%)</title><rect x="779.9" y="387.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="782.9" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.02%)</title><rect x="779.9" y="371.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="782.9" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.02%)</title><rect x="779.9" y="355.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="782.9" y="366.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.02%)</title><rect x="779.9" y="339.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="782.9" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.02%)</title><rect x="779.9" y="323.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="782.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (4 samples, 0.09%)</title><rect x="780.2" y="387.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="783.2" y="398.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4 samples, 0.09%)</title><rect x="780.2" y="371.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="783.2" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (4 samples, 0.09%)</title><rect x="780.2" y="355.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="783.2" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (4 samples, 0.09%)</title><rect x="780.2" y="339.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="783.2" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (4 samples, 0.09%)</title><rect x="780.2" y="323.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="783.2" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,606 samples, 34.30%)</title><rect x="781.2" y="451.0" width="404.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="784.2" y="462.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,606 samples, 34.30%)</title><rect x="781.2" y="435.0" width="404.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="784.2" y="446.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,512 samples, 32.29%)</title><rect x="781.2" y="419.0" width="381.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="784.2" y="430.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,448 samples, 30.93%)</title><rect x="781.7" y="403.0" width="365.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="784.7" y="414.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,447 samples, 30.91%)</title><rect x="782.0" y="387.0" width="364.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="785.0" y="398.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,439 samples, 30.73%)</title><rect x="782.0" y="371.0" width="362.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="785.0" y="382.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (371 samples, 7.92%)</title><rect x="782.5" y="355.0" width="93.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="785.5" y="366.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (365 samples, 7.80%)</title><rect x="782.5" y="339.0" width="92.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="785.5" y="350.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (14 samples, 0.30%)</title><rect x="782.5" y="323.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="785.5" y="334.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.13%)</title><rect x="784.5" y="307.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="787.5" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.13%)</title><rect x="784.5" y="291.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="787.5" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.13%)</title><rect x="784.5" y="275.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="787.5" y="286.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.13%)</title><rect x="784.5" y="259.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="787.5" y="270.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="785.7" y="243.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="788.7" y="254.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (351 samples, 7.50%)</title><rect x="786.0" y="323.0" width="88.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="789.0" y="334.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.02%)</title><rect x="786.2" y="307.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="789.2" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (349 samples, 7.45%)</title><rect x="786.5" y="307.0" width="88.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="789.5" y="318.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (348 samples, 7.43%)</title><rect x="786.8" y="291.0" width="87.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="789.8" y="302.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (348 samples, 7.43%)</title><rect x="786.8" y="275.0" width="87.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="789.8" y="286.0">one/nio/ne..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (11 samples, 0.23%)</title><rect x="786.8" y="259.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="789.8" y="270.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.06%)</title><rect x="787.0" y="243.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="790.0" y="254.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.15%)</title><rect x="787.8" y="243.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="790.8" y="254.0"></text>
</g>
<g>
<title>__vsnprintf_chk (2 samples, 0.04%)</title><rect x="787.8" y="227.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="790.8" y="238.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="788.3" y="227.0" width="0.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="791.3" y="238.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.09%)</title><rect x="788.5" y="227.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="791.5" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (337 samples, 7.20%)</title><rect x="789.5" y="259.0" width="85.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="792.5" y="270.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (337 samples, 7.20%)</title><rect x="789.5" y="243.0" width="85.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="792.5" y="254.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (335 samples, 7.16%)</title><rect x="790.0" y="227.0" width="84.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="793.0" y="238.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (335 samples, 7.16%)</title><rect x="790.0" y="211.0" width="84.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="793.0" y="222.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (4 samples, 0.09%)</title><rect x="790.0" y="195.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="793.0" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (331 samples, 7.07%)</title><rect x="791.0" y="195.0" width="83.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="794.0" y="206.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (326 samples, 6.96%)</title><rect x="792.0" y="179.0" width="82.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="795.0" y="190.0">sun/nio/c..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (3 samples, 0.06%)</title><rect x="794.1" y="163.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="797.1" y="174.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.02%)</title><rect x="794.6" y="147.0" width="0.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="797.6" y="158.0"></text>
</g>
<g>
<title>write (315 samples, 6.73%)</title><rect x="794.8" y="163.0" width="79.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="797.8" y="174.0">write</text>
</g>
<g>
<title>unsafe_arraycopy (1 samples, 0.02%)</title><rect x="874.2" y="179.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="877.2" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.13%)</title><rect x="874.5" y="339.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="877.5" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.04%)</title><rect x="875.5" y="323.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="878.5" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.04%)</title><rect x="875.5" y="307.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="878.5" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1 samples, 0.02%)</title><rect x="875.7" y="291.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="878.7" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.09%)</title><rect x="876.0" y="355.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="879.0" y="366.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.04%)</title><rect x="876.0" y="339.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="879.0" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="876.2" y="323.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="879.2" y="334.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.04%)</title><rect x="876.5" y="339.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="879.5" y="350.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="876.5" y="323.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="879.5" y="334.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.04%)</title><rect x="876.5" y="307.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="879.5" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.04%)</title><rect x="876.5" y="291.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="879.5" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/ServiceImpl.entity (1,062 samples, 22.68%)</title><rect x="877.0" y="355.0" width="267.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="880.0" y="366.0">ru/mail/polis/service/lorismelik/Ser..</text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.02%)</title><rect x="877.0" y="339.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="880.0" y="350.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.02%)</title><rect x="877.0" y="323.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="880.0" y="334.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.02%)</title><rect x="877.0" y="307.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="880.0" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.06%)</title><rect x="877.2" y="339.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="880.2" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.06%)</title><rect x="877.2" y="323.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="880.2" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="877.5" y="307.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="880.5" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="877.5" y="291.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="880.5" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="877.7" y="275.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="880.7" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title><rect x="877.7" y="259.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="880.7" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/lorismelik/RocksDAO.upsert (1,057 samples, 22.58%)</title><rect x="878.0" y="339.0" width="266.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="881.0" y="350.0">ru/mail/polis/dao/lorismelik/RocksDA..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,049 samples, 22.40%)</title><rect x="878.0" y="323.0" width="264.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="881.0" y="334.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,049 samples, 22.40%)</title><rect x="878.0" y="307.0" width="264.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="881.0" y="318.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,039 samples, 22.19%)</title><rect x="880.3" y="291.0" width="261.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="883.3" y="302.0">Java_org_rocksdb_RocksDB_put__J_3BI..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.02%)</title><rect x="881.0" y="275.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="884.0" y="286.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.04%)</title><rect x="881.3" y="275.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="884.3" y="286.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.04%)</title><rect x="881.8" y="275.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="884.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1 samples, 0.02%)</title><rect x="882.3" y="275.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="885.3" y="286.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,025 samples, 21.89%)</title><rect x="882.5" y="275.0" width="258.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="885.5" y="286.0">rocksdb_put_helper(JNIEnv_*, rocks..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (3 samples, 0.06%)</title><rect x="883.0" y="259.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="886.0" y="270.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.06%)</title><rect x="883.8" y="259.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="886.8" y="270.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.02%)</title><rect x="884.5" y="259.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="887.5" y="270.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.02%)</title><rect x="884.8" y="259.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="887.8" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.02%)</title><rect x="885.0" y="259.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="888.0" y="270.0"></text>
</g>
<g>
<title>_setcontext (1 samples, 0.02%)</title><rect x="885.3" y="259.0" width="0.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="888.3" y="270.0"></text>
</g>
<g>
<title>free (3 samples, 0.06%)</title><rect x="885.5" y="259.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="888.5" y="270.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.02%)</title><rect x="885.8" y="243.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="888.8" y="254.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.02%)</title><rect x="886.1" y="243.0" width="0.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="889.1" y="254.0"></text>
</g>
<g>
<title>free_tiny (8 samples, 0.17%)</title><rect x="886.3" y="259.0" width="2.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="889.3" y="270.0"></text>
</g>
<g>
<title>tiny_free_no_lock (6 samples, 0.13%)</title><rect x="886.8" y="243.0" width="1.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="889.8" y="254.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="888.1" y="227.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="891.1" y="238.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (6 samples, 0.13%)</title><rect x="888.3" y="259.0" width="1.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="891.3" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (6 samples, 0.13%)</title><rect x="888.3" y="243.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="891.3" y="254.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.02%)</title><rect x="888.3" y="227.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="891.3" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (5 samples, 0.11%)</title><rect x="888.6" y="227.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="891.6" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.09%)</title><rect x="888.8" y="211.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="891.8" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.09%)</title><rect x="888.8" y="195.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="891.8" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.09%)</title><rect x="888.8" y="179.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="891.8" y="190.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.02%)</title><rect x="889.1" y="163.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="892.1" y="174.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.02%)</title><rect x="889.3" y="163.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="892.3" y="174.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="889.6" y="163.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="892.6" y="174.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="889.6" y="147.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="892.6" y="158.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.02%)</title><rect x="889.6" y="131.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="892.6" y="142.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (26 samples, 0.56%)</title><rect x="889.8" y="259.0" width="6.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="892.8" y="270.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.02%)</title><rect x="890.3" y="243.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="893.3" y="254.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.02%)</title><rect x="890.3" y="227.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="893.3" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (10 samples, 0.21%)</title><rect x="890.6" y="243.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="893.6" y="254.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.02%)</title><rect x="890.6" y="227.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="893.6" y="238.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.02%)</title><rect x="890.8" y="227.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="893.8" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (8 samples, 0.17%)</title><rect x="891.1" y="227.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="894.1" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (6 samples, 0.13%)</title><rect x="891.1" y="211.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="894.1" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (5 samples, 0.11%)</title><rect x="891.3" y="195.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="894.3" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.09%)</title><rect x="891.6" y="179.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="894.6" y="190.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.02%)</title><rect x="891.6" y="163.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="894.6" y="174.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.02%)</title><rect x="891.8" y="163.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="894.8" y="174.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.02%)</title><rect x="892.1" y="163.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="895.1" y="174.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="892.4" y="163.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="895.4" y="174.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.02%)</title><rect x="892.4" y="147.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="895.4" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.02%)</title><rect x="892.6" y="211.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="895.6" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="892.9" y="211.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="895.9" y="222.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (11 samples, 0.23%)</title><rect x="893.1" y="243.0" width="2.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="896.1" y="254.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.02%)</title><rect x="895.1" y="227.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="898.1" y="238.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.04%)</title><rect x="895.4" y="227.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="898.4" y="238.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.02%)</title><rect x="895.6" y="211.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="898.6" y="222.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (2 samples, 0.04%)</title><rect x="895.9" y="243.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="898.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (958 samples, 20.46%)</title><rect x="896.4" y="259.0" width="241.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="899.4" y="270.0">rocksdb::CompactedDBImpl::Open(r..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (958 samples, 20.46%)</title><rect x="896.4" y="243.0" width="241.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="899.4" y="254.0">rocksdb::DBImpl::Put(rocksdb::Wr..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (955 samples, 20.40%)</title><rect x="896.4" y="227.0" width="240.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="899.4" y="238.0">rocksdb::DB::Put(rocksdb::WriteO..</text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (1 samples, 0.02%)</title><rect x="896.4" y="211.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="899.4" y="222.0"></text>
</g>
<g>
<title>free (1 samples, 0.02%)</title><rect x="896.6" y="211.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="899.6" y="222.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.02%)</title><rect x="896.9" y="211.0" width="0.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="899.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (2 samples, 0.04%)</title><rect x="897.1" y="211.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="900.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (911 samples, 19.46%)</title><rect x="897.6" y="211.0" width="229.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="900.6" y="222.0">rocksdb::DBImpl::Write(rocksdb..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::ColumnFamilyHandleImpl(rocksdb::ColumnFamilyData*, rocksdb::DBImpl*, rocksdb::InstrumentedMutex*) (1 samples, 0.02%)</title><rect x="897.9" y="195.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="900.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (903 samples, 19.29%)</title><rect x="898.2" y="195.0" width="227.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="901.2" y="206.0">rocksdb::DBImpl::WriteImpl(roc..</text>
</g>
<g>
<title>Java_org_rocksdb_MemoryUtil_getApproximateMemoryUsageByType (1 samples, 0.02%)</title><rect x="905.7" y="179.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="908.7" y="190.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="906.0" y="179.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="909.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (5 samples, 0.11%)</title><rect x="906.2" y="179.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="909.2" y="190.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.04%)</title><rect x="907.0" y="163.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="910.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (377 samples, 8.05%)</title><rect x="907.5" y="179.0" width="95.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="910.5" y="190.0">rocksdb::DB..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (2 samples, 0.04%)</title><rect x="908.0" y="163.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="911.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (370 samples, 7.90%)</title><rect x="908.5" y="163.0" width="93.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="911.5" y="174.0">rocksdb::DB..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (370 samples, 7.90%)</title><rect x="908.5" y="147.0" width="93.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="911.5" y="158.0">rocksdb::lo..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (1 samples, 0.02%)</title><rect x="909.2" y="131.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="912.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (6 samples, 0.13%)</title><rect x="909.5" y="131.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="912.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (360 samples, 7.69%)</title><rect x="911.0" y="131.0" width="90.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="914.0" y="142.0">rocksdb::l..</text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="912.0" y="115.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="915.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync() (4 samples, 0.09%)</title><rect x="912.5" y="115.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="915.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (6 samples, 0.13%)</title><rect x="913.5" y="115.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="916.5" y="126.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="914.0" y="99.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="917.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::EnvOptions::EnvOptions() (2 samples, 0.04%)</title><rect x="914.5" y="99.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="917.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (344 samples, 7.35%)</title><rect x="915.0" y="115.0" width="86.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="918.0" y="126.0">rocksdb::W..</text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.11%)</title><rect x="915.3" y="99.0" width="1.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="918.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::GetPerfLevel() (3 samples, 0.06%)</title><rect x="916.5" y="99.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="919.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::GetFileSize() (2 samples, 0.04%)</title><rect x="917.3" y="99.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="920.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::SetPerfLevel(rocksdb::PerfLevel) (1 samples, 0.02%)</title><rect x="917.8" y="99.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="920.8" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (332 samples, 7.09%)</title><rect x="918.1" y="99.0" width="83.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="921.1" y="110.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="918.8" y="83.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="921.8" y="94.0"></text>
</g>
<g>
<title>write (327 samples, 6.98%)</title><rect x="919.3" y="83.0" width="82.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="922.3" y="94.0">write</text>
</g>
<g>
<title>rocksdb::WriteBatch::Clear() (2 samples, 0.04%)</title><rect x="1001.7" y="163.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1004.7" y="174.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (1 samples, 0.02%)</title><rect x="1002.0" y="147.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1005.0" y="158.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (1 samples, 0.02%)</title><rect x="1002.0" y="131.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1005.0" y="142.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="1002.0" y="115.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1005.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (1 samples, 0.02%)</title><rect x="1002.2" y="163.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1005.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (2 samples, 0.04%)</title><rect x="1002.5" y="179.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1005.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.04%)</title><rect x="1003.0" y="179.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1006.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (4 samples, 0.09%)</title><rect x="1003.5" y="179.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1006.5" y="190.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.02%)</title><rect x="1003.5" y="163.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1006.5" y="174.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="1003.8" y="163.0" width="0.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1006.8" y="174.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.04%)</title><rect x="1004.0" y="163.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1007.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1 samples, 0.02%)</title><rect x="1004.5" y="179.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1007.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (89 samples, 1.90%)</title><rect x="1004.8" y="179.0" width="22.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1007.8" y="190.0">r..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::Continue() (2 samples, 0.04%)</title><rect x="1005.5" y="163.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1008.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (83 samples, 1.77%)</title><rect x="1006.0" y="163.0" width="20.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1009.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (1 samples, 0.02%)</title><rect x="1006.3" y="147.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1009.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (81 samples, 1.73%)</title><rect x="1006.5" y="147.0" width="20.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1009.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (1 samples, 0.02%)</title><rect x="1006.5" y="131.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1009.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (1 samples, 0.02%)</title><rect x="1006.8" y="131.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1009.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (79 samples, 1.69%)</title><rect x="1007.0" y="131.0" width="19.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1010.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (2 samples, 0.04%)</title><rect x="1007.5" y="115.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1010.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (72 samples, 1.54%)</title><rect x="1008.0" y="115.0" width="18.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1011.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.06%)</title><rect x="1009.5" y="99.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1012.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.02%)</title><rect x="1010.3" y="99.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1013.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.02%)</title><rect x="1010.6" y="99.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1013.6" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (61 samples, 1.30%)</title><rect x="1010.8" y="99.0" width="15.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1013.8" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="1018.4" y="83.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1021.4" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.06%)</title><rect x="1018.9" y="83.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1021.9" y="94.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.02%)</title><rect x="1019.1" y="67.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1022.1" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.02%)</title><rect x="1019.4" y="67.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1022.4" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.04%)</title><rect x="1019.6" y="83.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1022.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.02%)</title><rect x="1019.9" y="67.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1022.9" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.02%)</title><rect x="1019.9" y="51.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1022.9" y="62.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (22 samples, 0.47%)</title><rect x="1020.1" y="83.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1023.1" y="94.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="1021.6" y="67.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1024.6" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.04%)</title><rect x="1022.1" y="67.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1025.1" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (9 samples, 0.19%)</title><rect x="1022.7" y="67.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1025.7" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (5 samples, 0.11%)</title><rect x="1023.7" y="51.0" width="1.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1026.7" y="62.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.06%)</title><rect x="1024.9" y="67.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1027.9" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.02%)</title><rect x="1025.7" y="83.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1028.7" y="94.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.02%)</title><rect x="1025.9" y="83.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1028.9" y="94.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long long, rocksdb::ValueType) (1 samples, 0.02%)</title><rect x="1026.2" y="115.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1029.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.04%)</title><rect x="1026.4" y="115.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1029.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.02%)</title><rect x="1026.9" y="163.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1029.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (25 samples, 0.53%)</title><rect x="1027.2" y="179.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1030.2" y="190.0"></text>
</g>
<g>
<title>default_zone_free_definite_size (1 samples, 0.02%)</title><rect x="1027.9" y="163.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1030.9" y="174.0"></text>
</g>
<g>
<title>free (2 samples, 0.04%)</title><rect x="1028.2" y="163.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1031.2" y="174.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.02%)</title><rect x="1028.4" y="147.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1031.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (18 samples, 0.38%)</title><rect x="1028.7" y="163.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1031.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (18 samples, 0.38%)</title><rect x="1028.7" y="147.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1031.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (17 samples, 0.36%)</title><rect x="1029.0" y="131.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1032.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (15 samples, 0.32%)</title><rect x="1029.2" y="115.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1032.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.02%)</title><rect x="1029.2" y="99.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1032.2" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (14 samples, 0.30%)</title><rect x="1029.5" y="99.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1032.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.02%)</title><rect x="1029.5" y="83.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1032.5" y="94.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (13 samples, 0.28%)</title><rect x="1029.7" y="83.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1032.7" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (5 samples, 0.11%)</title><rect x="1031.5" y="67.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1034.5" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.04%)</title><rect x="1032.0" y="51.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1035.0" y="62.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.04%)</title><rect x="1032.0" y="35.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1035.0" y="46.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.02%)</title><rect x="1032.5" y="51.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1035.5" y="62.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.02%)</title><rect x="1032.7" y="67.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1035.7" y="78.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.02%)</title><rect x="1033.0" y="115.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1036.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.02%)</title><rect x="1033.2" y="163.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteController::IsStopped() const (2 samples, 0.04%)</title><rect x="1033.5" y="179.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1036.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (100 samples, 2.14%)</title><rect x="1034.0" y="179.0" width="25.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1037.0" y="190.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (100 samples, 2.14%)</title><rect x="1034.0" y="163.0" width="25.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1037.0" y="174.0">r..</text>
</g>
<g>
<title>sched_yield (3 samples, 0.06%)</title><rect x="1036.0" y="147.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1039.0" y="158.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (3 samples, 0.06%)</title><rect x="1036.8" y="147.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1039.8" y="158.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.06%)</title><rect x="1036.8" y="131.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1039.8" y="142.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (3 samples, 0.06%)</title><rect x="1036.8" y="115.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1039.8" y="126.0"></text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="1037.0" y="99.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1040.0" y="110.0"></text>
</g>
<g>
<title>xdrrec_ops (86 samples, 1.84%)</title><rect x="1037.5" y="147.0" width="21.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1040.5" y="158.0">x..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (1 samples, 0.02%)</title><rect x="1059.2" y="179.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1062.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.02%)</title><rect x="1059.2" y="163.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1062.2" y="174.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (1 samples, 0.02%)</title><rect x="1059.2" y="147.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1062.2" y="158.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (1 samples, 0.02%)</title><rect x="1059.2" y="131.0" width="0.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1062.2" y="142.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (1 samples, 0.02%)</title><rect x="1059.2" y="115.0" width="0.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1062.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (21 samples, 0.45%)</title><rect x="1059.4" y="179.0" width="5.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1062.4" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (15 samples, 0.32%)</title><rect x="1060.0" y="163.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1063.0" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (14 samples, 0.30%)</title><rect x="1060.0" y="147.0" width="3.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1063.0" y="158.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.02%)</title><rect x="1063.5" y="147.0" width="0.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1066.5" y="158.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (1 samples, 0.02%)</title><rect x="1063.7" y="163.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1066.7" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.02%)</title><rect x="1063.7" y="147.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1066.7" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.02%)</title><rect x="1063.7" y="131.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1066.7" y="142.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (3 samples, 0.06%)</title><rect x="1064.0" y="163.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1067.0" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (3 samples, 0.06%)</title><rect x="1064.0" y="147.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1067.0" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (3 samples, 0.06%)</title><rect x="1064.0" y="131.0" width="0.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1067.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (210 samples, 4.49%)</title><rect x="1064.7" y="179.0" width="53.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1067.7" y="190.0">rocks..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (208 samples, 4.44%)</title><rect x="1065.0" y="163.0" width="52.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1068.0" y="174.0">rocks..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.02%)</title><rect x="1069.5" y="147.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1072.5" y="158.0"></text>
</g>
<g>
<title>sched_yield (1 samples, 0.02%)</title><rect x="1069.8" y="147.0" width="0.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1072.8" y="158.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (3 samples, 0.06%)</title><rect x="1070.0" y="147.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1073.0" y="158.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.06%)</title><rect x="1070.0" y="131.0" width="0.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1073.0" y="142.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (2 samples, 0.04%)</title><rect x="1070.0" y="115.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1073.0" y="126.0"></text>
</g>
<g>
<title>_res (1 samples, 0.02%)</title><rect x="1070.3" y="99.0" width="0.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1073.3" y="110.0"></text>
</g>
<g>
<title>mach_timebase_info (1 samples, 0.02%)</title><rect x="1070.5" y="115.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1073.5" y="126.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (127 samples, 2.71%)</title><rect x="1070.8" y="147.0" width="32.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1073.8" y="158.0">st..</text>
</g>
<g>
<title>__psynch_cvwait (107 samples, 2.29%)</title><rect x="1070.8" y="131.0" width="27.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1073.8" y="142.0">_..</text>
</g>
<g>
<title>_pthread_cond_wait (17 samples, 0.36%)</title><rect x="1097.8" y="131.0" width="4.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1100.8" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_check_init_slow (1 samples, 0.02%)</title><rect x="1097.8" y="115.0" width="0.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1100.8" y="126.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (2 samples, 0.04%)</title><rect x="1098.0" y="115.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1101.0" y="126.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (14 samples, 0.30%)</title><rect x="1098.5" y="115.0" width="3.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1101.5" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (14 samples, 0.30%)</title><rect x="1098.5" y="99.0" width="3.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1101.5" y="110.0"></text>
</g>
<g>
<title>_pthread_testcancel (3 samples, 0.06%)</title><rect x="1102.0" y="131.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1105.0" y="142.0"></text>
</g>
<g>
<title>xdrrec_ops (58 samples, 1.24%)</title><rect x="1102.8" y="147.0" width="14.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1105.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.02%)</title><rect x="1117.4" y="163.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1120.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (24 samples, 0.51%)</title><rect x="1117.7" y="179.0" width="6.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1120.7" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (19 samples, 0.41%)</title><rect x="1117.7" y="163.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1120.7" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (17 samples, 0.36%)</title><rect x="1117.7" y="147.0" width="4.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1120.7" y="158.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.04%)</title><rect x="1122.0" y="147.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1125.0" y="158.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.02%)</title><rect x="1122.2" y="131.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1125.2" y="142.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (5 samples, 0.11%)</title><rect x="1122.5" y="163.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1125.5" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (5 samples, 0.11%)</title><rect x="1122.5" y="147.0" width="1.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1125.5" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (5 samples, 0.11%)</title><rect x="1122.5" y="131.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1125.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 0.04%)</title><rect x="1123.7" y="179.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.7" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (1 samples, 0.02%)</title><rect x="1124.2" y="179.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.2" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::~condition_variable() (1 samples, 0.02%)</title><rect x="1124.5" y="179.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.5" y="190.0"></text>
</g>
<g>
<title>pthread_cond_destroy (1 samples, 0.02%)</title><rect x="1124.5" y="163.0" width="0.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1127.5" y="174.0"></text>
</g>
<g>
<title>std::bad_variant_access::~bad_variant_access() (1 samples, 0.02%)</title><rect x="1124.7" y="179.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.7" y="190.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.02%)</title><rect x="1125.0" y="179.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1128.0" y="190.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (2 samples, 0.04%)</title><rect x="1125.2" y="179.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.02%)</title><rect x="1125.5" y="163.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.02%)</title><rect x="1125.7" y="195.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1128.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (1 samples, 0.02%)</title><rect x="1126.0" y="195.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.0" y="206.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.06%)</title><rect x="1126.2" y="195.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.2" y="206.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (1 samples, 0.02%)</title><rect x="1127.0" y="195.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (2 samples, 0.04%)</title><rect x="1127.2" y="211.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1130.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (10 samples, 0.21%)</title><rect x="1127.7" y="211.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (1 samples, 0.02%)</title><rect x="1127.7" y="195.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (2 samples, 0.04%)</title><rect x="1128.0" y="195.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 0.15%)</title><rect x="1128.5" y="195.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.5" y="206.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="1128.8" y="179.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1131.8" y="190.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (4 samples, 0.09%)</title><rect x="1129.3" y="179.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.3" y="190.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="1129.8" y="163.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1132.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (17 samples, 0.36%)</title><rect x="1130.3" y="211.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1133.3" y="222.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="1130.3" y="195.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1133.3" y="206.0"></text>
</g>
<g>
<title>_setcontext (2 samples, 0.04%)</title><rect x="1130.5" y="195.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1133.5" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (5 samples, 0.11%)</title><rect x="1131.0" y="195.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1134.0" y="206.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (4 samples, 0.09%)</title><rect x="1131.3" y="179.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1134.3" y="190.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.09%)</title><rect x="1131.3" y="163.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1134.3" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.09%)</title><rect x="1131.3" y="147.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1134.3" y="158.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.09%)</title><rect x="1131.3" y="131.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1134.3" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.09%)</title><rect x="1131.3" y="115.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1134.3" y="126.0"></text>
</g>
<g>
<title>set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="1131.8" y="99.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1134.8" y="110.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="1132.0" y="99.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1135.0" y="110.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (6 samples, 0.13%)</title><rect x="1132.3" y="195.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.3" y="206.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="1132.3" y="179.0" width="0.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1135.3" y="190.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (5 samples, 0.11%)</title><rect x="1132.5" y="179.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.5" y="190.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (3 samples, 0.06%)</title><rect x="1133.0" y="163.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1136.0" y="174.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="1133.8" y="195.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (6 samples, 0.13%)</title><rect x="1134.6" y="211.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.6" y="222.0"></text>
</g>
<g>
<title>free (3 samples, 0.06%)</title><rect x="1134.6" y="195.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1137.6" y="206.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.04%)</title><rect x="1134.8" y="179.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1137.8" y="190.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.06%)</title><rect x="1135.3" y="195.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1138.3" y="206.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.02%)</title><rect x="1135.8" y="179.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1138.8" y="190.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (4 samples, 0.09%)</title><rect x="1136.1" y="211.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1139.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (2 samples, 0.04%)</title><rect x="1137.1" y="227.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (1 samples, 0.02%)</title><rect x="1137.6" y="227.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (1 samples, 0.02%)</title><rect x="1137.8" y="259.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.8" y="270.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (11 samples, 0.23%)</title><rect x="1138.1" y="259.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.1" y="270.0"></text>
</g>
<g>
<title>malloc (10 samples, 0.21%)</title><rect x="1138.1" y="243.0" width="2.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1141.1" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (8 samples, 0.17%)</title><rect x="1138.1" y="227.0" width="2.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1141.1" y="238.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.02%)</title><rect x="1138.6" y="211.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1141.6" y="222.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.11%)</title><rect x="1138.8" y="211.0" width="1.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1141.8" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.09%)</title><rect x="1139.1" y="195.0" width="1.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1142.1" y="206.0"></text>
</g>
<g>
<title>__ulock_wait (1 samples, 0.02%)</title><rect x="1139.3" y="179.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1142.3" y="190.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (2 samples, 0.04%)</title><rect x="1139.6" y="179.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1142.6" y="190.0"></text>
</g>
<g>
<title>szone_malloc (2 samples, 0.04%)</title><rect x="1140.1" y="227.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1143.1" y="238.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.02%)</title><rect x="1140.6" y="243.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1143.6" y="254.0"></text>
</g>
<g>
<title>vtable for std::__1::codecvt_byname&lt;wchar_t, char, __mbstate_t&gt; (1 samples, 0.02%)</title><rect x="1140.9" y="275.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.9" y="286.0"></text>
</g>
<g>
<title>vtable for std::__1::messages&lt;char&gt; (1 samples, 0.02%)</title><rect x="1141.1" y="275.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.1" y="286.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="1141.4" y="275.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.4" y="286.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1 samples, 0.02%)</title><rect x="1142.1" y="291.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.1" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.shiftBytes (3 samples, 0.06%)</title><rect x="1142.4" y="323.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1145.4" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.02%)</title><rect x="1142.9" y="307.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1145.9" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.02%)</title><rect x="1142.9" y="291.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1145.9" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.toArray (5 samples, 0.11%)</title><rect x="1143.1" y="323.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1146.1" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (5 samples, 0.11%)</title><rect x="1143.1" y="307.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1146.1" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.09%)</title><rect x="1143.4" y="291.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1146.4" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.09%)</title><rect x="1143.4" y="275.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1146.4" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1143.4" y="259.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1146.4" y="270.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1143.4" y="243.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1146.4" y="254.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (2 samples, 0.04%)</title><rect x="1143.4" y="227.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1146.4" y="238.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="1143.9" y="259.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1146.9" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/ServiceImpl.doGet (1 samples, 0.02%)</title><rect x="1144.4" y="339.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1147.4" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (2 samples, 0.04%)</title><rect x="1144.6" y="371.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1147.6" y="382.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (3 samples, 0.06%)</title><rect x="1145.1" y="371.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1148.1" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.06%)</title><rect x="1145.1" y="355.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1148.1" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.04%)</title><rect x="1145.1" y="339.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1148.1" y="350.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.04%)</title><rect x="1145.1" y="323.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1148.1" y="334.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.04%)</title><rect x="1145.1" y="307.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1148.1" y="318.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="1145.1" y="291.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1148.1" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.02%)</title><rect x="1145.6" y="339.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1148.6" y="350.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.02%)</title><rect x="1145.6" y="323.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1148.6" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.02%)</title><rect x="1145.6" y="307.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1148.6" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 0.06%)</title><rect x="1145.9" y="371.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1148.9" y="382.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.02%)</title><rect x="1146.4" y="355.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1149.4" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="1146.4" y="339.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1149.4" y="350.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.02%)</title><rect x="1146.4" y="323.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1149.4" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (21 samples, 0.45%)</title><rect x="1146.7" y="403.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1149.7" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (15 samples, 0.32%)</title><rect x="1146.9" y="387.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1149.9" y="398.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.06%)</title><rect x="1149.4" y="371.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1152.4" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.06%)</title><rect x="1149.4" y="355.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1152.4" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.04%)</title><rect x="1149.7" y="339.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1152.7" y="350.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="1150.2" y="371.0" width="0.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1153.2" y="382.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="1150.4" y="371.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1153.4" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.11%)</title><rect x="1150.7" y="387.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1153.7" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.11%)</title><rect x="1150.7" y="371.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1153.7" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (12 samples, 0.26%)</title><rect x="1151.9" y="403.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1154.9" y="414.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.02%)</title><rect x="1152.4" y="387.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1155.4" y="398.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.02%)</title><rect x="1152.4" y="371.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1155.4" y="382.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.02%)</title><rect x="1152.4" y="355.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1155.4" y="366.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.02%)</title><rect x="1152.4" y="339.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1155.4" y="350.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (1 samples, 0.02%)</title><rect x="1152.4" y="323.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1155.4" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.06%)</title><rect x="1152.7" y="387.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1155.7" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (4 samples, 0.09%)</title><rect x="1153.5" y="387.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1156.5" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.02%)</title><rect x="1154.5" y="387.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1157.5" y="398.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1 samples, 0.02%)</title><rect x="1154.7" y="387.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1157.7" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (6 samples, 0.13%)</title><rect x="1155.0" y="403.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1158.0" y="414.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1155.7" y="387.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1158.7" y="398.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.02%)</title><rect x="1156.2" y="387.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1159.2" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (10 samples, 0.21%)</title><rect x="1156.5" y="403.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1159.5" y="414.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (9 samples, 0.19%)</title><rect x="1156.5" y="387.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1159.5" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.13%)</title><rect x="1157.2" y="371.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1160.2" y="382.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (5 samples, 0.11%)</title><rect x="1157.5" y="355.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1160.5" y="366.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (5 samples, 0.11%)</title><rect x="1157.5" y="339.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1160.5" y="350.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (5 samples, 0.11%)</title><rect x="1157.5" y="323.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1160.5" y="334.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.02%)</title><rect x="1158.7" y="387.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1161.7" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="1158.7" y="371.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1161.7" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 0.28%)</title><rect x="1159.0" y="403.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1162.0" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 0.28%)</title><rect x="1159.0" y="387.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1162.0" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (94 samples, 2.01%)</title><rect x="1162.3" y="419.0" width="23.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1165.3" y="430.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (90 samples, 1.92%)</title><rect x="1162.3" y="403.0" width="22.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1165.3" y="414.0">o..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (90 samples, 1.92%)</title><rect x="1162.3" y="387.0" width="22.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1165.3" y="398.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (90 samples, 1.92%)</title><rect x="1162.3" y="371.0" width="22.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1165.3" y="382.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (90 samples, 1.92%)</title><rect x="1162.3" y="355.0" width="22.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1165.3" y="366.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (83 samples, 1.77%)</title><rect x="1162.3" y="339.0" width="20.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1165.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (83 samples, 1.77%)</title><rect x="1162.3" y="323.0" width="20.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1165.3" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (78 samples, 1.67%)</title><rect x="1163.5" y="307.0" width="19.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1166.5" y="318.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (5 samples, 0.11%)</title><rect x="1164.3" y="291.0" width="1.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1167.3" y="302.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.04%)</title><rect x="1165.0" y="275.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1168.0" y="286.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.02%)</title><rect x="1165.6" y="291.0" width="0.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1168.6" y="302.0"></text>
</g>
<g>
<title>read (69 samples, 1.47%)</title><rect x="1165.8" y="291.0" width="17.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1168.8" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (7 samples, 0.15%)</title><rect x="1183.2" y="339.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1186.2" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.15%)</title><rect x="1183.2" y="323.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1186.2" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 0.15%)</title><rect x="1183.2" y="307.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1186.2" y="318.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="1184.5" y="291.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1187.5" y="302.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="1184.7" y="291.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1187.7" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (4 samples, 0.09%)</title><rect x="1185.0" y="403.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1188.0" y="414.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (1 samples, 0.02%)</title><rect x="1186.0" y="467.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.0" y="478.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.02%)</title><rect x="1186.2" y="467.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.2" y="478.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (3 samples, 0.06%)</title><rect x="1186.5" y="467.0" width="0.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1189.5" y="478.0"></text>
</g>
<g>
<title>[tid=13571] (1 samples, 0.02%)</title><rect x="1187.2" y="483.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1190.2" y="494.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.02%)</title><rect x="1187.2" y="467.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1190.2" y="478.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.02%)</title><rect x="1187.2" y="451.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1190.2" y="462.0"></text>
</g>
<g>
<title>_pthread_body (1 samples, 0.02%)</title><rect x="1187.2" y="435.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1190.2" y="446.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.02%)</title><rect x="1187.2" y="419.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1190.2" y="430.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.02%)</title><rect x="1187.2" y="403.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.2" y="414.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.02%)</title><rect x="1187.2" y="387.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.2" y="398.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.02%)</title><rect x="1187.2" y="371.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.2" y="382.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (1 samples, 0.02%)</title><rect x="1187.2" y="355.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.2" y="366.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.02%)</title><rect x="1187.2" y="339.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.2" y="350.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.02%)</title><rect x="1187.2" y="323.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.2" y="334.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.02%)</title><rect x="1187.2" y="307.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.2" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.02%)</title><rect x="1187.2" y="291.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1190.2" y="302.0"></text>
</g>
<g>
<title>[tid=14083] (1 samples, 0.02%)</title><rect x="1187.5" y="483.0" width="0.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1190.5" y="494.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.02%)</title><rect x="1187.5" y="467.0" width="0.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1190.5" y="478.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.02%)</title><rect x="1187.5" y="451.0" width="0.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1190.5" y="462.0"></text>
</g>
<g>
<title>_pthread_body (1 samples, 0.02%)</title><rect x="1187.5" y="435.0" width="0.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1190.5" y="446.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.02%)</title><rect x="1187.5" y="419.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1190.5" y="430.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.02%)</title><rect x="1187.5" y="403.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.5" y="414.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.02%)</title><rect x="1187.5" y="387.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.5" y="398.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.02%)</title><rect x="1187.5" y="371.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.5" y="382.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.02%)</title><rect x="1187.5" y="355.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.5" y="366.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.02%)</title><rect x="1187.5" y="339.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.5" y="350.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.02%)</title><rect x="1187.5" y="323.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.5" y="334.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.02%)</title><rect x="1187.5" y="307.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1190.5" y="318.0"></text>
</g>
<g>
<title>[tid=17411] (1 samples, 0.02%)</title><rect x="1187.7" y="483.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1190.7" y="494.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.02%)</title><rect x="1187.7" y="467.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1190.7" y="478.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.02%)</title><rect x="1187.7" y="451.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1190.7" y="462.0"></text>
</g>
<g>
<title>_pthread_body (1 samples, 0.02%)</title><rect x="1187.7" y="435.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1190.7" y="446.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.02%)</title><rect x="1187.7" y="419.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1190.7" y="430.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.02%)</title><rect x="1187.7" y="403.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.7" y="414.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.02%)</title><rect x="1187.7" y="387.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.7" y="398.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.02%)</title><rect x="1187.7" y="371.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.7" y="382.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (1 samples, 0.02%)</title><rect x="1187.7" y="355.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.7" y="366.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (1 samples, 0.02%)</title><rect x="1187.7" y="339.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.7" y="350.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.02%)</title><rect x="1187.7" y="323.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.7" y="334.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.02%)</title><rect x="1187.7" y="307.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.7" y="318.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.02%)</title><rect x="1187.7" y="291.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.7" y="302.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.02%)</title><rect x="1187.7" y="275.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.7" y="286.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.02%)</title><rect x="1187.7" y="259.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.7" y="270.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.02%)</title><rect x="1187.7" y="243.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.7" y="254.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.02%)</title><rect x="1187.7" y="227.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.7" y="238.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.02%)</title><rect x="1187.7" y="211.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.7" y="222.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.02%)</title><rect x="1187.7" y="195.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.7" y="206.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.02%)</title><rect x="1187.7" y="179.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.7" y="190.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.02%)</title><rect x="1187.7" y="163.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.7" y="174.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.02%)</title><rect x="1187.7" y="147.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.7" y="158.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.02%)</title><rect x="1187.7" y="131.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.7" y="142.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.02%)</title><rect x="1187.7" y="115.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.7" y="126.0"></text>
</g>
<g>
<title>[tid=22787] (8 samples, 0.17%)</title><rect x="1188.0" y="483.0" width="2.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1191.0" y="494.0"></text>
</g>
<g>
<title>thread_start (8 samples, 0.17%)</title><rect x="1188.0" y="467.0" width="2.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1191.0" y="478.0"></text>
</g>
<g>
<title>_pthread_start (8 samples, 0.17%)</title><rect x="1188.0" y="451.0" width="2.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1191.0" y="462.0"></text>
</g>
<g>
<title>_pthread_body (8 samples, 0.17%)</title><rect x="1188.0" y="435.0" width="2.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1191.0" y="446.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (8 samples, 0.17%)</title><rect x="1188.0" y="419.0" width="2.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1191.0" y="430.0"></text>
</g>
<g>
<title>Thread::call_run() (8 samples, 0.17%)</title><rect x="1188.0" y="403.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.0" y="414.0"></text>
</g>
<g>
<title>WatcherThread::run() (8 samples, 0.17%)</title><rect x="1188.0" y="387.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.0" y="398.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (8 samples, 0.17%)</title><rect x="1188.0" y="371.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.0" y="382.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (8 samples, 0.17%)</title><rect x="1188.0" y="355.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.0" y="366.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (8 samples, 0.17%)</title><rect x="1188.0" y="339.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.0" y="350.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (8 samples, 0.17%)</title><rect x="1188.0" y="323.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.0" y="334.0"></text>
</g>
<g>
<title>__psynch_cvwait (8 samples, 0.17%)</title><rect x="1188.0" y="307.0" width="2.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1191.0" y="318.0"></text>
</g>
</g>
</svg>
