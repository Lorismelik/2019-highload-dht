<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="501"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="501"> </text>
<g id="frames">
<g>
<title>all (3,638 samples, 100.00%)</title><rect x="10.0" y="467.0" width="1180.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.0" y="478.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=40963] (404 samples, 11.11%)</title><rect x="10.0" y="451.0" width="131.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="13.0" y="462.0">[NIO Selector #0..</text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.08%)</title><rect x="10.0" y="435.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="10.6" y="419.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.6" y="430.0"></text>
</g>
<g>
<title>_res (1 samples, 0.03%)</title><rect x="10.6" y="403.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="13.6" y="414.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (401 samples, 11.02%)</title><rect x="11.0" y="435.0" width="130.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.0" y="446.0">one/nio/server/S..</text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.03%)</title><rect x="11.0" y="419.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="14.0" y="430.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="11.3" y="419.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="14.3" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (278 samples, 7.64%)</title><rect x="11.6" y="419.0" width="90.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.6" y="430.0">one/nio/ne..</text>
</g>
<g>
<title>_res (1 samples, 0.03%)</title><rect x="11.9" y="403.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="14.9" y="414.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.05%)</title><rect x="12.3" y="403.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.03%)</title><rect x="12.6" y="387.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.6" y="398.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.03%)</title><rect x="12.6" y="371.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.6" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.03%)</title><rect x="12.6" y="355.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="15.6" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="12.6" y="339.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.6" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="12.6" y="323.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.6" y="334.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (2 samples, 0.05%)</title><rect x="12.9" y="403.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.03%)</title><rect x="13.2" y="387.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="16.2" y="398.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="13.6" y="403.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="16.6" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (270 samples, 7.42%)</title><rect x="13.9" y="403.0" width="87.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="16.9" y="414.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (270 samples, 7.42%)</title><rect x="13.9" y="387.0" width="87.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.9" y="398.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (268 samples, 7.37%)</title><rect x="14.5" y="371.0" width="87.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.5" y="382.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (251 samples, 6.90%)</title><rect x="14.5" y="355.0" width="81.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="17.5" y="366.0">sun/nio/c..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (3 samples, 0.08%)</title><rect x="18.8" y="339.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="21.8" y="350.0"></text>
</g>
<g>
<title>kevent (235 samples, 6.46%)</title><rect x="19.7" y="339.0" width="76.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="22.7" y="350.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (5 samples, 0.14%)</title><rect x="96.0" y="355.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="99.0" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="96.0" y="339.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="99.0" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="96.0" y="323.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="99.0" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.11%)</title><rect x="96.3" y="339.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="99.3" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.08%)</title><rect x="96.6" y="323.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="99.6" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.08%)</title><rect x="96.6" y="307.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="99.6" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.08%)</title><rect x="96.6" y="291.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="99.6" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.03%)</title><rect x="96.9" y="275.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="99.9" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.03%)</title><rect x="97.3" y="275.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="100.3" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.05%)</title><rect x="97.6" y="355.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="100.6" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (5 samples, 0.14%)</title><rect x="98.2" y="355.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="101.2" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (5 samples, 0.14%)</title><rect x="98.2" y="339.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="101.2" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.08%)</title><rect x="98.2" y="323.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="101.2" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.05%)</title><rect x="99.2" y="323.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="102.2" y="334.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.05%)</title><rect x="99.2" y="307.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="102.2" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.05%)</title><rect x="99.2" y="291.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="102.2" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (1 samples, 0.03%)</title><rect x="99.8" y="355.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="102.8" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.03%)</title><rect x="99.8" y="339.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="102.8" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="99.8" y="323.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="102.8" y="334.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="99.8" y="307.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="102.8" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="99.8" y="291.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="102.8" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (4 samples, 0.11%)</title><rect x="100.2" y="355.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="103.2" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.05%)</title><rect x="100.8" y="339.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="103.8" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.05%)</title><rect x="100.8" y="323.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="103.8" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="101.1" y="307.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="104.1" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="101.1" y="291.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="104.1" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (1 samples, 0.03%)</title><rect x="101.5" y="403.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="104.5" y="414.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (1 samples, 0.03%)</title><rect x="101.5" y="387.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="104.5" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (1 samples, 0.03%)</title><rect x="101.5" y="371.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="104.5" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (120 samples, 3.30%)</title><rect x="101.8" y="419.0" width="38.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="104.8" y="430.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (120 samples, 3.30%)</title><rect x="101.8" y="403.0" width="38.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="104.8" y="414.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (73 samples, 2.01%)</title><rect x="102.1" y="387.0" width="23.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="105.1" y="398.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (62 samples, 1.70%)</title><rect x="102.4" y="371.0" width="20.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="105.4" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (62 samples, 1.70%)</title><rect x="102.4" y="355.0" width="20.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="105.4" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getMethod (1 samples, 0.03%)</title><rect x="102.4" y="339.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="105.4" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.handleDefault (61 samples, 1.68%)</title><rect x="102.8" y="339.0" width="19.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="105.8" y="350.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.05%)</title><rect x="102.8" y="323.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="105.8" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.05%)</title><rect x="103.4" y="323.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="106.4" y="334.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.05%)</title><rect x="103.4" y="307.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="106.4" y="318.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsBeginEnd (1 samples, 0.03%)</title><rect x="103.4" y="291.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="106.4" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="103.7" y="291.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="106.7" y="302.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="103.7" y="275.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="106.7" y="286.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="103.7" y="259.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="106.7" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.entity (57 samples, 1.57%)</title><rect x="104.1" y="323.0" width="18.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="107.1" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="104.1" y="307.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="107.1" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="104.1" y="291.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="107.1" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$69/1693506190.get$Lambda (1 samples, 0.03%)</title><rect x="104.1" y="275.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="107.1" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$69/1693506190.&lt;init&gt; (1 samples, 0.03%)</title><rect x="104.1" y="259.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="107.1" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5 samples, 0.14%)</title><rect x="104.4" y="307.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="107.4" y="318.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.08%)</title><rect x="104.4" y="291.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="107.4" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.08%)</title><rect x="104.4" y="275.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="107.4" y="286.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="105.0" y="259.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="108.0" y="270.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.03%)</title><rect x="105.4" y="291.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="108.4" y="302.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.03%)</title><rect x="105.7" y="291.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="108.7" y="302.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="105.7" y="275.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="108.7" y="286.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="105.7" y="259.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="108.7" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="105.7" y="243.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="108.7" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.executeAsync (51 samples, 1.40%)</title><rect x="106.0" y="307.0" width="16.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="109.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (51 samples, 1.40%)</title><rect x="106.0" y="291.0" width="16.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="109.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (51 samples, 1.40%)</title><rect x="106.0" y="275.0" width="16.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="109.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.enqueue (1 samples, 0.03%)</title><rect x="106.0" y="259.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="109.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (45 samples, 1.24%)</title><rect x="106.3" y="259.0" width="14.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="109.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (45 samples, 1.24%)</title><rect x="106.3" y="243.0" width="14.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="109.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (45 samples, 1.24%)</title><rect x="106.3" y="227.0" width="14.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="109.3" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (45 samples, 1.24%)</title><rect x="106.3" y="211.0" width="14.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="109.3" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (45 samples, 1.24%)</title><rect x="106.3" y="195.0" width="14.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="109.3" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (45 samples, 1.24%)</title><rect x="106.3" y="179.0" width="14.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="109.3" y="190.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="107.6" y="163.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="110.6" y="174.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (40 samples, 1.10%)</title><rect x="108.0" y="163.0" width="12.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="111.0" y="174.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="108.3" y="147.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="111.3" y="158.0"></text>
</g>
<g>
<title>JavaThread::is_suspend_after_native() const (1 samples, 0.03%)</title><rect x="108.6" y="147.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="111.6" y="158.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.05%)</title><rect x="108.9" y="147.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="111.9" y="158.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.05%)</title><rect x="108.9" y="131.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="111.9" y="142.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (2 samples, 0.05%)</title><rect x="108.9" y="115.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="111.9" y="126.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (2 samples, 0.05%)</title><rect x="108.9" y="99.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="111.9" y="110.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (2 samples, 0.05%)</title><rect x="108.9" y="83.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="111.9" y="94.0"></text>
</g>
<g>
<title>int Atomic::load&lt;int&gt;(int const volatile*) (2 samples, 0.05%)</title><rect x="108.9" y="67.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="111.9" y="78.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, Atomic::PlatformLoad&lt;4ul&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="108.9" y="51.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="111.9" y="62.0"></text>
</g>
<g>
<title>int Atomic::PlatformLoad&lt;4ul&gt;::operator()&lt;int&gt;(int const volatile*) const (1 samples, 0.03%)</title><rect x="108.9" y="35.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="111.9" y="46.0"></text>
</g>
<g>
<title>int Atomic::PlatformLoad&lt;4ul&gt;::operator()&lt;int&gt;(int const volatile*) const (1 samples, 0.03%)</title><rect x="109.3" y="51.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="112.3" y="62.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.05%)</title><rect x="109.6" y="147.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="112.6" y="158.0"></text>
</g>
<g>
<title>Thread::current_or_null() (2 samples, 0.05%)</title><rect x="109.6" y="131.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="112.6" y="142.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="110.2" y="147.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="113.2" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="110.2" y="131.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="113.2" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.03%)</title><rect x="110.2" y="115.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="113.2" y="126.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.05%)</title><rect x="110.5" y="147.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="113.5" y="158.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="110.5" y="131.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="113.5" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="110.9" y="131.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="113.9" y="142.0"></text>
</g>
<g>
<title>__psynch_cvsignal (28 samples, 0.77%)</title><rect x="111.2" y="147.0" width="9.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="114.2" y="158.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="120.3" y="147.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="123.3" y="158.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="120.6" y="147.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="123.6" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.14%)</title><rect x="120.9" y="259.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="123.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.14%)</title><rect x="120.9" y="243.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="123.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.11%)</title><rect x="121.3" y="227.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="124.3" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.shouldParkAfterFailedAcquire (1 samples, 0.03%)</title><rect x="121.9" y="211.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="124.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="122.2" y="211.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="125.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="122.2" y="195.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="125.2" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="122.2" y="179.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="125.2" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 0.19%)</title><rect x="122.6" y="371.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="125.6" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (5 samples, 0.14%)</title><rect x="122.9" y="355.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="125.9" y="366.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.11%)</title><rect x="123.2" y="339.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="126.2" y="350.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.11%)</title><rect x="123.2" y="323.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="126.2" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.05%)</title><rect x="123.8" y="307.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="126.8" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="124.5" y="355.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="127.5" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="124.5" y="339.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="127.5" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.05%)</title><rect x="124.8" y="371.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="127.8" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="125.5" y="371.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="128.5" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="125.5" y="355.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="128.5" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (46 samples, 1.26%)</title><rect x="125.8" y="387.0" width="14.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="128.8" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (44 samples, 1.21%)</title><rect x="126.1" y="371.0" width="14.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="129.1" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="126.1" y="355.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="129.1" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (43 samples, 1.18%)</title><rect x="126.4" y="355.0" width="14.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="129.4" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (43 samples, 1.18%)</title><rect x="126.4" y="339.0" width="14.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="129.4" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (42 samples, 1.15%)</title><rect x="126.8" y="323.0" width="13.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="129.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (40 samples, 1.10%)</title><rect x="126.8" y="307.0" width="12.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="129.8" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (40 samples, 1.10%)</title><rect x="126.8" y="291.0" width="12.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="129.8" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (39 samples, 1.07%)</title><rect x="127.1" y="275.0" width="12.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="130.1" y="286.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.05%)</title><rect x="127.7" y="259.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="130.7" y="270.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="128.1" y="243.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="131.1" y="254.0"></text>
</g>
<g>
<title>read (35 samples, 0.96%)</title><rect x="128.4" y="259.0" width="11.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="131.4" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.05%)</title><rect x="139.7" y="307.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="142.7" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.05%)</title><rect x="139.7" y="291.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="142.7" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.05%)</title><rect x="139.7" y="275.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="142.7" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (1 samples, 0.03%)</title><rect x="140.4" y="371.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="143.4" y="382.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="140.7" y="419.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="143.7" y="430.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="140.7" y="403.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="143.7" y="414.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="140.7" y="387.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="143.7" y="398.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=24323] (385 samples, 10.58%)</title><rect x="141.0" y="451.0" width="124.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="144.0" y="462.0">[NIO Selector #..</text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.05%)</title><rect x="141.0" y="435.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="144.0" y="446.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="141.4" y="419.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="144.4" y="430.0"></text>
</g>
<g>
<title>_res (1 samples, 0.03%)</title><rect x="141.4" y="403.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="144.4" y="414.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (383 samples, 10.53%)</title><rect x="141.7" y="435.0" width="124.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="144.7" y="446.0">one/nio/server/..</text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.03%)</title><rect x="143.0" y="419.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="146.0" y="430.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="143.3" y="419.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="146.3" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (239 samples, 6.57%)</title><rect x="143.6" y="419.0" width="77.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="146.6" y="430.0">one/nio/n..</text>
</g>
<g>
<title>_res (1 samples, 0.03%)</title><rect x="144.0" y="403.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="147.0" y="414.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (3 samples, 0.08%)</title><rect x="144.3" y="403.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="147.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (3 samples, 0.08%)</title><rect x="144.3" y="387.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="147.3" y="398.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (3 samples, 0.08%)</title><rect x="144.3" y="371.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="147.3" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (3 samples, 0.08%)</title><rect x="144.3" y="355.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="147.3" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (3 samples, 0.08%)</title><rect x="144.3" y="339.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="147.3" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (3 samples, 0.08%)</title><rect x="144.3" y="323.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="147.3" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (233 samples, 6.40%)</title><rect x="145.3" y="403.0" width="75.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="148.3" y="414.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (233 samples, 6.40%)</title><rect x="145.3" y="387.0" width="75.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="148.3" y="398.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (233 samples, 6.40%)</title><rect x="145.3" y="371.0" width="75.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="148.3" y="382.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (214 samples, 5.88%)</title><rect x="145.6" y="355.0" width="69.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="148.6" y="366.0">sun/nio..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.03%)</title><rect x="149.1" y="339.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="152.1" y="350.0"></text>
</g>
<g>
<title>kevent (202 samples, 5.55%)</title><rect x="149.5" y="339.0" width="65.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="152.5" y="350.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (9 samples, 0.25%)</title><rect x="215.0" y="355.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="218.0" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.11%)</title><rect x="215.0" y="339.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="218.0" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.11%)</title><rect x="215.0" y="323.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="218.0" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (5 samples, 0.14%)</title><rect x="216.3" y="339.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="219.3" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.05%)</title><rect x="217.3" y="323.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="220.3" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.05%)</title><rect x="217.3" y="307.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="220.3" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.05%)</title><rect x="217.3" y="291.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="220.3" y="302.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.05%)</title><rect x="217.3" y="275.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="220.3" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (5 samples, 0.14%)</title><rect x="217.9" y="355.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.9" y="366.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.03%)</title><rect x="219.2" y="339.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.2" y="350.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.elementAt (1 samples, 0.03%)</title><rect x="219.2" y="323.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="222.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (2 samples, 0.05%)</title><rect x="219.5" y="355.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.5" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (2 samples, 0.05%)</title><rect x="219.5" y="339.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="222.5" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.05%)</title><rect x="219.5" y="323.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="222.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.03%)</title><rect x="219.9" y="307.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="222.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.05%)</title><rect x="220.2" y="355.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="223.2" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.03%)</title><rect x="220.5" y="339.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.5" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.03%)</title><rect x="220.5" y="323.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="223.5" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="220.5" y="307.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="223.5" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="220.5" y="291.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (1 samples, 0.03%)</title><rect x="220.8" y="403.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="223.8" y="414.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (1 samples, 0.03%)</title><rect x="220.8" y="387.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="223.8" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (1 samples, 0.03%)</title><rect x="220.8" y="371.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="223.8" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (136 samples, 3.74%)</title><rect x="221.2" y="419.0" width="44.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="224.2" y="430.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (136 samples, 3.74%)</title><rect x="221.2" y="403.0" width="44.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="224.2" y="414.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (78 samples, 2.14%)</title><rect x="221.2" y="387.0" width="25.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="224.2" y="398.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1 samples, 0.03%)</title><rect x="221.5" y="371.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="224.5" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (70 samples, 1.92%)</title><rect x="221.8" y="371.0" width="22.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.8" y="382.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (70 samples, 1.92%)</title><rect x="221.8" y="355.0" width="22.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="224.8" y="366.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (1 samples, 0.03%)</title><rect x="221.8" y="339.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.8" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.03%)</title><rect x="222.1" y="339.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="225.1" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.handleDefault (68 samples, 1.87%)</title><rect x="222.5" y="339.0" width="22.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="225.5" y="350.0">r..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.03%)</title><rect x="222.5" y="323.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="225.5" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.03%)</title><rect x="222.5" y="307.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.5" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.05%)</title><rect x="222.8" y="323.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="225.8" y="334.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.05%)</title><rect x="222.8" y="307.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="225.8" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.05%)</title><rect x="222.8" y="291.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="225.8" y="302.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.05%)</title><rect x="222.8" y="275.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="225.8" y="286.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="223.1" y="259.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="226.1" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.entity (65 samples, 1.79%)</title><rect x="223.4" y="323.0" width="21.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="226.4" y="334.0">r..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.05%)</title><rect x="223.4" y="307.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="226.4" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.05%)</title><rect x="223.4" y="291.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$69/1693506190.get$Lambda (2 samples, 0.05%)</title><rect x="223.4" y="275.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="226.4" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$69/1693506190.&lt;init&gt; (2 samples, 0.05%)</title><rect x="223.4" y="259.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="226.4" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.05%)</title><rect x="224.1" y="307.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="227.1" y="318.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.03%)</title><rect x="224.1" y="291.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="227.1" y="302.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="224.4" y="291.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="227.4" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="224.4" y="275.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="227.4" y="286.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.03%)</title><rect x="224.4" y="259.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="227.4" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.executeAsync (61 samples, 1.68%)</title><rect x="224.7" y="307.0" width="19.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="227.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (60 samples, 1.65%)</title><rect x="225.0" y="291.0" width="19.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="228.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (60 samples, 1.65%)</title><rect x="225.0" y="275.0" width="19.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="228.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue$Node.&lt;init&gt; (1 samples, 0.03%)</title><rect x="225.0" y="259.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="228.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (54 samples, 1.48%)</title><rect x="225.4" y="259.0" width="17.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="225.4" y="243.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="228.4" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (53 samples, 1.46%)</title><rect x="225.7" y="243.0" width="17.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="228.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (53 samples, 1.46%)</title><rect x="225.7" y="227.0" width="17.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="228.7" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (53 samples, 1.46%)</title><rect x="225.7" y="211.0" width="17.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="228.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (53 samples, 1.46%)</title><rect x="225.7" y="195.0" width="17.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="228.7" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (53 samples, 1.46%)</title><rect x="225.7" y="179.0" width="17.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.7" y="190.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="226.3" y="163.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="229.3" y="174.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.03%)</title><rect x="226.7" y="163.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="229.7" y="174.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (49 samples, 1.35%)</title><rect x="227.0" y="163.0" width="15.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="230.0" y="174.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="227.0" y="147.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="230.0" y="158.0"></text>
</g>
<g>
<title>HandleMarkCleaner::HandleMarkCleaner(Thread*) (1 samples, 0.03%)</title><rect x="227.3" y="147.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="230.3" y="158.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (1 samples, 0.03%)</title><rect x="227.6" y="147.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="230.6" y="158.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="228.0" y="147.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="231.0" y="158.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="228.0" y="131.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="231.0" y="142.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="228.0" y="115.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="231.0" y="126.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="228.0" y="99.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="231.0" y="110.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.03%)</title><rect x="228.0" y="83.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="231.0" y="94.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="228.3" y="147.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="231.3" y="158.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="228.6" y="147.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="231.6" y="158.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="228.6" y="131.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="231.6" y="142.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.03%)</title><rect x="228.9" y="147.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="231.9" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (41 samples, 1.13%)</title><rect x="229.3" y="147.0" width="13.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="232.3" y="158.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.03%)</title><rect x="242.6" y="147.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="245.6" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.14%)</title><rect x="242.9" y="259.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.14%)</title><rect x="242.9" y="243.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="245.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (5 samples, 0.14%)</title><rect x="242.9" y="227.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="245.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.03%)</title><rect x="243.5" y="211.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="246.5" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.03%)</title><rect x="243.5" y="195.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="246.5" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (2 samples, 0.05%)</title><rect x="243.9" y="211.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.9" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.05%)</title><rect x="243.9" y="195.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.9" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (2 samples, 0.05%)</title><rect x="243.9" y="179.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="246.9" y="190.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.03%)</title><rect x="244.2" y="163.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="247.2" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (4 samples, 0.11%)</title><rect x="244.5" y="371.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="247.5" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.05%)</title><rect x="245.2" y="355.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="248.2" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.05%)</title><rect x="245.2" y="339.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="248.2" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="245.8" y="371.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="248.8" y="382.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="245.8" y="355.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="248.8" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="245.8" y="339.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="248.8" y="350.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.03%)</title><rect x="245.8" y="323.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="248.8" y="334.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.03%)</title><rect x="245.8" y="307.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="248.8" y="318.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.03%)</title><rect x="245.8" y="291.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="248.8" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="246.1" y="371.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.1" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="246.1" y="355.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.1" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (2 samples, 0.05%)</title><rect x="246.5" y="387.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="249.5" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (56 samples, 1.54%)</title><rect x="247.1" y="387.0" width="18.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="250.1" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (51 samples, 1.40%)</title><rect x="248.7" y="371.0" width="16.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="251.7" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (51 samples, 1.40%)</title><rect x="248.7" y="355.0" width="16.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="251.7" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (51 samples, 1.40%)</title><rect x="248.7" y="339.0" width="16.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="251.7" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (47 samples, 1.29%)</title><rect x="250.0" y="323.0" width="15.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.0" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (44 samples, 1.21%)</title><rect x="250.0" y="307.0" width="14.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="253.0" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (44 samples, 1.21%)</title><rect x="250.0" y="291.0" width="14.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="253.0" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (39 samples, 1.07%)</title><rect x="251.6" y="275.0" width="12.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="254.6" y="286.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.05%)</title><rect x="251.6" y="259.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="254.6" y="270.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="252.0" y="243.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="255.0" y="254.0"></text>
</g>
<g>
<title>read (37 samples, 1.02%)</title><rect x="252.3" y="259.0" width="12.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="255.3" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.08%)</title><rect x="264.3" y="307.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="267.3" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.08%)</title><rect x="264.3" y="291.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="267.3" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.08%)</title><rect x="264.3" y="275.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="267.3" y="286.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.03%)</title><rect x="264.6" y="259.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="267.6" y="270.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="264.9" y="259.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="267.9" y="270.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.05%)</title><rect x="265.3" y="419.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="268.3" y="430.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="265.3" y="403.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="268.3" y="414.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="265.3" y="387.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="268.3" y="398.0"></text>
</g>
<g>
<title>_res (1 samples, 0.03%)</title><rect x="265.3" y="371.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="268.3" y="382.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="265.6" y="403.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="268.6" y="414.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=39939] (373 samples, 10.25%)</title><rect x="265.9" y="451.0" width="121.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="268.9" y="462.0">[NIO Selector #..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="265.9" y="435.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="268.9" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.03%)</title><rect x="265.9" y="419.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="268.9" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="265.9" y="403.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="268.9" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="265.9" y="387.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="268.9" y="398.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="265.9" y="371.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="268.9" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="265.9" y="355.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="268.9" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="265.9" y="339.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="268.9" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="265.9" y="323.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="268.9" y="334.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.03%)</title><rect x="265.9" y="307.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="268.9" y="318.0"></text>
</g>
<g>
<title>G1AllocRegion::retire_internal(HeapRegion*, bool) (1 samples, 0.03%)</title><rect x="265.9" y="291.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="268.9" y="302.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.03%)</title><rect x="265.9" y="275.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="268.9" y="286.0"></text>
</g>
<g>
<title>G1SurvivorRegions::length() const (1 samples, 0.03%)</title><rect x="265.9" y="259.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="268.9" y="270.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.05%)</title><rect x="266.2" y="435.0" width="0.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="269.2" y="446.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (370 samples, 10.17%)</title><rect x="266.9" y="435.0" width="120.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.9" y="446.0">one/nio/server/..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="267.5" y="419.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="270.5" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 0.03%)</title><rect x="267.9" y="419.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="270.9" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (250 samples, 6.87%)</title><rect x="268.2" y="419.0" width="81.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="271.2" y="430.0">one/nio/n..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.05%)</title><rect x="268.5" y="403.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="271.5" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.03%)</title><rect x="268.5" y="387.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="271.5" y="398.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="268.5" y="371.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="271.5" y="382.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="268.8" y="387.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="271.8" y="398.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.03%)</title><rect x="269.2" y="403.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="272.2" y="414.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (5 samples, 0.14%)</title><rect x="269.5" y="403.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="272.5" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.03%)</title><rect x="270.8" y="387.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.8" y="398.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.03%)</title><rect x="270.8" y="371.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="273.8" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.03%)</title><rect x="270.8" y="355.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="273.8" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="270.8" y="339.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="273.8" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="270.8" y="323.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="273.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (241 samples, 6.62%)</title><rect x="271.1" y="403.0" width="78.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="274.1" y="414.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (241 samples, 6.62%)</title><rect x="271.1" y="387.0" width="78.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="274.1" y="398.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (241 samples, 6.62%)</title><rect x="271.1" y="371.0" width="78.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.1" y="382.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (216 samples, 5.94%)</title><rect x="271.4" y="355.0" width="70.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="274.4" y="366.0">sun/nio/..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.05%)</title><rect x="275.6" y="339.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="278.6" y="350.0"></text>
</g>
<g>
<title>kevent (201 samples, 5.53%)</title><rect x="276.3" y="339.0" width="65.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="279.3" y="350.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (9 samples, 0.25%)</title><rect x="341.5" y="355.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="344.5" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.08%)</title><rect x="341.5" y="339.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="344.5" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.08%)</title><rect x="341.5" y="323.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="344.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (6 samples, 0.16%)</title><rect x="342.5" y="339.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="345.5" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.add (6 samples, 0.16%)</title><rect x="342.5" y="323.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="345.5" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 0.14%)</title><rect x="342.8" y="307.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="345.8" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.14%)</title><rect x="342.8" y="291.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="345.8" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.03%)</title><rect x="343.1" y="275.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="346.1" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.05%)</title><rect x="343.4" y="275.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="346.4" y="286.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="344.1" y="275.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="347.1" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.03%)</title><rect x="344.4" y="355.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="347.4" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (10 samples, 0.27%)</title><rect x="344.7" y="355.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="347.7" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (10 samples, 0.27%)</title><rect x="344.7" y="339.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="347.7" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.05%)</title><rect x="344.7" y="323.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="347.7" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.03%)</title><rect x="345.1" y="307.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="348.1" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (7 samples, 0.19%)</title><rect x="345.4" y="323.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="348.4" y="334.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (7 samples, 0.19%)</title><rect x="345.4" y="307.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="348.4" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (7 samples, 0.19%)</title><rect x="345.4" y="291.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="348.4" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.03%)</title><rect x="347.7" y="323.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="350.7" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (4 samples, 0.11%)</title><rect x="348.0" y="355.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="351.0" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.05%)</title><rect x="348.6" y="339.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="351.6" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.05%)</title><rect x="348.6" y="323.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="351.6" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.05%)</title><rect x="348.6" y="307.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="351.6" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.05%)</title><rect x="348.6" y="291.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="351.6" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (115 samples, 3.16%)</title><rect x="349.3" y="419.0" width="37.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="352.3" y="430.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (115 samples, 3.16%)</title><rect x="349.3" y="403.0" width="37.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="352.3" y="414.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (79 samples, 2.17%)</title><rect x="349.3" y="387.0" width="25.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="352.3" y="398.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (68 samples, 1.87%)</title><rect x="349.6" y="371.0" width="22.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="352.6" y="382.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (68 samples, 1.87%)</title><rect x="349.6" y="355.0" width="22.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="352.6" y="366.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (1 samples, 0.03%)</title><rect x="349.6" y="339.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="352.6" y="350.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.03%)</title><rect x="349.9" y="339.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="352.9" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="349.9" y="323.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="352.9" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="349.9" y="307.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="352.9" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.03%)</title><rect x="350.2" y="339.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="353.2" y="350.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="350.2" y="323.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="353.2" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="350.2" y="307.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="353.2" y="318.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="350.2" y="291.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="353.2" y="302.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="350.2" y="275.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="353.2" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.handleDefault (65 samples, 1.79%)</title><rect x="350.6" y="339.0" width="21.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="353.6" y="350.0">r..</text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.11%)</title><rect x="350.6" y="323.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="353.6" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.08%)</title><rect x="350.9" y="307.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="353.9" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.05%)</title><rect x="351.9" y="323.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="354.9" y="334.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="352.2" y="307.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="355.2" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="352.2" y="291.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="355.2" y="302.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="352.2" y="275.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="355.2" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.entity (59 samples, 1.62%)</title><rect x="352.5" y="323.0" width="19.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="355.5" y="334.0"></text>
</g>
<g>
<title>java/lang/String.isEmpty (2 samples, 0.05%)</title><rect x="352.8" y="307.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="355.8" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.05%)</title><rect x="352.8" y="291.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="355.8" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6 samples, 0.16%)</title><rect x="353.5" y="307.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="356.5" y="318.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.05%)</title><rect x="353.5" y="291.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="356.5" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.05%)</title><rect x="353.5" y="275.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="356.5" y="286.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="353.8" y="259.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="356.8" y="270.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (2 samples, 0.05%)</title><rect x="354.1" y="291.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="357.1" y="302.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="354.5" y="275.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="357.5" y="286.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.03%)</title><rect x="354.5" y="259.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="357.5" y="270.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.05%)</title><rect x="354.8" y="291.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="357.8" y="302.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsBeginEnd (2 samples, 0.05%)</title><rect x="354.8" y="275.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="357.8" y="286.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.05%)</title><rect x="354.8" y="259.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="357.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.executeAsync (50 samples, 1.37%)</title><rect x="355.4" y="307.0" width="16.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="358.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (50 samples, 1.37%)</title><rect x="355.4" y="291.0" width="16.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="358.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (50 samples, 1.37%)</title><rect x="355.4" y="275.0" width="16.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="358.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (47 samples, 1.29%)</title><rect x="355.4" y="259.0" width="15.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="358.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.05%)</title><rect x="355.4" y="243.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="358.4" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="355.8" y="227.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="358.8" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="355.8" y="211.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="358.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="355.8" y="195.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="358.8" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.03%)</title><rect x="355.8" y="179.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="358.8" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (45 samples, 1.24%)</title><rect x="356.1" y="243.0" width="14.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="359.1" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (45 samples, 1.24%)</title><rect x="356.1" y="227.0" width="14.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="359.1" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (45 samples, 1.24%)</title><rect x="356.1" y="211.0" width="14.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="359.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (45 samples, 1.24%)</title><rect x="356.1" y="195.0" width="14.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="359.1" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (45 samples, 1.24%)</title><rect x="356.1" y="179.0" width="14.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="359.1" y="190.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="356.1" y="163.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="359.1" y="174.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.03%)</title><rect x="356.4" y="163.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="359.4" y="174.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (42 samples, 1.15%)</title><rect x="356.7" y="163.0" width="13.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="359.7" y="174.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="356.7" y="147.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="359.7" y="158.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.08%)</title><rect x="357.1" y="147.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="360.1" y="158.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (3 samples, 0.08%)</title><rect x="357.1" y="131.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="360.1" y="142.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (3 samples, 0.08%)</title><rect x="357.1" y="115.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="360.1" y="126.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (3 samples, 0.08%)</title><rect x="357.1" y="99.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="360.1" y="110.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.03%)</title><rect x="357.1" y="83.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="360.1" y="94.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.03%)</title><rect x="357.4" y="83.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="360.4" y="94.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="357.7" y="83.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="360.7" y="94.0"></text>
</g>
<g>
<title>int Atomic::load&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="357.7" y="67.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="360.7" y="78.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, Atomic::PlatformLoad&lt;4ul&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="357.7" y="51.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="360.7" y="62.0"></text>
</g>
<g>
<title>int Atomic::PlatformLoad&lt;4ul&gt;::operator()&lt;int&gt;(int const volatile*) const (1 samples, 0.03%)</title><rect x="357.7" y="35.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="360.7" y="46.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.03%)</title><rect x="358.0" y="147.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="361.0" y="158.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="358.4" y="147.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="361.4" y="158.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="358.4" y="131.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="361.4" y="142.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.03%)</title><rect x="358.7" y="147.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="361.7" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.05%)</title><rect x="359.0" y="147.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="362.0" y="158.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="359.0" y="131.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="362.0" y="142.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="359.0" y="115.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="362.0" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="359.3" y="131.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="362.3" y="142.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="359.3" y="115.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="362.3" y="126.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="359.7" y="147.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="362.7" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (30 samples, 0.82%)</title><rect x="360.0" y="147.0" width="9.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="363.0" y="158.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="369.7" y="147.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="372.7" y="158.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="369.7" y="131.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="372.7" y="142.0"></text>
</g>
<g>
<title>pthread_dependency_wait_np (1 samples, 0.03%)</title><rect x="370.0" y="147.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="373.0" y="158.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="370.4" y="163.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="373.4" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.08%)</title><rect x="370.7" y="259.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="373.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.08%)</title><rect x="370.7" y="243.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="373.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.05%)</title><rect x="371.0" y="227.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="374.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (1 samples, 0.03%)</title><rect x="371.3" y="211.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="374.3" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.03%)</title><rect x="371.3" y="195.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="374.3" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="371.3" y="179.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="374.3" y="190.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.03%)</title><rect x="371.3" y="163.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="374.3" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 0.19%)</title><rect x="371.7" y="371.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="374.7" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.08%)</title><rect x="372.0" y="355.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="375.0" y="366.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.05%)</title><rect x="372.3" y="339.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="375.3" y="350.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.05%)</title><rect x="372.3" y="323.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="375.3" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.05%)</title><rect x="372.3" y="307.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="375.3" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.08%)</title><rect x="373.0" y="355.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="376.0" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.08%)</title><rect x="373.0" y="339.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="376.0" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.03%)</title><rect x="373.9" y="371.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="376.9" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="374.2" y="371.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="377.2" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="374.6" y="371.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="377.6" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="374.6" y="355.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="377.6" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (36 samples, 0.99%)</title><rect x="374.9" y="387.0" width="11.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="377.9" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (35 samples, 0.96%)</title><rect x="374.9" y="371.0" width="11.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="377.9" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (35 samples, 0.96%)</title><rect x="374.9" y="355.0" width="11.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="377.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (35 samples, 0.96%)</title><rect x="374.9" y="339.0" width="11.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="377.9" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (33 samples, 0.91%)</title><rect x="375.5" y="323.0" width="10.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="378.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (32 samples, 0.88%)</title><rect x="375.5" y="307.0" width="10.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="378.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (32 samples, 0.88%)</title><rect x="375.5" y="291.0" width="10.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="378.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (31 samples, 0.85%)</title><rect x="375.9" y="275.0" width="10.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="378.9" y="286.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.03%)</title><rect x="376.2" y="259.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="379.2" y="270.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="376.2" y="243.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="379.2" y="254.0"></text>
</g>
<g>
<title>read (29 samples, 0.80%)</title><rect x="376.5" y="259.0" width="9.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="379.5" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="385.9" y="307.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="388.9" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="385.9" y="291.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="388.9" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.03%)</title><rect x="385.9" y="275.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="388.9" y="286.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.03%)</title><rect x="385.9" y="259.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="388.9" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (1 samples, 0.03%)</title><rect x="386.3" y="371.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="389.3" y="382.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="386.6" y="419.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="389.6" y="430.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="386.6" y="403.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="389.6" y="414.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="386.6" y="387.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="389.6" y="398.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=24835] (358 samples, 9.84%)</title><rect x="386.9" y="451.0" width="116.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="389.9" y="462.0">[NIO Selector ..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (358 samples, 9.84%)</title><rect x="386.9" y="435.0" width="116.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="389.9" y="446.0">one/nio/server..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="387.5" y="419.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="390.5" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (1 samples, 0.03%)</title><rect x="387.9" y="419.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="390.9" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (6 samples, 0.16%)</title><rect x="388.2" y="419.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="391.2" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (6 samples, 0.16%)</title><rect x="388.2" y="403.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="391.2" y="414.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (215 samples, 5.91%)</title><rect x="390.1" y="419.0" width="69.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="393.1" y="430.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.03%)</title><rect x="390.8" y="403.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="393.8" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (212 samples, 5.83%)</title><rect x="391.1" y="403.0" width="68.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="394.1" y="414.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (210 samples, 5.77%)</title><rect x="391.8" y="387.0" width="68.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="394.8" y="398.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (206 samples, 5.66%)</title><rect x="393.1" y="371.0" width="66.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="396.1" y="382.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (192 samples, 5.28%)</title><rect x="393.4" y="355.0" width="62.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="396.4" y="366.0">sun/ni..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.05%)</title><rect x="397.0" y="339.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="400.0" y="350.0"></text>
</g>
<g>
<title>kevent (179 samples, 4.92%)</title><rect x="397.6" y="339.0" width="58.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="400.6" y="350.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (6 samples, 0.16%)</title><rect x="455.7" y="355.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="458.7" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="455.7" y="339.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="458.7" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="455.7" y="323.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="458.7" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (5 samples, 0.14%)</title><rect x="456.0" y="339.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="459.0" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4 samples, 0.11%)</title><rect x="456.0" y="323.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="459.0" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.11%)</title><rect x="456.0" y="307.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="459.0" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.11%)</title><rect x="456.0" y="291.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="459.0" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 0.11%)</title><rect x="456.0" y="275.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="459.0" y="286.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.03%)</title><rect x="457.3" y="323.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="460.3" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.03%)</title><rect x="457.3" y="307.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="460.3" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="457.3" y="291.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="460.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.05%)</title><rect x="457.6" y="355.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="460.6" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (3 samples, 0.08%)</title><rect x="458.3" y="355.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="461.3" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (3 samples, 0.08%)</title><rect x="458.3" y="339.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="461.3" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.08%)</title><rect x="458.3" y="323.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="461.3" y="334.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.08%)</title><rect x="458.3" y="307.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="461.3" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.08%)</title><rect x="458.3" y="291.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="461.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (1 samples, 0.03%)</title><rect x="459.2" y="355.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="462.2" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.03%)</title><rect x="459.2" y="339.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="462.2" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="459.2" y="323.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="462.2" y="334.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="459.2" y="307.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="462.2" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="459.2" y="291.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="462.2" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.03%)</title><rect x="459.6" y="355.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="462.6" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (132 samples, 3.63%)</title><rect x="459.9" y="419.0" width="42.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="462.9" y="430.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (132 samples, 3.63%)</title><rect x="459.9" y="403.0" width="42.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="462.9" y="414.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (80 samples, 2.20%)</title><rect x="459.9" y="387.0" width="25.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="462.9" y="398.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (67 samples, 1.84%)</title><rect x="460.2" y="371.0" width="21.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="463.2" y="382.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (67 samples, 1.84%)</title><rect x="460.2" y="355.0" width="21.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="463.2" y="366.0">o..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.handleDefault (67 samples, 1.84%)</title><rect x="460.2" y="339.0" width="21.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="463.2" y="350.0">r..</text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.03%)</title><rect x="460.2" y="323.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="463.2" y="334.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.03%)</title><rect x="460.5" y="323.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="463.5" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.03%)</title><rect x="460.5" y="307.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="463.5" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.05%)</title><rect x="460.9" y="323.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="463.9" y="334.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="461.2" y="307.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="464.2" y="318.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="461.2" y="291.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="464.2" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.entity (63 samples, 1.73%)</title><rect x="461.5" y="323.0" width="20.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="464.5" y="334.0"></text>
</g>
<g>
<title>java/lang/String.isEmpty (1 samples, 0.03%)</title><rect x="461.5" y="307.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="464.5" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.03%)</title><rect x="461.5" y="291.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="464.5" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5 samples, 0.14%)</title><rect x="461.8" y="307.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="464.8" y="318.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.03%)</title><rect x="461.8" y="291.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="464.8" y="302.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="461.8" y="275.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="464.8" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.05%)</title><rect x="462.1" y="291.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="465.1" y="302.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsBeginEnd (1 samples, 0.03%)</title><rect x="462.1" y="275.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="465.1" y="286.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.03%)</title><rect x="462.1" y="259.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="465.1" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="462.5" y="275.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="465.5" y="286.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.05%)</title><rect x="462.8" y="291.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="465.8" y="302.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.05%)</title><rect x="462.8" y="275.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="465.8" y="286.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.05%)</title><rect x="462.8" y="259.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="465.8" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="463.1" y="243.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="466.1" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.executeAsync (57 samples, 1.57%)</title><rect x="463.4" y="307.0" width="18.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="466.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (57 samples, 1.57%)</title><rect x="463.4" y="291.0" width="18.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="466.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (57 samples, 1.57%)</title><rect x="463.4" y="275.0" width="18.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="466.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue$Node.&lt;init&gt; (1 samples, 0.03%)</title><rect x="463.4" y="259.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="466.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.enqueue (1 samples, 0.03%)</title><rect x="463.8" y="259.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="466.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (53 samples, 1.46%)</title><rect x="464.1" y="259.0" width="17.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="467.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (53 samples, 1.46%)</title><rect x="464.1" y="243.0" width="17.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="467.1" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (53 samples, 1.46%)</title><rect x="464.1" y="227.0" width="17.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="467.1" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (53 samples, 1.46%)</title><rect x="464.1" y="211.0" width="17.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="467.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (53 samples, 1.46%)</title><rect x="464.1" y="195.0" width="17.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="467.1" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (53 samples, 1.46%)</title><rect x="464.1" y="179.0" width="17.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="467.1" y="190.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="464.4" y="163.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="467.4" y="174.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (51 samples, 1.40%)</title><rect x="464.7" y="163.0" width="16.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="467.7" y="174.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="464.7" y="147.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="467.7" y="158.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="465.1" y="147.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="468.1" y="158.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="465.1" y="131.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="468.1" y="142.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="465.4" y="147.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="468.4" y="158.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.03%)</title><rect x="465.4" y="131.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="468.4" y="142.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.03%)</title><rect x="465.7" y="147.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="468.7" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.05%)</title><rect x="466.0" y="147.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="469.0" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.05%)</title><rect x="466.0" y="131.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="469.0" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="466.4" y="115.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="469.4" y="126.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="466.4" y="99.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="469.4" y="110.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="466.4" y="83.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="469.4" y="94.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="466.4" y="67.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="469.4" y="78.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="466.4" y="51.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="469.4" y="62.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="466.4" y="35.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="469.4" y="46.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="466.7" y="147.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="469.7" y="158.0"></text>
</g>
<g>
<title>oopDesc* BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.03%)</title><rect x="466.7" y="131.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="469.7" y="142.0"></text>
</g>
<g>
<title>__psynch_cvsignal (41 samples, 1.13%)</title><rect x="467.0" y="147.0" width="13.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="470.0" y="158.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="480.3" y="147.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="483.3" y="158.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.05%)</title><rect x="480.6" y="147.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="483.6" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.05%)</title><rect x="481.3" y="259.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="484.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.05%)</title><rect x="481.3" y="243.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="484.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="481.6" y="227.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="484.6" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.shouldParkAfterFailedAcquire (1 samples, 0.03%)</title><rect x="481.6" y="211.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="484.6" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 0.19%)</title><rect x="481.9" y="371.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="484.9" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.03%)</title><rect x="482.9" y="355.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="485.9" y="366.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="482.9" y="339.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="485.9" y="350.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="482.9" y="323.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="485.9" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="482.9" y="307.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="485.9" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.08%)</title><rect x="483.2" y="355.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="486.2" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.08%)</title><rect x="483.2" y="339.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="486.2" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.05%)</title><rect x="484.2" y="371.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="487.2" y="382.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="484.5" y="355.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="487.5" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.08%)</title><rect x="484.9" y="371.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="487.9" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.08%)</title><rect x="484.9" y="355.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="487.9" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (52 samples, 1.43%)</title><rect x="485.8" y="387.0" width="16.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="488.8" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (51 samples, 1.40%)</title><rect x="486.2" y="371.0" width="16.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="489.2" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.05%)</title><rect x="486.2" y="355.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="489.2" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (49 samples, 1.35%)</title><rect x="486.8" y="355.0" width="15.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="489.8" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (49 samples, 1.35%)</title><rect x="486.8" y="339.0" width="15.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="489.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (47 samples, 1.29%)</title><rect x="487.4" y="323.0" width="15.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="490.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (45 samples, 1.24%)</title><rect x="487.4" y="307.0" width="14.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="490.4" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (45 samples, 1.24%)</title><rect x="487.4" y="291.0" width="14.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="490.4" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (42 samples, 1.15%)</title><rect x="488.4" y="275.0" width="13.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="491.4" y="286.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.03%)</title><rect x="488.7" y="259.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="491.7" y="270.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="488.7" y="243.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="491.7" y="254.0"></text>
</g>
<g>
<title>read (40 samples, 1.10%)</title><rect x="489.1" y="259.0" width="12.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="492.1" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.05%)</title><rect x="502.0" y="307.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="505.0" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.05%)</title><rect x="502.0" y="291.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="505.0" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.05%)</title><rect x="502.0" y="275.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="505.0" y="286.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="502.4" y="259.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="505.4" y="270.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="502.7" y="419.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="505.7" y="430.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="502.7" y="403.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="505.7" y="414.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="502.7" y="387.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="505.7" y="398.0"></text>
</g>
<g>
<title>_res (1 samples, 0.03%)</title><rect x="502.7" y="371.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="505.7" y="382.0"></text>
</g>
<g>
<title>[tid=18947] (4 samples, 0.11%)</title><rect x="503.0" y="451.0" width="1.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="506.0" y="462.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.11%)</title><rect x="503.0" y="435.0" width="1.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="506.0" y="446.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.11%)</title><rect x="503.0" y="419.0" width="1.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="506.0" y="430.0"></text>
</g>
<g>
<title>_pthread_body (4 samples, 0.11%)</title><rect x="503.0" y="403.0" width="1.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="506.0" y="414.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.11%)</title><rect x="503.0" y="387.0" width="1.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="506.0" y="398.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.11%)</title><rect x="503.0" y="371.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="506.0" y="382.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (4 samples, 0.11%)</title><rect x="503.0" y="355.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="506.0" y="366.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (4 samples, 0.11%)</title><rect x="503.0" y="339.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="506.0" y="350.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (1 samples, 0.03%)</title><rect x="503.0" y="323.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="506.0" y="334.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.03%)</title><rect x="503.0" y="307.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="506.0" y="318.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="503.0" y="291.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="506.0" y="302.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (3 samples, 0.08%)</title><rect x="503.3" y="323.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="506.3" y="334.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.08%)</title><rect x="503.3" y="307.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="506.3" y="318.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.08%)</title><rect x="503.3" y="291.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="506.3" y="302.0"></text>
</g>
<g>
<title>Thread::muxRelease(long volatile*) (1 samples, 0.03%)</title><rect x="503.3" y="275.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="506.3" y="286.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.05%)</title><rect x="503.7" y="275.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="506.7" y="286.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.05%)</title><rect x="503.7" y="259.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="506.7" y="270.0"></text>
</g>
<g>
<title>[tid=22787] (8 samples, 0.22%)</title><rect x="504.3" y="451.0" width="2.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="507.3" y="462.0"></text>
</g>
<g>
<title>thread_start (8 samples, 0.22%)</title><rect x="504.3" y="435.0" width="2.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="507.3" y="446.0"></text>
</g>
<g>
<title>_pthread_start (8 samples, 0.22%)</title><rect x="504.3" y="419.0" width="2.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="507.3" y="430.0"></text>
</g>
<g>
<title>_pthread_body (8 samples, 0.22%)</title><rect x="504.3" y="403.0" width="2.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="507.3" y="414.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (8 samples, 0.22%)</title><rect x="504.3" y="387.0" width="2.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="507.3" y="398.0"></text>
</g>
<g>
<title>Thread::call_run() (8 samples, 0.22%)</title><rect x="504.3" y="371.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="507.3" y="382.0"></text>
</g>
<g>
<title>WatcherThread::run() (8 samples, 0.22%)</title><rect x="504.3" y="355.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="507.3" y="366.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (7 samples, 0.19%)</title><rect x="504.6" y="339.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="507.6" y="350.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (7 samples, 0.19%)</title><rect x="504.6" y="323.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="507.6" y="334.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (7 samples, 0.19%)</title><rect x="504.6" y="307.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="507.6" y="318.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (7 samples, 0.19%)</title><rect x="504.6" y="291.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="507.6" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 0.19%)</title><rect x="504.6" y="275.0" width="2.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="507.6" y="286.0"></text>
</g>
<g>
<title>[worker tid=27139] (538 samples, 14.79%)</title><rect x="506.9" y="451.0" width="174.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="509.9" y="462.0">[worker tid=27139]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (31 samples, 0.85%)</title><rect x="506.9" y="435.0" width="10.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="509.9" y="446.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="506.9" y="419.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="509.9" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (30 samples, 0.82%)</title><rect x="507.2" y="419.0" width="9.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="510.2" y="430.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.03%)</title><rect x="507.2" y="403.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="510.2" y="414.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="507.2" y="387.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="510.2" y="398.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.03%)</title><rect x="507.2" y="371.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="510.2" y="382.0"></text>
</g>
<g>
<title>JavaThreadBlockedOnMonitorEnterState::JavaThreadBlockedOnMonitorEnterState(JavaThread*, ObjectMonitor*) (1 samples, 0.03%)</title><rect x="507.6" y="403.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="510.6" y="414.0"></text>
</g>
<g>
<title>JavaThreadBlockedOnMonitorEnterState::contended_enter_begin(JavaThread*) (1 samples, 0.03%)</title><rect x="507.6" y="387.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="510.6" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.05%)</title><rect x="507.9" y="403.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="510.9" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (26 samples, 0.71%)</title><rect x="508.5" y="403.0" width="8.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="511.5" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (12 samples, 0.33%)</title><rect x="513.1" y="387.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="516.1" y="398.0"></text>
</g>
<g>
<title>[not_walkable] (5 samples, 0.14%)</title><rect x="517.0" y="435.0" width="1.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="520.0" y="446.0"></text>
</g>
<g>
<title>java/lang/Thread.run (502 samples, 13.80%)</title><rect x="518.6" y="435.0" width="162.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="521.6" y="446.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (502 samples, 13.80%)</title><rect x="518.6" y="419.0" width="162.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="521.6" y="430.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (502 samples, 13.80%)</title><rect x="518.6" y="403.0" width="162.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="521.6" y="414.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (6 samples, 0.16%)</title><rect x="518.6" y="387.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="521.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.16%)</title><rect x="518.6" y="371.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="521.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (6 samples, 0.16%)</title><rect x="518.6" y="355.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="521.6" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.05%)</title><rect x="519.2" y="339.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="522.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.doGet (2 samples, 0.05%)</title><rect x="519.9" y="339.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="522.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (304 samples, 8.36%)</title><rect x="520.5" y="387.0" width="98.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="523.5" y="398.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (304 samples, 8.36%)</title><rect x="520.5" y="371.0" width="98.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="523.5" y="382.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (260 samples, 7.15%)</title><rect x="520.5" y="355.0" width="84.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="523.5" y="366.0">java/util/..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.03%)</title><rect x="520.9" y="339.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="523.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (3 samples, 0.08%)</title><rect x="521.2" y="339.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="524.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (2 samples, 0.05%)</title><rect x="521.5" y="323.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="524.5" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_V (1 samples, 0.03%)</title><rect x="521.8" y="307.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="524.8" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.03%)</title><rect x="521.8" y="291.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="524.8" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="521.8" y="275.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="524.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (10 samples, 0.27%)</title><rect x="522.2" y="339.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="525.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.27%)</title><rect x="522.2" y="323.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="525.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.25%)</title><rect x="522.2" y="307.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="525.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.25%)</title><rect x="522.2" y="291.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="525.2" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (9 samples, 0.25%)</title><rect x="522.2" y="275.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="525.2" y="286.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (8 samples, 0.22%)</title><rect x="522.5" y="259.0" width="2.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="525.5" y="270.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="522.5" y="243.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="525.5" y="254.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.03%)</title><rect x="522.5" y="227.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="525.5" y="238.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.16%)</title><rect x="522.8" y="243.0" width="1.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="525.8" y="254.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="524.7" y="243.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="527.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.03%)</title><rect x="525.1" y="307.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="528.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.03%)</title><rect x="525.1" y="291.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="528.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (245 samples, 6.73%)</title><rect x="525.4" y="339.0" width="79.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="528.4" y="350.0">java/util..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (245 samples, 6.73%)</title><rect x="525.4" y="323.0" width="79.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="528.4" y="334.0">jdk/inter..</text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.03%)</title><rect x="527.3" y="307.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="530.3" y="318.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="527.7" y="307.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="530.7" y="318.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::should_commit() (2 samples, 0.05%)</title><rect x="528.0" y="307.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="531.0" y="318.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (235 samples, 6.46%)</title><rect x="528.6" y="307.0" width="76.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="531.6" y="318.0">Unsafe_P..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.05%)</title><rect x="529.0" y="291.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="532.0" y="302.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.03%)</title><rect x="529.3" y="275.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="532.3" y="286.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="529.6" y="291.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="532.6" y="302.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.08%)</title><rect x="529.9" y="291.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="532.9" y="302.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="530.6" y="275.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="533.6" y="286.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="530.6" y="259.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="533.6" y="270.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="530.6" y="243.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="533.6" y="254.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="530.6" y="227.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="533.6" y="238.0"></text>
</g>
<g>
<title>int Atomic::load&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="530.6" y="211.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="533.6" y="222.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="530.9" y="291.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="533.9" y="302.0"></text>
</g>
<g>
<title>ThreadService::is_thread_monitoring_contention() (1 samples, 0.03%)</title><rect x="530.9" y="275.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="533.9" y="286.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (218 samples, 5.99%)</title><rect x="531.2" y="291.0" width="70.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="534.2" y="302.0">Parker::..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.05%)</title><rect x="531.9" y="275.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="534.9" y="286.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.05%)</title><rect x="532.5" y="275.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="535.5" y="286.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.05%)</title><rect x="532.5" y="259.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="535.5" y="270.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.03%)</title><rect x="533.2" y="275.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="536.2" y="286.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="533.2" y="259.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="536.2" y="270.0"></text>
</g>
<g>
<title>__psynch_cvwait (205 samples, 5.63%)</title><rect x="533.5" y="275.0" width="66.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="536.5" y="286.0">__psync..</text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.05%)</title><rect x="600.0" y="275.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="603.0" y="286.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (1 samples, 0.03%)</title><rect x="600.3" y="259.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="603.3" y="270.0"></text>
</g>
<g>
<title>_pthread_testcancel (2 samples, 0.05%)</title><rect x="600.6" y="275.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="603.6" y="286.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.05%)</title><rect x="601.3" y="275.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="604.3" y="286.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.03%)</title><rect x="601.9" y="291.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="604.9" y="302.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.03%)</title><rect x="602.3" y="291.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="605.3" y="302.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="602.6" y="291.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="605.6" y="302.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="602.6" y="275.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="605.6" y="286.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="602.6" y="259.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="605.6" y="270.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="602.6" y="243.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="605.6" y="254.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="602.6" y="227.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="605.6" y="238.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="602.6" y="211.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="605.6" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (3 samples, 0.08%)</title><rect x="602.9" y="291.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="605.9" y="302.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="602.9" y="275.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="605.9" y="286.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="603.2" y="275.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="606.2" y="286.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.03%)</title><rect x="603.6" y="275.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="606.6" y="286.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.03%)</title><rect x="603.9" y="291.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="606.9" y="302.0"></text>
</g>
<g>
<title>pthread_cond_wait (1 samples, 0.03%)</title><rect x="604.2" y="291.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="607.2" y="302.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (1 samples, 0.03%)</title><rect x="604.5" y="291.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="607.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (12 samples, 0.33%)</title><rect x="604.9" y="355.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="607.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (12 samples, 0.33%)</title><rect x="604.9" y="339.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="607.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (12 samples, 0.33%)</title><rect x="604.9" y="323.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="607.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (9 samples, 0.25%)</title><rect x="605.2" y="307.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="608.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (9 samples, 0.25%)</title><rect x="605.2" y="291.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="608.2" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (9 samples, 0.25%)</title><rect x="605.2" y="275.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="608.2" y="286.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (9 samples, 0.25%)</title><rect x="605.2" y="259.0" width="2.9" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="608.2" y="270.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (9 samples, 0.25%)</title><rect x="605.2" y="243.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="608.2" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (9 samples, 0.25%)</title><rect x="605.2" y="227.0" width="2.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="608.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (2 samples, 0.05%)</title><rect x="608.1" y="307.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="611.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (32 samples, 0.88%)</title><rect x="608.8" y="355.0" width="10.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="611.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (32 samples, 0.88%)</title><rect x="608.8" y="339.0" width="10.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="611.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (32 samples, 0.88%)</title><rect x="608.8" y="323.0" width="10.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="611.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (32 samples, 0.88%)</title><rect x="608.8" y="307.0" width="10.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="611.8" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (32 samples, 0.88%)</title><rect x="608.8" y="291.0" width="10.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="611.8" y="302.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="610.4" y="275.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="613.4" y="286.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.03%)</title><rect x="610.7" y="275.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="613.7" y="286.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (25 samples, 0.69%)</title><rect x="611.0" y="275.0" width="8.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="614.0" y="286.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="611.0" y="259.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="614.0" y="270.0"></text>
</g>
<g>
<title>__psynch_cvsignal (21 samples, 0.58%)</title><rect x="611.4" y="259.0" width="6.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="614.4" y="270.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="618.2" y="259.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="621.2" y="270.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.05%)</title><rect x="618.5" y="259.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="621.5" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$71/1596990242.run (192 samples, 5.28%)</title><rect x="619.1" y="387.0" width="62.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="622.1" y="398.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$executeAsync$3 (192 samples, 5.28%)</title><rect x="619.1" y="371.0" width="62.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="622.1" y="382.0">ru/mai..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (123 samples, 3.38%)</title><rect x="619.1" y="355.0" width="39.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="622.1" y="366.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (119 samples, 3.27%)</title><rect x="619.5" y="339.0" width="38.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="622.5" y="350.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 0.14%)</title><rect x="619.5" y="323.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="622.5" y="334.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.05%)</title><rect x="620.4" y="307.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="623.4" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.05%)</title><rect x="620.4" y="291.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="623.4" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.05%)</title><rect x="620.4" y="275.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="623.4" y="286.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.05%)</title><rect x="620.4" y="259.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="623.4" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (114 samples, 3.13%)</title><rect x="621.1" y="323.0" width="37.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="624.1" y="334.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="621.1" y="307.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="624.1" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (113 samples, 3.11%)</title><rect x="621.4" y="307.0" width="36.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="624.4" y="318.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (110 samples, 3.02%)</title><rect x="621.4" y="291.0" width="35.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="624.4" y="302.0">one..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="621.4" y="275.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="624.4" y="286.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.03%)</title><rect x="621.4" y="259.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="624.4" y="270.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (109 samples, 3.00%)</title><rect x="621.7" y="275.0" width="35.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="624.7" y="286.0">one..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (109 samples, 3.00%)</title><rect x="621.7" y="259.0" width="35.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="624.7" y="270.0">sun..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="621.7" y="243.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="624.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="621.7" y="227.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="624.7" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="621.7" y="211.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="624.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="621.7" y="195.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="624.7" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="621.7" y="179.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="624.7" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="621.7" y="163.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="624.7" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="621.7" y="147.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="624.7" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="622.1" y="243.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="625.1" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (107 samples, 2.94%)</title><rect x="622.4" y="243.0" width="34.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="625.4" y="254.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (106 samples, 2.91%)</title><rect x="622.7" y="227.0" width="34.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="625.7" y="238.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (106 samples, 2.91%)</title><rect x="622.7" y="211.0" width="34.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="625.7" y="222.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (2 samples, 0.05%)</title><rect x="622.7" y="195.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="625.7" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1 samples, 0.03%)</title><rect x="623.0" y="179.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="626.0" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (104 samples, 2.86%)</title><rect x="623.4" y="195.0" width="33.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="626.4" y="206.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (100 samples, 2.75%)</title><rect x="624.7" y="179.0" width="32.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="627.7" y="190.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (4 samples, 0.11%)</title><rect x="625.6" y="163.0" width="1.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="628.6" y="174.0"></text>
</g>
<g>
<title>write (93 samples, 2.56%)</title><rect x="626.9" y="163.0" width="30.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="629.9" y="174.0">wr..</text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.08%)</title><rect x="657.1" y="291.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="660.1" y="302.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.08%)</title><rect x="657.1" y="275.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="660.1" y="286.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.05%)</title><rect x="657.4" y="259.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="660.4" y="270.0"></text>
</g>
<g>
<title>_res (2 samples, 0.05%)</title><rect x="657.4" y="243.0" width="0.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="660.4" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.08%)</title><rect x="658.1" y="339.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="661.1" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$75/779064875.act (69 samples, 1.90%)</title><rect x="659.0" y="355.0" width="22.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="662.0" y="366.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$entity$0 (69 samples, 1.90%)</title><rect x="659.0" y="339.0" width="22.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="662.0" y="350.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.doGet (69 samples, 1.90%)</title><rect x="659.0" y="323.0" width="22.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="662.0" y="334.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/lorismelik/RocksDAO.get (69 samples, 1.90%)</title><rect x="659.0" y="307.0" width="22.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="662.0" y="318.0">r..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.08%)</title><rect x="659.0" y="291.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="662.0" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/514455215.invoke (3 samples, 0.08%)</title><rect x="659.0" y="275.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="662.0" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.08%)</title><rect x="659.0" y="259.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="662.0" y="270.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (1 samples, 0.03%)</title><rect x="659.0" y="243.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="662.0" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (2 samples, 0.05%)</title><rect x="659.4" y="243.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="662.4" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (2 samples, 0.05%)</title><rect x="659.4" y="227.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="662.4" y="238.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="659.4" y="211.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="662.4" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (7 samples, 0.19%)</title><rect x="660.0" y="291.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="663.0" y="302.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (3 samples, 0.08%)</title><rect x="661.0" y="275.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="664.0" y="286.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.08%)</title><rect x="661.0" y="259.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="664.0" y="270.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.08%)</title><rect x="661.0" y="243.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="664.0" y="254.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.03%)</title><rect x="661.0" y="227.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="664.0" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.05%)</title><rect x="661.3" y="227.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="664.3" y="238.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="661.6" y="211.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="664.6" y="222.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (1 samples, 0.03%)</title><rect x="662.0" y="275.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="665.0" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="662.0" y="259.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="665.0" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.03%)</title><rect x="662.0" y="243.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="665.0" y="254.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (55 samples, 1.51%)</title><rect x="662.3" y="291.0" width="17.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="665.3" y="302.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (55 samples, 1.51%)</title><rect x="662.3" y="275.0" width="17.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="665.3" y="286.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (54 samples, 1.48%)</title><rect x="662.6" y="259.0" width="17.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="665.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1 samples, 0.03%)</title><rect x="662.6" y="243.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="665.6" y="254.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (51 samples, 1.40%)</title><rect x="662.9" y="243.0" width="16.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="665.9" y="254.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="663.9" y="227.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="666.9" y="238.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.03%)</title><rect x="664.2" y="227.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="667.2" y="238.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.05%)</title><rect x="664.5" y="227.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="667.5" y="238.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.05%)</title><rect x="664.5" y="211.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="667.5" y="222.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="664.9" y="195.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="667.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (42 samples, 1.15%)</title><rect x="665.2" y="227.0" width="13.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="668.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (1 samples, 0.03%)</title><rect x="665.5" y="211.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="668.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (40 samples, 1.10%)</title><rect x="665.8" y="211.0" width="13.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="668.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (40 samples, 1.10%)</title><rect x="665.8" y="195.0" width="13.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="668.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (39 samples, 1.07%)</title><rect x="665.8" y="179.0" width="12.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="668.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (2 samples, 0.05%)</title><rect x="667.1" y="163.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="670.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.03%)</title><rect x="667.1" y="147.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="670.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (1 samples, 0.03%)</title><rect x="667.5" y="147.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="670.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.03%)</title><rect x="667.5" y="131.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="670.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (1 samples, 0.03%)</title><rect x="667.8" y="163.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="670.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (1 samples, 0.03%)</title><rect x="667.8" y="147.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="670.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (26 samples, 0.71%)</title><rect x="668.1" y="163.0" width="8.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="671.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (25 samples, 0.69%)</title><rect x="668.4" y="147.0" width="8.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="671.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (9 samples, 0.25%)</title><rect x="673.3" y="131.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="676.3" y="142.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="675.3" y="115.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="678.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.05%)</title><rect x="675.6" y="115.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="678.6" y="126.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="676.2" y="131.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="679.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (5 samples, 0.14%)</title><rect x="676.5" y="163.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="679.5" y="174.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="677.2" y="147.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="680.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, unsigned long long*, unsigned int*) (2 samples, 0.05%)</title><rect x="677.5" y="147.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="680.5" y="158.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="678.2" y="163.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="681.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.03%)</title><rect x="678.5" y="179.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="681.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (2 samples, 0.05%)</title><rect x="678.8" y="227.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="681.8" y="238.0"></text>
</g>
<g>
<title>vtable for std::__1::codecvt_byname&lt;wchar_t, char, __mbstate_t&gt; (1 samples, 0.03%)</title><rect x="679.5" y="243.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="682.5" y="254.0"></text>
</g>
<g>
<title>vtable for std::__1::messages&lt;char&gt; (1 samples, 0.03%)</title><rect x="679.8" y="243.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="682.8" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.shiftBytes (2 samples, 0.05%)</title><rect x="680.1" y="291.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="683.1" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.clone (2 samples, 0.05%)</title><rect x="680.1" y="275.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="683.1" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.03%)</title><rect x="680.1" y="259.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="683.1" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="680.1" y="243.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="683.1" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="680.1" y="227.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="683.1" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="680.1" y="211.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="683.1" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="680.1" y="195.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="683.1" y="206.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="680.1" y="179.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="683.1" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (1 samples, 0.03%)</title><rect x="680.4" y="259.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="683.4" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/lorismelik/NoSuchElementExceptionLite.&lt;init&gt; (2 samples, 0.05%)</title><rect x="680.8" y="291.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="683.8" y="302.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (2 samples, 0.05%)</title><rect x="680.8" y="275.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="683.8" y="286.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (2 samples, 0.05%)</title><rect x="680.8" y="259.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="683.8" y="270.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (2 samples, 0.05%)</title><rect x="680.8" y="243.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="683.8" y="254.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (2 samples, 0.05%)</title><rect x="680.8" y="227.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="683.8" y="238.0"></text>
</g>
<g>
<title>[worker tid=27651] (528 samples, 14.51%)</title><rect x="681.4" y="451.0" width="171.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="684.4" y="462.0">[worker tid=27651]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (22 samples, 0.60%)</title><rect x="681.4" y="435.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="684.4" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (20 samples, 0.55%)</title><rect x="681.4" y="419.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="684.4" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.03%)</title><rect x="682.1" y="403.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="685.1" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (17 samples, 0.47%)</title><rect x="682.4" y="403.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="685.4" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (7 samples, 0.19%)</title><rect x="685.6" y="387.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="688.6" y="398.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="687.9" y="419.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="690.9" y="430.0"></text>
</g>
<g>
<title>update_heuristics(oopDesc*, bool) (1 samples, 0.03%)</title><rect x="687.9" y="403.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="690.9" y="414.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (1 samples, 0.03%)</title><rect x="688.2" y="419.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="691.2" y="430.0"></text>
</g>
<g>
<title>[not_walkable] (4 samples, 0.11%)</title><rect x="688.5" y="435.0" width="1.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="691.5" y="446.0"></text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.08%)</title><rect x="689.8" y="435.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="692.8" y="446.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.03%)</title><rect x="689.8" y="419.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="692.8" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="690.2" y="419.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="693.2" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.03%)</title><rect x="690.2" y="403.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="693.2" y="414.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="690.2" y="387.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="693.2" y="398.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.03%)</title><rect x="690.2" y="371.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="693.2" y="382.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::find_map_at_offset(int) const (1 samples, 0.03%)</title><rect x="690.2" y="355.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="693.2" y="366.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="690.5" y="419.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="693.5" y="430.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.03%)</title><rect x="690.8" y="435.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="693.8" y="446.0"></text>
</g>
<g>
<title>java/lang/Thread.run (497 samples, 13.66%)</title><rect x="691.1" y="435.0" width="161.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="694.1" y="446.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (497 samples, 13.66%)</title><rect x="691.1" y="419.0" width="161.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="694.1" y="430.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (497 samples, 13.66%)</title><rect x="691.1" y="403.0" width="161.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="694.1" y="414.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (305 samples, 8.38%)</title><rect x="691.1" y="387.0" width="99.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="694.1" y="398.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (305 samples, 8.38%)</title><rect x="691.1" y="371.0" width="99.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="694.1" y="382.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (251 samples, 6.90%)</title><rect x="691.1" y="355.0" width="81.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="694.1" y="366.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.03%)</title><rect x="691.1" y="339.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="694.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.03%)</title><rect x="691.1" y="323.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="694.1" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_V (1 samples, 0.03%)</title><rect x="691.1" y="307.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="694.1" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.03%)</title><rect x="691.1" y="291.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="694.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (1 samples, 0.03%)</title><rect x="691.5" y="339.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="694.5" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.03%)</title><rect x="691.5" y="323.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="694.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (5 samples, 0.14%)</title><rect x="691.8" y="339.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="694.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.14%)</title><rect x="691.8" y="323.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="694.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.14%)</title><rect x="691.8" y="307.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="694.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.14%)</title><rect x="691.8" y="291.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="694.8" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 0.14%)</title><rect x="691.8" y="275.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="694.8" y="286.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (5 samples, 0.14%)</title><rect x="691.8" y="259.0" width="1.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="694.8" y="270.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="691.8" y="243.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="694.8" y="254.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="691.8" y="227.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="694.8" y="238.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="691.8" y="211.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="694.8" y="222.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="691.8" y="195.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="694.8" y="206.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="691.8" y="179.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="694.8" y="190.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, Atomic::PlatformLoad&lt;4ul&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="691.8" y="163.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="694.8" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.11%)</title><rect x="692.1" y="243.0" width="1.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="695.1" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (244 samples, 6.71%)</title><rect x="693.4" y="339.0" width="79.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="696.4" y="350.0">java/util..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (244 samples, 6.71%)</title><rect x="693.4" y="323.0" width="79.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="696.4" y="334.0">jdk/inter..</text>
</g>
<g>
<title>JavaThreadParkedState::~JavaThreadParkedState() (1 samples, 0.03%)</title><rect x="696.0" y="307.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="699.0" y="318.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*) (1 samples, 0.03%)</title><rect x="696.3" y="307.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="699.3" y="318.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (233 samples, 6.40%)</title><rect x="696.7" y="307.0" width="75.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="699.7" y="318.0">Unsafe_P..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="697.0" y="291.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="700.0" y="302.0"></text>
</g>
<g>
<title>JavaThread::parker() (1 samples, 0.03%)</title><rect x="697.3" y="291.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="700.3" y="302.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.08%)</title><rect x="697.6" y="291.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="700.6" y="302.0"></text>
</g>
<g>
<title>ThreadService::is_thread_monitoring_contention() (2 samples, 0.05%)</title><rect x="697.6" y="275.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="700.6" y="286.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (1 samples, 0.03%)</title><rect x="698.3" y="275.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="701.3" y="286.0"></text>
</g>
<g>
<title>ThreadStatistics::check_and_reset_count() (1 samples, 0.03%)</title><rect x="698.3" y="259.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="701.3" y="270.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (222 samples, 6.10%)</title><rect x="698.6" y="291.0" width="72.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="701.6" y="302.0">Parker::..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.05%)</title><rect x="698.9" y="275.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="701.9" y="286.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="699.3" y="259.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="702.3" y="270.0"></text>
</g>
<g>
<title>__psynch_cvwait (214 samples, 5.88%)</title><rect x="699.6" y="275.0" width="69.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="702.6" y="286.0">__psync..</text>
</g>
<g>
<title>_pthread_cond_wait (4 samples, 0.11%)</title><rect x="769.0" y="275.0" width="1.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="772.0" y="286.0"></text>
</g>
<g>
<title>pthread_dependency_wait_np (1 samples, 0.03%)</title><rect x="770.3" y="275.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="773.3" y="286.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (3 samples, 0.08%)</title><rect x="770.6" y="291.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="773.6" y="302.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="770.6" y="275.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="773.6" y="286.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="770.9" y="275.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="773.9" y="286.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="770.9" y="259.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="773.9" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::poll(Thread*) (1 samples, 0.03%)</title><rect x="771.3" y="275.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="774.3" y="286.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.03%)</title><rect x="771.3" y="259.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="774.3" y="270.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (2 samples, 0.05%)</title><rect x="771.6" y="291.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="774.6" y="302.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="772.2" y="307.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="775.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (20 samples, 0.55%)</title><rect x="772.6" y="355.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="775.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (20 samples, 0.55%)</title><rect x="772.6" y="339.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="775.6" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.03%)</title><rect x="772.6" y="323.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="775.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (17 samples, 0.47%)</title><rect x="772.9" y="323.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="775.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (12 samples, 0.33%)</title><rect x="773.5" y="307.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="776.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (12 samples, 0.33%)</title><rect x="773.5" y="291.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="776.5" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (12 samples, 0.33%)</title><rect x="773.5" y="275.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="776.5" y="286.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (12 samples, 0.33%)</title><rect x="773.5" y="259.0" width="3.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="776.5" y="270.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (12 samples, 0.33%)</title><rect x="773.5" y="243.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="776.5" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (12 samples, 0.33%)</title><rect x="773.5" y="227.0" width="3.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="776.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (2 samples, 0.05%)</title><rect x="777.4" y="307.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="780.4" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="778.1" y="307.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="781.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.05%)</title><rect x="778.4" y="323.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="781.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.05%)</title><rect x="778.4" y="307.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="781.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.03%)</title><rect x="778.4" y="291.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="781.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="778.7" y="291.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="781.7" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="778.7" y="275.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="781.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (34 samples, 0.93%)</title><rect x="779.0" y="355.0" width="11.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="782.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (34 samples, 0.93%)</title><rect x="779.0" y="339.0" width="11.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="782.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (34 samples, 0.93%)</title><rect x="779.0" y="323.0" width="11.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="782.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (34 samples, 0.93%)</title><rect x="779.0" y="307.0" width="11.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="782.0" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (34 samples, 0.93%)</title><rect x="779.0" y="291.0" width="11.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="782.0" y="302.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (33 samples, 0.91%)</title><rect x="779.4" y="275.0" width="10.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="782.4" y="286.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="779.7" y="259.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="782.7" y="270.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="779.7" y="243.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="782.7" y="254.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="779.7" y="227.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="782.7" y="238.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="779.7" y="211.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="782.7" y="222.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.03%)</title><rect x="779.7" y="195.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="782.7" y="206.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.05%)</title><rect x="780.0" y="259.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="783.0" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="780.0" y="243.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="783.0" y="254.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="780.0" y="227.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="783.0" y="238.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="780.0" y="211.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="783.0" y="222.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.03%)</title><rect x="780.0" y="195.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="783.0" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::poll(Thread*) (1 samples, 0.03%)</title><rect x="780.3" y="243.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="783.3" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.03%)</title><rect x="780.3" y="227.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="783.3" y="238.0"></text>
</g>
<g>
<title>__psynch_cvsignal (27 samples, 0.74%)</title><rect x="780.7" y="259.0" width="8.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="783.7" y="270.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="789.4" y="259.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="792.4" y="270.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="789.7" y="259.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="792.7" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$71/1596990242.run (192 samples, 5.28%)</title><rect x="790.1" y="387.0" width="62.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="793.1" y="398.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$executeAsync$3 (192 samples, 5.28%)</title><rect x="790.1" y="371.0" width="62.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="793.1" y="382.0">ru/mai..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (125 samples, 3.44%)</title><rect x="790.1" y="355.0" width="40.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="793.1" y="366.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (123 samples, 3.38%)</title><rect x="790.4" y="339.0" width="39.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="793.4" y="350.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (7 samples, 0.19%)</title><rect x="790.4" y="323.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="793.4" y="334.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (4 samples, 0.11%)</title><rect x="791.4" y="307.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="794.4" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.11%)</title><rect x="791.4" y="291.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="794.4" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.11%)</title><rect x="791.4" y="275.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="794.4" y="286.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.11%)</title><rect x="791.4" y="259.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="794.4" y="270.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="792.3" y="243.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="795.3" y="254.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (116 samples, 3.19%)</title><rect x="792.7" y="323.0" width="37.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="795.7" y="334.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (115 samples, 3.16%)</title><rect x="793.0" y="307.0" width="37.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="796.0" y="318.0">one..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="793.0" y="291.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="796.0" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (110 samples, 3.02%)</title><rect x="793.3" y="291.0" width="35.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="796.3" y="302.0">one..</text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (2 samples, 0.05%)</title><rect x="793.3" y="275.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="796.3" y="286.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.05%)</title><rect x="794.0" y="275.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="797.0" y="286.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.03%)</title><rect x="794.0" y="259.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="797.0" y="270.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="794.3" y="259.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="797.3" y="270.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (106 samples, 2.91%)</title><rect x="794.6" y="275.0" width="34.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="797.6" y="286.0">on..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (106 samples, 2.91%)</title><rect x="794.6" y="259.0" width="34.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="797.6" y="270.0">su..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="794.9" y="243.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="797.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="794.9" y="227.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="797.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="794.9" y="211.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="797.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="794.9" y="195.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="797.9" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (1 samples, 0.03%)</title><rect x="794.9" y="179.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="797.9" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (103 samples, 2.83%)</title><rect x="795.3" y="243.0" width="33.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="798.3" y="254.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (103 samples, 2.83%)</title><rect x="795.3" y="227.0" width="33.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="798.3" y="238.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (103 samples, 2.83%)</title><rect x="795.3" y="211.0" width="33.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="798.3" y="222.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (4 samples, 0.11%)</title><rect x="795.3" y="195.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="798.3" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1 samples, 0.03%)</title><rect x="796.2" y="179.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="799.2" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (99 samples, 2.72%)</title><rect x="796.6" y="195.0" width="32.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="799.6" y="206.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (94 samples, 2.58%)</title><rect x="798.2" y="179.0" width="30.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="801.2" y="190.0">su..</text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="799.8" y="163.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="802.8" y="174.0"></text>
</g>
<g>
<title>write (88 samples, 2.42%)</title><rect x="800.1" y="163.0" width="28.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="803.1" y="174.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (1 samples, 0.03%)</title><rect x="828.7" y="243.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="831.7" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.ensureOpenAndConnected (1 samples, 0.03%)</title><rect x="828.7" y="227.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="831.7" y="238.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.11%)</title><rect x="829.0" y="291.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="832.0" y="302.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.11%)</title><rect x="829.0" y="275.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="832.0" y="286.0"></text>
</g>
<g>
<title>_res (1 samples, 0.03%)</title><rect x="829.0" y="259.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="832.0" y="270.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (3 samples, 0.08%)</title><rect x="829.3" y="259.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="832.3" y="270.0"></text>
</g>
<g>
<title>_res (1 samples, 0.03%)</title><rect x="830.0" y="243.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="833.0" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="830.3" y="339.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="833.3" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="830.3" y="323.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="833.3" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="830.3" y="307.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="833.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$75/779064875.act (67 samples, 1.84%)</title><rect x="830.6" y="355.0" width="21.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="833.6" y="366.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$entity$0 (67 samples, 1.84%)</title><rect x="830.6" y="339.0" width="21.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="833.6" y="350.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.doGet (67 samples, 1.84%)</title><rect x="830.6" y="323.0" width="21.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="833.6" y="334.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/lorismelik/RocksDAO.get (67 samples, 1.84%)</title><rect x="830.6" y="307.0" width="21.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="833.6" y="318.0">r..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 0.11%)</title><rect x="830.6" y="291.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="833.6" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/514455215.invoke (4 samples, 0.11%)</title><rect x="830.6" y="275.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="833.6" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.05%)</title><rect x="830.6" y="259.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="833.6" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (2 samples, 0.05%)</title><rect x="830.6" y="243.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="833.6" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (2 samples, 0.05%)</title><rect x="830.6" y="227.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="833.6" y="238.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="830.6" y="211.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="833.6" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1296674576.invoke (2 samples, 0.05%)</title><rect x="831.3" y="259.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="834.3" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (7 samples, 0.19%)</title><rect x="831.9" y="291.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="834.9" y="302.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (3 samples, 0.08%)</title><rect x="832.9" y="275.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="835.9" y="286.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.03%)</title><rect x="833.5" y="259.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="836.5" y="270.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.03%)</title><rect x="833.5" y="243.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="836.5" y="254.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.03%)</title><rect x="833.5" y="227.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="836.5" y="238.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (1 samples, 0.03%)</title><rect x="833.9" y="275.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="836.9" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="833.9" y="259.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="836.9" y="270.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="833.9" y="243.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="836.9" y="254.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.03%)</title><rect x="833.9" y="227.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="836.9" y="238.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (54 samples, 1.48%)</title><rect x="834.2" y="291.0" width="17.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="837.2" y="302.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (54 samples, 1.48%)</title><rect x="834.2" y="275.0" width="17.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="837.2" y="286.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (54 samples, 1.48%)</title><rect x="834.2" y="259.0" width="17.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="837.2" y="270.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="834.5" y="243.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="837.5" y="254.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (51 samples, 1.40%)</title><rect x="834.8" y="243.0" width="16.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="837.8" y="254.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="834.8" y="227.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="837.8" y="238.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.03%)</title><rect x="835.2" y="227.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="838.2" y="238.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="835.5" y="227.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="838.5" y="238.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="835.8" y="227.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="838.8" y="238.0"></text>
</g>
<g>
<title>__ulock_wait (1 samples, 0.03%)</title><rect x="835.8" y="211.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="838.8" y="222.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="836.1" y="227.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="839.1" y="238.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="836.1" y="211.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="839.1" y="222.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.08%)</title><rect x="836.5" y="227.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="839.5" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="836.5" y="211.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="839.5" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="836.5" y="195.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="839.5" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.03%)</title><rect x="836.5" y="179.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="839.5" y="190.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.05%)</title><rect x="836.8" y="211.0" width="0.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="839.8" y="222.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="837.1" y="195.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="840.1" y="206.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.03%)</title><rect x="837.1" y="179.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="840.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (38 samples, 1.04%)</title><rect x="837.4" y="227.0" width="12.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="840.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (38 samples, 1.04%)</title><rect x="837.4" y="211.0" width="12.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="840.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (38 samples, 1.04%)</title><rect x="837.4" y="195.0" width="12.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="840.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (38 samples, 1.04%)</title><rect x="837.4" y="179.0" width="12.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="840.4" y="190.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (4 samples, 0.11%)</title><rect x="839.0" y="163.0" width="1.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="842.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.03%)</title><rect x="840.3" y="163.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="843.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.03%)</title><rect x="840.3" y="147.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="843.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (24 samples, 0.66%)</title><rect x="840.7" y="163.0" width="7.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="843.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="841.0" y="147.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="844.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (22 samples, 0.60%)</title><rect x="841.3" y="147.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="844.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (10 samples, 0.27%)</title><rect x="845.2" y="131.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="848.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (6 samples, 0.16%)</title><rect x="846.5" y="115.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="849.5" y="126.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.05%)</title><rect x="847.8" y="99.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="850.8" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="848.5" y="163.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="851.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (2 samples, 0.05%)</title><rect x="848.8" y="163.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="851.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.03%)</title><rect x="849.1" y="147.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="852.1" y="158.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="849.4" y="163.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="852.4" y="174.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (5 samples, 0.14%)</title><rect x="849.8" y="227.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="852.8" y="238.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.14%)</title><rect x="849.8" y="211.0" width="1.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="852.8" y="222.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.14%)</title><rect x="849.8" y="195.0" width="1.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="852.8" y="206.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.03%)</title><rect x="850.1" y="179.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="853.1" y="190.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.08%)</title><rect x="850.4" y="179.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="853.4" y="190.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.08%)</title><rect x="850.4" y="163.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="853.4" y="174.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="851.4" y="243.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="854.4" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.shiftBytes (2 samples, 0.05%)</title><rect x="851.7" y="291.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="854.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.clone (2 samples, 0.05%)</title><rect x="851.7" y="275.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="854.7" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (1 samples, 0.03%)</title><rect x="851.7" y="259.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="854.7" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="852.0" y="259.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="855.0" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="852.0" y="243.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="855.0" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="852.0" y="227.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="855.0" y="238.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="852.3" y="435.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="855.3" y="446.0"></text>
</g>
<g>
<title>[worker tid=35075] (475 samples, 13.06%)</title><rect x="852.7" y="451.0" width="154.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="855.7" y="462.0">[worker tid=35075]</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="852.7" y="435.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="855.7" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="852.7" y="419.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="855.7" y="430.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (15 samples, 0.41%)</title><rect x="853.0" y="435.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="856.0" y="446.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="853.0" y="419.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="856.0" y="430.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="853.0" y="403.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="856.0" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (12 samples, 0.33%)</title><rect x="853.3" y="419.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="856.3" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (4 samples, 0.11%)</title><rect x="854.0" y="403.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="857.0" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.05%)</title><rect x="854.0" y="387.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="857.0" y="398.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.05%)</title><rect x="854.6" y="387.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="857.6" y="398.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.05%)</title><rect x="854.6" y="371.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="857.6" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (6 samples, 0.16%)</title><rect x="855.3" y="403.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="858.3" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.05%)</title><rect x="856.6" y="387.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="859.6" y="398.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="857.2" y="419.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="860.2" y="430.0"></text>
</g>
<g>
<title>update_heuristics(oopDesc*, bool) (1 samples, 0.03%)</title><rect x="857.2" y="403.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="860.2" y="414.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (1 samples, 0.03%)</title><rect x="857.5" y="419.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="860.5" y="430.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="857.5" y="403.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="860.5" y="414.0"></text>
</g>
<g>
<title>[not_walkable] (1 samples, 0.03%)</title><rect x="857.9" y="435.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="860.9" y="446.0"></text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.03%)</title><rect x="858.2" y="435.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="861.2" y="446.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="858.2" y="419.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="861.2" y="430.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.03%)</title><rect x="858.5" y="435.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="861.5" y="446.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="858.5" y="419.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="861.5" y="430.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.03%)</title><rect x="858.5" y="403.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="861.5" y="414.0"></text>
</g>
<g>
<title>java/lang/Thread.run (456 samples, 12.53%)</title><rect x="858.8" y="435.0" width="147.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="861.8" y="446.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (456 samples, 12.53%)</title><rect x="858.8" y="419.0" width="147.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="861.8" y="430.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (456 samples, 12.53%)</title><rect x="858.8" y="403.0" width="147.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="861.8" y="414.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (3 samples, 0.08%)</title><rect x="858.8" y="387.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="861.8" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.08%)</title><rect x="858.8" y="371.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="861.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (3 samples, 0.08%)</title><rect x="858.8" y="355.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="861.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.05%)</title><rect x="858.8" y="339.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="861.8" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.05%)</title><rect x="858.8" y="323.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="861.8" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.05%)</title><rect x="858.8" y="307.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="861.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.03%)</title><rect x="859.2" y="291.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="862.2" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.03%)</title><rect x="859.5" y="339.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="862.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (260 samples, 7.15%)</title><rect x="859.8" y="387.0" width="84.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="862.8" y="398.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (260 samples, 7.15%)</title><rect x="859.8" y="371.0" width="84.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="862.8" y="382.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (224 samples, 6.16%)</title><rect x="859.8" y="355.0" width="72.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="862.8" y="366.0">java/uti..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.03%)</title><rect x="860.1" y="339.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="863.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="860.5" y="339.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="863.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="860.5" y="323.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="863.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="860.5" y="307.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="863.5" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="860.5" y="291.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="863.5" y="302.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="860.5" y="275.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="863.5" y="286.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="860.5" y="259.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="863.5" y="270.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="860.5" y="243.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="863.5" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 0.16%)</title><rect x="860.8" y="339.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="863.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.16%)</title><rect x="860.8" y="323.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="863.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.16%)</title><rect x="860.8" y="307.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="863.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.16%)</title><rect x="860.8" y="291.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="863.8" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 0.14%)</title><rect x="861.1" y="275.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="864.1" y="286.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="861.1" y="259.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="864.1" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (4 samples, 0.11%)</title><rect x="861.4" y="259.0" width="1.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="864.4" y="270.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.11%)</title><rect x="861.4" y="243.0" width="1.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="864.4" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (215 samples, 5.91%)</title><rect x="862.7" y="339.0" width="69.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="865.7" y="350.0">java/ut..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (215 samples, 5.91%)</title><rect x="862.7" y="323.0" width="69.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="865.7" y="334.0">jdk/int..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="866.0" y="307.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="869.0" y="318.0"></text>
</g>
<g>
<title>JavaThread::parker() (1 samples, 0.03%)</title><rect x="866.3" y="307.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="869.3" y="318.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::should_commit() (1 samples, 0.03%)</title><rect x="866.6" y="307.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="869.6" y="318.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="866.9" y="307.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="869.9" y="318.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (200 samples, 5.50%)</title><rect x="867.3" y="307.0" width="64.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="870.3" y="318.0">Unsafe_..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="867.3" y="291.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="870.3" y="302.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.03%)</title><rect x="867.3" y="275.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="870.3" y="286.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="867.6" y="291.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="870.6" y="302.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (1 samples, 0.03%)</title><rect x="867.6" y="275.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="870.6" y="286.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.08%)</title><rect x="867.9" y="291.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="870.9" y="302.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (1 samples, 0.03%)</title><rect x="868.6" y="275.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="871.6" y="286.0"></text>
</g>
<g>
<title>ThreadStatistics::check_and_reset_count() (1 samples, 0.03%)</title><rect x="868.6" y="259.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="871.6" y="270.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="868.9" y="291.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="871.9" y="302.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (1 samples, 0.03%)</title><rect x="869.2" y="291.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="872.2" y="302.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (1 samples, 0.03%)</title><rect x="869.2" y="275.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="872.2" y="286.0"></text>
</g>
<g>
<title>JfrEventSetting::setting(JfrEventId) (1 samples, 0.03%)</title><rect x="869.2" y="259.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="872.2" y="270.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (189 samples, 5.20%)</title><rect x="869.5" y="291.0" width="61.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="872.5" y="302.0">Parker..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.05%)</title><rect x="869.9" y="275.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="872.9" y="286.0"></text>
</g>
<g>
<title>os::is_MP() (2 samples, 0.05%)</title><rect x="869.9" y="259.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="872.9" y="270.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.03%)</title><rect x="870.5" y="275.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="873.5" y="286.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="870.8" y="275.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="873.8" y="286.0"></text>
</g>
<g>
<title>__psynch_cvwait (180 samples, 4.95%)</title><rect x="871.2" y="275.0" width="58.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="874.2" y="286.0">__psyn..</text>
</g>
<g>
<title>_pthread_cond_wait (4 samples, 0.11%)</title><rect x="929.5" y="275.0" width="1.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="932.5" y="286.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (1 samples, 0.03%)</title><rect x="930.5" y="259.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="933.5" y="270.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.03%)</title><rect x="930.8" y="291.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="933.8" y="302.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="931.2" y="291.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="934.2" y="302.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="931.2" y="275.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="934.2" y="286.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="931.2" y="259.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="934.2" y="270.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="931.2" y="243.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="934.2" y="254.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="931.2" y="227.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="934.2" y="238.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="931.2" y="211.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="934.2" y="222.0"></text>
</g>
<g>
<title>pthread_cond_wait (1 samples, 0.03%)</title><rect x="931.5" y="291.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="934.5" y="302.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (1 samples, 0.03%)</title><rect x="931.8" y="291.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="934.8" y="302.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="932.1" y="307.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="935.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (17 samples, 0.47%)</title><rect x="932.5" y="355.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="935.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (17 samples, 0.47%)</title><rect x="932.5" y="339.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="935.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (16 samples, 0.44%)</title><rect x="932.5" y="323.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="935.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (14 samples, 0.38%)</title><rect x="932.5" y="307.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="935.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (14 samples, 0.38%)</title><rect x="932.5" y="291.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="935.5" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (14 samples, 0.38%)</title><rect x="932.5" y="275.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="935.5" y="286.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (14 samples, 0.38%)</title><rect x="932.5" y="259.0" width="4.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="935.5" y="270.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (14 samples, 0.38%)</title><rect x="932.5" y="243.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="935.5" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (14 samples, 0.38%)</title><rect x="932.5" y="227.0" width="4.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="935.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (2 samples, 0.05%)</title><rect x="937.0" y="307.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="940.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="937.7" y="323.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="940.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="937.7" y="307.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="940.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.03%)</title><rect x="937.7" y="291.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="940.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (19 samples, 0.52%)</title><rect x="938.0" y="355.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="941.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 0.52%)</title><rect x="938.0" y="339.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="941.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 0.52%)</title><rect x="938.0" y="323.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="941.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 0.52%)</title><rect x="938.0" y="307.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="941.0" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (19 samples, 0.52%)</title><rect x="938.0" y="291.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="941.0" y="302.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.03%)</title><rect x="938.3" y="275.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="941.3" y="286.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="938.6" y="275.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="941.6" y="286.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (16 samples, 0.44%)</title><rect x="938.9" y="275.0" width="5.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="941.9" y="286.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="938.9" y="259.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="941.9" y="270.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="938.9" y="243.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="941.9" y="254.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="938.9" y="227.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="941.9" y="238.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="939.3" y="259.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="942.3" y="270.0"></text>
</g>
<g>
<title>__psynch_cvsignal (14 samples, 0.38%)</title><rect x="939.6" y="259.0" width="4.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="942.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$71/1596990242.run (193 samples, 5.31%)</title><rect x="944.1" y="387.0" width="62.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="947.1" y="398.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$executeAsync$3 (193 samples, 5.31%)</title><rect x="944.1" y="371.0" width="62.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="947.1" y="382.0">ru/mai..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (129 samples, 3.55%)</title><rect x="944.1" y="355.0" width="41.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="947.1" y="366.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (125 samples, 3.44%)</title><rect x="944.1" y="339.0" width="40.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="947.1" y="350.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 0.14%)</title><rect x="944.1" y="323.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="947.1" y="334.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.08%)</title><rect x="944.8" y="307.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="947.8" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.08%)</title><rect x="944.8" y="291.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="947.8" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.08%)</title><rect x="944.8" y="275.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="947.8" y="286.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.08%)</title><rect x="944.8" y="259.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="947.8" y="270.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="945.4" y="243.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="948.4" y="254.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (120 samples, 3.30%)</title><rect x="945.8" y="323.0" width="38.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="948.8" y="334.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (120 samples, 3.30%)</title><rect x="945.8" y="307.0" width="38.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="948.8" y="318.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (114 samples, 3.13%)</title><rect x="945.8" y="291.0" width="36.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="948.8" y="302.0">one..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.11%)</title><rect x="945.8" y="275.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="948.8" y="286.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.03%)</title><rect x="946.1" y="259.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="949.1" y="270.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.03%)</title><rect x="946.4" y="259.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="949.4" y="270.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (1 samples, 0.03%)</title><rect x="946.4" y="243.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="949.4" y="254.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="946.7" y="259.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="949.7" y="270.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (110 samples, 3.02%)</title><rect x="947.1" y="275.0" width="35.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="950.1" y="286.0">one..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (110 samples, 3.02%)</title><rect x="947.1" y="259.0" width="35.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="950.1" y="270.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (110 samples, 3.02%)</title><rect x="947.1" y="243.0" width="35.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="950.1" y="254.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (110 samples, 3.02%)</title><rect x="947.1" y="227.0" width="35.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="950.1" y="238.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (110 samples, 3.02%)</title><rect x="947.1" y="211.0" width="35.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="950.1" y="222.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (3 samples, 0.08%)</title><rect x="947.1" y="195.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="950.1" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (107 samples, 2.94%)</title><rect x="948.0" y="195.0" width="34.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="951.0" y="206.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (105 samples, 2.89%)</title><rect x="948.7" y="179.0" width="34.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="951.7" y="190.0">su..</text>
</g>
<g>
<title>write (99 samples, 2.72%)</title><rect x="950.6" y="163.0" width="32.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="953.6" y="174.0">wr..</text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.16%)</title><rect x="982.7" y="291.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="985.7" y="302.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.08%)</title><rect x="982.7" y="275.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="985.7" y="286.0"></text>
</g>
<g>
<title>_res (1 samples, 0.03%)</title><rect x="983.1" y="259.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="986.1" y="270.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="983.4" y="259.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="986.4" y="270.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (3 samples, 0.08%)</title><rect x="983.7" y="275.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="986.7" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.11%)</title><rect x="984.7" y="339.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="987.7" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.08%)</title><rect x="985.0" y="323.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="988.0" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.08%)</title><rect x="985.0" y="307.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="988.0" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1 samples, 0.03%)</title><rect x="985.7" y="291.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="988.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$75/779064875.act (64 samples, 1.76%)</title><rect x="986.0" y="355.0" width="20.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="989.0" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$entity$0 (64 samples, 1.76%)</title><rect x="986.0" y="339.0" width="20.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="989.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.doGet (64 samples, 1.76%)</title><rect x="986.0" y="323.0" width="20.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="989.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/lorismelik/RocksDAO.get (64 samples, 1.76%)</title><rect x="986.0" y="307.0" width="20.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="989.0" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="986.0" y="291.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="989.0" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/514455215.invoke (1 samples, 0.03%)</title><rect x="986.0" y="275.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="989.0" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1296674576.invoke (1 samples, 0.03%)</title><rect x="986.0" y="259.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="989.0" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (6 samples, 0.16%)</title><rect x="986.3" y="291.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="989.3" y="302.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (5 samples, 0.14%)</title><rect x="986.3" y="275.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="989.3" y="286.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 0.14%)</title><rect x="986.3" y="259.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="989.3" y="270.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 0.11%)</title><rect x="986.3" y="243.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="989.3" y="254.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.03%)</title><rect x="986.6" y="227.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="989.6" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.03%)</title><rect x="987.0" y="227.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="990.0" y="238.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="987.3" y="227.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="990.3" y="238.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (1 samples, 0.03%)</title><rect x="987.6" y="243.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="990.6" y="254.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="987.6" y="227.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="990.6" y="238.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (1 samples, 0.03%)</title><rect x="987.9" y="275.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="990.9" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="987.9" y="259.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="990.9" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.03%)</title><rect x="987.9" y="243.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="990.9" y="254.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (56 samples, 1.54%)</title><rect x="988.3" y="291.0" width="18.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="991.3" y="302.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (56 samples, 1.54%)</title><rect x="988.3" y="275.0" width="18.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="991.3" y="286.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (56 samples, 1.54%)</title><rect x="988.3" y="259.0" width="18.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="991.3" y="270.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.05%)</title><rect x="988.6" y="243.0" width="0.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="991.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1 samples, 0.03%)</title><rect x="989.2" y="243.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="992.2" y="254.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (50 samples, 1.37%)</title><rect x="989.5" y="243.0" width="16.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="992.5" y="254.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="989.9" y="227.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="992.9" y="238.0"></text>
</g>
<g>
<title>free (4 samples, 0.11%)</title><rect x="990.2" y="227.0" width="1.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="993.2" y="238.0"></text>
</g>
<g>
<title>tiny_size (4 samples, 0.11%)</title><rect x="990.2" y="211.0" width="1.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="993.2" y="222.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="991.5" y="227.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="994.5" y="238.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.03%)</title><rect x="991.5" y="211.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="994.5" y="222.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="991.8" y="227.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="994.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (40 samples, 1.10%)</title><rect x="992.1" y="227.0" width="13.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="995.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (1 samples, 0.03%)</title><rect x="992.1" y="211.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="995.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (39 samples, 1.07%)</title><rect x="992.5" y="211.0" width="12.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="995.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (39 samples, 1.07%)</title><rect x="992.5" y="195.0" width="12.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="995.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (37 samples, 1.02%)</title><rect x="992.5" y="179.0" width="12.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="995.5" y="190.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.05%)</title><rect x="993.4" y="163.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="996.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.03%)</title><rect x="994.1" y="163.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="997.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.03%)</title><rect x="994.1" y="147.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="997.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (1 samples, 0.03%)</title><rect x="994.4" y="163.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="997.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (1 samples, 0.03%)</title><rect x="994.4" y="147.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="997.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (26 samples, 0.71%)</title><rect x="994.7" y="163.0" width="8.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="997.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (1 samples, 0.03%)</title><rect x="994.7" y="147.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="997.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (25 samples, 0.69%)</title><rect x="995.1" y="147.0" width="8.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="998.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (8 samples, 0.22%)</title><rect x="1000.3" y="131.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1003.3" y="142.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="1000.6" y="115.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1003.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (6 samples, 0.16%)</title><rect x="1000.9" y="115.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1003.9" y="126.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="1002.5" y="99.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1005.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="1002.8" y="131.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1005.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (4 samples, 0.11%)</title><rect x="1003.2" y="163.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1006.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, unsigned long long*, unsigned int*) (1 samples, 0.03%)</title><rect x="1003.8" y="147.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1006.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (1 samples, 0.03%)</title><rect x="1004.1" y="147.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1007.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.03%)</title><rect x="1004.5" y="179.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1007.5" y="190.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="1004.8" y="179.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1007.8" y="190.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.05%)</title><rect x="1005.1" y="227.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1008.1" y="238.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.05%)</title><rect x="1005.1" y="211.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1008.1" y="222.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.03%)</title><rect x="1005.1" y="195.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1008.1" y="206.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="1005.4" y="195.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1008.4" y="206.0"></text>
</g>
<g>
<title>vtable for std::__1::messages&lt;char&gt; (1 samples, 0.03%)</title><rect x="1005.8" y="243.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1008.8" y="254.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="1006.1" y="243.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1009.1" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/lorismelik/NoSuchElementExceptionLite.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1006.4" y="291.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1009.4" y="302.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1006.4" y="275.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1009.4" y="286.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1006.4" y="259.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1009.4" y="270.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1006.4" y="243.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1009.4" y="254.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1006.4" y="227.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1009.4" y="238.0"></text>
</g>
<g>
<title>[worker tid=36355] (565 samples, 15.53%)</title><rect x="1006.7" y="451.0" width="183.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1009.7" y="462.0">[worker tid=36355]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (20 samples, 0.55%)</title><rect x="1006.7" y="435.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1009.7" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.03%)</title><rect x="1006.7" y="419.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1009.7" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (19 samples, 0.52%)</title><rect x="1007.1" y="419.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1010.1" y="430.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (1 samples, 0.03%)</title><rect x="1007.1" y="403.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1010.1" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (2 samples, 0.05%)</title><rect x="1007.4" y="403.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1010.4" y="414.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.05%)</title><rect x="1007.4" y="387.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1010.4" y="398.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.05%)</title><rect x="1007.4" y="371.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1010.4" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.03%)</title><rect x="1008.0" y="403.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1011.0" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (15 samples, 0.41%)</title><rect x="1008.4" y="403.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1011.4" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (5 samples, 0.14%)</title><rect x="1011.6" y="387.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1014.6" y="398.0"></text>
</g>
<g>
<title>[not_walkable] (4 samples, 0.11%)</title><rect x="1013.2" y="435.0" width="1.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1016.2" y="446.0"></text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.03%)</title><rect x="1014.5" y="435.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1017.5" y="446.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.03%)</title><rect x="1014.5" y="419.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1017.5" y="430.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.03%)</title><rect x="1014.8" y="435.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1017.8" y="446.0"></text>
</g>
<g>
<title>java/lang/Thread.run (539 samples, 14.82%)</title><rect x="1015.2" y="435.0" width="174.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1018.2" y="446.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (539 samples, 14.82%)</title><rect x="1015.2" y="419.0" width="174.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1018.2" y="430.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (539 samples, 14.82%)</title><rect x="1015.2" y="403.0" width="174.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1018.2" y="414.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (4 samples, 0.11%)</title><rect x="1015.2" y="387.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1018.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.11%)</title><rect x="1015.2" y="371.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1018.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (4 samples, 0.11%)</title><rect x="1015.2" y="355.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1018.2" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.03%)</title><rect x="1015.8" y="339.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1018.8" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.doGet (1 samples, 0.03%)</title><rect x="1016.1" y="339.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1019.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (291 samples, 8.00%)</title><rect x="1016.5" y="387.0" width="94.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1019.5" y="398.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (291 samples, 8.00%)</title><rect x="1016.5" y="371.0" width="94.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1019.5" y="382.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (250 samples, 6.87%)</title><rect x="1016.5" y="355.0" width="81.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1019.5" y="366.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (4 samples, 0.11%)</title><rect x="1016.8" y="339.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1019.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1017.8" y="323.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1020.8" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_V (1 samples, 0.03%)</title><rect x="1017.8" y="307.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1020.8" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.03%)</title><rect x="1017.8" y="291.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1020.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (14 samples, 0.38%)</title><rect x="1018.1" y="339.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1021.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 0.38%)</title><rect x="1018.1" y="323.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1021.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 0.38%)</title><rect x="1018.1" y="307.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1021.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 0.33%)</title><rect x="1018.7" y="291.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1021.7" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (12 samples, 0.33%)</title><rect x="1018.7" y="275.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1021.7" y="286.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (10 samples, 0.27%)</title><rect x="1019.1" y="259.0" width="3.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1022.1" y="270.0"></text>
</g>
<g>
<title>__psynch_cvsignal (9 samples, 0.25%)</title><rect x="1019.1" y="243.0" width="2.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1022.1" y="254.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="1022.0" y="243.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1025.0" y="254.0"></text>
</g>
<g>
<title>addr_from_java(long) (1 samples, 0.03%)</title><rect x="1022.3" y="259.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1025.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (231 samples, 6.35%)</title><rect x="1022.6" y="339.0" width="75.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1025.6" y="350.0">java/uti..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (230 samples, 6.32%)</title><rect x="1023.0" y="323.0" width="74.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1026.0" y="334.0">jdk/inte..</text>
</g>
<g>
<title>HandleMarkCleaner::HandleMarkCleaner(Thread*) (1 samples, 0.03%)</title><rect x="1025.2" y="307.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1028.2" y="318.0"></text>
</g>
<g>
<title>JavaThread::parker() (1 samples, 0.03%)</title><rect x="1025.6" y="307.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1028.6" y="318.0"></text>
</g>
<g>
<title>JavaThreadParkedState::~JavaThreadParkedState() (1 samples, 0.03%)</title><rect x="1025.9" y="307.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1028.9" y="318.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="1026.2" y="307.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1029.2" y="318.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (219 samples, 6.02%)</title><rect x="1026.5" y="307.0" width="71.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1029.5" y="318.0">Unsafe_P..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.05%)</title><rect x="1026.5" y="291.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1029.5" y="302.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (2 samples, 0.05%)</title><rect x="1026.5" y="275.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1029.5" y="286.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::is_alive() (1 samples, 0.03%)</title><rect x="1026.5" y="259.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1029.5" y="270.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.03%)</title><rect x="1026.8" y="259.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1029.8" y="270.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (1 samples, 0.03%)</title><rect x="1027.2" y="291.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1030.2" y="302.0"></text>
</g>
<g>
<title>JfrEventSetting::setting(JfrEventId) (1 samples, 0.03%)</title><rect x="1027.2" y="275.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1030.2" y="286.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (208 samples, 5.72%)</title><rect x="1027.5" y="291.0" width="67.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1030.5" y="302.0">Parker:..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (3 samples, 0.08%)</title><rect x="1027.8" y="275.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1030.8" y="286.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.05%)</title><rect x="1027.8" y="259.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1030.8" y="270.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="1028.5" y="259.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1031.5" y="270.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="1028.8" y="275.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1031.8" y="286.0"></text>
</g>
<g>
<title>__psynch_cvwait (195 samples, 5.36%)</title><rect x="1029.1" y="275.0" width="63.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1032.1" y="286.0">__psync..</text>
</g>
<g>
<title>_pthread_cond_wait (5 samples, 0.14%)</title><rect x="1092.4" y="275.0" width="1.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1095.4" y="286.0"></text>
</g>
<g>
<title>_pthread_testcancel (2 samples, 0.05%)</title><rect x="1094.0" y="275.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1097.0" y="286.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="1094.6" y="275.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1097.6" y="286.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (1 samples, 0.03%)</title><rect x="1095.0" y="291.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1098.0" y="302.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.05%)</title><rect x="1095.3" y="291.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1098.3" y="302.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.05%)</title><rect x="1095.3" y="275.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1098.3" y="286.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.05%)</title><rect x="1095.3" y="259.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1098.3" y="270.0"></text>
</g>
<g>
<title>Thread::polling_page_addr() (1 samples, 0.03%)</title><rect x="1095.3" y="243.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1098.3" y="254.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="1095.6" y="243.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1098.6" y="254.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="1095.6" y="227.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1098.6" y="238.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.03%)</title><rect x="1095.6" y="211.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1098.6" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="1095.9" y="291.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1098.9" y="302.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="1095.9" y="275.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1098.9" y="286.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="1095.9" y="259.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1098.9" y="270.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="1096.3" y="291.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1099.3" y="302.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.03%)</title><rect x="1096.6" y="291.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1099.6" y="302.0"></text>
</g>
<g>
<title>pthread_cond_wait (1 samples, 0.03%)</title><rect x="1096.9" y="291.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1099.9" y="302.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (1 samples, 0.03%)</title><rect x="1097.2" y="291.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1100.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (9 samples, 0.25%)</title><rect x="1097.6" y="355.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1100.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (9 samples, 0.25%)</title><rect x="1097.6" y="339.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1100.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (8 samples, 0.22%)</title><rect x="1097.6" y="323.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1100.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (8 samples, 0.22%)</title><rect x="1097.6" y="307.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1100.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (8 samples, 0.22%)</title><rect x="1097.6" y="291.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1100.6" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (8 samples, 0.22%)</title><rect x="1097.6" y="275.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1100.6" y="286.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (8 samples, 0.22%)</title><rect x="1097.6" y="259.0" width="2.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1100.6" y="270.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (7 samples, 0.19%)</title><rect x="1097.6" y="243.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1100.6" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 0.19%)</title><rect x="1097.6" y="227.0" width="2.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1100.6" y="238.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (1 samples, 0.03%)</title><rect x="1099.8" y="243.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1102.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="1100.2" y="323.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1103.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="1100.2" y="307.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1103.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="1100.2" y="291.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1103.2" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="1100.2" y="275.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1103.2" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.03%)</title><rect x="1100.2" y="259.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1103.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (32 samples, 0.88%)</title><rect x="1100.5" y="355.0" width="10.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1103.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (32 samples, 0.88%)</title><rect x="1100.5" y="339.0" width="10.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1103.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (32 samples, 0.88%)</title><rect x="1100.5" y="323.0" width="10.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1103.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (32 samples, 0.88%)</title><rect x="1100.5" y="307.0" width="10.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1103.5" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (32 samples, 0.88%)</title><rect x="1100.5" y="291.0" width="10.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1103.5" y="302.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="1101.1" y="275.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1104.1" y="286.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (29 samples, 0.80%)</title><rect x="1101.5" y="275.0" width="9.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1104.5" y="286.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="1101.5" y="259.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1104.5" y="270.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (1 samples, 0.03%)</title><rect x="1101.5" y="243.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1104.5" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (28 samples, 0.77%)</title><rect x="1101.8" y="259.0" width="9.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1104.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$71/1596990242.run (244 samples, 6.71%)</title><rect x="1110.9" y="387.0" width="79.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1113.9" y="398.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$executeAsync$3 (244 samples, 6.71%)</title><rect x="1110.9" y="371.0" width="79.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1113.9" y="382.0">ru/mail/p..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (160 samples, 4.40%)</title><rect x="1110.9" y="355.0" width="51.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1113.9" y="366.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (156 samples, 4.29%)</title><rect x="1110.9" y="339.0" width="50.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1113.9" y="350.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 0.14%)</title><rect x="1111.2" y="323.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1114.2" y="334.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.08%)</title><rect x="1111.8" y="307.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1114.8" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.08%)</title><rect x="1111.8" y="291.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1114.8" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.08%)</title><rect x="1111.8" y="275.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1114.8" y="286.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.08%)</title><rect x="1111.8" y="259.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1114.8" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (150 samples, 4.12%)</title><rect x="1112.8" y="323.0" width="48.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1115.8" y="334.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session.write (150 samples, 4.12%)</title><rect x="1112.8" y="307.0" width="48.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1115.8" y="318.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (148 samples, 4.07%)</title><rect x="1112.8" y="291.0" width="48.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1115.8" y="302.0">one/..</text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.03%)</title><rect x="1112.8" y="275.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1115.8" y="286.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.03%)</title><rect x="1113.1" y="275.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.1" y="286.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.05%)</title><rect x="1113.5" y="275.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1116.5" y="286.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.03%)</title><rect x="1113.8" y="259.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1116.8" y="270.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (144 samples, 3.96%)</title><rect x="1114.1" y="275.0" width="46.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1117.1" y="286.0">one/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="1114.1" y="259.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1117.1" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1114.1" y="243.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1117.1" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (143 samples, 3.93%)</title><rect x="1114.4" y="259.0" width="46.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1117.4" y="270.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (143 samples, 3.93%)</title><rect x="1114.4" y="243.0" width="46.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1117.4" y="254.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (143 samples, 3.93%)</title><rect x="1114.4" y="227.0" width="46.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1117.4" y="238.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (143 samples, 3.93%)</title><rect x="1114.4" y="211.0" width="46.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1117.4" y="222.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (2 samples, 0.05%)</title><rect x="1114.4" y="195.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1117.4" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (141 samples, 3.88%)</title><rect x="1115.1" y="195.0" width="45.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1118.1" y="206.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (134 samples, 3.68%)</title><rect x="1117.3" y="179.0" width="43.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1120.3" y="190.0">sun/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (3 samples, 0.08%)</title><rect x="1119.6" y="163.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1122.6" y="174.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="1120.6" y="163.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1123.6" y="174.0"></text>
</g>
<g>
<title>write (123 samples, 3.38%)</title><rect x="1120.9" y="163.0" width="39.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1123.9" y="174.0">write</text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.05%)</title><rect x="1160.8" y="291.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.8" y="302.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="1160.8" y="275.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1163.8" y="286.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="1160.8" y="259.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1163.8" y="270.0"></text>
</g>
<g>
<title>_res (1 samples, 0.03%)</title><rect x="1160.8" y="243.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1163.8" y="254.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="1161.1" y="275.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1164.1" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.11%)</title><rect x="1161.5" y="339.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1164.5" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.08%)</title><rect x="1161.8" y="323.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1164.8" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.08%)</title><rect x="1161.8" y="307.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1164.8" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1 samples, 0.03%)</title><rect x="1162.4" y="291.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1165.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$75/779064875.act (84 samples, 2.31%)</title><rect x="1162.8" y="355.0" width="27.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1165.8" y="366.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$entity$0 (84 samples, 2.31%)</title><rect x="1162.8" y="339.0" width="27.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1165.8" y="350.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.doGet (84 samples, 2.31%)</title><rect x="1162.8" y="323.0" width="27.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1165.8" y="334.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/lorismelik/RocksDAO.get (84 samples, 2.31%)</title><rect x="1162.8" y="307.0" width="27.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1165.8" y="318.0">r..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.08%)</title><rect x="1162.8" y="291.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1165.8" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/514455215.invoke (3 samples, 0.08%)</title><rect x="1162.8" y="275.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1165.8" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.05%)</title><rect x="1162.8" y="259.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1165.8" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (2 samples, 0.05%)</title><rect x="1162.8" y="243.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1165.8" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (2 samples, 0.05%)</title><rect x="1162.8" y="227.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1165.8" y="238.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1163.1" y="211.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1166.1" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1296674576.invoke (1 samples, 0.03%)</title><rect x="1163.4" y="259.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1166.4" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (13 samples, 0.36%)</title><rect x="1163.7" y="291.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1166.7" y="302.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (8 samples, 0.22%)</title><rect x="1164.4" y="275.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1167.4" y="286.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 0.22%)</title><rect x="1164.4" y="259.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1167.4" y="270.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 0.16%)</title><rect x="1164.4" y="243.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1167.4" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.14%)</title><rect x="1164.4" y="227.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1167.4" y="238.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1165.7" y="211.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1168.7" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1166.0" y="227.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1169.0" y="238.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (2 samples, 0.05%)</title><rect x="1166.3" y="243.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1169.3" y="254.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.03%)</title><rect x="1166.6" y="227.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1169.6" y="238.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (3 samples, 0.08%)</title><rect x="1167.0" y="275.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1170.0" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="1167.6" y="259.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1170.6" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.03%)</title><rect x="1167.6" y="243.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1170.6" y="254.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (67 samples, 1.84%)</title><rect x="1167.9" y="291.0" width="21.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1170.9" y="302.0">o..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (67 samples, 1.84%)</title><rect x="1167.9" y="275.0" width="21.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1170.9" y="286.0">o..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (66 samples, 1.81%)</title><rect x="1168.3" y="259.0" width="21.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1171.3" y="270.0">J..</text>
</g>
<g>
<title>free (3 samples, 0.08%)</title><rect x="1168.9" y="243.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1171.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2 samples, 0.05%)</title><rect x="1169.9" y="243.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.9" y="254.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (58 samples, 1.59%)</title><rect x="1170.5" y="243.0" width="18.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.5" y="254.0"></text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (1 samples, 0.03%)</title><rect x="1171.2" y="227.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.2" y="238.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="1171.5" y="227.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1174.5" y="238.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.16%)</title><rect x="1171.8" y="227.0" width="2.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1174.8" y="238.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.03%)</title><rect x="1171.8" y="211.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.8" y="222.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.05%)</title><rect x="1172.2" y="211.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1175.2" y="222.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="1172.5" y="195.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.5" y="206.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.03%)</title><rect x="1172.5" y="179.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.5" y="190.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (3 samples, 0.08%)</title><rect x="1172.8" y="211.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.8" y="222.0"></text>
</g>
<g>
<title>EnableIf&lt;HasDecorator&lt;1097844ull, MO_UNORDERED&gt;::value, oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::load_internal&lt;1097844ull, oopDesc*&gt;(void*) (2 samples, 0.05%)</title><rect x="1172.8" y="195.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.8" y="206.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::load&lt;oopDesc*&gt;(void*) (1 samples, 0.03%)</title><rect x="1173.5" y="195.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.5" y="206.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="1173.8" y="227.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1176.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (39 samples, 1.07%)</title><rect x="1174.1" y="227.0" width="12.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (39 samples, 1.07%)</title><rect x="1174.1" y="211.0" width="12.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (39 samples, 1.07%)</title><rect x="1174.1" y="195.0" width="12.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (38 samples, 1.04%)</title><rect x="1174.1" y="179.0" width="12.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.1" y="190.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.05%)</title><rect x="1175.4" y="163.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1178.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.03%)</title><rect x="1176.1" y="163.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.03%)</title><rect x="1176.1" y="147.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.03%)</title><rect x="1176.1" y="131.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (1 samples, 0.03%)</title><rect x="1176.4" y="163.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (1 samples, 0.03%)</title><rect x="1176.4" y="147.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (23 samples, 0.63%)</title><rect x="1176.7" y="163.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (21 samples, 0.58%)</title><rect x="1177.4" y="147.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.4" y="158.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="1182.2" y="131.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1185.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (5 samples, 0.14%)</title><rect x="1182.5" y="131.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.05%)</title><rect x="1183.5" y="115.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.5" y="126.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.05%)</title><rect x="1183.5" y="99.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1186.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1 samples, 0.03%)</title><rect x="1184.2" y="163.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (6 samples, 0.16%)</title><rect x="1184.5" y="163.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.5" y="174.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1185.5" y="147.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1188.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (1 samples, 0.03%)</title><rect x="1185.8" y="147.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.8" y="158.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="1185.8" y="131.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1188.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (1 samples, 0.03%)</title><rect x="1186.1" y="147.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.03%)</title><rect x="1186.4" y="179.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (2 samples, 0.05%)</title><rect x="1186.8" y="227.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.8" y="238.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.03%)</title><rect x="1187.4" y="227.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1190.4" y="238.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.03%)</title><rect x="1187.7" y="227.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.7" y="238.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (4 samples, 0.11%)</title><rect x="1188.1" y="227.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.1" y="238.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.08%)</title><rect x="1188.4" y="211.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1191.4" y="222.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.08%)</title><rect x="1188.4" y="195.0" width="1.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1191.4" y="206.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.08%)</title><rect x="1188.4" y="179.0" width="1.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1191.4" y="190.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.05%)</title><rect x="1188.7" y="163.0" width="0.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1191.7" y="174.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="1189.0" y="147.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1192.0" y="158.0"></text>
</g>
<g>
<title>szone_free_definite_size (1 samples, 0.03%)</title><rect x="1189.4" y="243.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1192.4" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.shiftBytes (1 samples, 0.03%)</title><rect x="1189.7" y="291.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1192.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.clone (1 samples, 0.03%)</title><rect x="1189.7" y="275.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1192.7" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="1189.7" y="259.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1192.7" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="1189.7" y="243.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1192.7" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="1189.7" y="227.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1192.7" y="238.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1 samples, 0.03%)</title><rect x="1189.7" y="211.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1192.7" y="222.0"></text>
</g>
</g>
</svg>
