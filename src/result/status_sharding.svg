<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1286" onload="init(evt)" viewBox="0 0 1200 1286" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1269"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1269"> </text>
<g id="frames">
<g>
<title>all (2,202 samples, 100.00%)</title><rect x="10.0" y="1235.0" width="1180.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="13.0" y="1246.0">all</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.05%)</title><rect x="10.0" y="1219.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="10.0" y="1203.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.05%)</title><rect x="10.0" y="1187.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="10.0" y="1171.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="10.0" y="1155.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::thread() (1 samples, 0.05%)</title><rect x="10.0" y="1139.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.05%)</title><rect x="10.5" y="1219.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.5" y="1230.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.05%)</title><rect x="10.5" y="1203.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.5" y="1214.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.05%)</title><rect x="10.5" y="1187.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.5" y="1198.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.05%)</title><rect x="10.5" y="1171.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.5" y="1182.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.05%)</title><rect x="10.5" y="1155.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.5" y="1166.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (2 samples, 0.09%)</title><rect x="11.1" y="1219.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.1" y="1230.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.05%)</title><rect x="11.1" y="1203.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.1" y="1214.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.05%)</title><rect x="11.1" y="1187.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="14.1" y="1198.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.05%)</title><rect x="11.1" y="1171.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.1" y="1182.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="11.1" y="1155.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="14.1" y="1166.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.05%)</title><rect x="11.6" y="1203.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="14.6" y="1214.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.05%)</title><rect x="11.6" y="1187.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="14.6" y="1198.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (1 samples, 0.05%)</title><rect x="11.6" y="1171.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.6" y="1182.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.05%)</title><rect x="11.6" y="1155.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="14.6" y="1166.0"></text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.05%)</title><rect x="12.1" y="1219.0" width="0.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="15.1" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="12.1" y="1203.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="15.1" y="1214.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.05%)</title><rect x="12.1" y="1187.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="15.1" y="1198.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.05%)</title><rect x="12.1" y="1171.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="15.1" y="1182.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.05%)</title><rect x="12.1" y="1155.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="15.1" y="1166.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.05%)</title><rect x="12.1" y="1139.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="15.1" y="1150.0"></text>
</g>
<g>
<title>[unknown_Java] (7 samples, 0.32%)</title><rect x="12.7" y="1219.0" width="3.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="15.7" y="1230.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,889 samples, 85.79%)</title><rect x="16.4" y="1219.0" width="1012.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.4" y="1230.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (4 samples, 0.18%)</title><rect x="19.1" y="1203.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="22.1" y="1214.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (1 samples, 0.05%)</title><rect x="20.7" y="1187.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="23.7" y="1198.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (1,129 samples, 51.27%)</title><rect x="21.3" y="1203.0" width="605.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.3" y="1214.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.05%)</title><rect x="21.3" y="1187.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.3" y="1198.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (11 samples, 0.50%)</title><rect x="21.8" y="1187.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.8" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (10 samples, 0.45%)</title><rect x="22.3" y="1171.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="25.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (10 samples, 0.45%)</title><rect x="22.3" y="1155.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="25.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (7 samples, 0.32%)</title><rect x="22.3" y="1139.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="25.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (7 samples, 0.32%)</title><rect x="22.3" y="1123.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.3" y="1134.0"></text>
</g>
<g>
<title>_res (3 samples, 0.14%)</title><rect x="22.9" y="1107.0" width="1.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="25.9" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.14%)</title><rect x="24.5" y="1107.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="27.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (3 samples, 0.14%)</title><rect x="26.1" y="1139.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="29.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.setRelease (2 samples, 0.09%)</title><rect x="26.6" y="1123.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="29.6" y="1134.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.05%)</title><rect x="27.1" y="1107.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.1" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1,116 samples, 50.68%)</title><rect x="27.7" y="1187.0" width="598.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.7" y="1198.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1,116 samples, 50.68%)</title><rect x="27.7" y="1171.0" width="598.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.7" y="1182.0">sun/nio/ch/SelectorImpl.lockAndDoSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1,116 samples, 50.68%)</title><rect x="27.7" y="1155.0" width="598.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="30.7" y="1166.0">sun/nio/ch/KQueueSelectorImpl.doSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (1,093 samples, 49.64%)</title><rect x="30.9" y="1139.0" width="585.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="33.9" y="1150.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (3 samples, 0.14%)</title><rect x="50.7" y="1123.0" width="1.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="53.7" y="1134.0"></text>
</g>
<g>
<title>kevent (1,053 samples, 47.82%)</title><rect x="52.3" y="1123.0" width="564.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="55.3" y="1134.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (4 samples, 0.18%)</title><rect x="616.6" y="1139.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="619.6" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.18%)</title><rect x="616.6" y="1123.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="619.6" y="1134.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4 samples, 0.18%)</title><rect x="616.6" y="1107.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="619.6" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.18%)</title><rect x="616.6" y="1091.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="619.6" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.18%)</title><rect x="616.6" y="1075.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="619.6" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (4 samples, 0.18%)</title><rect x="618.8" y="1139.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="621.8" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.05%)</title><rect x="620.4" y="1123.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="623.4" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.inc (1 samples, 0.05%)</title><rect x="620.4" y="1107.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="623.4" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (1 samples, 0.05%)</title><rect x="620.9" y="1139.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="623.9" y="1150.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.05%)</title><rect x="620.9" y="1123.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="623.9" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (8 samples, 0.36%)</title><rect x="621.4" y="1139.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="624.4" y="1150.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.isOpen (1 samples, 0.05%)</title><rect x="623.6" y="1123.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="626.6" y="1134.0"></text>
</g>
<g>
<title>java/util/HashSet.isEmpty (2 samples, 0.09%)</title><rect x="624.1" y="1123.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="627.1" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.isEmpty (2 samples, 0.09%)</title><rect x="624.1" y="1107.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="627.1" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (1 samples, 0.05%)</title><rect x="625.2" y="1123.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="628.2" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectedKeys (1 samples, 0.05%)</title><rect x="625.7" y="1187.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="628.7" y="1198.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.ensureOpen (1 samples, 0.05%)</title><rect x="625.7" y="1171.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="628.7" y="1182.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (1 samples, 0.05%)</title><rect x="625.7" y="1155.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="628.7" y="1166.0"></text>
</g>
<g>
<title>one/nio/net/Session.handleException (2 samples, 0.09%)</title><rect x="626.3" y="1203.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="629.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/commons/logging/impl/Log4JLogger.error (2 samples, 0.09%)</title><rect x="626.3" y="1187.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="629.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.log (2 samples, 0.09%)</title><rect x="626.3" y="1171.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="629.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.forcedLog (2 samples, 0.09%)</title><rect x="626.3" y="1155.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="629.3" y="1166.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.05%)</title><rect x="626.3" y="1139.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="629.3" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.05%)</title><rect x="626.3" y="1123.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="629.3" y="1134.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.05%)</title><rect x="626.3" y="1107.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="629.3" y="1118.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.05%)</title><rect x="626.3" y="1091.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="629.3" y="1102.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="626.3" y="1075.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="629.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/log4j/spi/LoggingEvent.&lt;init&gt; (1 samples, 0.05%)</title><rect x="626.8" y="1139.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="629.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.05%)</title><rect x="626.8" y="1123.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="629.8" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.05%)</title><rect x="626.8" y="1107.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="629.8" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.05%)</title><rect x="626.8" y="1091.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="629.8" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.05%)</title><rect x="626.8" y="1075.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="629.8" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.05%)</title><rect x="626.8" y="1059.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="629.8" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath.getResource (1 samples, 0.05%)</title><rect x="626.8" y="1043.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="629.8" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$FileLoader.getResource (1 samples, 0.05%)</title><rect x="626.8" y="1027.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="629.8" y="1038.0"></text>
</g>
<g>
<title>java/io/File.exists (1 samples, 0.05%)</title><rect x="626.8" y="1011.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="629.8" y="1022.0"></text>
</g>
<g>
<title>java/io/UnixFileSystem.getBooleanAttributes (1 samples, 0.05%)</title><rect x="626.8" y="995.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="629.8" y="1006.0"></text>
</g>
<g>
<title>java/io/UnixFileSystem.getBooleanAttributes0 (1 samples, 0.05%)</title><rect x="626.8" y="979.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="629.8" y="990.0"></text>
</g>
<g>
<title>stat64 (1 samples, 0.05%)</title><rect x="626.8" y="963.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="629.8" y="974.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (749 samples, 34.01%)</title><rect x="627.3" y="1203.0" width="401.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="630.3" y="1214.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (744 samples, 33.79%)</title><rect x="628.9" y="1187.0" width="398.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="631.9" y="1198.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (580 samples, 26.34%)</title><rect x="628.9" y="1171.0" width="310.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="631.9" y="1182.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (538 samples, 24.43%)</title><rect x="634.8" y="1155.0" width="288.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="637.8" y="1166.0">one/nio/http/HttpSession.handleParsedRe..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (535 samples, 24.30%)</title><rect x="636.4" y="1139.0" width="286.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="639.4" y="1150.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.05%)</title><rect x="639.1" y="1123.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="642.1" y="1134.0"></text>
</g>
<g>
<title>RequestHandler0_status.handleRequest (522 samples, 23.71%)</title><rect x="639.7" y="1123.0" width="279.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="642.7" y="1134.0">RequestHandler0_status.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (498 samples, 22.62%)</title><rect x="641.3" y="1107.0" width="266.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="644.3" y="1118.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.14%)</title><rect x="643.4" y="1091.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="646.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.14%)</title><rect x="643.4" y="1075.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="646.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.14%)</title><rect x="643.4" y="1059.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="646.4" y="1070.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.09%)</title><rect x="643.9" y="1043.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="646.9" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (489 samples, 22.21%)</title><rect x="645.0" y="1091.0" width="262.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="648.0" y="1102.0">one/nio/http/HttpSession.writeRespo..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (57 samples, 2.59%)</title><rect x="645.0" y="1075.0" width="30.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="648.0" y="1086.0">on..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.18%)</title><rect x="648.8" y="1059.0" width="2.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="651.8" y="1070.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2 samples, 0.09%)</title><rect x="650.9" y="1059.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="653.9" y="1070.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (44 samples, 2.00%)</title><rect x="652.0" y="1059.0" width="23.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="655.0" y="1070.0">o..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.05%)</title><rect x="653.6" y="1043.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="656.6" y="1054.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (1 samples, 0.05%)</title><rect x="653.6" y="1027.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="656.6" y="1038.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (3 samples, 0.14%)</title><rect x="654.1" y="1043.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="657.1" y="1054.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="655.2" y="1027.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="658.2" y="1038.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (13 samples, 0.59%)</title><rect x="655.7" y="1043.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="658.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 0.23%)</title><rect x="658.9" y="1027.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="661.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.09%)</title><rect x="659.5" y="1011.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="662.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.09%)</title><rect x="660.6" y="1011.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="663.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.09%)</title><rect x="661.6" y="1027.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="664.6" y="1038.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (24 samples, 1.09%)</title><rect x="662.7" y="1043.0" width="12.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="665.7" y="1054.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (24 samples, 1.09%)</title><rect x="662.7" y="1027.0" width="12.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="665.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.18%)</title><rect x="672.9" y="1011.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="675.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (4 samples, 0.18%)</title><rect x="672.9" y="995.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="675.9" y="1006.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putByte (1 samples, 0.05%)</title><rect x="675.0" y="1011.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="678.0" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (432 samples, 19.62%)</title><rect x="675.6" y="1075.0" width="231.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="678.6" y="1086.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.&lt;init&gt; (1 samples, 0.05%)</title><rect x="675.6" y="1059.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="678.6" y="1070.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (431 samples, 19.57%)</title><rect x="676.1" y="1059.0" width="231.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="679.1" y="1070.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (430 samples, 19.53%)</title><rect x="676.6" y="1043.0" width="230.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="679.6" y="1054.0">one/nio/net/Session$ArrayQueue..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (430 samples, 19.53%)</title><rect x="676.6" y="1027.0" width="230.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="679.6" y="1038.0">one/nio/net/JavaSocket.write</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (15 samples, 0.68%)</title><rect x="676.6" y="1011.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="679.6" y="1022.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (15 samples, 0.68%)</title><rect x="676.6" y="995.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="679.6" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (15 samples, 0.68%)</title><rect x="676.6" y="979.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="679.6" y="990.0"></text>
</g>
<g>
<title>__cxx_global_var_init (2 samples, 0.09%)</title><rect x="676.6" y="963.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="679.6" y="974.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.14%)</title><rect x="677.7" y="963.0" width="1.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="680.7" y="974.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.23%)</title><rect x="679.3" y="963.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="682.3" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="680.9" y="947.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="683.9" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="680.9" y="931.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="683.9" y="942.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.05%)</title><rect x="680.9" y="915.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="683.9" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.05%)</title><rect x="680.9" y="899.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="683.9" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="681.5" y="947.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="684.5" y="958.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.23%)</title><rect x="682.0" y="963.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="685.0" y="974.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.23%)</title><rect x="682.0" y="947.0" width="2.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="685.0" y="958.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (5 samples, 0.23%)</title><rect x="682.0" y="931.0" width="2.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="685.0" y="942.0"></text>
</g>
<g>
<title>_res (4 samples, 0.18%)</title><rect x="682.5" y="915.0" width="2.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="685.5" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (415 samples, 18.85%)</title><rect x="684.7" y="1011.0" width="222.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="687.7" y="1022.0">sun/nio/ch/SocketChannelImpl...</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.05%)</title><rect x="685.2" y="995.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="688.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.05%)</title><rect x="685.2" y="979.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="688.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.05%)</title><rect x="685.2" y="963.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="688.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.05%)</title><rect x="685.2" y="947.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="688.2" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.05%)</title><rect x="685.2" y="931.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="688.2" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (1 samples, 0.05%)</title><rect x="685.2" y="915.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="688.2" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (413 samples, 18.76%)</title><rect x="685.7" y="995.0" width="221.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="688.7" y="1006.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (413 samples, 18.76%)</title><rect x="685.7" y="979.0" width="221.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="688.7" y="990.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.09%)</title><rect x="686.8" y="963.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="689.8" y="974.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.09%)</title><rect x="686.8" y="947.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="689.8" y="958.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.09%)</title><rect x="686.8" y="931.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="689.8" y="942.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.09%)</title><rect x="686.8" y="915.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="689.8" y="926.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.09%)</title><rect x="686.8" y="899.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="689.8" y="910.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (1 samples, 0.05%)</title><rect x="687.3" y="883.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="690.3" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (404 samples, 18.35%)</title><rect x="687.9" y="963.0" width="216.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="690.9" y="974.0">sun/nio/ch/IOUtil.writeFromN..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (404 samples, 18.35%)</title><rect x="687.9" y="947.0" width="216.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="690.9" y="958.0">sun/nio/ch/SocketDispatcher...</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (404 samples, 18.35%)</title><rect x="687.9" y="931.0" width="216.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="690.9" y="942.0">sun/nio/ch/FileDispatcherImp..</text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.05%)</title><rect x="691.6" y="915.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="694.6" y="926.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.05%)</title><rect x="692.2" y="915.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="695.2" y="926.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.05%)</title><rect x="692.2" y="899.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="695.2" y="910.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.05%)</title><rect x="692.7" y="915.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="695.7" y="926.0"></text>
</g>
<g>
<title>write (394 samples, 17.89%)</title><rect x="693.2" y="915.0" width="211.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="696.2" y="926.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (5 samples, 0.23%)</title><rect x="904.4" y="963.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="907.4" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.18%)</title><rect x="904.4" y="947.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="907.4" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.09%)</title><rect x="905.4" y="931.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="908.4" y="942.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="906.0" y="915.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="909.0" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.05%)</title><rect x="906.5" y="947.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="909.5" y="958.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.05%)</title><rect x="906.5" y="931.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="909.5" y="942.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.05%)</title><rect x="906.5" y="915.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="909.5" y="926.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.05%)</title><rect x="907.1" y="1091.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="910.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.05%)</title><rect x="907.1" y="1075.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="910.1" y="1086.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1 samples, 0.05%)</title><rect x="907.6" y="1091.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="910.6" y="1102.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (1 samples, 0.05%)</title><rect x="908.1" y="1107.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="911.1" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.status (20 samples, 0.91%)</title><rect x="908.7" y="1107.0" width="10.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="911.7" y="1118.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (18 samples, 0.82%)</title><rect x="909.7" y="1091.0" width="9.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="912.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (4 samples, 0.18%)</title><rect x="913.0" y="1075.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="916.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.09%)</title><rect x="913.5" y="1059.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="916.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.05%)</title><rect x="914.6" y="1059.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="917.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.05%)</title><rect x="914.6" y="1043.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="917.6" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (7 samples, 0.32%)</title><rect x="915.1" y="1075.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="918.1" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (1 samples, 0.05%)</title><rect x="918.8" y="1075.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="921.8" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.05%)</title><rect x="919.4" y="1123.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="922.4" y="1134.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.09%)</title><rect x="919.9" y="1123.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="922.9" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.09%)</title><rect x="919.9" y="1107.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="922.9" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.05%)</title><rect x="920.5" y="1091.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="923.5" y="1102.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.handleDefault (4 samples, 0.18%)</title><rect x="921.0" y="1123.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="924.0" y="1134.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.09%)</title><rect x="921.5" y="1107.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="924.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.09%)</title><rect x="921.5" y="1091.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="924.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.09%)</title><rect x="921.5" y="1075.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="924.5" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.entity (1 samples, 0.05%)</title><rect x="922.6" y="1107.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="925.6" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.executeAsync (1 samples, 0.05%)</title><rect x="922.6" y="1091.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="925.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.05%)</title><rect x="922.6" y="1075.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="925.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.05%)</title><rect x="922.6" y="1059.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="925.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.enqueue (1 samples, 0.05%)</title><rect x="922.6" y="1043.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="925.6" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (17 samples, 0.77%)</title><rect x="923.1" y="1155.0" width="9.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="926.1" y="1166.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (8 samples, 0.36%)</title><rect x="923.1" y="1139.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="926.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.14%)</title><rect x="925.8" y="1123.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="928.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.14%)</title><rect x="925.8" y="1107.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="928.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.14%)</title><rect x="925.8" y="1091.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="928.8" y="1102.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.36%)</title><rect x="927.4" y="1139.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="930.4" y="1150.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.36%)</title><rect x="927.4" y="1123.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="930.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.05%)</title><rect x="931.2" y="1107.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="934.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.05%)</title><rect x="931.2" y="1091.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="934.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.05%)</title><rect x="931.2" y="1075.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="934.2" y="1086.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.05%)</title><rect x="931.7" y="1139.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="934.7" y="1150.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (5 samples, 0.23%)</title><rect x="932.2" y="1155.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="935.2" y="1166.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 0.23%)</title><rect x="932.2" y="1139.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="935.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 0.23%)</title><rect x="932.2" y="1123.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="935.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.09%)</title><rect x="932.8" y="1107.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="935.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.05%)</title><rect x="933.3" y="1091.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="936.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.09%)</title><rect x="933.9" y="1107.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="936.9" y="1118.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.32%)</title><rect x="934.9" y="1155.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="937.9" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.23%)</title><rect x="936.0" y="1139.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="939.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.23%)</title><rect x="936.0" y="1123.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="939.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.14%)</title><rect x="937.1" y="1107.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="940.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.14%)</title><rect x="937.1" y="1091.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="940.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (3 samples, 0.14%)</title><rect x="937.1" y="1075.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="940.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.05%)</title><rect x="938.1" y="1059.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="941.1" y="1070.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.09%)</title><rect x="938.7" y="1155.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="941.7" y="1166.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.09%)</title><rect x="938.7" y="1139.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="941.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.05%)</title><rect x="939.2" y="1123.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="942.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.05%)</title><rect x="939.2" y="1107.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="942.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.05%)</title><rect x="939.2" y="1091.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="942.2" y="1102.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (164 samples, 7.45%)</title><rect x="939.7" y="1171.0" width="87.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="942.7" y="1182.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (164 samples, 7.45%)</title><rect x="939.7" y="1155.0" width="87.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="942.7" y="1166.0">one/nio/ne..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (9 samples, 0.41%)</title><rect x="940.3" y="1139.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="943.3" y="1150.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.41%)</title><rect x="940.3" y="1123.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="943.3" y="1134.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.41%)</title><rect x="940.3" y="1107.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="943.3" y="1118.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.27%)</title><rect x="941.9" y="1091.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="944.9" y="1102.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.23%)</title><rect x="942.4" y="1075.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="945.4" y="1086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.23%)</title><rect x="942.4" y="1059.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="945.4" y="1070.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.09%)</title><rect x="944.0" y="1043.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="947.0" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (154 samples, 6.99%)</title><rect x="945.1" y="1139.0" width="82.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="948.1" y="1150.0">sun/nio/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (16 samples, 0.73%)</title><rect x="945.1" y="1123.0" width="8.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="948.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (16 samples, 0.73%)</title><rect x="945.1" y="1107.0" width="8.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="948.1" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (5 samples, 0.23%)</title><rect x="946.2" y="1091.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="949.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (2 samples, 0.09%)</title><rect x="947.8" y="1075.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="950.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.09%)</title><rect x="947.8" y="1059.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="950.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (2 samples, 0.09%)</title><rect x="947.8" y="1043.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="950.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (9 samples, 0.41%)</title><rect x="948.9" y="1091.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="951.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (9 samples, 0.41%)</title><rect x="948.9" y="1075.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="951.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.09%)</title><rect x="948.9" y="1059.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="951.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (3 samples, 0.14%)</title><rect x="949.9" y="1059.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="952.9" y="1070.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.18%)</title><rect x="951.5" y="1059.0" width="2.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="954.5" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (138 samples, 6.27%)</title><rect x="953.7" y="1123.0" width="73.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="956.7" y="1134.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (138 samples, 6.27%)</title><rect x="953.7" y="1107.0" width="73.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="956.7" y="1118.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (138 samples, 6.27%)</title><rect x="953.7" y="1091.0" width="73.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="956.7" y="1102.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (137 samples, 6.22%)</title><rect x="954.2" y="1075.0" width="73.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="957.2" y="1086.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (137 samples, 6.22%)</title><rect x="954.2" y="1059.0" width="73.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="957.2" y="1070.0">sun/nio/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (3 samples, 0.14%)</title><rect x="958.5" y="1043.0" width="1.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="961.5" y="1054.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.09%)</title><rect x="959.0" y="1027.0" width="1.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="962.0" y="1038.0"></text>
</g>
<g>
<title>read (126 samples, 5.72%)</title><rect x="960.1" y="1043.0" width="67.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="963.1" y="1054.0">read</text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.09%)</title><rect x="1027.6" y="1187.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1030.6" y="1198.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="1027.6" y="1171.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1030.6" y="1182.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.05%)</title><rect x="1027.6" y="1155.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1030.6" y="1166.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.05%)</title><rect x="1028.2" y="1171.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1031.2" y="1182.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.05%)</title><rect x="1028.7" y="1219.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1031.7" y="1230.0"></text>
</g>
<g>
<title>thread_start (300 samples, 13.62%)</title><rect x="1029.2" y="1219.0" width="160.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1032.2" y="1230.0">thread_start</text>
</g>
<g>
<title>_pthread_start (300 samples, 13.62%)</title><rect x="1029.2" y="1203.0" width="160.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1032.2" y="1214.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (300 samples, 13.62%)</title><rect x="1029.2" y="1187.0" width="160.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1032.2" y="1198.0">_pthread_body</text>
</g>
<g>
<title>thread_native_entry(Thread*) (300 samples, 13.62%)</title><rect x="1029.2" y="1171.0" width="160.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1032.2" y="1182.0">thread_native_entry(..</text>
</g>
<g>
<title>Thread::call_run() (300 samples, 13.62%)</title><rect x="1029.2" y="1155.0" width="160.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1032.2" y="1166.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.05%)</title><rect x="1029.2" y="1139.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1032.2" y="1150.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.05%)</title><rect x="1029.2" y="1123.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1032.2" y="1134.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.05%)</title><rect x="1029.2" y="1107.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1032.2" y="1118.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (1 samples, 0.05%)</title><rect x="1029.2" y="1091.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1032.2" y="1102.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (1 samples, 0.05%)</title><rect x="1029.2" y="1075.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1032.2" y="1086.0"></text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (1 samples, 0.05%)</title><rect x="1029.2" y="1059.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1032.2" y="1070.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.05%)</title><rect x="1029.2" y="1043.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1032.2" y="1054.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="1029.2" y="1027.0" width="0.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1032.2" y="1038.0"></text>
</g>
<g>
<title>JavaThread::run() (292 samples, 13.26%)</title><rect x="1029.8" y="1139.0" width="156.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1032.8" y="1150.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (292 samples, 13.26%)</title><rect x="1029.8" y="1123.0" width="156.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1032.8" y="1134.0">JavaThread::thread_m..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (287 samples, 13.03%)</title><rect x="1029.8" y="1107.0" width="153.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1032.8" y="1118.0">CompileBroker::comp..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (286 samples, 12.99%)</title><rect x="1029.8" y="1091.0" width="153.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1032.8" y="1102.0">CompileBroker::invo..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (284 samples, 12.90%)</title><rect x="1029.8" y="1075.0" width="152.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1032.8" y="1086.0">C2Compiler::compile..</text>
</g>
<g>
<title>Arena::~Arena() (1 samples, 0.05%)</title><rect x="1029.8" y="1059.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1032.8" y="1070.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (1 samples, 0.05%)</title><rect x="1029.8" y="1043.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1032.8" y="1054.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.05%)</title><rect x="1029.8" y="1027.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1032.8" y="1038.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.05%)</title><rect x="1029.8" y="1011.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1032.8" y="1022.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (1 samples, 0.05%)</title><rect x="1029.8" y="995.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1032.8" y="1006.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (1 samples, 0.05%)</title><rect x="1029.8" y="979.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1032.8" y="990.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (283 samples, 12.85%)</title><rect x="1030.3" y="1059.0" width="151.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1033.3" y="1070.0">Compile::Compile(ci..</text>
</g>
<g>
<title>Compile::Code_Gen() (178 samples, 8.08%)</title><rect x="1030.3" y="1043.0" width="95.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1033.3" y="1054.0">Compile::Co..</text>
</g>
<g>
<title>Compile::Output() (5 samples, 0.23%)</title><rect x="1030.3" y="1027.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1033.3" y="1038.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (4 samples, 0.18%)</title><rect x="1030.3" y="1011.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1033.3" y="1022.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.05%)</title><rect x="1031.9" y="995.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1034.9" y="1006.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.05%)</title><rect x="1031.9" y="979.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1034.9" y="990.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.05%)</title><rect x="1032.5" y="1011.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1035.5" y="1022.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.05%)</title><rect x="1032.5" y="995.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1035.5" y="1006.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.05%)</title><rect x="1032.5" y="979.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1035.5" y="990.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.05%)</title><rect x="1032.5" y="963.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1035.5" y="974.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.18%)</title><rect x="1033.0" y="1027.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1036.0" y="1038.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.05%)</title><rect x="1033.5" y="1011.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1036.5" y="1022.0"></text>
</g>
<g>
<title>GrowableArray&lt;ScopeValue*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.05%)</title><rect x="1033.5" y="995.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1036.5" y="1006.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.05%)</title><rect x="1033.5" y="979.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1036.5" y="990.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (2 samples, 0.09%)</title><rect x="1034.1" y="1011.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1037.1" y="1022.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.05%)</title><rect x="1034.6" y="995.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1037.6" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.05%)</title><rect x="1034.6" y="979.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1037.6" y="990.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.05%)</title><rect x="1034.6" y="963.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1037.6" y="974.0"></text>
</g>
<g>
<title>DIR_Chunk* GrowableArray&lt;DIR_Chunk*&gt;::insert_sorted&lt;&amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;) (1 samples, 0.05%)</title><rect x="1034.6" y="947.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1037.6" y="958.0"></text>
</g>
<g>
<title>int GrowableArray&lt;DIR_Chunk*&gt;::find_sorted&lt;DIR_Chunk*, &amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;, bool&amp;) (1 samples, 0.05%)</title><rect x="1034.6" y="931.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1037.6" y="942.0"></text>
</g>
<g>
<title>DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;) (1 samples, 0.05%)</title><rect x="1034.6" y="915.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1037.6" y="926.0"></text>
</g>
<g>
<title>Matcher::match() (13 samples, 0.59%)</title><rect x="1035.1" y="1027.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1038.1" y="1038.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.09%)</title><rect x="1035.1" y="1011.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1038.1" y="1022.0"></text>
</g>
<g>
<title>VectorSet::VectorSet(Arena*) (1 samples, 0.05%)</title><rect x="1035.7" y="995.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1038.7" y="1006.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1035.7" y="979.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1038.7" y="990.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (11 samples, 0.50%)</title><rect x="1036.2" y="1011.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1039.2" y="1022.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (8 samples, 0.36%)</title><rect x="1036.7" y="995.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1039.7" y="1006.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.05%)</title><rect x="1041.0" y="995.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1044.0" y="1006.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.05%)</title><rect x="1041.0" y="979.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1044.0" y="990.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.05%)</title><rect x="1041.0" y="963.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1044.0" y="974.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.05%)</title><rect x="1041.0" y="947.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1044.0" y="958.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1041.6" y="995.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1044.6" y="1006.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.05%)</title><rect x="1041.6" y="979.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1044.6" y="990.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.05%)</title><rect x="1041.6" y="963.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1044.6" y="974.0"></text>
</g>
<g>
<title>JavaThread::current() (1 samples, 0.05%)</title><rect x="1041.6" y="947.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1044.6" y="958.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.05%)</title><rect x="1042.1" y="1027.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1045.1" y="1038.0"></text>
</g>
<g>
<title>PhaseBlockLayout::grow_traces() (1 samples, 0.05%)</title><rect x="1042.1" y="1011.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1045.1" y="1022.0"></text>
</g>
<g>
<title>_qsort (1 samples, 0.05%)</title><rect x="1042.1" y="995.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1045.1" y="1006.0"></text>
</g>
<g>
<title>_qsort (1 samples, 0.05%)</title><rect x="1042.1" y="979.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1045.1" y="990.0"></text>
</g>
<g>
<title>_qsort (1 samples, 0.05%)</title><rect x="1042.1" y="963.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1045.1" y="974.0"></text>
</g>
<g>
<title>_qsort (1 samples, 0.05%)</title><rect x="1042.1" y="947.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1045.1" y="958.0"></text>
</g>
<g>
<title>_qsort (1 samples, 0.05%)</title><rect x="1042.1" y="931.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1045.1" y="942.0"></text>
</g>
<g>
<title>_isort (1 samples, 0.05%)</title><rect x="1042.1" y="915.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1045.1" y="926.0"></text>
</g>
<g>
<title>edge_order(CFGEdge**, CFGEdge**) (1 samples, 0.05%)</title><rect x="1042.1" y="899.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1045.1" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.05%)</title><rect x="1042.6" y="1027.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1045.6" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.05%)</title><rect x="1042.6" y="1011.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1045.6" y="1022.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1042.6" y="995.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1045.6" y="1006.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.05%)</title><rect x="1042.6" y="979.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1045.6" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (18 samples, 0.82%)</title><rect x="1043.2" y="1027.0" width="9.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1046.2" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (18 samples, 0.82%)</title><rect x="1043.2" y="1011.0" width="9.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1046.2" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.09%)</title><rect x="1043.2" y="995.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1046.2" y="1006.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.05%)</title><rect x="1043.7" y="979.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1046.7" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (3 samples, 0.14%)</title><rect x="1044.2" y="995.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1047.2" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::set_next_call(Block*, Node*, VectorSet&amp;) (1 samples, 0.05%)</title><rect x="1044.8" y="979.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1047.8" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_exit_block_pressure(Block*) (1 samples, 0.05%)</title><rect x="1045.3" y="979.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1048.3" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.05%)</title><rect x="1045.3" y="963.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1048.3" y="974.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.05%)</title><rect x="1045.3" y="947.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1048.3" y="958.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.05%)</title><rect x="1045.3" y="931.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1048.3" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.05%)</title><rect x="1045.8" y="995.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1048.8" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.09%)</title><rect x="1046.4" y="995.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1049.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (5 samples, 0.23%)</title><rect x="1047.5" y="995.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1050.5" y="1006.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (3 samples, 0.14%)</title><rect x="1047.5" y="979.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1050.5" y="990.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1048.5" y="963.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1051.5" y="974.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.05%)</title><rect x="1048.5" y="947.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1051.5" y="958.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.09%)</title><rect x="1049.1" y="979.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1052.1" y="990.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.18%)</title><rect x="1050.1" y="995.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1053.1" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.18%)</title><rect x="1050.1" y="979.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1053.1" y="990.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.05%)</title><rect x="1050.7" y="963.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1053.7" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.05%)</title><rect x="1051.2" y="963.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1054.2" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="1051.7" y="963.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1054.7" y="974.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.05%)</title><rect x="1052.3" y="995.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1055.3" y="1006.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.05%)</title><rect x="1052.3" y="979.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1055.3" y="990.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.05%)</title><rect x="1052.3" y="963.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1055.3" y="974.0"></text>
</g>
<g>
<title>madvise (1 samples, 0.05%)</title><rect x="1052.3" y="947.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1055.3" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (135 samples, 6.13%)</title><rect x="1052.8" y="1027.0" width="72.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1055.8" y="1038.0">PhaseCha..</text>
</g>
<g>
<title>LiveRangeMap::compress_uf_map_for_nodes() (1 samples, 0.05%)</title><rect x="1052.8" y="1011.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1055.8" y="1022.0"></text>
</g>
<g>
<title>LiveRangeMap::find(unsigned int) (1 samples, 0.05%)</title><rect x="1052.8" y="995.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1055.8" y="1006.0"></text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.05%)</title><rect x="1053.4" y="1011.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1056.4" y="1022.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.05%)</title><rect x="1053.9" y="1011.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1056.9" y="1022.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.05%)</title><rect x="1054.4" y="1011.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1057.4" y="1022.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (6 samples, 0.27%)</title><rect x="1055.0" y="1011.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1058.0" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (7 samples, 0.32%)</title><rect x="1058.2" y="1011.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1061.2" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="1058.7" y="995.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1061.7" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (4 samples, 0.18%)</title><rect x="1059.2" y="995.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1062.2" y="1006.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.05%)</title><rect x="1059.2" y="979.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1062.2" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.05%)</title><rect x="1059.8" y="979.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1062.8" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.09%)</title><rect x="1060.3" y="979.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1063.3" y="990.0"></text>
</g>
<g>
<title>RegMask::SUBTRACT(RegMask const&amp;) (1 samples, 0.05%)</title><rect x="1061.4" y="995.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1064.4" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 0.23%)</title><rect x="1061.9" y="1011.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1064.9" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="1063.5" y="995.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1066.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.05%)</title><rect x="1064.1" y="995.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1067.1" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="1064.1" y="979.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1067.1" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (18 samples, 0.82%)</title><rect x="1064.6" y="1011.0" width="9.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1067.6" y="1022.0"></text>
</g>
<g>
<title>GrowableArray&lt;unsigned int&gt;::GrowableArray(Arena*, int, int, unsigned int const&amp;) (1 samples, 0.05%)</title><rect x="1068.9" y="995.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1071.9" y="1006.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (2 samples, 0.09%)</title><rect x="1069.4" y="995.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1072.4" y="1006.0"></text>
</g>
<g>
<title>Node::rematerialize() const (2 samples, 0.09%)</title><rect x="1070.5" y="995.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1073.5" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.05%)</title><rect x="1071.6" y="995.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1074.6" y="1006.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.05%)</title><rect x="1071.6" y="979.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1074.6" y="990.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.05%)</title><rect x="1071.6" y="963.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1074.6" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (2 samples, 0.09%)</title><rect x="1072.1" y="995.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1075.1" y="1006.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1072.1" y="979.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1075.1" y="990.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.05%)</title><rect x="1072.1" y="963.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1075.1" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.05%)</title><rect x="1072.6" y="979.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1075.6" y="990.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.05%)</title><rect x="1072.6" y="963.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1075.6" y="974.0"></text>
</g>
<g>
<title>PhiNode::PhiNode(Node*, Type const*, TypePtr const*, int, int, int, int) (1 samples, 0.05%)</title><rect x="1073.2" y="995.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1076.2" y="1006.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="1073.2" y="979.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1076.2" y="990.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.05%)</title><rect x="1073.7" y="995.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1076.7" y="1006.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.05%)</title><rect x="1073.7" y="979.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1076.7" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (33 samples, 1.50%)</title><rect x="1074.3" y="1011.0" width="17.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1077.3" y="1022.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.09%)</title><rect x="1075.3" y="995.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1078.3" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="1076.4" y="995.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1079.4" y="1006.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.05%)</title><rect x="1076.9" y="995.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1079.9" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (5 samples, 0.23%)</title><rect x="1077.5" y="995.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1080.5" y="1006.0"></text>
</g>
<g>
<title>MachIdealNode::rule() const (1 samples, 0.05%)</title><rect x="1078.5" y="979.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1081.5" y="990.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.05%)</title><rect x="1079.1" y="979.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1082.1" y="990.0"></text>
</g>
<g>
<title>decodeHeapOopNode::rule() const (1 samples, 0.05%)</title><rect x="1079.6" y="979.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1082.6" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::assign_high_score_to_immediate_copies(Block*, Node*, LRG&amp;, unsigned int, unsigned int) (1 samples, 0.05%)</title><rect x="1080.1" y="995.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1083.1" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (1 samples, 0.05%)</title><rect x="1080.7" y="995.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1083.7" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.05%)</title><rect x="1080.7" y="979.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1083.7" y="990.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.05%)</title><rect x="1080.7" y="963.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1083.7" y="974.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.05%)</title><rect x="1080.7" y="947.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1083.7" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (18 samples, 0.82%)</title><rect x="1081.2" y="995.0" width="9.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1084.2" y="1006.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (6 samples, 0.27%)</title><rect x="1082.8" y="979.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1085.8" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.05%)</title><rect x="1086.0" y="979.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1089.0" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.14%)</title><rect x="1086.6" y="979.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1089.6" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="1088.2" y="979.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1091.2" y="990.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (4 samples, 0.18%)</title><rect x="1088.7" y="979.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1091.7" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (2 samples, 0.09%)</title><rect x="1090.9" y="995.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1093.9" y="1006.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.09%)</title><rect x="1090.9" y="979.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1093.9" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (3 samples, 0.14%)</title><rect x="1091.9" y="1011.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1094.9" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.14%)</title><rect x="1091.9" y="995.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1094.9" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="1091.9" y="979.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1094.9" y="990.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (2 samples, 0.09%)</title><rect x="1092.5" y="979.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1095.5" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (14 samples, 0.64%)</title><rect x="1093.5" y="1011.0" width="7.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1096.5" y="1022.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (2 samples, 0.09%)</title><rect x="1096.8" y="995.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1099.8" y="1006.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.05%)</title><rect x="1097.8" y="995.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1100.8" y="1006.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (2 samples, 0.09%)</title><rect x="1098.4" y="995.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1101.4" y="1006.0"></text>
</g>
<g>
<title>RegMask::is_bound(unsigned int) const (2 samples, 0.09%)</title><rect x="1099.4" y="995.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1102.4" y="1006.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.05%)</title><rect x="1099.4" y="979.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1102.4" y="990.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.05%)</title><rect x="1100.0" y="979.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1103.0" y="990.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.05%)</title><rect x="1100.5" y="995.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1103.5" y="1006.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.05%)</title><rect x="1100.5" y="979.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1103.5" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.09%)</title><rect x="1101.0" y="1011.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.0" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (2 samples, 0.09%)</title><rect x="1101.0" y="995.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1104.0" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (12 samples, 0.54%)</title><rect x="1102.1" y="1011.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.1" y="1022.0"></text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.05%)</title><rect x="1104.3" y="995.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.3" y="1006.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (2 samples, 0.09%)</title><rect x="1104.8" y="995.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1107.8" y="1006.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1104.8" y="979.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1107.8" y="990.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1104.8" y="963.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1107.8" y="974.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1104.8" y="947.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1107.8" y="958.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1104.8" y="931.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1107.8" y="942.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.05%)</title><rect x="1104.8" y="915.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1107.8" y="926.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.05%)</title><rect x="1104.8" y="899.0" width="0.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1107.8" y="910.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.05%)</title><rect x="1104.8" y="883.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1107.8" y="894.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="1104.8" y="867.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1107.8" y="878.0"></text>
</g>
<g>
<title>small_malloc_should_clear (1 samples, 0.05%)</title><rect x="1104.8" y="851.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1107.8" y="862.0"></text>
</g>
<g>
<title>small_malloc_from_free_list (1 samples, 0.05%)</title><rect x="1104.8" y="835.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1107.8" y="846.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="1105.3" y="979.0" width="0.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1108.3" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.14%)</title><rect x="1105.9" y="995.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1108.9" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::may_be_copy_of_callee(Node*) const (1 samples, 0.05%)</title><rect x="1106.9" y="979.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1109.9" y="990.0"></text>
</g>
<g>
<title>RegMask::find_first_elem() const (2 samples, 0.09%)</title><rect x="1107.5" y="995.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1110.5" y="1006.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.05%)</title><rect x="1108.0" y="979.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1111.0" y="990.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (8 samples, 0.36%)</title><rect x="1108.5" y="1011.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1111.5" y="1022.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (8 samples, 0.36%)</title><rect x="1108.5" y="995.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.5" y="1006.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (8 samples, 0.36%)</title><rect x="1108.5" y="979.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1111.5" y="990.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.14%)</title><rect x="1108.5" y="963.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1111.5" y="974.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (2 samples, 0.09%)</title><rect x="1109.1" y="947.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1112.1" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.09%)</title><rect x="1110.2" y="963.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1113.2" y="974.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (3 samples, 0.14%)</title><rect x="1111.2" y="963.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1114.2" y="974.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (3 samples, 0.14%)</title><rect x="1111.2" y="947.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1114.2" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.09%)</title><rect x="1112.8" y="1011.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1115.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.09%)</title><rect x="1112.8" y="995.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1115.8" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="1113.4" y="979.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.4" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (4 samples, 0.18%)</title><rect x="1113.9" y="1011.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1116.9" y="1022.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.05%)</title><rect x="1113.9" y="995.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1116.9" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.05%)</title><rect x="1114.4" y="995.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.4" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.09%)</title><rect x="1115.0" y="995.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1118.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.09%)</title><rect x="1116.0" y="1011.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.0" y="1022.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.05%)</title><rect x="1116.0" y="995.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1119.0" y="1006.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="1116.6" y="995.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1119.6" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (13 samples, 0.59%)</title><rect x="1117.1" y="1011.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1120.1" y="1022.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1119.8" y="995.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.8" y="1006.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.09%)</title><rect x="1120.3" y="995.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1123.3" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.18%)</title><rect x="1121.4" y="995.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1124.4" y="1006.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.05%)</title><rect x="1121.9" y="979.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.9" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="1122.5" y="979.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1125.5" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="1123.0" y="979.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1126.0" y="990.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.05%)</title><rect x="1123.6" y="995.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.6" y="1006.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.05%)</title><rect x="1123.6" y="979.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.6" y="990.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.05%)</title><rect x="1124.1" y="1011.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1127.1" y="1022.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.05%)</title><rect x="1124.6" y="1011.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.6" y="1022.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.05%)</title><rect x="1124.6" y="995.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.6" y="1006.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.05%)</title><rect x="1124.6" y="979.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1127.6" y="990.0"></text>
</g>
<g>
<title>madvise (1 samples, 0.05%)</title><rect x="1124.6" y="963.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1127.6" y="974.0"></text>
</g>
<g>
<title>loadConPNode::ideal_Opcode() const (1 samples, 0.05%)</title><rect x="1125.2" y="1027.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.2" y="1038.0"></text>
</g>
<g>
<title>Compile::Optimize() (83 samples, 3.77%)</title><rect x="1125.7" y="1043.0" width="44.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.7" y="1054.0">Comp..</text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (15 samples, 0.68%)</title><rect x="1125.7" y="1027.0" width="8.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1128.7" y="1038.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (13 samples, 0.59%)</title><rect x="1125.7" y="1011.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.7" y="1022.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.09%)</title><rect x="1125.7" y="995.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.7" y="1006.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (2 samples, 0.09%)</title><rect x="1126.8" y="995.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.8" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.09%)</title><rect x="1126.8" y="979.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.8" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.09%)</title><rect x="1126.8" y="963.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.8" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.09%)</title><rect x="1126.8" y="947.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1129.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.09%)</title><rect x="1126.8" y="931.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.09%)</title><rect x="1126.8" y="915.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1129.8" y="926.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="1126.8" y="899.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.8" y="910.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.05%)</title><rect x="1126.8" y="883.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.8" y="894.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.05%)</title><rect x="1126.8" y="867.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.8" y="878.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.05%)</title><rect x="1126.8" y="851.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.8" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.05%)</title><rect x="1126.8" y="835.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.8" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.05%)</title><rect x="1126.8" y="819.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.8" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1126.8" y="803.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.8" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1126.8" y="787.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.8" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1126.8" y="771.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.8" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1126.8" y="755.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.8" y="766.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.05%)</title><rect x="1126.8" y="739.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.8" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="1126.8" y="723.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1129.8" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="1126.8" y="707.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.8" y="718.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.05%)</title><rect x="1126.8" y="691.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.8" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1127.3" y="899.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.3" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1127.3" y="883.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1127.3" y="867.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1127.3" y="851.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1127.3" y="835.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.3" y="846.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1127.3" y="819.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.3" y="830.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.05%)</title><rect x="1127.3" y="803.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.3" y="814.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="1127.3" y="787.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.3" y="798.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="1127.3" y="771.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.3" y="782.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.05%)</title><rect x="1127.3" y="755.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.3" y="766.0"></text>
</g>
<g>
<title>PCTableNode::hash() const (1 samples, 0.05%)</title><rect x="1127.3" y="739.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.3" y="750.0"></text>
</g>
<g>
<title>CatchNode::Opcode() const (1 samples, 0.05%)</title><rect x="1127.3" y="723.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1130.3" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.05%)</title><rect x="1127.8" y="995.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.8" y="1006.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (8 samples, 0.36%)</title><rect x="1128.4" y="995.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.4" y="1006.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (7 samples, 0.32%)</title><rect x="1128.4" y="979.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1131.4" y="990.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (5 samples, 0.23%)</title><rect x="1129.4" y="963.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1132.4" y="974.0"></text>
</g>
<g>
<title>Node_Array::map(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1130.0" y="947.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.0" y="958.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (3 samples, 0.14%)</title><rect x="1130.5" y="947.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.5" y="958.0"></text>
</g>
<g>
<title>Compile::update_dead_node_list(Unique_Node_List&amp;) (1 samples, 0.05%)</title><rect x="1132.1" y="979.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.1" y="990.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.05%)</title><rect x="1132.7" y="1011.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.7" y="1022.0"></text>
</g>
<g>
<title>Node::has_special_unique_user() const (1 samples, 0.05%)</title><rect x="1132.7" y="995.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.7" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.05%)</title><rect x="1133.2" y="1011.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.2" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.05%)</title><rect x="1133.2" y="995.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.2" y="1006.0"></text>
</g>
<g>
<title>TypeInt::narrow(Type const*) const (1 samples, 0.05%)</title><rect x="1133.2" y="979.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1136.2" y="990.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (31 samples, 1.41%)</title><rect x="1133.7" y="1027.0" width="16.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (31 samples, 1.41%)</title><rect x="1133.7" y="1011.0" width="16.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1136.7" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1133.7" y="995.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.7" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1133.7" y="979.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.7" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1133.7" y="963.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.7" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1133.7" y="947.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.7" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::replace_parallel_iv(IdealLoopTree*) (1 samples, 0.05%)</title><rect x="1133.7" y="931.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1136.7" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.05%)</title><rect x="1133.7" y="915.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.7" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.05%)</title><rect x="1133.7" y="899.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1136.7" y="910.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1133.7" y="883.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.7" y="894.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.05%)</title><rect x="1133.7" y="867.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.7" y="878.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.05%)</title><rect x="1133.7" y="851.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1136.7" y="862.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1133.7" y="835.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.7" y="846.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1133.7" y="819.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.7" y="830.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1133.7" y="803.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.7" y="814.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.05%)</title><rect x="1133.7" y="787.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1136.7" y="798.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1134.3" y="995.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.3" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1134.3" y="979.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.3" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1134.3" y="963.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.3" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1134.3" y="947.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.3" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.05%)</title><rect x="1134.3" y="931.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.3" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1134.8" y="995.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.8" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1134.8" y="979.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.8" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1134.8" y="963.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.8" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1134.8" y="947.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.8" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1134.8" y="931.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.8" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1134.8" y="915.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.8" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1134.8" y="899.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.8" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1134.8" y="883.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.8" y="894.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1134.8" y="867.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.8" y="878.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1134.8" y="851.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.8" y="862.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1134.8" y="835.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.8" y="846.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1134.8" y="819.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.8" y="830.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1134.8" y="803.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.8" y="814.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1134.8" y="787.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.8" y="798.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1134.8" y="771.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.8" y="782.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1134.8" y="755.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.8" y="766.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1134.8" y="739.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.8" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.05%)</title><rect x="1134.8" y="723.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.8" y="734.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.05%)</title><rect x="1134.8" y="707.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.8" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.05%)</title><rect x="1134.8" y="691.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1137.8" y="702.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.05%)</title><rect x="1135.3" y="995.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1138.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.14%)</title><rect x="1135.9" y="995.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.9" y="1006.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.05%)</title><rect x="1136.4" y="979.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.4" y="990.0"></text>
</g>
<g>
<title>NTarjan::setdepth(unsigned int, unsigned int*) (1 samples, 0.05%)</title><rect x="1136.9" y="979.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1139.9" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.05%)</title><rect x="1137.5" y="995.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (1 samples, 0.05%)</title><rect x="1137.5" y="979.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.5" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.05%)</title><rect x="1137.5" y="963.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1140.5" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.05%)</title><rect x="1137.5" y="947.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.5" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.05%)</title><rect x="1137.5" y="931.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.5" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (14 samples, 0.64%)</title><rect x="1138.0" y="995.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1141.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (13 samples, 0.59%)</title><rect x="1138.6" y="979.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1141.6" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.05%)</title><rect x="1139.1" y="963.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.1" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.05%)</title><rect x="1139.1" y="947.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.1" y="958.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.05%)</title><rect x="1139.1" y="931.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.1" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (9 samples, 0.41%)</title><rect x="1139.6" y="963.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.6" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (3 samples, 0.14%)</title><rect x="1139.6" y="947.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.6" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (3 samples, 0.14%)</title><rect x="1139.6" y="931.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.6" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.14%)</title><rect x="1139.6" y="915.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.6" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (3 samples, 0.14%)</title><rect x="1139.6" y="899.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.6" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.09%)</title><rect x="1140.2" y="883.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.2" y="894.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (2 samples, 0.09%)</title><rect x="1140.2" y="867.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1143.2" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (1 samples, 0.05%)</title><rect x="1141.2" y="947.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.2" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.05%)</title><rect x="1141.2" y="931.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.2" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.05%)</title><rect x="1141.2" y="915.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.2" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.05%)</title><rect x="1141.2" y="899.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.2" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (5 samples, 0.23%)</title><rect x="1141.8" y="947.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.8" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.09%)</title><rect x="1142.3" y="931.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.3" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.05%)</title><rect x="1143.4" y="931.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.4" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.05%)</title><rect x="1143.4" y="915.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.4" y="926.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.05%)</title><rect x="1143.4" y="899.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.4" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.05%)</title><rect x="1143.9" y="931.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.9" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.05%)</title><rect x="1144.5" y="963.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1147.5" y="974.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.05%)</title><rect x="1144.5" y="947.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.5" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.05%)</title><rect x="1145.0" y="963.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.0" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.05%)</title><rect x="1145.0" y="947.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.0" y="958.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.05%)</title><rect x="1145.0" y="931.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.0" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() (1 samples, 0.05%)</title><rect x="1145.5" y="995.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.05%)</title><rect x="1145.5" y="979.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.5" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.05%)</title><rect x="1145.5" y="963.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.5" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.09%)</title><rect x="1146.1" y="995.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.05%)</title><rect x="1146.6" y="979.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1149.6" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.05%)</title><rect x="1146.6" y="963.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.6" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.05%)</title><rect x="1146.6" y="947.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.6" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.05%)</title><rect x="1146.6" y="931.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.6" y="942.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.05%)</title><rect x="1146.6" y="915.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.6" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.23%)</title><rect x="1147.1" y="995.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.23%)</title><rect x="1147.1" y="979.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1150.1" y="990.0"></text>
</g>
<g>
<title>AddNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1147.1" y="963.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.1" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.05%)</title><rect x="1147.1" y="947.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.1" y="958.0"></text>
</g>
<g>
<title>AddNode::Identity(PhaseGVN*) (1 samples, 0.05%)</title><rect x="1147.1" y="931.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.1" y="942.0"></text>
</g>
<g>
<title>AddNode::Value(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="1147.7" y="963.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.7" y="974.0"></text>
</g>
<g>
<title>AddNode::add_of_identity(Type const*, Type const*) const (1 samples, 0.05%)</title><rect x="1147.7" y="947.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.7" y="958.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.05%)</title><rect x="1147.7" y="931.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.7" y="942.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.05%)</title><rect x="1147.7" y="915.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.7" y="926.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.05%)</title><rect x="1147.7" y="899.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.7" y="910.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.05%)</title><rect x="1148.2" y="963.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.2" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.05%)</title><rect x="1148.7" y="963.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.7" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.05%)</title><rect x="1148.7" y="947.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.7" y="958.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.05%)</title><rect x="1148.7" y="931.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.7" y="942.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1148.7" y="915.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.7" y="926.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.05%)</title><rect x="1148.7" y="899.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.7" y="910.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="1149.3" y="963.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.3" y="974.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.05%)</title><rect x="1149.8" y="995.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.8" y="1006.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.05%)</title><rect x="1149.8" y="979.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.8" y="990.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.05%)</title><rect x="1149.8" y="963.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.8" y="974.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.05%)</title><rect x="1149.8" y="947.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1152.8" y="958.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (1 samples, 0.05%)</title><rect x="1149.8" y="931.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1152.8" y="942.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (1 samples, 0.05%)</title><rect x="1149.8" y="915.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1152.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.05%)</title><rect x="1150.3" y="1027.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.3" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.05%)</title><rect x="1150.3" y="1011.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.3" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::add_call_node(CallNode*) (1 samples, 0.05%)</title><rect x="1150.3" y="995.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.3" y="1006.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.05%)</title><rect x="1150.3" y="979.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.3" y="990.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.05%)</title><rect x="1150.3" y="963.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.3" y="974.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.05%)</title><rect x="1150.3" y="947.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.3" y="958.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.05%)</title><rect x="1150.3" y="931.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.3" y="942.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.05%)</title><rect x="1150.3" y="915.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.3" y="926.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.09%)</title><rect x="1150.9" y="1027.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.9" y="1038.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.05%)</title><rect x="1150.9" y="1011.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.9" y="1022.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.05%)</title><rect x="1150.9" y="995.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.9" y="1006.0"></text>
</g>
<g>
<title>TypeAryPtr::make(TypePtr::PTR, ciObject*, TypeAry const*, ciKlass*, bool, int, int, TypePtr const*, int, bool) (1 samples, 0.05%)</title><rect x="1150.9" y="979.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.9" y="990.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.05%)</title><rect x="1150.9" y="963.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.9" y="974.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="1151.4" y="1011.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.4" y="1022.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.05%)</title><rect x="1152.0" y="1027.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.0" y="1038.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.05%)</title><rect x="1152.0" y="1011.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (24 samples, 1.09%)</title><rect x="1152.5" y="1027.0" width="12.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.5" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1152.5" y="1011.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.5" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1152.5" y="995.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.5" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1152.5" y="979.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.5" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1152.5" y="963.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.5" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1152.5" y="947.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.5" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1152.5" y="931.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.5" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1152.5" y="915.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.5" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1152.5" y="899.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.5" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1152.5" y="883.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.5" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.05%)</title><rect x="1152.5" y="867.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.5" y="878.0"></text>
</g>
<g>
<title>IdealLoopTree::record_for_igvn() (1 samples, 0.05%)</title><rect x="1152.5" y="851.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.5" y="862.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.05%)</title><rect x="1152.5" y="835.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.5" y="846.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.05%)</title><rect x="1152.5" y="819.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.5" y="830.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.05%)</title><rect x="1153.0" y="1011.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.05%)</title><rect x="1153.0" y="995.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl_helper(IdealLoopTree*, ProjNode*, ProjNode*, CountedLoopNode*, ConNode*, Invariance&amp;, Deoptimization::DeoptReason) (1 samples, 0.05%)</title><rect x="1153.0" y="979.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.0" y="990.0"></text>
</g>
<g>
<title>Invariance::clone(Node*, Node*) (1 samples, 0.05%)</title><rect x="1153.0" y="963.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.0" y="974.0"></text>
</g>
<g>
<title>Invariance::clone_nodes(Node*, Node*) (1 samples, 0.05%)</title><rect x="1153.0" y="947.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.0" y="958.0"></text>
</g>
<g>
<title>Invariance::clone_visit(Node*) (1 samples, 0.05%)</title><rect x="1153.0" y="931.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.0" y="942.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.05%)</title><rect x="1153.0" y="915.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.0" y="926.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="1153.0" y="899.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1156.0" y="910.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.05%)</title><rect x="1153.6" y="1011.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.6" y="1022.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.05%)</title><rect x="1154.1" y="1011.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (6 samples, 0.27%)</title><rect x="1154.6" y="1011.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.6" y="1022.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (3 samples, 0.14%)</title><rect x="1156.2" y="995.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (2 samples, 0.09%)</title><rect x="1156.8" y="979.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.8" y="990.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (2 samples, 0.09%)</title><rect x="1156.8" y="963.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.8" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.09%)</title><rect x="1157.8" y="1011.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.8" y="1022.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.05%)</title><rect x="1158.4" y="995.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 0.36%)</title><rect x="1158.9" y="1011.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (7 samples, 0.32%)</title><rect x="1159.5" y="995.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.14%)</title><rect x="1160.0" y="979.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.0" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (3 samples, 0.14%)</title><rect x="1160.0" y="963.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.0" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (3 samples, 0.14%)</title><rect x="1160.0" y="947.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.0" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.14%)</title><rect x="1160.0" y="931.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.0" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (3 samples, 0.14%)</title><rect x="1160.0" y="915.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.0" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (3 samples, 0.14%)</title><rect x="1160.0" y="899.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.0" y="910.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (2 samples, 0.09%)</title><rect x="1160.5" y="883.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.5" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.05%)</title><rect x="1161.6" y="979.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.6" y="990.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.05%)</title><rect x="1161.6" y="963.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.6" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.09%)</title><rect x="1162.1" y="979.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.1" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.09%)</title><rect x="1162.1" y="963.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.1" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.05%)</title><rect x="1163.2" y="1011.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.2" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.05%)</title><rect x="1163.7" y="1011.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.05%)</title><rect x="1163.7" y="995.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.7" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.05%)</title><rect x="1163.7" y="979.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.7" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.09%)</title><rect x="1164.3" y="1011.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.05%)</title><rect x="1164.3" y="995.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.3" y="1006.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1164.3" y="979.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.3" y="990.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.05%)</title><rect x="1164.3" y="963.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.3" y="974.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.05%)</title><rect x="1164.3" y="947.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.3" y="958.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1164.3" y="931.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.3" y="942.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="1164.3" y="915.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1167.3" y="926.0"></text>
</g>
<g>
<title>Unique_Node_List::pop() (1 samples, 0.05%)</title><rect x="1164.8" y="995.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.8" y="1006.0"></text>
</g>
<g>
<title>Node_List::size() const (1 samples, 0.05%)</title><rect x="1164.8" y="979.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.8" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 0.27%)</title><rect x="1165.3" y="1027.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 0.27%)</title><rect x="1165.3" y="1011.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.3" y="1022.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1165.9" y="995.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.9" y="1006.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1165.9" y="979.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.9" y="990.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.05%)</title><rect x="1165.9" y="963.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.9" y="974.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.05%)</title><rect x="1165.9" y="947.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.9" y="958.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.05%)</title><rect x="1165.9" y="931.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.9" y="942.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.05%)</title><rect x="1165.9" y="915.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.9" y="926.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.05%)</title><rect x="1166.4" y="995.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.4" y="1006.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.05%)</title><rect x="1166.4" y="979.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.4" y="990.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (1 samples, 0.05%)</title><rect x="1166.4" y="963.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.4" y="974.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.14%)</title><rect x="1167.0" y="995.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.05%)</title><rect x="1167.0" y="979.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.0" y="990.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.05%)</title><rect x="1167.0" y="963.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.0" y="974.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.05%)</title><rect x="1167.0" y="947.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.0" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.05%)</title><rect x="1167.5" y="979.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.5" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.05%)</title><rect x="1167.5" y="963.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.5" y="974.0"></text>
</g>
<g>
<title>BarrierSetC2::igvn_add_users_to_worklist(PhaseIterGVN*, Node*) const (1 samples, 0.05%)</title><rect x="1167.5" y="947.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.5" y="958.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="1168.0" y="979.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.0" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.05%)</title><rect x="1168.6" y="1027.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.6" y="1038.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.05%)</title><rect x="1168.6" y="1011.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.6" y="1022.0"></text>
</g>
<g>
<title>BarrierSetC2::obj_allocate(PhaseMacroExpand*, Node*, Node*, Node*, Node*, Node*&amp;, Node*&amp;, Node*&amp;, Node*&amp;, long) const (1 samples, 0.05%)</title><rect x="1168.6" y="995.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.6" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::set_eden_pointers(Node*&amp;, Node*&amp;) (1 samples, 0.05%)</title><rect x="1168.6" y="979.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.6" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::basic_plus_adr(Node*, Node*, Node*) (1 samples, 0.05%)</title><rect x="1168.6" y="963.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.6" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::register_new_node_with_optimizer(Node*, Node*) (1 samples, 0.05%)</title><rect x="1168.6" y="947.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.6" y="958.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.05%)</title><rect x="1168.6" y="931.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.6" y="942.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.05%)</title><rect x="1169.1" y="1027.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.1" y="1038.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.05%)</title><rect x="1169.1" y="1011.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.1" y="1022.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.05%)</title><rect x="1169.1" y="995.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.1" y="1006.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.05%)</title><rect x="1169.1" y="979.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.1" y="990.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.05%)</title><rect x="1169.1" y="963.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.1" y="974.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.05%)</title><rect x="1169.6" y="1027.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.6" y="1038.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.05%)</title><rect x="1169.6" y="1011.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.6" y="1022.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.05%)</title><rect x="1169.6" y="995.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.6" y="1006.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.05%)</title><rect x="1169.6" y="979.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1172.6" y="990.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (1 samples, 0.05%)</title><rect x="1169.6" y="963.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1172.6" y="974.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (1 samples, 0.05%)</title><rect x="1169.6" y="947.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1172.6" y="958.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.05%)</title><rect x="1170.2" y="1043.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.2" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (20 samples, 0.91%)</title><rect x="1170.7" y="1043.0" width="10.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.7" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (20 samples, 0.91%)</title><rect x="1170.7" y="1027.0" width="10.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.7" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (20 samples, 0.91%)</title><rect x="1170.7" y="1011.0" width="10.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (20 samples, 0.91%)</title><rect x="1170.7" y="995.0" width="10.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (20 samples, 0.91%)</title><rect x="1170.7" y="979.0" width="10.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.7" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (16 samples, 0.73%)</title><rect x="1170.7" y="963.0" width="8.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.7" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (16 samples, 0.73%)</title><rect x="1170.7" y="947.0" width="8.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (16 samples, 0.73%)</title><rect x="1170.7" y="931.0" width="8.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (16 samples, 0.73%)</title><rect x="1170.7" y="915.0" width="8.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (16 samples, 0.73%)</title><rect x="1170.7" y="899.0" width="8.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.7" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.50%)</title><rect x="1170.7" y="883.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.7" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.50%)</title><rect x="1170.7" y="867.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.45%)</title><rect x="1170.7" y="851.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.45%)</title><rect x="1170.7" y="835.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.36%)</title><rect x="1170.7" y="819.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.7" y="830.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="1170.7" y="803.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.7" y="814.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.05%)</title><rect x="1170.7" y="787.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.7" y="798.0"></text>
</g>
<g>
<title>InlineTree::build_inline_tree_for_callee(ciMethod*, JVMState*, int) (1 samples, 0.05%)</title><rect x="1170.7" y="771.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.7" y="782.0"></text>
</g>
<g>
<title>ciMethod::interpreter_call_site_count(int) (1 samples, 0.05%)</title><rect x="1170.7" y="755.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.7" y="766.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.05%)</title><rect x="1170.7" y="739.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.7" y="750.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.05%)</title><rect x="1170.7" y="723.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.7" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1171.2" y="803.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.2" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1171.2" y="787.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1171.2" y="771.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1171.2" y="755.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1171.2" y="739.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.2" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1171.2" y="723.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.2" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1171.2" y="707.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1171.2" y="691.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1171.2" y="675.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.2" y="686.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.05%)</title><rect x="1171.2" y="659.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.2" y="670.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.05%)</title><rect x="1171.2" y="643.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.2" y="654.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.05%)</title><rect x="1171.2" y="627.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.2" y="638.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.05%)</title><rect x="1171.2" y="611.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.2" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (6 samples, 0.27%)</title><rect x="1171.8" y="803.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.8" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.27%)</title><rect x="1171.8" y="787.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.8" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.27%)</title><rect x="1171.8" y="771.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.27%)</title><rect x="1171.8" y="755.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.27%)</title><rect x="1171.8" y="739.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.27%)</title><rect x="1171.8" y="723.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.8" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.27%)</title><rect x="1171.8" y="707.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.8" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.27%)</title><rect x="1171.8" y="691.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.27%)</title><rect x="1171.8" y="675.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.27%)</title><rect x="1171.8" y="659.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.27%)</title><rect x="1171.8" y="643.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.8" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.27%)</title><rect x="1171.8" y="627.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.8" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.27%)</title><rect x="1171.8" y="611.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.27%)</title><rect x="1171.8" y="595.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.27%)</title><rect x="1171.8" y="579.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.27%)</title><rect x="1171.8" y="563.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.8" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.09%)</title><rect x="1171.8" y="547.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.8" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.09%)</title><rect x="1171.8" y="531.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.09%)</title><rect x="1171.8" y="515.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.09%)</title><rect x="1171.8" y="499.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.09%)</title><rect x="1171.8" y="483.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.8" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.09%)</title><rect x="1171.8" y="467.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.8" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.09%)</title><rect x="1171.8" y="451.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.09%)</title><rect x="1171.8" y="435.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.09%)</title><rect x="1171.8" y="419.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1171.8" y="403.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.8" y="414.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="1171.8" y="387.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.8" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1171.8" y="371.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.8" y="382.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.05%)</title><rect x="1171.8" y="355.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.8" y="366.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(LinkInfo const&amp;) (1 samples, 0.05%)</title><rect x="1171.8" y="339.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.8" y="350.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.05%)</title><rect x="1171.8" y="323.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.8" y="334.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(LinkInfo const&amp;, Thread*) (1 samples, 0.05%)</title><rect x="1171.8" y="307.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.8" y="318.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.05%)</title><rect x="1171.8" y="291.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.8" y="302.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.05%)</title><rect x="1171.8" y="275.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.8" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.05%)</title><rect x="1171.8" y="259.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.8" y="270.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.05%)</title><rect x="1171.8" y="243.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.8" y="254.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.05%)</title><rect x="1171.8" y="227.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1174.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1172.3" y="403.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.3" y="414.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.05%)</title><rect x="1172.3" y="387.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.3" y="398.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.05%)</title><rect x="1172.3" y="371.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.3" y="382.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.05%)</title><rect x="1172.3" y="355.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.3" y="366.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.05%)</title><rect x="1172.3" y="339.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.3" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.18%)</title><rect x="1172.9" y="547.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.9" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.14%)</title><rect x="1172.9" y="531.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.9" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.14%)</title><rect x="1172.9" y="515.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.14%)</title><rect x="1172.9" y="499.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.14%)</title><rect x="1172.9" y="483.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.14%)</title><rect x="1172.9" y="467.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.9" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.14%)</title><rect x="1172.9" y="451.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.9" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.14%)</title><rect x="1172.9" y="435.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.9" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.14%)</title><rect x="1172.9" y="419.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.14%)</title><rect x="1172.9" y="403.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.14%)</title><rect x="1172.9" y="387.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.14%)</title><rect x="1172.9" y="371.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.9" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.09%)</title><rect x="1172.9" y="355.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.9" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.09%)</title><rect x="1172.9" y="339.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.09%)</title><rect x="1172.9" y="323.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.09%)</title><rect x="1172.9" y="307.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.09%)</title><rect x="1172.9" y="291.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.9" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1172.9" y="275.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.9" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1172.9" y="259.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1172.9" y="243.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1172.9" y="227.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.9" y="238.0"></text>
</g>
<g>
<title>Parse::set_parse_bci(int) (1 samples, 0.05%)</title><rect x="1172.9" y="211.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.9" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1173.4" y="275.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.4" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1173.4" y="259.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.4" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1173.4" y="243.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1173.4" y="227.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1173.4" y="211.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1173.4" y="195.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.4" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1173.4" y="179.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.4" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1173.4" y="163.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.4" y="174.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.05%)</title><rect x="1173.4" y="147.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.4" y="158.0"></text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.05%)</title><rect x="1173.4" y="131.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.4" y="142.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.05%)</title><rect x="1173.4" y="115.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.4" y="126.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1173.9" y="355.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.9" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1173.9" y="339.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.9" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1173.9" y="323.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1173.9" y="307.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1173.9" y="291.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1173.9" y="275.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.9" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1173.9" y="259.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.9" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1173.9" y="243.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1173.9" y="227.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1173.9" y="211.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.05%)</title><rect x="1173.9" y="195.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.05%)</title><rect x="1173.9" y="179.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.9" y="190.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.05%)</title><rect x="1173.9" y="163.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.9" y="174.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.05%)</title><rect x="1173.9" y="147.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.9" y="158.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.05%)</title><rect x="1173.9" y="131.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.9" y="142.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.05%)</title><rect x="1173.9" y="115.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.9" y="126.0"></text>
</g>
<g>
<title>IdealKit::AddP(Node*, Node*, Node*) (1 samples, 0.05%)</title><rect x="1173.9" y="99.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.9" y="110.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.05%)</title><rect x="1173.9" y="83.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.9" y="94.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1174.5" y="531.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.5" y="542.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="1174.5" y="515.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.5" y="526.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="1174.5" y="499.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.5" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1174.5" y="483.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.5" y="494.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.05%)</title><rect x="1174.5" y="467.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.5" y="478.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(LinkInfo const&amp;) (1 samples, 0.05%)</title><rect x="1174.5" y="451.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.5" y="462.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method(LinkInfo const&amp;, Thread*) (1 samples, 0.05%)</title><rect x="1174.5" y="435.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.5" y="446.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.05%)</title><rect x="1174.5" y="419.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.5" y="430.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.05%)</title><rect x="1174.5" y="403.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.05%)</title><rect x="1175.0" y="819.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.05%)</title><rect x="1175.0" y="803.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.0" y="814.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.05%)</title><rect x="1175.0" y="787.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.0" y="798.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.05%)</title><rect x="1175.0" y="771.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.0" y="782.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.05%)</title><rect x="1175.0" y="755.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.0" y="766.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.05%)</title><rect x="1175.0" y="739.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.0" y="750.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.05%)</title><rect x="1175.0" y="723.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.0" y="734.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.05%)</title><rect x="1175.0" y="707.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.0" y="718.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.05%)</title><rect x="1175.0" y="691.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.0" y="702.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.05%)</title><rect x="1175.0" y="675.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.0" y="686.0"></text>
</g>
<g>
<title>PhiNode::PhiNode(Node*, Type const*, TypePtr const*, int, int, int, int) (1 samples, 0.05%)</title><rect x="1175.0" y="659.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.0" y="670.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.05%)</title><rect x="1175.5" y="819.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.5" y="830.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.05%)</title><rect x="1176.1" y="851.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.1" y="862.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.05%)</title><rect x="1176.1" y="835.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.1" y="846.0"></text>
</g>
<g>
<title>ciReceiverTypeData::translate_receiver_data_from(ProfileData const*) (1 samples, 0.05%)</title><rect x="1176.1" y="819.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.1" y="830.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1176.1" y="803.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.1" y="814.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.23%)</title><rect x="1176.6" y="883.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.6" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.23%)</title><rect x="1176.6" y="867.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.6" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.23%)</title><rect x="1176.6" y="851.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.23%)</title><rect x="1176.6" y="835.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.23%)</title><rect x="1176.6" y="819.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.23%)</title><rect x="1176.6" y="803.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.6" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.23%)</title><rect x="1176.6" y="787.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.6" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.23%)</title><rect x="1176.6" y="771.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.23%)</title><rect x="1176.6" y="755.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.23%)</title><rect x="1176.6" y="739.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.23%)</title><rect x="1176.6" y="723.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.6" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.23%)</title><rect x="1176.6" y="707.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.6" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.23%)</title><rect x="1176.6" y="691.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.23%)</title><rect x="1176.6" y="675.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.23%)</title><rect x="1176.6" y="659.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.23%)</title><rect x="1176.6" y="643.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.6" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.14%)</title><rect x="1176.6" y="627.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.6" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.14%)</title><rect x="1176.6" y="611.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.14%)</title><rect x="1176.6" y="595.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.14%)</title><rect x="1176.6" y="579.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.14%)</title><rect x="1176.6" y="563.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.6" y="574.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="1176.6" y="547.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.6" y="558.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.05%)</title><rect x="1176.6" y="531.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.6" y="542.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.05%)</title><rect x="1176.6" y="515.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.6" y="526.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.05%)</title><rect x="1176.6" y="499.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.6" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.05%)</title><rect x="1176.6" y="483.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.6" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.05%)</title><rect x="1176.6" y="467.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.6" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1176.6" y="451.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.6" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1176.6" y="435.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.6" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1176.6" y="419.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.6" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.05%)</title><rect x="1176.6" y="403.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.6" y="414.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="1176.6" y="387.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.6" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1176.6" y="371.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.6" y="382.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.05%)</title><rect x="1176.6" y="355.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.6" y="366.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(LinkInfo const&amp;) (1 samples, 0.05%)</title><rect x="1176.6" y="339.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.6" y="350.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.05%)</title><rect x="1176.6" y="323.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.6" y="334.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(LinkInfo const&amp;, Thread*) (1 samples, 0.05%)</title><rect x="1176.6" y="307.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.6" y="318.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.05%)</title><rect x="1176.6" y="291.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.6" y="302.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.05%)</title><rect x="1176.6" y="275.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.6" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.05%)</title><rect x="1176.6" y="259.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.6" y="270.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.05%)</title><rect x="1176.6" y="243.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.6" y="254.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.05%)</title><rect x="1176.6" y="227.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1179.6" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.09%)</title><rect x="1177.1" y="547.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.1" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.09%)</title><rect x="1177.1" y="531.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.09%)</title><rect x="1177.1" y="515.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.09%)</title><rect x="1177.1" y="499.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.05%)</title><rect x="1177.1" y="483.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.05%)</title><rect x="1177.1" y="467.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.1" y="478.0"></text>
</g>
<g>
<title>GraphKit::make_constant_from_field(ciField*, Node*) (1 samples, 0.05%)</title><rect x="1177.1" y="451.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.1" y="462.0"></text>
</g>
<g>
<title>Type::make_constant_from_field(ciField*, ciInstance*, BasicType, bool) (1 samples, 0.05%)</title><rect x="1177.1" y="435.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.1" y="446.0"></text>
</g>
<g>
<title>ciField::constant_value_of(ciObject*) (1 samples, 0.05%)</title><rect x="1177.1" y="419.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.1" y="430.0"></text>
</g>
<g>
<title>ciInstance::field_value(ciField*) (1 samples, 0.05%)</title><rect x="1177.1" y="403.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="414.0"></text>
</g>
<g>
<title>ciInstance::field_value_impl(BasicType, int) (1 samples, 0.05%)</title><rect x="1177.1" y="387.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.1" y="398.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.05%)</title><rect x="1177.1" y="371.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.1" y="382.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_object(oopDesc*) (1 samples, 0.05%)</title><rect x="1177.1" y="355.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.1" y="366.0"></text>
</g>
<g>
<title>ciObject::ciObject(Handle) (1 samples, 0.05%)</title><rect x="1177.1" y="339.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.1" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::is_scavengable(oopDesc*) (1 samples, 0.05%)</title><rect x="1177.1" y="323.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.05%)</title><rect x="1177.7" y="483.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.7" y="494.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.05%)</title><rect x="1177.7" y="467.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.7" y="478.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.05%)</title><rect x="1177.7" y="451.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.7" y="462.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.05%)</title><rect x="1177.7" y="435.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.7" y="446.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.05%)</title><rect x="1177.7" y="419.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.7" y="430.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.05%)</title><rect x="1177.7" y="403.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.7" y="414.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.05%)</title><rect x="1177.7" y="387.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.7" y="398.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.05%)</title><rect x="1177.7" y="371.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.7" y="382.0"></text>
</g>
<g>
<title>ciBytecodeStream::next() (1 samples, 0.05%)</title><rect x="1177.7" y="355.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.7" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.09%)</title><rect x="1178.2" y="627.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.2" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.09%)</title><rect x="1178.2" y="611.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.2" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.09%)</title><rect x="1178.2" y="595.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.09%)</title><rect x="1178.2" y="579.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.09%)</title><rect x="1178.2" y="563.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.09%)</title><rect x="1178.2" y="547.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.2" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.09%)</title><rect x="1178.2" y="531.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.2" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.09%)</title><rect x="1178.2" y="515.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.2" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.09%)</title><rect x="1178.2" y="499.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.09%)</title><rect x="1178.2" y="483.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.09%)</title><rect x="1178.2" y="467.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.09%)</title><rect x="1178.2" y="451.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.2" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.09%)</title><rect x="1178.2" y="435.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.2" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.09%)</title><rect x="1178.2" y="419.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.09%)</title><rect x="1178.2" y="403.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.09%)</title><rect x="1178.2" y="387.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1178.2" y="371.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.2" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1178.2" y="355.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.2" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1178.2" y="339.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1178.2" y="323.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1178.2" y="307.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1178.2" y="291.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.2" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1178.2" y="275.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.2" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1178.2" y="259.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1178.2" y="243.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1178.2" y="227.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1178.2" y="211.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.2" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1178.2" y="195.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.2" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1178.2" y="179.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1178.2" y="163.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1178.2" y="147.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.05%)</title><rect x="1178.2" y="131.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.2" y="142.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.05%)</title><rect x="1178.2" y="115.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.2" y="126.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.05%)</title><rect x="1178.2" y="99.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.2" y="110.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1178.2" y="83.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.2" y="94.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.05%)</title><rect x="1178.2" y="67.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.2" y="78.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.05%)</title><rect x="1178.2" y="51.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.2" y="62.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.05%)</title><rect x="1178.7" y="371.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.7" y="382.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.05%)</title><rect x="1178.7" y="355.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.7" y="366.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.05%)</title><rect x="1178.7" y="339.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.7" y="350.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.05%)</title><rect x="1178.7" y="323.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.7" y="334.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.05%)</title><rect x="1178.7" y="307.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.7" y="318.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.05%)</title><rect x="1178.7" y="291.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.7" y="302.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.05%)</title><rect x="1178.7" y="275.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.7" y="286.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.05%)</title><rect x="1178.7" y="259.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.7" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.18%)</title><rect x="1179.3" y="963.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.3" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.18%)</title><rect x="1179.3" y="947.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.3" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.18%)</title><rect x="1179.3" y="931.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.18%)</title><rect x="1179.3" y="915.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.18%)</title><rect x="1179.3" y="899.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.18%)</title><rect x="1179.3" y="883.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.3" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.18%)</title><rect x="1179.3" y="867.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.3" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.18%)</title><rect x="1179.3" y="851.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.18%)</title><rect x="1179.3" y="835.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.18%)</title><rect x="1179.3" y="819.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.18%)</title><rect x="1179.3" y="803.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.3" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.18%)</title><rect x="1179.3" y="787.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.3" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.18%)</title><rect x="1179.3" y="771.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.18%)</title><rect x="1179.3" y="755.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.18%)</title><rect x="1179.3" y="739.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.18%)</title><rect x="1179.3" y="723.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.3" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1179.3" y="707.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.3" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1179.3" y="691.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1179.3" y="675.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1179.3" y="659.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1179.3" y="643.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.3" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1179.3" y="627.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.3" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1179.3" y="611.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1179.3" y="595.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1179.3" y="579.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1179.3" y="563.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.3" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1179.3" y="547.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.3" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1179.3" y="531.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1179.3" y="515.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1179.3" y="499.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1179.3" y="483.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.3" y="494.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1179.3" y="467.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.3" y="478.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.05%)</title><rect x="1179.3" y="451.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.3" y="462.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_arraycopy() (1 samples, 0.05%)</title><rect x="1179.3" y="435.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.3" y="446.0"></text>
</g>
<g>
<title>ArrayCopyNode::connect_outputs(GraphKit*) (1 samples, 0.05%)</title><rect x="1179.3" y="419.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.3" y="430.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="1179.3" y="403.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.3" y="414.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="1179.3" y="387.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.3" y="398.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.05%)</title><rect x="1179.3" y="371.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.3" y="382.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.05%)</title><rect x="1179.3" y="355.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.3" y="366.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (1 samples, 0.05%)</title><rect x="1179.3" y="339.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.3" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.14%)</title><rect x="1179.8" y="707.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.8" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.14%)</title><rect x="1179.8" y="691.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.8" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.14%)</title><rect x="1179.8" y="675.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.14%)</title><rect x="1179.8" y="659.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.14%)</title><rect x="1179.8" y="643.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.14%)</title><rect x="1179.8" y="627.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.8" y="638.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.05%)</title><rect x="1179.8" y="611.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.8" y="622.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.05%)</title><rect x="1179.8" y="595.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.8" y="606.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.05%)</title><rect x="1179.8" y="579.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.8" y="590.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.05%)</title><rect x="1179.8" y="563.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.8" y="574.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.05%)</title><rect x="1179.8" y="547.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.8" y="558.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::BasicBlock(MethodLiveness*, int, int) (1 samples, 0.05%)</title><rect x="1179.8" y="531.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.8" y="542.0"></text>
</g>
<g>
<title>ArenaBitMap::ArenaBitMap(Arena*, unsigned long) (1 samples, 0.05%)</title><rect x="1179.8" y="515.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.8" y="526.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1179.8" y="499.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.8" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.09%)</title><rect x="1180.4" y="611.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.4" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.09%)</title><rect x="1180.4" y="595.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.4" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.09%)</title><rect x="1180.4" y="579.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1180.4" y="563.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1180.4" y="547.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1180.4" y="531.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.4" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1180.4" y="515.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.4" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1180.4" y="499.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1180.4" y="483.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1180.4" y="467.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1180.4" y="451.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1180.4" y="435.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.4" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1180.4" y="419.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1180.4" y="403.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1180.4" y="387.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1180.4" y="371.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.4" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1180.4" y="355.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.4" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1180.4" y="339.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1180.4" y="323.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1180.4" y="307.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1180.4" y="291.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.4" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1180.4" y="275.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.4" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1180.4" y="259.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1180.4" y="243.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1180.4" y="227.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1180.4" y="211.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.4" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1180.4" y="195.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.4" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1180.4" y="179.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1180.4" y="163.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1180.4" y="147.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1180.4" y="131.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.4" y="142.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1180.4" y="115.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.4" y="126.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1180.4" y="99.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.4" y="110.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.05%)</title><rect x="1180.4" y="83.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.4" y="94.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="1180.4" y="67.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.4" y="78.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1180.4" y="51.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.4" y="62.0"></text>
</g>
<g>
<title>Node::nonnull_req() const (1 samples, 0.05%)</title><rect x="1180.4" y="35.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.4" y="46.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.05%)</title><rect x="1180.9" y="563.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="574.0"></text>
</g>
<g>
<title>GraphKit::use_exception_state(SafePointNode*) (1 samples, 0.05%)</title><rect x="1180.9" y="547.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.9" y="558.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="1180.9" y="531.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.9" y="542.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="1180.9" y="515.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.9" y="526.0"></text>
</g>
<g>
<title>TypePtr::empty() const (1 samples, 0.05%)</title><rect x="1180.9" y="499.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.9" y="510.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.05%)</title><rect x="1181.4" y="1043.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.4" y="1054.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.05%)</title><rect x="1181.4" y="1027.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.4" y="1038.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.05%)</title><rect x="1182.0" y="1075.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.0" y="1086.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.05%)</title><rect x="1182.0" y="1059.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.0" y="1070.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.05%)</title><rect x="1182.0" y="1043.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.0" y="1054.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.05%)</title><rect x="1182.0" y="1027.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.0" y="1038.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.05%)</title><rect x="1182.0" y="1011.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.0" y="1022.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.05%)</title><rect x="1182.0" y="995.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.0" y="1006.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.05%)</title><rect x="1182.0" y="979.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.0" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.05%)</title><rect x="1182.0" y="963.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.0" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.05%)</title><rect x="1182.0" y="947.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.0" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.05%)</title><rect x="1182.0" y="931.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.0" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.05%)</title><rect x="1182.0" y="915.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.0" y="926.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.05%)</title><rect x="1182.0" y="899.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.0" y="910.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call_or_null(Klass*, LinkInfo const&amp;) (1 samples, 0.05%)</title><rect x="1182.0" y="883.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.0" y="894.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call(CallInfo&amp;, Handle, Klass*, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.05%)</title><rect x="1182.0" y="867.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.0" y="878.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.05%)</title><rect x="1182.0" y="851.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.0" y="862.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.05%)</title><rect x="1182.0" y="835.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.0" y="846.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.05%)</title><rect x="1182.0" y="819.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.0" y="830.0"></text>
</g>
<g>
<title>SignatureStream::next() (1 samples, 0.05%)</title><rect x="1182.0" y="803.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.0" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.05%)</title><rect x="1182.5" y="1075.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.5" y="1086.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1182.5" y="1059.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.5" y="1070.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1182.5" y="1043.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.5" y="1054.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1182.5" y="1027.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.5" y="1038.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.05%)</title><rect x="1182.5" y="1011.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.5" y="1022.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.05%)</title><rect x="1182.5" y="995.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.5" y="1006.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.05%)</title><rect x="1182.5" y="979.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.5" y="990.0"></text>
</g>
<g>
<title>os::current_thread_id() (1 samples, 0.05%)</title><rect x="1182.5" y="963.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.5" y="974.0"></text>
</g>
<g>
<title>pthread_mach_thread_np (1 samples, 0.05%)</title><rect x="1182.5" y="947.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1185.5" y="958.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.05%)</title><rect x="1183.0" y="1091.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.0" y="1102.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::is_method_profiled(Method*) (1 samples, 0.05%)</title><rect x="1183.0" y="1075.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.0" y="1086.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (3 samples, 0.14%)</title><rect x="1183.6" y="1107.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.6" y="1118.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (3 samples, 0.14%)</title><rect x="1183.6" y="1091.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.6" y="1102.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (3 samples, 0.14%)</title><rect x="1183.6" y="1075.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.6" y="1086.0"></text>
</g>
<g>
<title>NMethodSweeper::process_compiled_method(CompiledMethod*) (2 samples, 0.09%)</title><rect x="1183.6" y="1059.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.6" y="1070.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches(bool) (1 samples, 0.05%)</title><rect x="1183.6" y="1043.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.6" y="1054.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches_impl(bool, bool) (1 samples, 0.05%)</title><rect x="1183.6" y="1027.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.6" y="1038.0"></text>
</g>
<g>
<title>RelocIterator::initialize(CompiledMethod*, unsigned char*, unsigned char*) (1 samples, 0.05%)</title><rect x="1183.6" y="1011.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.6" y="1022.0"></text>
</g>
<g>
<title>nmethod::consts_end() const (1 samples, 0.05%)</title><rect x="1183.6" y="995.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.6" y="1006.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_flush(nmethod*) (1 samples, 0.05%)</title><rect x="1184.1" y="1043.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.1" y="1054.0"></text>
</g>
<g>
<title>nmethod::total_size() const (1 samples, 0.05%)</title><rect x="1184.6" y="1059.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.6" y="1070.0"></text>
</g>
<g>
<title>nmethod::consts_begin() const (1 samples, 0.05%)</title><rect x="1184.6" y="1043.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.6" y="1054.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (2 samples, 0.09%)</title><rect x="1185.2" y="1107.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.2" y="1118.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2 samples, 0.09%)</title><rect x="1185.2" y="1091.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.2" y="1102.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 0.09%)</title><rect x="1185.2" y="1075.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.2" y="1086.0"></text>
</g>
<g>
<title>JvmtiCompiledMethodLoadEventMark::JvmtiCompiledMethodLoadEventMark(JavaThread*, nmethod*, void*) (1 samples, 0.05%)</title><rect x="1185.2" y="1059.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.2" y="1070.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.05%)</title><rect x="1185.2" y="1043.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.2" y="1054.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.05%)</title><rect x="1185.7" y="1059.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1188.7" y="1070.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.05%)</title><rect x="1185.7" y="1043.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.7" y="1054.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.05%)</title><rect x="1185.7" y="1027.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.7" y="1038.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1185.7" y="1011.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.7" y="1022.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.05%)</title><rect x="1185.7" y="995.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.7" y="1006.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.14%)</title><rect x="1186.2" y="1139.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.2" y="1150.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.14%)</title><rect x="1186.2" y="1123.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.2" y="1134.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (3 samples, 0.14%)</title><rect x="1186.2" y="1107.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.2" y="1118.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (3 samples, 0.14%)</title><rect x="1186.2" y="1091.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.2" y="1102.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (2 samples, 0.09%)</title><rect x="1186.2" y="1075.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.2" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.09%)</title><rect x="1186.2" y="1059.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.2" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_epilogue(bool) (1 samples, 0.05%)</title><rect x="1186.2" y="1043.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.2" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::resize_all_tlabs() (1 samples, 0.05%)</title><rect x="1186.2" y="1027.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.2" y="1038.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::resize() (1 samples, 0.05%)</title><rect x="1186.2" y="1011.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.2" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (1 samples, 0.05%)</title><rect x="1186.8" y="1043.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.8" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::merge_per_thread_state_info(G1ParScanThreadStateSet*) (1 samples, 0.05%)</title><rect x="1186.8" y="1027.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.8" y="1038.0"></text>
</g>
<g>
<title>G1ParScanThreadStateSet::flush() (1 samples, 0.05%)</title><rect x="1186.8" y="1011.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.8" y="1022.0"></text>
</g>
<g>
<title>G1ParScanThreadState::~G1ParScanThreadState() (1 samples, 0.05%)</title><rect x="1186.8" y="995.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.8" y="1006.0"></text>
</g>
<g>
<title>G1ParScanThreadState::~G1ParScanThreadState() (1 samples, 0.05%)</title><rect x="1186.8" y="979.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.8" y="990.0"></text>
</g>
<g>
<title>free (1 samples, 0.05%)</title><rect x="1186.8" y="963.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1189.8" y="974.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.05%)</title><rect x="1186.8" y="947.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1189.8" y="958.0"></text>
</g>
<g>
<title>VM_RevokeBias::doit() (1 samples, 0.05%)</title><rect x="1187.3" y="1075.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.3" y="1086.0"></text>
</g>
<g>
<title>revoke_bias(oopDesc*, bool, bool, JavaThread*, JavaThread**) (1 samples, 0.05%)</title><rect x="1187.3" y="1059.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1190.3" y="1070.0"></text>
</g>
<g>
<title>get_or_compute_monitor_info(JavaThread*) (1 samples, 0.05%)</title><rect x="1187.3" y="1043.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1190.3" y="1054.0"></text>
</g>
<g>
<title>vframe::java_sender() const (1 samples, 0.05%)</title><rect x="1187.3" y="1027.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.3" y="1038.0"></text>
</g>
<g>
<title>vframe::sender() const (1 samples, 0.05%)</title><rect x="1187.3" y="1011.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.3" y="1022.0"></text>
</g>
<g>
<title>vframe::new_vframe(frame const*, RegisterMap const*, JavaThread*) (1 samples, 0.05%)</title><rect x="1187.3" y="995.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.3" y="1006.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(RegisterMap const*) (1 samples, 0.05%)</title><rect x="1187.3" y="979.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.3" y="990.0"></text>
</g>
<g>
<title>WatcherThread::run() (4 samples, 0.18%)</title><rect x="1187.9" y="1139.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.9" y="1150.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (4 samples, 0.18%)</title><rect x="1187.9" y="1123.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.9" y="1134.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.14%)</title><rect x="1187.9" y="1107.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.9" y="1118.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.14%)</title><rect x="1187.9" y="1091.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.9" y="1102.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.14%)</title><rect x="1187.9" y="1075.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.9" y="1086.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.14%)</title><rect x="1187.9" y="1059.0" width="1.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1190.9" y="1070.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.05%)</title><rect x="1189.5" y="1107.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.5" y="1118.0"></text>
</g>
</g>
</svg>
