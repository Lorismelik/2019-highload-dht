<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="853"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="853"> </text>
<g id="frames">
<g>
<title>all (2,879 samples, 100.00%)</title><rect x="10.0" y="819.0" width="1180.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="13.0" y="830.0">all</text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="803.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (2 samples, 0.07%)</title><rect x="10.4" y="803.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.4" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::rethrow_C(oopDesc*, JavaThread*, unsigned char*) (3 samples, 0.10%)</title><rect x="11.2" y="803.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.2" y="814.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (125 samples, 4.34%)</title><rect x="12.5" y="803.0" width="51.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="15.5" y="814.0">Share..</text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (123 samples, 4.27%)</title><rect x="12.9" y="787.0" width="50.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="15.9" y="798.0">Objec..</text>
</g>
<g>
<title>JavaThreadBlockedOnMonitorEnterState::JavaThreadBlockedOnMonitorEnterState(JavaThread*, ObjectMonitor*) (2 samples, 0.07%)</title><rect x="13.3" y="771.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="16.3" y="782.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*) (1 samples, 0.03%)</title><rect x="13.3" y="755.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="16.3" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.03%)</title><rect x="13.7" y="755.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="16.7" y="766.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (24 samples, 0.83%)</title><rect x="14.1" y="771.0" width="9.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="17.1" y="782.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.07%)</title><rect x="14.1" y="755.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="17.1" y="766.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (7 samples, 0.24%)</title><rect x="14.9" y="755.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="17.9" y="766.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (6 samples, 0.21%)</title><rect x="15.3" y="739.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="18.3" y="750.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="17.8" y="755.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="20.8" y="766.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (13 samples, 0.45%)</title><rect x="18.2" y="755.0" width="5.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="21.2" y="766.0"></text>
</g>
<g>
<title>__psynch_cvwait (12 samples, 0.42%)</title><rect x="18.2" y="739.0" width="4.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="21.2" y="750.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="23.1" y="739.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="26.1" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="23.5" y="755.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="26.5" y="766.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (22 samples, 0.76%)</title><rect x="23.9" y="771.0" width="9.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="26.9" y="782.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (73 samples, 2.54%)</title><rect x="33.0" y="771.0" width="29.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="36.0" y="782.0">Ob..</text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (49 samples, 1.70%)</title><rect x="42.8" y="755.0" width="20.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="45.8" y="766.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="62.9" y="771.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="65.9" y="782.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="63.3" y="787.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="66.3" y="798.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="63.3" y="771.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="66.3" y="782.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="63.7" y="803.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="66.7" y="814.0"></text>
</g>
<g>
<title>ThreadInVMfromJava::~ThreadInVMfromJava() (1 samples, 0.03%)</title><rect x="64.1" y="803.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="67.1" y="814.0"></text>
</g>
<g>
<title>[not_walkable] (17 samples, 0.59%)</title><rect x="64.5" y="803.0" width="7.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="67.5" y="814.0"></text>
</g>
<g>
<title>[not_walkable_Java] (12 samples, 0.42%)</title><rect x="71.5" y="803.0" width="4.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="74.5" y="814.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (3 samples, 0.10%)</title><rect x="71.5" y="787.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="74.5" y="798.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="72.7" y="787.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="75.7" y="798.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (8 samples, 0.28%)</title><rect x="73.1" y="787.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="76.1" y="798.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="74.8" y="771.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="77.8" y="782.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.03%)</title><rect x="74.8" y="755.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="77.8" y="766.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (3 samples, 0.10%)</title><rect x="75.2" y="771.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="78.2" y="782.0"></text>
</g>
<g>
<title>[unknown_Java] (23 samples, 0.80%)</title><rect x="76.4" y="803.0" width="9.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="79.4" y="814.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (12 samples, 0.42%)</title><rect x="80.5" y="787.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="83.5" y="798.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (12 samples, 0.42%)</title><rect x="80.5" y="771.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="83.5" y="782.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (7 samples, 0.24%)</title><rect x="80.5" y="755.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="83.5" y="766.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (5 samples, 0.17%)</title><rect x="83.4" y="755.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="86.4" y="766.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (5 samples, 0.17%)</title><rect x="83.4" y="739.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="86.4" y="750.0"></text>
</g>
<g>
<title>nmethod::exception_begin() const (1 samples, 0.03%)</title><rect x="85.4" y="787.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="88.4" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,550 samples, 53.84%)</title><rect x="85.8" y="803.0" width="635.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="88.8" y="814.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,550 samples, 53.84%)</title><rect x="85.8" y="787.0" width="635.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="88.8" y="798.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,550 samples, 53.84%)</title><rect x="85.8" y="771.0" width="635.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="88.8" y="782.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.07%)</title><rect x="86.6" y="755.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="89.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.07%)</title><rect x="86.6" y="739.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="89.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (2 samples, 0.07%)</title><rect x="86.6" y="723.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="89.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.07%)</title><rect x="86.6" y="707.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="89.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (877 samples, 30.46%)</title><rect x="87.5" y="755.0" width="359.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="90.5" y="766.0">java/util/concurrent/ThreadPoolExecutor.getTask</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (872 samples, 30.29%)</title><rect x="89.1" y="739.0" width="357.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="92.1" y="750.0">java/util/concurrent/LinkedBlockingQueue.take</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (794 samples, 27.58%)</title><rect x="89.1" y="723.0" width="325.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="92.1" y="734.0">java/util/concurrent/locks/AbstractQueuedSyn..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (7 samples, 0.24%)</title><rect x="89.1" y="707.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="92.1" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="91.6" y="691.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="94.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (8 samples, 0.28%)</title><rect x="92.0" y="707.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="95.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (6 samples, 0.21%)</title><rect x="95.3" y="707.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="98.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (5 samples, 0.17%)</title><rect x="95.7" y="691.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="98.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (5 samples, 0.17%)</title><rect x="95.7" y="675.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="98.7" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (5 samples, 0.17%)</title><rect x="95.7" y="659.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="98.7" y="670.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (5 samples, 0.17%)</title><rect x="95.7" y="643.0" width="2.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="98.7" y="654.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (5 samples, 0.17%)</title><rect x="95.7" y="627.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="98.7" y="638.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.17%)</title><rect x="95.7" y="611.0" width="2.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="98.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (32 samples, 1.11%)</title><rect x="97.7" y="707.0" width="13.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="100.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (32 samples, 1.11%)</title><rect x="97.7" y="691.0" width="13.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="100.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (29 samples, 1.01%)</title><rect x="97.7" y="675.0" width="11.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="100.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (28 samples, 0.97%)</title><rect x="98.1" y="659.0" width="11.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="101.1" y="670.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (28 samples, 0.97%)</title><rect x="98.1" y="643.0" width="11.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="101.1" y="654.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (27 samples, 0.94%)</title><rect x="98.5" y="627.0" width="11.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="101.5" y="638.0"></text>
</g>
<g>
<title>HandleMarkCleaner::HandleMarkCleaner(Thread*) (1 samples, 0.03%)</title><rect x="98.9" y="611.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="101.9" y="622.0"></text>
</g>
<g>
<title>__psynch_cvsignal (24 samples, 0.83%)</title><rect x="99.4" y="611.0" width="9.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="102.4" y="622.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="109.2" y="611.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="112.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.10%)</title><rect x="109.6" y="675.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="112.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.03%)</title><rect x="110.8" y="707.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="113.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (740 samples, 25.70%)</title><rect x="111.2" y="707.0" width="303.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="114.2" y="718.0">java/util/concurrent/locks/LockSupport.park</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (740 samples, 25.70%)</title><rect x="111.2" y="691.0" width="303.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="114.2" y="702.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>EventThreadPark::EventThreadPark(EventStartTime) (1 samples, 0.03%)</title><rect x="119.8" y="675.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="122.8" y="686.0"></text>
</g>
<g>
<title>HandleMark::push() (1 samples, 0.03%)</title><rect x="120.3" y="675.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="123.3" y="686.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::set_thread_status(java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="120.7" y="675.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="123.7" y="686.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*) (1 samples, 0.03%)</title><rect x="121.1" y="675.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="124.1" y="686.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (713 samples, 24.77%)</title><rect x="121.5" y="675.0" width="292.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="124.5" y="686.0">Unsafe_Park(JNIEnv_*, _jobject*, unsign..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.14%)</title><rect x="122.3" y="659.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="125.3" y="670.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.03%)</title><rect x="123.5" y="643.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="126.5" y="654.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (1 samples, 0.03%)</title><rect x="123.9" y="659.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="126.9" y="670.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.03%)</title><rect x="124.4" y="659.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="127.4" y="670.0"></text>
</g>
<g>
<title>JavaThread::is_suspend_after_native() const (1 samples, 0.03%)</title><rect x="124.8" y="659.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="127.8" y="670.0"></text>
</g>
<g>
<title>JavaThread::parker() (3 samples, 0.10%)</title><rect x="125.2" y="659.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="128.2" y="670.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (2 samples, 0.07%)</title><rect x="126.4" y="659.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="129.4" y="670.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (5 samples, 0.17%)</title><rect x="127.2" y="659.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="130.2" y="670.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (4 samples, 0.14%)</title><rect x="127.2" y="643.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="130.2" y="654.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (3 samples, 0.10%)</title><rect x="127.6" y="627.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="130.6" y="638.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (3 samples, 0.10%)</title><rect x="127.6" y="611.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="130.6" y="622.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.03%)</title><rect x="127.6" y="595.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="130.6" y="606.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.03%)</title><rect x="128.0" y="595.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="131.0" y="606.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="128.5" y="595.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="131.5" y="606.0"></text>
</g>
<g>
<title>int Atomic::load&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="128.5" y="579.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="131.5" y="590.0"></text>
</g>
<g>
<title>int Atomic::PlatformLoad&lt;4ul&gt;::operator()&lt;int&gt;(int const volatile*) const (1 samples, 0.03%)</title><rect x="128.5" y="563.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="131.5" y="574.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="128.9" y="643.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="131.9" y="654.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (12 samples, 0.42%)</title><rect x="129.3" y="659.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="132.3" y="670.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (6 samples, 0.21%)</title><rect x="129.7" y="643.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="132.7" y="654.0"></text>
</g>
<g>
<title>JavaThread::threadObj() const (1 samples, 0.03%)</title><rect x="130.1" y="627.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="133.1" y="638.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::is_alive() (1 samples, 0.03%)</title><rect x="130.5" y="627.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="133.5" y="638.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::save_old_state(JavaThread*) (1 samples, 0.03%)</title><rect x="130.9" y="627.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="133.9" y="638.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.07%)</title><rect x="131.3" y="627.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="134.3" y="638.0"></text>
</g>
<g>
<title>ThreadService::is_thread_monitoring_contention() (2 samples, 0.07%)</title><rect x="132.1" y="643.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="135.1" y="654.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (3 samples, 0.10%)</title><rect x="133.0" y="643.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="136.0" y="654.0"></text>
</g>
<g>
<title>ThreadStatistics::check_and_reset_count() (1 samples, 0.03%)</title><rect x="133.8" y="627.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="136.8" y="638.0"></text>
</g>
<g>
<title>JavaThreadParkedState::~JavaThreadParkedState() (1 samples, 0.03%)</title><rect x="134.2" y="659.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="137.2" y="670.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="134.6" y="659.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="137.6" y="670.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (664 samples, 23.06%)</title><rect x="135.0" y="659.0" width="272.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="138.0" y="670.0">Parker::park(bool, long)</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.21%)</title><rect x="137.9" y="643.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="140.9" y="654.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.03%)</title><rect x="138.3" y="627.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="141.3" y="638.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.07%)</title><rect x="138.7" y="627.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="141.7" y="638.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.07%)</title><rect x="139.5" y="627.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="142.5" y="638.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.03%)</title><rect x="140.3" y="643.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="143.3" y="654.0"></text>
</g>
<g>
<title>__psynch_cvwait (633 samples, 21.99%)</title><rect x="140.7" y="643.0" width="259.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="143.7" y="654.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (10 samples, 0.35%)</title><rect x="400.2" y="643.0" width="4.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="403.2" y="654.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (2 samples, 0.07%)</title><rect x="403.5" y="627.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="406.5" y="638.0"></text>
</g>
<g>
<title>_pthread_testcancel (3 samples, 0.10%)</title><rect x="404.3" y="643.0" width="1.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="407.3" y="654.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.03%)</title><rect x="405.5" y="643.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="408.5" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.10%)</title><rect x="405.9" y="643.0" width="1.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="408.9" y="654.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.07%)</title><rect x="407.2" y="659.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="410.2" y="670.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.03%)</title><rect x="408.0" y="659.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="411.0" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (5 samples, 0.17%)</title><rect x="408.4" y="659.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="411.4" y="670.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.14%)</title><rect x="408.8" y="643.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="411.8" y="654.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.14%)</title><rect x="408.8" y="627.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="411.8" y="638.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.14%)</title><rect x="408.8" y="611.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="411.8" y="622.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.07%)</title><rect x="408.8" y="595.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="411.8" y="606.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.03%)</title><rect x="408.8" y="579.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="411.8" y="590.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="409.2" y="579.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="412.2" y="590.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="409.2" y="563.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="412.2" y="574.0"></text>
</g>
<g>
<title>void volatile* Atomic::PlatformLoad&lt;8ul&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="409.2" y="547.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="412.2" y="558.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (2 samples, 0.07%)</title><rect x="409.6" y="595.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="412.6" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (3 samples, 0.10%)</title><rect x="410.4" y="659.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="413.4" y="670.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="410.4" y="643.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="413.4" y="654.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.07%)</title><rect x="410.8" y="643.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="413.8" y="654.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.07%)</title><rect x="410.8" y="627.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="413.8" y="638.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.07%)</title><rect x="410.8" y="611.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="413.8" y="622.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.03%)</title><rect x="410.8" y="595.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="413.8" y="606.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="411.3" y="595.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="414.3" y="606.0"></text>
</g>
<g>
<title>pthread_cond_wait (1 samples, 0.03%)</title><rect x="411.7" y="659.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="414.7" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (3 samples, 0.10%)</title><rect x="412.1" y="659.0" width="1.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="415.1" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="413.3" y="659.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="416.3" y="670.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.07%)</title><rect x="413.7" y="675.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="416.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (26 samples, 0.90%)</title><rect x="414.5" y="723.0" width="10.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="417.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (26 samples, 0.90%)</title><rect x="414.5" y="707.0" width="10.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="417.5" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.03%)</title><rect x="414.5" y="691.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="417.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (24 samples, 0.83%)</title><rect x="414.9" y="691.0" width="9.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="417.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (24 samples, 0.83%)</title><rect x="414.9" y="675.0" width="9.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="417.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (24 samples, 0.83%)</title><rect x="414.9" y="659.0" width="9.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="417.9" y="670.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (24 samples, 0.83%)</title><rect x="414.9" y="643.0" width="9.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="417.9" y="654.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (23 samples, 0.80%)</title><rect x="415.4" y="627.0" width="9.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="418.4" y="638.0"></text>
</g>
<g>
<title>JavaThread::jni_environment_offset() (1 samples, 0.03%)</title><rect x="415.4" y="611.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="418.4" y="622.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (21 samples, 0.73%)</title><rect x="415.8" y="611.0" width="8.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="418.8" y="622.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.03%)</title><rect x="416.2" y="595.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="419.2" y="606.0"></text>
</g>
<g>
<title>__psynch_cvwait (19 samples, 0.66%)</title><rect x="416.6" y="595.0" width="7.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="419.6" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="424.4" y="611.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="427.4" y="622.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="424.4" y="595.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="427.4" y="606.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="424.4" y="579.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="427.4" y="590.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="424.4" y="563.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="427.4" y="574.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="424.4" y="547.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="427.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="424.8" y="691.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="427.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="424.8" y="675.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="427.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.03%)</title><rect x="424.8" y="659.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="427.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (52 samples, 1.81%)</title><rect x="425.2" y="723.0" width="21.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="428.2" y="734.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (52 samples, 1.81%)</title><rect x="425.2" y="707.0" width="21.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="428.2" y="718.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (52 samples, 1.81%)</title><rect x="425.2" y="691.0" width="21.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="428.2" y="702.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (52 samples, 1.81%)</title><rect x="425.2" y="675.0" width="21.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="428.2" y="686.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (52 samples, 1.81%)</title><rect x="425.2" y="659.0" width="21.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="428.2" y="670.0">j..</text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (50 samples, 1.74%)</title><rect x="426.0" y="643.0" width="20.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="429.0" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="426.0" y="627.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="429.0" y="638.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="426.0" y="611.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="429.0" y="622.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="426.0" y="595.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="429.0" y="606.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="426.0" y="579.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="429.0" y="590.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.03%)</title><rect x="426.0" y="563.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="429.0" y="574.0"></text>
</g>
<g>
<title>__psynch_cvsignal (46 samples, 1.60%)</title><rect x="426.4" y="627.0" width="18.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="429.4" y="638.0"></text>
</g>
<g>
<title>pthread_cond_signal (3 samples, 0.10%)</title><rect x="445.3" y="627.0" width="1.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="448.3" y="638.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (2 samples, 0.07%)</title><rect x="445.7" y="611.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="448.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateAtLeast (1 samples, 0.03%)</title><rect x="446.5" y="739.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="449.5" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$76/2009892315.run (669 samples, 23.24%)</title><rect x="446.9" y="755.0" width="274.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="449.9" y="766.0">ru/mail/polis/service/lorismelik/Asyn..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$executeAsync$4 (668 samples, 23.20%)</title><rect x="447.3" y="739.0" width="273.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="450.3" y="750.0">ru/mail/polis/service/lorismelik/Asyn..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (453 samples, 15.73%)</title><rect x="447.3" y="723.0" width="185.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="450.3" y="734.0">one/nio/http/HttpSession..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (437 samples, 15.18%)</title><rect x="447.3" y="707.0" width="179.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="450.3" y="718.0">one/nio/http/HttpSessio..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (17 samples, 0.59%)</title><rect x="447.7" y="691.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="450.7" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="450.2" y="675.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="453.2" y="686.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (10 samples, 0.35%)</title><rect x="450.6" y="675.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="453.6" y="686.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (1 samples, 0.03%)</title><rect x="450.6" y="659.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="453.6" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 0.14%)</title><rect x="451.0" y="659.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="454.0" y="670.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="452.2" y="643.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="455.2" y="654.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.03%)</title><rect x="452.2" y="627.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="455.2" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.17%)</title><rect x="452.7" y="659.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="455.7" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.17%)</title><rect x="452.7" y="643.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="455.7" y="654.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.03%)</title><rect x="454.3" y="627.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="457.3" y="638.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.03%)</title><rect x="454.3" y="611.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="457.3" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (419 samples, 14.55%)</title><rect x="454.7" y="691.0" width="171.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="457.7" y="702.0">one/nio/net/Session.wr..</text>
</g>
<g>
<title>one/nio/net/Session.write (419 samples, 14.55%)</title><rect x="454.7" y="675.0" width="171.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="457.7" y="686.0">one/nio/net/Session.wr..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (419 samples, 14.55%)</title><rect x="454.7" y="659.0" width="171.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="457.7" y="670.0">one/nio/net/Session$Ar..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (419 samples, 14.55%)</title><rect x="454.7" y="643.0" width="171.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="457.7" y="654.0">one/nio/net/JavaSocket..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.35%)</title><rect x="454.7" y="627.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="457.7" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.14%)</title><rect x="456.3" y="611.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="459.3" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.14%)</title><rect x="456.3" y="595.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="459.3" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="457.6" y="579.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="460.6" y="590.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.07%)</title><rect x="458.0" y="611.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="461.0" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (409 samples, 14.21%)</title><rect x="458.8" y="627.0" width="167.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="461.8" y="638.0">sun/nio/ch/SocketChan..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.14%)</title><rect x="458.8" y="611.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="461.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.14%)</title><rect x="458.8" y="595.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="461.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.14%)</title><rect x="458.8" y="579.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="461.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.14%)</title><rect x="458.8" y="563.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="461.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="459.6" y="547.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="462.6" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="459.6" y="531.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="462.6" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="459.6" y="515.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="462.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (1 samples, 0.03%)</title><rect x="460.0" y="547.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="463.0" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (405 samples, 14.07%)</title><rect x="460.4" y="611.0" width="166.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="463.4" y="622.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (405 samples, 14.07%)</title><rect x="460.4" y="595.0" width="166.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="463.4" y="606.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.03%)</title><rect x="460.9" y="579.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="463.9" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (389 samples, 13.51%)</title><rect x="461.3" y="579.0" width="159.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="464.3" y="590.0">sun/nio/ch/IOUtil.wr..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (389 samples, 13.51%)</title><rect x="461.3" y="563.0" width="159.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="464.3" y="574.0">sun/nio/ch/SocketDis..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (389 samples, 13.51%)</title><rect x="461.3" y="547.0" width="159.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="464.3" y="558.0">sun/nio/ch/FileDispa..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (5 samples, 0.17%)</title><rect x="469.5" y="531.0" width="2.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="472.5" y="542.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="471.1" y="515.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="474.1" y="526.0"></text>
</g>
<g>
<title>write (364 samples, 12.64%)</title><rect x="471.5" y="531.0" width="149.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="474.5" y="542.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (14 samples, 0.49%)</title><rect x="620.7" y="579.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="623.7" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.14%)</title><rect x="621.1" y="563.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="624.1" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.07%)</title><rect x="621.9" y="547.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="624.9" y="558.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="622.3" y="531.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="625.3" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (9 samples, 0.31%)</title><rect x="622.7" y="563.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="625.7" y="574.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="626.0" y="547.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="629.0" y="558.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="626.0" y="531.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="629.0" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="626.0" y="515.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="629.0" y="526.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="626.0" y="499.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="629.0" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (16 samples, 0.56%)</title><rect x="626.4" y="707.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="629.4" y="718.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (16 samples, 0.56%)</title><rect x="626.4" y="691.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="629.4" y="702.0"></text>
</g>
<g>
<title>java/lang/String.length (5 samples, 0.17%)</title><rect x="628.1" y="675.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="631.1" y="686.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.10%)</title><rect x="628.1" y="659.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="631.1" y="670.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.07%)</title><rect x="629.3" y="659.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="632.3" y="670.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="629.3" y="643.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="632.3" y="654.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="629.7" y="643.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="632.7" y="654.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.10%)</title><rect x="630.1" y="675.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="633.1" y="686.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.07%)</title><rect x="630.5" y="659.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="633.5" y="670.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.07%)</title><rect x="630.5" y="643.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="633.5" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (2 samples, 0.07%)</title><rect x="631.4" y="675.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="634.4" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.07%)</title><rect x="632.2" y="675.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="635.2" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$73/343578854.act (215 samples, 7.47%)</title><rect x="633.0" y="723.0" width="88.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="636.0" y="734.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$entity$1 (214 samples, 7.43%)</title><rect x="633.4" y="707.0" width="87.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="636.4" y="718.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.doGet (214 samples, 7.43%)</title><rect x="633.4" y="691.0" width="87.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="636.4" y="702.0">ru/mail/po..</text>
</g>
<g>
<title>ExceptionBlob (1 samples, 0.03%)</title><rect x="636.3" y="675.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="639.3" y="686.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.07%)</title><rect x="636.7" y="675.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="639.7" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (36 samples, 1.25%)</title><rect x="637.5" y="675.0" width="14.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="640.5" y="686.0"></text>
</g>
<g>
<title>Exceptions::debug_check_abort(Handle, char const*) (1 samples, 0.03%)</title><rect x="637.5" y="659.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="640.5" y="670.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (8 samples, 0.28%)</title><rect x="637.9" y="659.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="640.9" y="670.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (2 samples, 0.07%)</title><rect x="637.9" y="643.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="640.9" y="654.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (6 samples, 0.21%)</title><rect x="638.7" y="643.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="641.7" y="654.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.03%)</title><rect x="638.7" y="627.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="641.7" y="638.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (5 samples, 0.17%)</title><rect x="639.1" y="627.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="642.1" y="638.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (4 samples, 0.14%)</title><rect x="639.6" y="611.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="642.6" y="622.0"></text>
</g>
<g>
<title>JavaThread::reguard_stack(unsigned char*) (1 samples, 0.03%)</title><rect x="641.2" y="659.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="644.2" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (21 samples, 0.73%)</title><rect x="641.6" y="659.0" width="8.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="644.6" y="670.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (2 samples, 0.07%)</title><rect x="644.1" y="643.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="647.1" y="654.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.07%)</title><rect x="644.9" y="643.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="647.9" y="654.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.03%)</title><rect x="644.9" y="627.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="647.9" y="638.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="645.3" y="627.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="648.3" y="638.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.03%)</title><rect x="645.3" y="611.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="648.3" y="622.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (6 samples, 0.21%)</title><rect x="645.7" y="643.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="648.7" y="654.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (4 samples, 0.14%)</title><rect x="646.5" y="627.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="649.5" y="638.0"></text>
</g>
<g>
<title>Exceptions::debug_check_abort(Handle, char const*) (2 samples, 0.07%)</title><rect x="648.2" y="643.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="651.2" y="654.0"></text>
</g>
<g>
<title>JavaThread::reguard_stack(unsigned char*) (1 samples, 0.03%)</title><rect x="649.0" y="643.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="652.0" y="654.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (2 samples, 0.07%)</title><rect x="649.4" y="643.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="652.4" y="654.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (1 samples, 0.03%)</title><rect x="650.2" y="659.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="653.2" y="670.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.14%)</title><rect x="650.6" y="659.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="653.6" y="670.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (2 samples, 0.07%)</title><rect x="650.6" y="643.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="653.6" y="654.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.07%)</title><rect x="651.4" y="643.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="654.4" y="654.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.03%)</title><rect x="651.8" y="627.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="654.8" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (1 samples, 0.03%)</title><rect x="652.3" y="675.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="655.3" y="686.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="652.7" y="675.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="655.7" y="686.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="653.1" y="675.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="656.1" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (8 samples, 0.28%)</title><rect x="653.5" y="675.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="656.5" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.10%)</title><rect x="655.5" y="659.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="658.5" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/lorismelik/RocksDAO.get (157 samples, 5.45%)</title><rect x="656.8" y="675.0" width="64.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="659.8" y="686.0">ru/mail..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (8 samples, 0.28%)</title><rect x="658.0" y="659.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="661.0" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/473581465.invoke (8 samples, 0.28%)</title><rect x="658.0" y="643.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="661.0" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (5 samples, 0.17%)</title><rect x="658.0" y="627.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="661.0" y="638.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (1 samples, 0.03%)</title><rect x="658.0" y="611.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="661.0" y="622.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="658.0" y="595.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="661.0" y="606.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="658.4" y="611.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="661.4" y="622.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.10%)</title><rect x="658.8" y="611.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="661.8" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/257895351.invoke (3 samples, 0.10%)</title><rect x="660.0" y="627.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="663.0" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.10%)</title><rect x="660.0" y="611.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="663.0" y="622.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (3 samples, 0.10%)</title><rect x="660.0" y="595.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="663.0" y="606.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.10%)</title><rect x="660.0" y="579.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="663.0" y="590.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.10%)</title><rect x="660.0" y="563.0" width="1.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="663.0" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (17 samples, 0.59%)</title><rect x="661.3" y="659.0" width="6.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="664.3" y="670.0"></text>
</g>
<g>
<title>java/lang/Class.getName (1 samples, 0.03%)</title><rect x="661.3" y="643.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="664.3" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.03%)</title><rect x="661.3" y="627.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="664.3" y="638.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (15 samples, 0.52%)</title><rect x="661.7" y="643.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="664.7" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (13 samples, 0.45%)</title><rect x="662.5" y="627.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="665.5" y="638.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.10%)</title><rect x="663.3" y="611.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="666.3" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.07%)</title><rect x="663.7" y="595.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="666.7" y="606.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="664.1" y="579.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="667.1" y="590.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (4 samples, 0.14%)</title><rect x="664.6" y="611.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="667.6" y="622.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.10%)</title><rect x="665.0" y="595.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="668.0" y="606.0"></text>
</g>
<g>
<title>java/lang/Integer.stringSize (4 samples, 0.14%)</title><rect x="666.2" y="611.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="669.2" y="622.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.07%)</title><rect x="667.0" y="595.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="670.0" y="606.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (1 samples, 0.03%)</title><rect x="667.8" y="643.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="670.8" y="654.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (113 samples, 3.92%)</title><rect x="668.2" y="659.0" width="46.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="671.2" y="670.0">org/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (113 samples, 3.92%)</title><rect x="668.2" y="643.0" width="46.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="671.2" y="654.0">org/..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (109 samples, 3.79%)</title><rect x="669.9" y="627.0" width="44.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="672.9" y="638.0">Java..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.03%)</title><rect x="670.3" y="611.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="673.3" y="622.0"></text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (1 samples, 0.03%)</title><rect x="670.7" y="611.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="673.7" y="622.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="671.1" y="611.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="674.1" y="622.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="671.5" y="611.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="674.5" y="622.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.07%)</title><rect x="671.9" y="611.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="674.9" y="622.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.10%)</title><rect x="672.8" y="611.0" width="1.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="675.8" y="622.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (3 samples, 0.10%)</title><rect x="674.0" y="611.0" width="1.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="677.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1 samples, 0.03%)</title><rect x="675.2" y="611.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="678.2" y="622.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (94 samples, 3.27%)</title><rect x="675.6" y="611.0" width="38.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="678.6" y="622.0">roc..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.07%)</title><rect x="676.8" y="595.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="679.8" y="606.0"></text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.03%)</title><rect x="677.7" y="595.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="680.7" y="606.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="678.1" y="595.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="681.1" y="606.0"></text>
</g>
<g>
<title>_setcontext (1 samples, 0.03%)</title><rect x="678.5" y="595.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="681.5" y="606.0"></text>
</g>
<g>
<title>default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="678.9" y="595.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="681.9" y="606.0"></text>
</g>
<g>
<title>free (7 samples, 0.24%)</title><rect x="679.3" y="595.0" width="2.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="682.3" y="606.0"></text>
</g>
<g>
<title>tiny_size (5 samples, 0.17%)</title><rect x="680.1" y="579.0" width="2.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="683.1" y="590.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="682.2" y="595.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="685.2" y="606.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.07%)</title><rect x="682.6" y="595.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="685.6" y="606.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.03%)</title><rect x="682.6" y="579.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="685.6" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="683.0" y="579.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="686.0" y="590.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="683.0" y="563.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="686.0" y="574.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="683.0" y="547.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="686.0" y="558.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="683.0" y="531.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="686.0" y="542.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="683.0" y="515.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="686.0" y="526.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.03%)</title><rect x="683.0" y="499.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="686.0" y="510.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (9 samples, 0.31%)</title><rect x="683.4" y="595.0" width="3.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="686.4" y="606.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (1 samples, 0.03%)</title><rect x="684.6" y="579.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="687.6" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.10%)</title><rect x="685.0" y="579.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="688.0" y="590.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.10%)</title><rect x="685.0" y="563.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="688.0" y="574.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.10%)</title><rect x="685.0" y="547.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="688.0" y="558.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.07%)</title><rect x="685.5" y="531.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="688.5" y="542.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="685.5" y="515.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="688.5" y="526.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.03%)</title><rect x="685.5" y="499.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="688.5" y="510.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="685.9" y="515.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="688.9" y="526.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="686.3" y="579.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="689.3" y="590.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.03%)</title><rect x="686.7" y="579.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="689.7" y="590.0"></text>
</g>
<g>
<title>operator new(unsigned long) (16 samples, 0.56%)</title><rect x="687.1" y="595.0" width="6.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="690.1" y="606.0"></text>
</g>
<g>
<title>malloc (16 samples, 0.56%)</title><rect x="687.1" y="579.0" width="6.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="690.1" y="590.0"></text>
</g>
<g>
<title>malloc_zone_malloc (12 samples, 0.42%)</title><rect x="687.5" y="563.0" width="4.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="690.5" y="574.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.07%)</title><rect x="688.3" y="547.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="691.3" y="558.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (7 samples, 0.24%)</title><rect x="689.1" y="547.0" width="2.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="692.1" y="558.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (6 samples, 0.21%)</title><rect x="689.6" y="531.0" width="2.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="692.6" y="542.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="692.0" y="547.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="695.0" y="558.0"></text>
</g>
<g>
<title>szone_malloc (1 samples, 0.03%)</title><rect x="692.4" y="563.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="695.4" y="574.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.07%)</title><rect x="692.8" y="563.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="695.8" y="574.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (48 samples, 1.67%)</title><rect x="693.7" y="595.0" width="19.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="696.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (48 samples, 1.67%)</title><rect x="693.7" y="579.0" width="19.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="696.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (48 samples, 1.67%)</title><rect x="693.7" y="563.0" width="19.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="696.7" y="574.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.10%)</title><rect x="694.5" y="547.0" width="1.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="697.5" y="558.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (40 samples, 1.39%)</title><rect x="695.7" y="547.0" width="16.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="698.7" y="558.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.03%)</title><rect x="699.0" y="531.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="702.0" y="542.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.10%)</title><rect x="699.4" y="531.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="702.4" y="542.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="700.6" y="531.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="703.6" y="542.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (8 samples, 0.28%)</title><rect x="701.0" y="531.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="704.0" y="542.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.03%)</title><rect x="702.3" y="515.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="705.3" y="526.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (2 samples, 0.07%)</title><rect x="702.7" y="515.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="705.7" y="526.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.03%)</title><rect x="703.1" y="499.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="706.1" y="510.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (2 samples, 0.07%)</title><rect x="703.5" y="515.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="706.5" y="526.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.03%)</title><rect x="703.9" y="499.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="706.9" y="510.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (1 samples, 0.03%)</title><rect x="704.3" y="531.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="707.3" y="542.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (1 samples, 0.03%)</title><rect x="704.3" y="515.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="707.3" y="526.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.03%)</title><rect x="704.7" y="531.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="707.7" y="542.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (1 samples, 0.03%)</title><rect x="705.1" y="531.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="708.1" y="542.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long) (2 samples, 0.07%)</title><rect x="705.5" y="531.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="708.5" y="542.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="705.9" y="515.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="708.9" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1 samples, 0.03%)</title><rect x="706.4" y="531.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="709.4" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.07%)</title><rect x="706.8" y="531.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="709.8" y="542.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, unsigned long long*, unsigned int*) (2 samples, 0.07%)</title><rect x="707.6" y="531.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="710.6" y="542.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (7 samples, 0.24%)</title><rect x="708.4" y="531.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="711.4" y="542.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (4 samples, 0.14%)</title><rect x="709.2" y="515.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="712.2" y="526.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="710.5" y="499.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="713.5" y="510.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, bool*, unsigned long long*, unsigned long long*, unsigned int*) (1 samples, 0.03%)</title><rect x="710.9" y="515.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="713.9" y="526.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.07%)</title><rect x="711.3" y="531.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="714.3" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1 samples, 0.03%)</title><rect x="712.1" y="547.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="715.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1 samples, 0.03%)</title><rect x="712.5" y="547.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="715.5" y="558.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="712.9" y="547.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="715.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (1 samples, 0.03%)</title><rect x="713.3" y="595.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="716.3" y="606.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.03%)</title><rect x="713.7" y="595.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="716.7" y="606.0"></text>
</g>
<g>
<title>szone_free_definite_size (1 samples, 0.03%)</title><rect x="714.1" y="611.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="717.1" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.shiftBytes (11 samples, 0.38%)</title><rect x="714.6" y="659.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="717.6" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.07%)</title><rect x="715.4" y="643.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="718.4" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.07%)</title><rect x="715.4" y="627.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="718.4" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.clone (7 samples, 0.24%)</title><rect x="716.2" y="643.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="719.2" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (5 samples, 0.17%)</title><rect x="716.2" y="627.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="719.2" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.14%)</title><rect x="716.2" y="611.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="719.2" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.14%)</title><rect x="716.2" y="595.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="719.2" y="606.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (1 samples, 0.03%)</title><rect x="717.8" y="611.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="720.8" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.07%)</title><rect x="718.2" y="627.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="721.2" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="718.7" y="611.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="721.7" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="718.7" y="595.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="721.7" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/lorismelik/NoSuchElementExceptionLite.&lt;init&gt; (5 samples, 0.17%)</title><rect x="719.1" y="659.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="722.1" y="670.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (2 samples, 0.07%)</title><rect x="720.3" y="643.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="723.3" y="654.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (2 samples, 0.07%)</title><rect x="720.3" y="627.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="723.3" y="638.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (2 samples, 0.07%)</title><rect x="720.3" y="611.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="723.3" y="622.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (2 samples, 0.07%)</title><rect x="720.3" y="595.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="723.3" y="606.0"></text>
</g>
<g>
<title>nmethod::exception_begin() const (2 samples, 0.07%)</title><rect x="721.1" y="803.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="724.1" y="814.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,067 samples, 37.06%)</title><rect x="721.9" y="803.0" width="437.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="724.9" y="814.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.03%)</title><rect x="723.6" y="787.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="726.6" y="798.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.03%)</title><rect x="724.0" y="787.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="727.0" y="798.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (38 samples, 1.32%)</title><rect x="724.4" y="787.0" width="15.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="727.4" y="798.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (36 samples, 1.25%)</title><rect x="724.4" y="771.0" width="14.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="727.4" y="782.0"></text>
</g>
<g>
<title>__psynch_cvsignal (18 samples, 0.63%)</title><rect x="726.0" y="755.0" width="7.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="729.0" y="766.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (12 samples, 0.42%)</title><rect x="733.4" y="755.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="736.4" y="766.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (12 samples, 0.42%)</title><rect x="733.4" y="739.0" width="4.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="736.4" y="750.0"></text>
</g>
<g>
<title>__psynch_mutexwait (12 samples, 0.42%)</title><rect x="733.4" y="723.0" width="4.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="736.4" y="734.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.07%)</title><rect x="738.3" y="755.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="741.3" y="766.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="738.7" y="739.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="741.7" y="750.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (2 samples, 0.07%)</title><rect x="739.1" y="771.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="742.1" y="782.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (1 samples, 0.03%)</title><rect x="740.0" y="787.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="743.0" y="798.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (1 samples, 0.03%)</title><rect x="740.0" y="771.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="743.0" y="782.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (2 samples, 0.07%)</title><rect x="740.4" y="787.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="743.4" y="798.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (2 samples, 0.07%)</title><rect x="740.4" y="771.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="743.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.07%)</title><rect x="740.4" y="755.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="743.4" y="766.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (439 samples, 15.25%)</title><rect x="741.2" y="787.0" width="179.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="744.2" y="798.0">one/nio/net/JavaSelecto..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (5 samples, 0.17%)</title><rect x="741.2" y="771.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="744.2" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.03%)</title><rect x="741.2" y="755.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="744.2" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.03%)</title><rect x="741.2" y="739.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="744.2" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (2 samples, 0.07%)</title><rect x="741.6" y="755.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="744.6" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.07%)</title><rect x="741.6" y="739.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="744.6" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.03%)</title><rect x="742.0" y="723.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="745.0" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="742.0" y="707.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="745.0" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.size (2 samples, 0.07%)</title><rect x="742.4" y="755.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="745.4" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.size (2 samples, 0.07%)</title><rect x="742.4" y="739.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="745.4" y="750.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (12 samples, 0.42%)</title><rect x="743.2" y="771.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="746.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (11 samples, 0.38%)</title><rect x="743.7" y="755.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="746.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (11 samples, 0.38%)</title><rect x="743.7" y="739.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="746.7" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (5 samples, 0.17%)</title><rect x="743.7" y="723.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="746.7" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (5 samples, 0.17%)</title><rect x="743.7" y="707.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="746.7" y="718.0"></text>
</g>
<g>
<title>_res (1 samples, 0.03%)</title><rect x="745.3" y="691.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="748.3" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (6 samples, 0.21%)</title><rect x="745.7" y="723.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="748.7" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.setRelease (2 samples, 0.07%)</title><rect x="747.3" y="707.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="750.3" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (421 samples, 14.62%)</title><rect x="748.2" y="771.0" width="172.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="751.2" y="782.0">sun/nio/ch/SelectorImp..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (421 samples, 14.62%)</title><rect x="748.2" y="755.0" width="172.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="751.2" y="766.0">sun/nio/ch/SelectorImp..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (421 samples, 14.62%)</title><rect x="748.2" y="739.0" width="172.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="751.2" y="750.0">sun/nio/ch/KQueueSelec..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (397 samples, 13.79%)</title><rect x="751.0" y="723.0" width="162.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="754.0" y="734.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.03%)</title><rect x="758.0" y="707.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="761.0" y="718.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.07%)</title><rect x="758.4" y="707.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="761.4" y="718.0"></text>
</g>
<g>
<title>kevent (377 samples, 13.09%)</title><rect x="759.2" y="707.0" width="154.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="762.2" y="718.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (6 samples, 0.21%)</title><rect x="913.8" y="723.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="916.8" y="734.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.03%)</title><rect x="913.8" y="707.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="916.8" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (5 samples, 0.17%)</title><rect x="914.2" y="707.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="917.2" y="718.0"></text>
</g>
<g>
<title>java/util/HashSet.add (5 samples, 0.17%)</title><rect x="914.2" y="691.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="917.2" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 0.17%)</title><rect x="914.2" y="675.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="917.2" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.14%)</title><rect x="914.6" y="659.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="917.6" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (7 samples, 0.24%)</title><rect x="916.2" y="723.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="919.2" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (3 samples, 0.10%)</title><rect x="917.8" y="707.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="920.8" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.inc (2 samples, 0.07%)</title><rect x="918.3" y="691.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="921.3" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.07%)</title><rect x="918.3" y="675.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="921.3" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (1 samples, 0.03%)</title><rect x="919.1" y="723.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="922.1" y="734.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.03%)</title><rect x="919.1" y="707.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="922.1" y="718.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="919.1" y="691.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="922.1" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (3 samples, 0.10%)</title><rect x="919.5" y="723.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="922.5" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectedKeys (1 samples, 0.03%)</title><rect x="920.7" y="771.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="923.7" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.ensureOpen (1 samples, 0.03%)</title><rect x="920.7" y="755.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="923.7" y="766.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (1 samples, 0.03%)</title><rect x="920.7" y="739.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="923.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.03%)</title><rect x="920.7" y="723.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="923.7" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (581 samples, 20.18%)</title><rect x="921.1" y="787.0" width="238.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="924.1" y="798.0">one/nio/net/Session.process</text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.03%)</title><rect x="923.6" y="771.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="926.6" y="782.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.10%)</title><rect x="924.0" y="771.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="927.0" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (559 samples, 19.42%)</title><rect x="925.2" y="771.0" width="229.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="928.2" y="782.0">one/nio/http/HttpSession.proce..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (369 samples, 12.82%)</title><rect x="926.0" y="755.0" width="151.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="929.0" y="766.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (302 samples, 10.49%)</title><rect x="931.0" y="739.0" width="123.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="934.0" y="750.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (302 samples, 10.49%)</title><rect x="931.0" y="723.0" width="123.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="934.0" y="734.0">one/nio/http/Ht..</text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="931.0" y="707.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="934.0" y="718.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (7 samples, 0.24%)</title><rect x="931.4" y="707.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="934.4" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.24%)</title><rect x="931.4" y="691.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="934.4" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="932.2" y="675.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="935.2" y="686.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.03%)</title><rect x="932.2" y="659.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="935.2" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.03%)</title><rect x="932.6" y="675.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="935.6" y="686.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.03%)</title><rect x="932.6" y="659.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="935.6" y="670.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.03%)</title><rect x="932.6" y="643.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="935.6" y="654.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.10%)</title><rect x="933.0" y="675.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="936.0" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (4 samples, 0.14%)</title><rect x="934.2" y="707.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="937.2" y="718.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.14%)</title><rect x="934.2" y="691.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="937.2" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.10%)</title><rect x="934.7" y="675.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="937.7" y="686.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.10%)</title><rect x="934.7" y="659.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="937.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.07%)</title><rect x="935.1" y="643.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="938.1" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.handleDefault (290 samples, 10.07%)</title><rect x="935.9" y="707.0" width="118.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="938.9" y="718.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.03%)</title><rect x="936.3" y="691.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="939.3" y="702.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.03%)</title><rect x="936.3" y="675.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="939.3" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.03%)</title><rect x="936.7" y="691.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="939.7" y="702.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="936.7" y="675.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="939.7" y="686.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="936.7" y="659.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="939.7" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.entity (287 samples, 9.97%)</title><rect x="937.1" y="691.0" width="117.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="940.1" y="702.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.03%)</title><rect x="937.9" y="675.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="940.9" y="686.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.03%)</title><rect x="937.9" y="659.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="940.9" y="670.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.03%)</title><rect x="937.9" y="643.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="940.9" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.03%)</title><rect x="937.9" y="627.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="940.9" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.10%)</title><rect x="938.3" y="675.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="941.3" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.10%)</title><rect x="938.3" y="659.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="941.3" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.07%)</title><rect x="938.8" y="643.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="941.8" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.07%)</title><rect x="938.8" y="627.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="941.8" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.07%)</title><rect x="938.8" y="611.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="941.8" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.07%)</title><rect x="938.8" y="595.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="941.8" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.07%)</title><rect x="938.8" y="579.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="941.8" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.07%)</title><rect x="938.8" y="563.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="941.8" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6 samples, 0.21%)</title><rect x="939.6" y="675.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="942.6" y="686.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="940.4" y="659.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="943.4" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="940.4" y="643.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="943.4" y="654.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.03%)</title><rect x="940.8" y="659.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="943.8" y="670.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.07%)</title><rect x="941.2" y="659.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="944.2" y="670.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.07%)</title><rect x="941.2" y="643.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="944.2" y="654.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.07%)</title><rect x="941.2" y="627.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="944.2" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.07%)</title><rect x="941.2" y="611.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="944.2" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.executeAsync (274 samples, 9.52%)</title><rect x="942.0" y="675.0" width="112.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="945.0" y="686.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="942.0" y="659.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="945.0" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="942.0" y="643.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="945.0" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$76/2009892315.get$Lambda (1 samples, 0.03%)</title><rect x="942.0" y="627.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="945.0" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$76/2009892315.&lt;init&gt; (1 samples, 0.03%)</title><rect x="942.0" y="611.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="945.0" y="622.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.03%)</title><rect x="942.0" y="595.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="945.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (273 samples, 9.48%)</title><rect x="942.4" y="659.0" width="111.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="945.4" y="670.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (270 samples, 9.38%)</title><rect x="943.3" y="643.0" width="110.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="946.3" y="654.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (264 samples, 9.17%)</title><rect x="943.7" y="627.0" width="108.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="946.7" y="638.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 0.17%)</title><rect x="943.7" y="611.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="946.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.07%)</title><rect x="943.7" y="595.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="946.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.07%)</title><rect x="943.7" y="579.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="946.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (1 samples, 0.03%)</title><rect x="943.7" y="563.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="946.7" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="943.7" y="547.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="946.7" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="943.7" y="531.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="946.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.03%)</title><rect x="944.1" y="563.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="947.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (1 samples, 0.03%)</title><rect x="944.1" y="547.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="947.1" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.03%)</title><rect x="944.1" y="531.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="947.1" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="944.1" y="515.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="947.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.isHeldExclusively (3 samples, 0.10%)</title><rect x="944.5" y="595.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="947.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.14%)</title><rect x="945.7" y="611.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="948.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.14%)</title><rect x="945.7" y="595.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="948.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.14%)</title><rect x="945.7" y="579.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="948.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.14%)</title><rect x="945.7" y="563.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="948.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.07%)</title><rect x="946.1" y="547.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="949.1" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.07%)</title><rect x="946.1" y="531.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="949.1" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.07%)</title><rect x="946.1" y="515.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="949.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (1 samples, 0.03%)</title><rect x="947.0" y="547.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="950.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (255 samples, 8.86%)</title><rect x="947.4" y="611.0" width="104.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="950.4" y="622.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (255 samples, 8.86%)</title><rect x="947.4" y="595.0" width="104.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="950.4" y="606.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (255 samples, 8.86%)</title><rect x="947.4" y="579.0" width="104.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="950.4" y="590.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (252 samples, 8.75%)</title><rect x="948.2" y="563.0" width="103.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="951.2" y="574.0">java/util/co..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (252 samples, 8.75%)</title><rect x="948.2" y="547.0" width="103.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="951.2" y="558.0">jdk/internal..</text>
</g>
<g>
<title>HandleMark::push() (1 samples, 0.03%)</title><rect x="950.2" y="531.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="953.2" y="542.0"></text>
</g>
<g>
<title>HandleMarkCleaner::HandleMarkCleaner(Thread*) (1 samples, 0.03%)</title><rect x="950.6" y="531.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="953.6" y="542.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.10%)</title><rect x="951.0" y="531.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="954.0" y="542.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.03%)</title><rect x="952.3" y="531.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="955.3" y="542.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="952.7" y="531.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="955.7" y="542.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="953.1" y="531.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="956.1" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="953.5" y="531.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="956.5" y="542.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.10%)</title><rect x="953.9" y="531.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="956.9" y="542.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (3 samples, 0.10%)</title><rect x="955.1" y="531.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="958.1" y="542.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (229 samples, 7.95%)</title><rect x="956.4" y="531.0" width="93.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="959.4" y="542.0">Unsafe_Unpa..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (2 samples, 0.07%)</title><rect x="957.2" y="515.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="960.2" y="526.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (5 samples, 0.17%)</title><rect x="958.0" y="515.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="961.0" y="526.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (5 samples, 0.17%)</title><rect x="958.0" y="499.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="961.0" y="510.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="958.0" y="483.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="961.0" y="494.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (4 samples, 0.14%)</title><rect x="958.4" y="483.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="961.4" y="494.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (3 samples, 0.10%)</title><rect x="958.8" y="467.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="961.8" y="478.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.03%)</title><rect x="958.8" y="451.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="961.8" y="462.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (2 samples, 0.07%)</title><rect x="959.2" y="451.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="962.2" y="462.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, Atomic::PlatformLoad&lt;4ul&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="959.2" y="435.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="962.2" y="446.0"></text>
</g>
<g>
<title>int Atomic::load&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="959.7" y="435.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="962.7" y="446.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, Atomic::PlatformLoad&lt;4ul&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="959.7" y="419.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="962.7" y="430.0"></text>
</g>
<g>
<title>int Atomic::PlatformLoad&lt;4ul&gt;::operator()&lt;int&gt;(int const volatile*) const (1 samples, 0.03%)</title><rect x="959.7" y="403.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="962.7" y="414.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="960.1" y="515.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="963.1" y="526.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.03%)</title><rect x="960.5" y="515.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="963.5" y="526.0"></text>
</g>
<g>
<title>Thread::current() (5 samples, 0.17%)</title><rect x="960.9" y="515.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="963.9" y="526.0"></text>
</g>
<g>
<title>Thread::current_or_null() (2 samples, 0.07%)</title><rect x="960.9" y="499.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="963.9" y="510.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.10%)</title><rect x="961.7" y="499.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="964.7" y="510.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.03%)</title><rect x="962.9" y="515.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="965.9" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.07%)</title><rect x="963.3" y="515.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="966.3" y="526.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="963.3" y="499.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="966.3" y="510.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="963.8" y="499.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="966.8" y="510.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="963.8" y="483.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="966.8" y="494.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="963.8" y="467.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="966.8" y="478.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="963.8" y="451.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="966.8" y="462.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="963.8" y="435.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="966.8" y="446.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="963.8" y="419.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="966.8" y="430.0"></text>
</g>
<g>
<title>void volatile* Atomic::PlatformLoad&lt;8ul&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="963.8" y="403.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="966.8" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (7 samples, 0.24%)</title><rect x="964.2" y="515.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="967.2" y="526.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.07%)</title><rect x="964.2" y="499.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="967.2" y="510.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="965.0" y="499.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="968.0" y="510.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.07%)</title><rect x="965.4" y="499.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="968.4" y="510.0"></text>
</g>
<g>
<title>Thread::polling_page_addr() (1 samples, 0.03%)</title><rect x="965.4" y="483.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="968.4" y="494.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="965.8" y="483.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="968.8" y="494.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="965.8" y="467.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="968.8" y="478.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="965.8" y="451.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="968.8" y="462.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="965.8" y="435.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="968.8" y="446.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="965.8" y="419.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="968.8" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (2 samples, 0.07%)</title><rect x="966.2" y="499.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="969.2" y="510.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.14%)</title><rect x="967.0" y="515.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="970.0" y="526.0"></text>
</g>
<g>
<title>oopDesc* BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.03%)</title><rect x="967.4" y="499.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="970.4" y="510.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.07%)</title><rect x="967.9" y="499.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="970.9" y="510.0"></text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.03%)</title><rect x="968.7" y="515.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="971.7" y="526.0"></text>
</g>
<g>
<title>__psynch_cvsignal (177 samples, 6.15%)</title><rect x="969.1" y="515.0" width="72.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="972.1" y="526.0">__psynch..</text>
</g>
<g>
<title>in_bytes(int) (1 samples, 0.03%)</title><rect x="1041.6" y="515.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1044.6" y="526.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.07%)</title><rect x="1042.0" y="515.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1045.0" y="526.0"></text>
</g>
<g>
<title>mask_bits_are_true(long, long) (1 samples, 0.03%)</title><rect x="1042.9" y="515.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1045.9" y="526.0"></text>
</g>
<g>
<title>pthread_cond_signal (7 samples, 0.24%)</title><rect x="1043.3" y="515.0" width="2.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1046.3" y="526.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (2 samples, 0.07%)</title><rect x="1045.3" y="499.0" width="0.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1048.3" y="510.0"></text>
</g>
<g>
<title>pthread_mutex_lock (9 samples, 0.31%)</title><rect x="1046.1" y="515.0" width="3.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1049.1" y="526.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="1049.8" y="515.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1052.8" y="526.0"></text>
</g>
<g>
<title>addr_from_java(long) (1 samples, 0.03%)</title><rect x="1050.2" y="531.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1053.2" y="542.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.07%)</title><rect x="1050.6" y="531.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1053.6" y="542.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="1051.5" y="563.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1054.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.17%)</title><rect x="1051.9" y="627.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1054.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.17%)</title><rect x="1051.9" y="611.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1054.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.10%)</title><rect x="1051.9" y="595.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1054.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.07%)</title><rect x="1053.1" y="595.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1056.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.07%)</title><rect x="1053.1" y="579.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1056.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="1053.1" y="563.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1056.1" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="1053.1" y="547.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1056.1" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="1053.1" y="531.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1056.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (1 samples, 0.03%)</title><rect x="1053.5" y="563.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1056.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.isRunning (1 samples, 0.03%)</title><rect x="1053.9" y="643.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1056.9" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/NodeDescriptor.getNodeIdByKey (1 samples, 0.03%)</title><rect x="1054.3" y="675.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1057.3" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (1 samples, 0.03%)</title><rect x="1054.3" y="659.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1057.3" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="1054.3" y="643.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1057.3" y="654.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.03%)</title><rect x="1054.3" y="627.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1057.3" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (14 samples, 0.49%)</title><rect x="1054.7" y="739.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1057.7" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (6 samples, 0.21%)</title><rect x="1055.6" y="723.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1058.6" y="734.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.14%)</title><rect x="1056.4" y="707.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1059.4" y="718.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.10%)</title><rect x="1056.8" y="691.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1059.8" y="702.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.03%)</title><rect x="1057.2" y="675.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1060.2" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="1057.6" y="675.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1060.6" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.21%)</title><rect x="1058.0" y="723.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1061.0" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.21%)</title><rect x="1058.0" y="707.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1061.0" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.03%)</title><rect x="1060.5" y="739.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1063.5" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (32 samples, 1.11%)</title><rect x="1060.9" y="739.0" width="13.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1063.9" y="750.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (30 samples, 1.04%)</title><rect x="1061.7" y="723.0" width="12.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1064.7" y="734.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="1066.2" y="707.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1069.2" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (12 samples, 0.42%)</title><rect x="1066.6" y="707.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1069.6" y="718.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (11 samples, 0.38%)</title><rect x="1067.0" y="691.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1070.0" y="702.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (11 samples, 0.38%)</title><rect x="1067.0" y="675.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1070.0" y="686.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (11 samples, 0.38%)</title><rect x="1067.0" y="659.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1070.0" y="670.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (11 samples, 0.38%)</title><rect x="1067.0" y="643.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1070.0" y="654.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="1069.9" y="627.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1072.9" y="638.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.07%)</title><rect x="1070.3" y="627.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1073.3" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="1071.1" y="627.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1074.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 0.17%)</title><rect x="1071.5" y="707.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1074.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="1073.6" y="707.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1076.6" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.28%)</title><rect x="1074.0" y="739.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1077.0" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.28%)</title><rect x="1074.0" y="723.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1077.0" y="734.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (1 samples, 0.03%)</title><rect x="1076.9" y="707.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1079.9" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (188 samples, 6.53%)</title><rect x="1077.3" y="755.0" width="77.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1080.3" y="766.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (188 samples, 6.53%)</title><rect x="1077.3" y="739.0" width="77.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1080.3" y="750.0">one/nio/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.28%)</title><rect x="1077.7" y="723.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1080.7" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.28%)</title><rect x="1077.7" y="707.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1080.7" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.28%)</title><rect x="1077.7" y="691.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1080.7" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.24%)</title><rect x="1078.1" y="675.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1081.1" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.24%)</title><rect x="1078.1" y="659.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1081.1" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.14%)</title><rect x="1079.3" y="643.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1082.3" y="654.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="1080.6" y="627.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1083.6" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (179 samples, 6.22%)</title><rect x="1081.0" y="723.0" width="73.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1084.0" y="734.0">sun/nio/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (19 samples, 0.66%)</title><rect x="1081.0" y="707.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1084.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (19 samples, 0.66%)</title><rect x="1081.0" y="691.0" width="7.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1084.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (4 samples, 0.14%)</title><rect x="1083.0" y="675.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1086.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.03%)</title><rect x="1083.8" y="659.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1086.8" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.03%)</title><rect x="1083.8" y="643.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1086.8" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.set (1 samples, 0.03%)</title><rect x="1083.8" y="627.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1086.8" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.03%)</title><rect x="1084.3" y="659.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1087.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (10 samples, 0.35%)</title><rect x="1084.7" y="675.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1087.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (10 samples, 0.35%)</title><rect x="1084.7" y="659.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1087.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.10%)</title><rect x="1084.7" y="643.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1087.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (4 samples, 0.14%)</title><rect x="1085.9" y="643.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1088.9" y="654.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.07%)</title><rect x="1087.5" y="643.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1090.5" y="654.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1088.4" y="643.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1091.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="1088.8" y="707.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1091.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="1088.8" y="691.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1091.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.03%)</title><rect x="1088.8" y="675.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1091.8" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (159 samples, 5.52%)</title><rect x="1089.2" y="707.0" width="65.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1092.2" y="718.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (159 samples, 5.52%)</title><rect x="1089.2" y="691.0" width="65.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1092.2" y="702.0">sun/nio..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="1089.2" y="675.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1092.2" y="686.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="1089.2" y="659.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1092.2" y="670.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.03%)</title><rect x="1089.2" y="643.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1092.2" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.03%)</title><rect x="1089.2" y="627.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1092.2" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.03%)</title><rect x="1089.2" y="611.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1092.2" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.03%)</title><rect x="1089.2" y="595.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1092.2" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (158 samples, 5.49%)</title><rect x="1089.6" y="675.0" width="64.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1092.6" y="686.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (156 samples, 5.42%)</title><rect x="1090.4" y="659.0" width="63.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1093.4" y="670.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (156 samples, 5.42%)</title><rect x="1090.4" y="643.0" width="63.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1093.4" y="654.0">sun/nio..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.07%)</title><rect x="1094.5" y="627.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1097.5" y="638.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="1095.3" y="627.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1098.3" y="638.0"></text>
</g>
<g>
<title>read (143 samples, 4.97%)</title><rect x="1095.7" y="627.0" width="58.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1098.7" y="638.0">read</text>
</g>
<g>
<title>os::javaTimeMillis() (12 samples, 0.42%)</title><rect x="1154.3" y="771.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.3" y="782.0"></text>
</g>
<g>
<title>__vsnprintf_chk (2 samples, 0.07%)</title><rect x="1155.2" y="755.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1158.2" y="766.0"></text>
</g>
<g>
<title>gettimeofday (8 samples, 0.28%)</title><rect x="1156.0" y="755.0" width="3.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1159.0" y="766.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (8 samples, 0.28%)</title><rect x="1156.0" y="739.0" width="3.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1159.0" y="750.0"></text>
</g>
<g>
<title>_res (6 samples, 0.21%)</title><rect x="1156.8" y="723.0" width="2.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1159.8" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="1159.3" y="803.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.3" y="814.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.07%)</title><rect x="1159.7" y="803.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.7" y="814.0"></text>
</g>
<g>
<title>thread_start (72 samples, 2.50%)</title><rect x="1160.5" y="803.0" width="29.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1163.5" y="814.0">th..</text>
</g>
<g>
<title>_pthread_start (72 samples, 2.50%)</title><rect x="1160.5" y="787.0" width="29.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1163.5" y="798.0">_p..</text>
</g>
<g>
<title>_pthread_body (72 samples, 2.50%)</title><rect x="1160.5" y="771.0" width="29.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1163.5" y="782.0">_p..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (72 samples, 2.50%)</title><rect x="1160.5" y="755.0" width="29.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1163.5" y="766.0">th..</text>
</g>
<g>
<title>Thread::call_run() (72 samples, 2.50%)</title><rect x="1160.5" y="739.0" width="29.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.5" y="750.0">Th..</text>
</g>
<g>
<title>ConcurrentGCThread::run() (2 samples, 0.07%)</title><rect x="1160.5" y="723.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.5" y="734.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (2 samples, 0.07%)</title><rect x="1160.5" y="707.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.5" y="718.0"></text>
</g>
<g>
<title>G1Policy::adaptive_young_list_length() const (1 samples, 0.03%)</title><rect x="1160.5" y="691.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.5" y="702.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (1 samples, 0.03%)</title><rect x="1160.9" y="691.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.9" y="702.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="1160.9" y="675.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.9" y="686.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="1160.9" y="659.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.9" y="670.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.03%)</title><rect x="1160.9" y="643.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.9" y="654.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1160.9" y="627.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1163.9" y="638.0"></text>
</g>
<g>
<title>JavaThread::run() (67 samples, 2.33%)</title><rect x="1161.3" y="723.0" width="27.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.3" y="734.0">J..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (67 samples, 2.33%)</title><rect x="1161.3" y="707.0" width="27.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.3" y="718.0">J..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (64 samples, 2.22%)</title><rect x="1161.3" y="691.0" width="26.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.3" y="702.0">C..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (64 samples, 2.22%)</title><rect x="1161.3" y="675.0" width="26.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.3" y="686.0">C..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (62 samples, 2.15%)</title><rect x="1161.3" y="659.0" width="25.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.3" y="670.0">C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (62 samples, 2.15%)</title><rect x="1161.3" y="643.0" width="25.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.3" y="654.0">C..</text>
</g>
<g>
<title>Compile::Code_Gen() (35 samples, 1.22%)</title><rect x="1161.3" y="627.0" width="14.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.3" y="638.0"></text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.07%)</title><rect x="1161.3" y="611.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.3" y="622.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.07%)</title><rect x="1161.3" y="595.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.3" y="606.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 0.21%)</title><rect x="1162.1" y="611.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.1" y="622.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.07%)</title><rect x="1162.1" y="595.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.1" y="606.0"></text>
</g>
<g>
<title>ConNNode::Opcode() const (1 samples, 0.03%)</title><rect x="1162.5" y="579.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.5" y="590.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.10%)</title><rect x="1162.9" y="595.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.9" y="606.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (2 samples, 0.07%)</title><rect x="1163.4" y="579.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.4" y="590.0"></text>
</g>
<g>
<title>Compile::current() (2 samples, 0.07%)</title><rect x="1163.4" y="563.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.4" y="574.0"></text>
</g>
<g>
<title>ciEnv::current() (2 samples, 0.07%)</title><rect x="1163.4" y="547.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.4" y="558.0"></text>
</g>
<g>
<title>CompilerThread::current() (1 samples, 0.03%)</title><rect x="1163.4" y="531.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.4" y="542.0"></text>
</g>
<g>
<title>JavaThread::current() (1 samples, 0.03%)</title><rect x="1163.4" y="515.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.4" y="526.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="1163.4" y="499.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.4" y="510.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="1163.4" y="483.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1166.4" y="494.0"></text>
</g>
<g>
<title>CompilerThread::env() (1 samples, 0.03%)</title><rect x="1163.8" y="531.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.8" y="542.0"></text>
</g>
<g>
<title>URShiftINode::Opcode() const (1 samples, 0.03%)</title><rect x="1164.2" y="595.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.2" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.14%)</title><rect x="1164.6" y="611.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.6" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.14%)</title><rect x="1164.6" y="595.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.6" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.03%)</title><rect x="1164.6" y="579.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.6" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.03%)</title><rect x="1165.0" y="579.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.0" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.03%)</title><rect x="1165.4" y="579.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.4" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (1 samples, 0.03%)</title><rect x="1165.4" y="563.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.4" y="574.0"></text>
</g>
<g>
<title>GrowableArray&lt;unsigned int&gt;::at_grow(int, unsigned int const&amp;) (1 samples, 0.03%)</title><rect x="1165.4" y="547.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.4" y="558.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.03%)</title><rect x="1165.8" y="579.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.8" y="590.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1165.8" y="563.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1168.8" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (23 samples, 0.80%)</title><rect x="1166.2" y="611.0" width="9.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.2" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.14%)</title><rect x="1166.2" y="595.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.2" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::is_high_pressure(Block*, LRG*, unsigned int) (1 samples, 0.03%)</title><rect x="1167.0" y="579.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.0" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.03%)</title><rect x="1167.5" y="579.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.5" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.03%)</title><rect x="1167.5" y="563.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.5" y="574.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.03%)</title><rect x="1167.5" y="547.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.5" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 0.17%)</title><rect x="1167.9" y="595.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.9" y="606.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.03%)</title><rect x="1167.9" y="579.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.9" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.07%)</title><rect x="1168.3" y="579.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.3" y="590.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.03%)</title><rect x="1168.3" y="563.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.3" y="574.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.03%)</title><rect x="1168.3" y="547.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.3" y="558.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.03%)</title><rect x="1168.7" y="563.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.7" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.03%)</title><rect x="1169.1" y="579.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.1" y="590.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.03%)</title><rect x="1169.1" y="563.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.1" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_interference_from_copy(Block*, unsigned int, unsigned int, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.03%)</title><rect x="1169.5" y="579.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.5" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.03%)</title><rect x="1169.9" y="595.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.9" y="606.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.03%)</title><rect x="1169.9" y="579.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.9" y="590.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.03%)</title><rect x="1169.9" y="563.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.9" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.03%)</title><rect x="1170.3" y="595.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.3" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.17%)</title><rect x="1170.7" y="595.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.7" y="606.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.03%)</title><rect x="1171.1" y="579.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.1" y="590.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1171.1" y="563.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1174.1" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.07%)</title><rect x="1171.6" y="579.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.6" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.03%)</title><rect x="1172.0" y="563.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.0" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.03%)</title><rect x="1172.0" y="547.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.0" y="558.0"></text>
</g>
<g>
<title>RegMask::find_first_elem() const (1 samples, 0.03%)</title><rect x="1172.4" y="579.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.4" y="590.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.03%)</title><rect x="1172.4" y="563.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1175.4" y="574.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.07%)</title><rect x="1172.8" y="595.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.8" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.03%)</title><rect x="1172.8" y="579.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.8" y="590.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="1173.2" y="579.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.2" y="590.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.07%)</title><rect x="1173.6" y="595.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.6" y="606.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.03%)</title><rect x="1174.0" y="579.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.0" y="590.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.10%)</title><rect x="1174.4" y="595.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.4" y="606.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1174.8" y="579.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.8" y="590.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1174.8" y="563.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.8" y="574.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.03%)</title><rect x="1174.8" y="547.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.8" y="558.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.03%)</title><rect x="1174.8" y="531.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.8" y="542.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="1174.8" y="515.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1177.8" y="526.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="1174.8" y="499.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1177.8" y="510.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="1174.8" y="483.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1177.8" y="494.0"></text>
</g>
<g>
<title>large_malloc (1 samples, 0.03%)</title><rect x="1174.8" y="467.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1177.8" y="478.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.03%)</title><rect x="1175.2" y="579.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.2" y="590.0"></text>
</g>
<g>
<title>Compile::Optimize() (20 samples, 0.69%)</title><rect x="1175.7" y="627.0" width="8.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.7" y="638.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (7 samples, 0.24%)</title><rect x="1175.7" y="611.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.7" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (7 samples, 0.24%)</title><rect x="1175.7" y="595.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.7" y="606.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="1175.7" y="579.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.7" y="590.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="1175.7" y="563.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.7" y="574.0"></text>
</g>
<g>
<title>IdealLoopTree::remove_safepoints(PhaseIdealLoop*, bool) (1 samples, 0.03%)</title><rect x="1175.7" y="547.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.7" y="558.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1176.1" y="579.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.1" y="590.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1176.1" y="563.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.1" y="574.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1176.1" y="547.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.1" y="558.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1176.1" y="531.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.1" y="542.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1176.1" y="515.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.1" y="526.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1176.1" y="499.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.1" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.03%)</title><rect x="1176.1" y="483.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.1" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::update_skeleton_predicates(Node*, CountedLoopNode*, Node*, int) (1 samples, 0.03%)</title><rect x="1176.1" y="467.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.1" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_skeleton_predicate(Node*, Node*, Node*, Node*, Node*, IdealLoopTree*, Node*) (1 samples, 0.03%)</title><rect x="1176.1" y="451.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.1" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.03%)</title><rect x="1176.5" y="579.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.5" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.03%)</title><rect x="1176.9" y="579.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.9" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (1 samples, 0.03%)</title><rect x="1176.9" y="563.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.9" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.03%)</title><rect x="1176.9" y="547.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.9" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.03%)</title><rect x="1176.9" y="531.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.9" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.03%)</title><rect x="1176.9" y="515.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.9" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (1 samples, 0.03%)</title><rect x="1176.9" y="499.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.9" y="510.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.03%)</title><rect x="1176.9" y="483.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.9" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.07%)</title><rect x="1177.3" y="579.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.3" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (2 samples, 0.07%)</title><rect x="1177.3" y="563.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.3" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.03%)</title><rect x="1177.3" y="547.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.3" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.03%)</title><rect x="1177.3" y="531.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.3" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.03%)</title><rect x="1177.3" y="515.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.3" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.03%)</title><rect x="1177.3" y="499.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.3" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.03%)</title><rect x="1177.7" y="547.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.7" y="558.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.03%)</title><rect x="1177.7" y="531.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.7" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.03%)</title><rect x="1178.1" y="579.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.1" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.03%)</title><rect x="1178.1" y="563.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.1" y="574.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.03%)</title><rect x="1178.1" y="547.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.1" y="558.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.07%)</title><rect x="1178.5" y="611.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.5" y="622.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (2 samples, 0.07%)</title><rect x="1178.5" y="595.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.5" y="606.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1178.5" y="579.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.5" y="590.0"></text>
</g>
<g>
<title>TypeAryPtr::make(TypePtr::PTR, ciObject*, TypeAry const*, ciKlass*, bool, int, int, TypePtr const*, int, bool) (1 samples, 0.03%)</title><rect x="1178.5" y="563.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.5" y="574.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1178.5" y="547.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.5" y="558.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1178.9" y="579.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.9" y="590.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.03%)</title><rect x="1178.9" y="563.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.9" y="574.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.03%)</title><rect x="1178.9" y="547.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.9" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (7 samples, 0.24%)</title><rect x="1179.3" y="611.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.3" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.03%)</title><rect x="1179.3" y="595.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.3" y="606.0"></text>
</g>
<g>
<title>NTarjan::EVAL() (1 samples, 0.03%)</title><rect x="1179.3" y="579.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.3" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.07%)</title><rect x="1179.8" y="595.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.8" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (2 samples, 0.07%)</title><rect x="1179.8" y="579.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.8" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.07%)</title><rect x="1179.8" y="563.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.8" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 0.07%)</title><rect x="1179.8" y="547.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.8" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.07%)</title><rect x="1179.8" y="531.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.8" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.07%)</title><rect x="1179.8" y="515.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.8" y="526.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.03%)</title><rect x="1180.2" y="499.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.2" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.03%)</title><rect x="1180.6" y="595.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.6" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.03%)</title><rect x="1181.0" y="595.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.0" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.03%)</title><rect x="1181.0" y="579.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.0" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_up(Node*, Node*, Node*) (1 samples, 0.03%)</title><rect x="1181.0" y="563.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.0" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::register_new_node(Node*, Node*) (1 samples, 0.03%)</title><rect x="1181.0" y="547.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::register_new_node_with_optimizer(Node*, Node*) (1 samples, 0.03%)</title><rect x="1181.0" y="531.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.0" y="542.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.03%)</title><rect x="1181.0" y="515.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.0" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.03%)</title><rect x="1181.4" y="595.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.4" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.03%)</title><rect x="1181.4" y="579.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.4" y="590.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.03%)</title><rect x="1181.4" y="563.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.4" y="574.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.03%)</title><rect x="1181.4" y="547.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.4" y="558.0"></text>
</g>
<g>
<title>TypeAryPtr::hash() const (1 samples, 0.03%)</title><rect x="1181.4" y="531.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.4" y="542.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="1181.8" y="595.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.8" y="606.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.03%)</title><rect x="1181.8" y="579.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.8" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.14%)</title><rect x="1182.2" y="611.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.2" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.14%)</title><rect x="1182.2" y="595.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.2" y="606.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1182.2" y="579.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.2" y="590.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1182.2" y="563.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="574.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseGVN*) (1 samples, 0.03%)</title><rect x="1182.6" y="579.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.6" y="590.0"></text>
</g>
<g>
<title>LoadNode::is_instance_field_load_with_local_phi(Node*) (1 samples, 0.03%)</title><rect x="1182.6" y="563.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.6" y="574.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.03%)</title><rect x="1182.6" y="547.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.6" y="558.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1182.6" y="531.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.6" y="542.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1182.6" y="515.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.6" y="526.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="1182.6" y="499.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.6" y="510.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.03%)</title><rect x="1183.0" y="579.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.0" y="590.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1183.4" y="579.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.4" y="590.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (1 samples, 0.03%)</title><rect x="1183.4" y="563.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.4" y="574.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.03%)</title><rect x="1183.9" y="627.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.9" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.21%)</title><rect x="1184.3" y="627.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.3" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.21%)</title><rect x="1184.3" y="611.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.21%)</title><rect x="1184.3" y="595.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.21%)</title><rect x="1184.3" y="579.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.21%)</title><rect x="1184.3" y="563.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.3" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.21%)</title><rect x="1184.3" y="547.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.3" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.21%)</title><rect x="1184.3" y="531.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.21%)</title><rect x="1184.3" y="515.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.21%)</title><rect x="1184.3" y="499.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.21%)</title><rect x="1184.3" y="483.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.3" y="494.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.03%)</title><rect x="1184.3" y="467.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.3" y="478.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.03%)</title><rect x="1184.3" y="451.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.3" y="462.0"></text>
</g>
<g>
<title>TypeTuple::make_range(ciSignature*) (1 samples, 0.03%)</title><rect x="1184.3" y="435.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.3" y="446.0"></text>
</g>
<g>
<title>Type::get_const_type(ciType*) (1 samples, 0.03%)</title><rect x="1184.3" y="419.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.3" y="430.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1184.3" y="403.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.3" y="414.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1184.3" y="387.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.3" y="398.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.03%)</title><rect x="1184.3" y="371.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.3" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.17%)</title><rect x="1184.7" y="467.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.7" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.17%)</title><rect x="1184.7" y="451.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.7" y="462.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.03%)</title><rect x="1184.7" y="435.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.7" y="446.0"></text>
</g>
<g>
<title>GraphKit::null_check_receiver_before_call(ciMethod*) (1 samples, 0.03%)</title><rect x="1184.7" y="419.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.7" y="430.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.03%)</title><rect x="1184.7" y="403.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.7" y="414.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.03%)</title><rect x="1184.7" y="387.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.14%)</title><rect x="1185.1" y="435.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.14%)</title><rect x="1185.1" y="419.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.14%)</title><rect x="1185.1" y="403.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.1" y="414.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1185.1" y="387.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.1" y="398.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1185.1" y="371.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.1" y="382.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1185.1" y="355.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.1" y="366.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.03%)</title><rect x="1185.1" y="339.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.1" y="350.0"></text>
</g>
<g>
<title>is_init_with_ea(ciMethod*, ciMethod*, Compile*) (1 samples, 0.03%)</title><rect x="1185.1" y="323.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1188.1" y="334.0"></text>
</g>
<g>
<title>ciMethod::is_initializer() const (1 samples, 0.03%)</title><rect x="1185.1" y="307.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.1" y="318.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="1185.1" y="291.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.1" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.10%)</title><rect x="1185.5" y="387.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.5" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.10%)</title><rect x="1185.5" y="371.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.10%)</title><rect x="1185.5" y="355.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.10%)</title><rect x="1185.5" y="339.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.07%)</title><rect x="1185.5" y="323.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.5" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1185.5" y="307.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.5" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.07%)</title><rect x="1185.5" y="291.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1185.5" y="275.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.07%)</title><rect x="1185.5" y="259.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1185.5" y="243.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.5" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1185.5" y="227.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.5" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1185.5" y="211.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1185.5" y="195.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1185.5" y="179.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1185.5" y="163.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.5" y="174.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1185.5" y="147.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.5" y="158.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1185.5" y="131.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.5" y="142.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.03%)</title><rect x="1185.5" y="115.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.5" y="126.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="1185.5" y="99.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.5" y="110.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.03%)</title><rect x="1185.5" y="83.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.5" y="94.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.03%)</title><rect x="1185.5" y="67.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.5" y="78.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.03%)</title><rect x="1185.5" y="51.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.5" y="62.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.03%)</title><rect x="1185.5" y="35.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.5" y="46.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.03%)</title><rect x="1185.9" y="243.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.9" y="254.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.03%)</title><rect x="1185.9" y="227.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.9" y="238.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.03%)</title><rect x="1185.9" y="211.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.9" y="222.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.03%)</title><rect x="1185.9" y="195.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.9" y="206.0"></text>
</g>
<g>
<title>MergeMemStream::next_non_empty(bool) (1 samples, 0.03%)</title><rect x="1185.9" y="179.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="1186.3" y="323.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1186.3" y="307.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.3" y="318.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long long) (1 samples, 0.03%)</title><rect x="1186.3" y="291.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.3" y="302.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.03%)</title><rect x="1186.3" y="275.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.3" y="286.0"></text>
</g>
<g>
<title>C2AccessFence::~C2AccessFence() (1 samples, 0.03%)</title><rect x="1186.3" y="259.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.3" y="270.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.03%)</title><rect x="1186.3" y="243.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.3" y="254.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="1186.3" y="227.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.3" y="238.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.03%)</title><rect x="1186.3" y="211.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.3" y="222.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.03%)</title><rect x="1186.3" y="195.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.3" y="206.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1186.3" y="179.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.3" y="190.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1186.3" y="163.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.3" y="174.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.03%)</title><rect x="1186.7" y="659.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.7" y="670.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.03%)</title><rect x="1186.7" y="643.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.7" y="654.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.03%)</title><rect x="1186.7" y="627.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.7" y="638.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.03%)</title><rect x="1186.7" y="611.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.7" y="622.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.03%)</title><rect x="1186.7" y="595.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.7" y="606.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.03%)</title><rect x="1186.7" y="579.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.7" y="590.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.03%)</title><rect x="1186.7" y="563.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.7" y="574.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (1 samples, 0.03%)</title><rect x="1186.7" y="547.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.7" y="558.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.03%)</title><rect x="1186.7" y="531.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.7" y="542.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="1187.1" y="659.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.1" y="670.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.03%)</title><rect x="1187.1" y="643.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.1" y="654.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.03%)</title><rect x="1187.1" y="627.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.1" y="638.0"></text>
</g>
<g>
<title>ThreadCritical::~ThreadCritical() (1 samples, 0.03%)</title><rect x="1187.1" y="611.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.1" y="622.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (1 samples, 0.03%)</title><rect x="1187.1" y="595.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1190.1" y="606.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (1 samples, 0.03%)</title><rect x="1187.1" y="579.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1190.1" y="590.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (1 samples, 0.03%)</title><rect x="1187.5" y="691.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.5" y="702.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.03%)</title><rect x="1187.5" y="675.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.5" y="686.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.03%)</title><rect x="1187.5" y="659.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.5" y="670.0"></text>
</g>
<g>
<title>NMethodSweeper::process_compiled_method(CompiledMethod*) (1 samples, 0.03%)</title><rect x="1187.5" y="643.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.5" y="654.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches(bool) (1 samples, 0.03%)</title><rect x="1187.5" y="627.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.5" y="638.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches_impl(bool, bool) (1 samples, 0.03%)</title><rect x="1187.5" y="611.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.5" y="622.0"></text>
</g>
<g>
<title>clean_if_nmethod_is_unloaded(CompiledIC*, CompiledMethod*, bool) (1 samples, 0.03%)</title><rect x="1187.5" y="595.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1190.5" y="606.0"></text>
</g>
<g>
<title>CompiledIC::ic_destination() const (1 samples, 0.03%)</title><rect x="1187.5" y="579.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.5" y="590.0"></text>
</g>
<g>
<title>NativeCall::destination() const (1 samples, 0.03%)</title><rect x="1187.5" y="563.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.5" y="574.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (2 samples, 0.07%)</title><rect x="1188.0" y="691.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.0" y="702.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2 samples, 0.07%)</title><rect x="1188.0" y="675.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.0" y="686.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 0.07%)</title><rect x="1188.0" y="659.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.0" y="670.0"></text>
</g>
<g>
<title>JvmtiCompiledMethodLoadEventMark::JvmtiCompiledMethodLoadEventMark(JavaThread*, nmethod*, void*) (1 samples, 0.03%)</title><rect x="1188.0" y="643.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.0" y="654.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.03%)</title><rect x="1188.0" y="627.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.0" y="638.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.03%)</title><rect x="1188.0" y="611.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.0" y="622.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.03%)</title><rect x="1188.0" y="595.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.0" y="606.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="1188.0" y="579.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1191.0" y="590.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.03%)</title><rect x="1188.4" y="643.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1191.4" y="654.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.03%)</title><rect x="1188.4" y="627.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.4" y="638.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.03%)</title><rect x="1188.4" y="611.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1191.4" y="622.0"></text>
</g>
<g>
<title>WatcherThread::run() (3 samples, 0.10%)</title><rect x="1188.8" y="723.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.8" y="734.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (3 samples, 0.10%)</title><rect x="1188.8" y="707.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.8" y="718.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.10%)</title><rect x="1188.8" y="691.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.8" y="702.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.10%)</title><rect x="1188.8" y="675.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.8" y="686.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.10%)</title><rect x="1188.8" y="659.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.8" y="670.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.10%)</title><rect x="1188.8" y="643.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1191.8" y="654.0"></text>
</g>
</g>
</svg>
