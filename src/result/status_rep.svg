<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (2,018 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int) (1 samples, 0.05%)</title><rect x="10.0" y="915.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="10.0" y="899.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>InterpreterRuntime::prepare_native_call(JavaThread*, Method*) (1 samples, 0.05%)</title><rect x="10.6" y="915.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.6" y="926.0"></text>
</g>
<g>
<title>NativeLookup::lookup(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.05%)</title><rect x="10.6" y="899.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.6" y="910.0"></text>
</g>
<g>
<title>NativeLookup::lookup_base(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.05%)</title><rect x="10.6" y="883.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.6" y="894.0"></text>
</g>
<g>
<title>NativeLookup::lookup_entry(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.05%)</title><rect x="10.6" y="867.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.6" y="878.0"></text>
</g>
<g>
<title>NativeLookup::lookup_style(methodHandle const&amp;, char*, char const*, int, bool, bool&amp;, Thread*) (1 samples, 0.05%)</title><rect x="10.6" y="851.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.6" y="862.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="10.6" y="835.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="13.6" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="10.6" y="819.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="13.6" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="10.6" y="803.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.6" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="10.6" y="787.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.6" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="10.6" y="771.0" width="0.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="13.6" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="10.6" y="755.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="13.6" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="10.6" y="739.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="13.6" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="10.6" y="723.0" width="0.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="13.6" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="10.6" y="707.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="13.6" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="10.6" y="691.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.6" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="10.6" y="675.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.6" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="10.6" y="659.0" width="0.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="13.6" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="10.6" y="643.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="13.6" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="10.6" y="627.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="13.6" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="10.6" y="611.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="13.6" y="622.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.05%)</title><rect x="11.2" y="915.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.2" y="926.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.05%)</title><rect x="11.2" y="899.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="14.2" y="910.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.05%)</title><rect x="11.2" y="883.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.2" y="894.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.05%)</title><rect x="11.2" y="867.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.2" y="878.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.10%)</title><rect x="11.8" y="915.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="14.8" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="12.3" y="899.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="15.3" y="910.0"></text>
</g>
<g>
<title>frame::is_deoptimized_frame() const (1 samples, 0.05%)</title><rect x="12.3" y="883.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="15.3" y="894.0"></text>
</g>
<g>
<title>[unknown_Java] (12 samples, 0.59%)</title><rect x="12.9" y="915.0" width="7.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="15.9" y="926.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.10%)</title><rect x="18.8" y="899.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="21.8" y="910.0"></text>
</g>
<g>
<title>_res (2 samples, 0.10%)</title><rect x="18.8" y="883.0" width="1.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="21.8" y="894.0"></text>
</g>
<g>
<title>one/nio/server/AcceptorThread.run (1 samples, 0.05%)</title><rect x="19.9" y="915.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="22.9" y="926.0"></text>
</g>
<g>
<title>one/nio/net/Socket.acceptNonBlocking (1 samples, 0.05%)</title><rect x="19.9" y="899.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="22.9" y="910.0"></text>
</g>
<g>
<title>one/nio/net/JavaServerSocket.accept (1 samples, 0.05%)</title><rect x="19.9" y="883.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="22.9" y="894.0"></text>
</g>
<g>
<title>one/nio/net/JavaServerSocket.accept (1 samples, 0.05%)</title><rect x="19.9" y="867.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.9" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/ServerSocketChannelImpl.accept (1 samples, 0.05%)</title><rect x="19.9" y="851.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="22.9" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.configureBlocking (1 samples, 0.05%)</title><rect x="19.9" y="835.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.9" y="846.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.findNative (1 samples, 0.05%)</title><rect x="19.9" y="819.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.9" y="830.0"></text>
</g>
<g>
<title>java/lang/ClassLoader$NativeLibrary.findEntry (1 samples, 0.05%)</title><rect x="19.9" y="803.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.9" y="814.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_00024NativeLibrary_findEntry (1 samples, 0.05%)</title><rect x="19.9" y="787.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="22.9" y="798.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="19.9" y="771.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="22.9" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="19.9" y="755.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="22.9" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="19.9" y="739.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="22.9" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="19.9" y="723.0" width="0.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="22.9" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="19.9" y="707.0" width="0.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="22.9" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="19.9" y="691.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="22.9" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="19.9" y="675.0" width="0.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="22.9" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="19.9" y="659.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="22.9" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="19.9" y="643.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="22.9" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="19.9" y="627.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="22.9" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="19.9" y="611.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="22.9" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="19.9" y="595.0" width="0.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="22.9" y="606.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,819 samples, 90.14%)</title><rect x="20.5" y="915.0" width="1063.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.5" y="926.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.05%)</title><rect x="24.6" y="899.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.6" y="910.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.05%)</title><rect x="25.2" y="899.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="28.2" y="910.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.05%)</title><rect x="25.2" y="883.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="28.2" y="894.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.05%)</title><rect x="25.2" y="867.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="28.2" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper_internal(methodHandle, frame const&amp;, CompiledMethod*, bool, bool, Handle, CallInfo&amp;, Bytecodes::Code, Thread*) (1 samples, 0.05%)</title><rect x="25.2" y="851.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="28.2" y="862.0"></text>
</g>
<g>
<title>DirectNativeCallWrapper::instruction_address() const (1 samples, 0.05%)</title><rect x="25.2" y="835.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="28.2" y="846.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (1 samples, 0.05%)</title><rect x="25.8" y="899.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.8" y="910.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (1 samples, 0.05%)</title><rect x="25.8" y="883.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.05%)</title><rect x="25.8" y="867.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="28.8" y="878.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (1,007 samples, 49.90%)</title><rect x="26.4" y="899.0" width="588.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.4" y="910.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>_res (1 samples, 0.05%)</title><rect x="27.5" y="883.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="30.5" y="894.0"></text>
</g>
<g>
<title>java/lang/System.nanoTime (1 samples, 0.05%)</title><rect x="28.1" y="883.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.1" y="894.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.05%)</title><rect x="28.1" y="867.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="31.1" y="878.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.05%)</title><rect x="28.1" y="851.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="31.1" y="862.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.05%)</title><rect x="28.1" y="835.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="31.1" y="846.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.05%)</title><rect x="28.1" y="819.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="31.1" y="830.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.05%)</title><rect x="28.1" y="803.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="31.1" y="814.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.05%)</title><rect x="28.1" y="787.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="31.1" y="798.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle const&amp;) (1 samples, 0.05%)</title><rect x="28.1" y="771.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="31.1" y="782.0"></text>
</g>
<g>
<title>SharedRuntime::generate_native_wrapper(MacroAssembler*, methodHandle const&amp;, int, BasicType*, VMRegPair*, BasicType) (1 samples, 0.05%)</title><rect x="28.1" y="755.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="31.1" y="766.0"></text>
</g>
<g>
<title>Method::critical_native_function() (1 samples, 0.05%)</title><rect x="28.1" y="739.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="31.1" y="750.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_entry(methodHandle const&amp;) (1 samples, 0.05%)</title><rect x="28.1" y="723.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="31.1" y="734.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_style(methodHandle const&amp;, char*, char const*, int, bool) (1 samples, 0.05%)</title><rect x="28.1" y="707.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="31.1" y="718.0"></text>
</g>
<g>
<title>os::dll_load(char const*, char*, int) (1 samples, 0.05%)</title><rect x="28.1" y="691.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="31.1" y="702.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="28.1" y="675.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="31.1" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="28.1" y="659.0" width="0.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="31.1" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="28.1" y="643.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="31.1" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="28.1" y="627.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="31.1" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (11 samples, 0.55%)</title><rect x="28.7" y="883.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="31.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (3 samples, 0.15%)</title><rect x="30.5" y="867.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="33.5" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.10%)</title><rect x="31.1" y="851.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="34.1" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (5 samples, 0.25%)</title><rect x="32.2" y="867.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="35.2" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4 samples, 0.20%)</title><rect x="32.8" y="851.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="35.8" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (4 samples, 0.20%)</title><rect x="32.8" y="835.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="35.8" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (3 samples, 0.15%)</title><rect x="33.4" y="819.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="36.4" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (3 samples, 0.15%)</title><rect x="33.4" y="803.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="36.4" y="814.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (5 samples, 0.25%)</title><rect x="35.1" y="883.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="38.1" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (986 samples, 48.86%)</title><rect x="38.1" y="883.0" width="576.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="41.1" y="894.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (986 samples, 48.86%)</title><rect x="38.1" y="867.0" width="576.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.1" y="878.0">sun/nio/ch/SelectorImpl.lockAndDoSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (983 samples, 48.71%)</title><rect x="38.7" y="851.0" width="574.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="41.7" y="862.0">sun/nio/ch/KQueueSelectorImpl.doSelect</text>
</g>
<g>
<title>java/lang/Math.min (1 samples, 0.05%)</title><rect x="38.7" y="835.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="41.7" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (952 samples, 47.18%)</title><rect x="39.2" y="835.0" width="556.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="42.2" y="846.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>JavaThread::check_special_condition_for_native_trans(JavaThread*) (1 samples, 0.05%)</title><rect x="55.6" y="819.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="58.6" y="830.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.05%)</title><rect x="55.6" y="803.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="58.6" y="814.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.05%)</title><rect x="55.6" y="787.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="58.6" y="798.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.05%)</title><rect x="55.6" y="771.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="58.6" y="782.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.05%)</title><rect x="55.6" y="755.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="58.6" y="766.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.05%)</title><rect x="55.6" y="739.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="58.6" y="750.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="55.6" y="723.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="58.6" y="734.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (4 samples, 0.20%)</title><rect x="56.2" y="819.0" width="2.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="59.2" y="830.0"></text>
</g>
<g>
<title>kevent (919 samples, 45.54%)</title><rect x="58.5" y="819.0" width="537.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="61.5" y="830.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (18 samples, 0.89%)</title><rect x="595.9" y="835.0" width="10.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="598.9" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.10%)</title><rect x="598.2" y="819.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="601.2" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.05%)</title><rect x="598.2" y="803.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="601.2" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.05%)</title><rect x="598.8" y="803.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="601.8" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.05%)</title><rect x="599.4" y="819.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="602.4" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.getDescriptor (1 samples, 0.05%)</title><rect x="600.0" y="819.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="603.0" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (10 samples, 0.50%)</title><rect x="600.6" y="819.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="603.6" y="830.0"></text>
</g>
<g>
<title>java/util/HashSet.add (6 samples, 0.30%)</title><rect x="600.6" y="803.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="603.6" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 0.25%)</title><rect x="601.2" y="787.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="604.2" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.25%)</title><rect x="601.2" y="771.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="604.2" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.05%)</title><rect x="604.1" y="803.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="607.1" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.05%)</title><rect x="604.1" y="787.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="607.1" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.05%)</title><rect x="604.1" y="771.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="607.1" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioReadyOps (1 samples, 0.05%)</title><rect x="604.7" y="803.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="607.7" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (2 samples, 0.10%)</title><rect x="605.3" y="803.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="608.3" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetReadyOps (2 samples, 0.10%)</title><rect x="605.3" y="787.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="608.3" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateReadyOps (2 samples, 0.10%)</title><rect x="605.3" y="771.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="608.3" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (5 samples, 0.25%)</title><rect x="606.4" y="835.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="609.4" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (5 samples, 0.25%)</title><rect x="606.4" y="819.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="609.4" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (5 samples, 0.25%)</title><rect x="609.4" y="835.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="612.4" y="846.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (5 samples, 0.25%)</title><rect x="609.4" y="819.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="612.4" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.15%)</title><rect x="609.4" y="803.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="612.4" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.10%)</title><rect x="609.9" y="787.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="612.9" y="798.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (2 samples, 0.10%)</title><rect x="609.9" y="771.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="612.9" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="609.9" y="755.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="612.9" y="766.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.05%)</title><rect x="609.9" y="739.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="612.9" y="750.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.05%)</title><rect x="609.9" y="723.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="612.9" y="734.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="609.9" y="707.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="612.9" y="718.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.05%)</title><rect x="609.9" y="691.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="612.9" y="702.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.05%)</title><rect x="609.9" y="675.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="612.9" y="686.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="610.5" y="755.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="613.5" y="766.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.10%)</title><rect x="611.1" y="803.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="614.1" y="814.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.05%)</title><rect x="611.7" y="787.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="614.7" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.05%)</title><rect x="611.7" y="771.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="614.7" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (2 samples, 0.10%)</title><rect x="612.3" y="835.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="615.3" y="846.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (2 samples, 0.10%)</title><rect x="612.3" y="819.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="615.3" y="830.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.10%)</title><rect x="612.3" y="803.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="615.3" y="814.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.05%)</title><rect x="612.3" y="787.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="615.3" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.05%)</title><rect x="612.3" y="771.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="615.3" y="782.0"></text>
</g>
<g>
<title>jdk/internal/access/SharedSecrets.getJavaLangAccess (1 samples, 0.05%)</title><rect x="612.9" y="787.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="615.9" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.10%)</title><rect x="613.4" y="851.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="616.4" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (1 samples, 0.05%)</title><rect x="614.6" y="883.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="617.6" y="894.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (802 samples, 39.74%)</title><rect x="615.2" y="899.0" width="469.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="618.2" y="910.0">one/nio/net/Session.process</text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.05%)</title><rect x="618.7" y="883.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="621.7" y="894.0"></text>
</g>
<g>
<title>java/lang/System.currentTimeMillis (1 samples, 0.05%)</title><rect x="619.3" y="883.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="622.3" y="894.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.05%)</title><rect x="619.3" y="867.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="622.3" y="878.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.05%)</title><rect x="619.3" y="851.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="622.3" y="862.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.05%)</title><rect x="619.3" y="835.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="622.3" y="846.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.05%)</title><rect x="619.3" y="819.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="622.3" y="830.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.05%)</title><rect x="619.3" y="803.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="622.3" y="814.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.05%)</title><rect x="619.3" y="787.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="622.3" y="798.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle const&amp;) (1 samples, 0.05%)</title><rect x="619.3" y="771.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="622.3" y="782.0"></text>
</g>
<g>
<title>SharedRuntime::generate_native_wrapper(MacroAssembler*, methodHandle const&amp;, int, BasicType*, VMRegPair*, BasicType) (1 samples, 0.05%)</title><rect x="619.3" y="755.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="622.3" y="766.0"></text>
</g>
<g>
<title>Method::critical_native_function() (1 samples, 0.05%)</title><rect x="619.3" y="739.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="622.3" y="750.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_entry(methodHandle const&amp;) (1 samples, 0.05%)</title><rect x="619.3" y="723.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="622.3" y="734.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_style(methodHandle const&amp;, char*, char const*, int, bool) (1 samples, 0.05%)</title><rect x="619.3" y="707.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="622.3" y="718.0"></text>
</g>
<g>
<title>os::dll_load(char const*, char*, int) (1 samples, 0.05%)</title><rect x="619.3" y="691.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="622.3" y="702.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="619.3" y="675.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="622.3" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="619.3" y="659.0" width="0.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="622.3" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="619.3" y="643.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="622.3" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="619.3" y="627.0" width="0.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="622.3" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (792 samples, 39.25%)</title><rect x="619.9" y="883.0" width="463.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="622.9" y="894.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleSocketClosed (1 samples, 0.05%)</title><rect x="620.5" y="867.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="623.5" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session.scheduleClose (1 samples, 0.05%)</title><rect x="620.5" y="851.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="623.5" y="862.0"></text>
</g>
<g>
<title>one/nio/net/Session.close (1 samples, 0.05%)</title><rect x="620.5" y="835.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="623.5" y="846.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.close (1 samples, 0.05%)</title><rect x="620.5" y="819.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="623.5" y="830.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.close (1 samples, 0.05%)</title><rect x="620.5" y="803.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="623.5" y="814.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.implCloseChannel (1 samples, 0.05%)</title><rect x="620.5" y="787.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="623.5" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.implCloseSelectableChannel (1 samples, 0.05%)</title><rect x="620.5" y="771.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="623.5" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/Net.getSocketOption (1 samples, 0.05%)</title><rect x="620.5" y="755.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="623.5" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/Net.getIntOption0 (1 samples, 0.05%)</title><rect x="620.5" y="739.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="623.5" y="750.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.findNative (1 samples, 0.05%)</title><rect x="620.5" y="723.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="623.5" y="734.0"></text>
</g>
<g>
<title>java/lang/ClassLoader$NativeLibrary.findEntry (1 samples, 0.05%)</title><rect x="620.5" y="707.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="623.5" y="718.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_00024NativeLibrary_findEntry (1 samples, 0.05%)</title><rect x="620.5" y="691.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="623.5" y="702.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.05%)</title><rect x="620.5" y="675.0" width="0.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="623.5" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="620.5" y="659.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="623.5" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="620.5" y="643.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="623.5" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="620.5" y="627.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="623.5" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="620.5" y="611.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="623.5" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="620.5" y="595.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="623.5" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="620.5" y="579.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="623.5" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="620.5" y="563.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="623.5" y="574.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="620.5" y="547.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="623.5" y="558.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="620.5" y="531.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="623.5" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (611 samples, 30.28%)</title><rect x="621.1" y="867.0" width="357.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="624.1" y="878.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (563 samples, 27.90%)</title><rect x="624.6" y="851.0" width="329.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="627.6" y="862.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (559 samples, 27.70%)</title><rect x="626.9" y="835.0" width="326.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="629.9" y="846.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_status.handleRequest (552 samples, 27.35%)</title><rect x="626.9" y="819.0" width="322.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="629.9" y="830.0">RequestHandler0_status.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (527 samples, 26.11%)</title><rect x="626.9" y="803.0" width="308.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="629.9" y="814.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (519 samples, 25.72%)</title><rect x="629.2" y="787.0" width="303.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="632.2" y="798.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (41 samples, 2.03%)</title><rect x="629.2" y="771.0" width="24.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="632.2" y="782.0">o..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.05%)</title><rect x="632.2" y="755.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="635.2" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (35 samples, 1.73%)</title><rect x="632.7" y="755.0" width="20.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="635.7" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.05%)</title><rect x="633.3" y="739.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="636.3" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (1 samples, 0.05%)</title><rect x="633.3" y="723.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="636.3" y="734.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.10%)</title><rect x="633.9" y="739.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="636.9" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="634.5" y="723.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="637.5" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (17 samples, 0.84%)</title><rect x="635.1" y="739.0" width="9.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="638.1" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.15%)</title><rect x="642.7" y="723.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="645.7" y="734.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.10%)</title><rect x="643.3" y="707.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="646.3" y="718.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.05%)</title><rect x="644.4" y="723.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="647.4" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (14 samples, 0.69%)</title><rect x="645.0" y="739.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="648.0" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (14 samples, 0.69%)</title><rect x="645.0" y="723.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="648.0" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.10%)</title><rect x="652.0" y="707.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="655.0" y="718.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.10%)</title><rect x="652.0" y="691.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="655.0" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (478 samples, 23.69%)</title><rect x="653.2" y="771.0" width="279.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="656.2" y="782.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (478 samples, 23.69%)</title><rect x="653.2" y="755.0" width="279.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="656.2" y="766.0">one/nio/net/Session.write</text>
</g>
<g>
<title>__cxx_global_var_init (1 samples, 0.05%)</title><rect x="654.4" y="739.0" width="0.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="657.4" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (474 samples, 23.49%)</title><rect x="655.0" y="739.0" width="277.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="658.0" y="750.0">one/nio/net/Session$ArrayQueueItem.wr..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (473 samples, 23.44%)</title><rect x="655.6" y="723.0" width="276.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="658.6" y="734.0">one/nio/net/JavaSocket.write</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (12 samples, 0.59%)</title><rect x="655.6" y="707.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="658.6" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (12 samples, 0.59%)</title><rect x="655.6" y="691.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="658.6" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (12 samples, 0.59%)</title><rect x="655.6" y="675.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="658.6" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (10 samples, 0.50%)</title><rect x="656.7" y="659.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="659.7" y="670.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.05%)</title><rect x="656.7" y="643.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="659.7" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (9 samples, 0.45%)</title><rect x="657.3" y="643.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="660.3" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (9 samples, 0.45%)</title><rect x="657.3" y="627.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="660.3" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (9 samples, 0.45%)</title><rect x="657.3" y="611.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="660.3" y="622.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.10%)</title><rect x="660.8" y="595.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="663.8" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1 samples, 0.05%)</title><rect x="662.0" y="595.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="665.0" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (461 samples, 22.84%)</title><rect x="662.6" y="707.0" width="269.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="665.6" y="718.0">sun/nio/ch/SocketChannelImpl.write</text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.05%)</title><rect x="663.2" y="691.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="666.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (11 samples, 0.55%)</title><rect x="663.7" y="691.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="666.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (9 samples, 0.45%)</title><rect x="664.9" y="675.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="667.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (9 samples, 0.45%)</title><rect x="664.9" y="659.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="667.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (9 samples, 0.45%)</title><rect x="664.9" y="643.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="667.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (7 samples, 0.35%)</title><rect x="665.5" y="627.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="668.5" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.30%)</title><rect x="666.1" y="611.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="669.1" y="622.0"></text>
</g>
<g>
<title>__vsnprintf_chk (2 samples, 0.10%)</title><rect x="666.1" y="595.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="669.1" y="606.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.10%)</title><rect x="667.2" y="595.0" width="1.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="670.2" y="606.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.10%)</title><rect x="667.2" y="579.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="670.2" y="590.0"></text>
</g>
<g>
<title>_res (2 samples, 0.10%)</title><rect x="667.2" y="563.0" width="1.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="670.2" y="574.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.10%)</title><rect x="668.4" y="595.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="671.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.05%)</title><rect x="669.6" y="627.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="672.6" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.05%)</title><rect x="669.6" y="611.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="672.6" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (447 samples, 22.15%)</title><rect x="670.2" y="691.0" width="261.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="673.2" y="702.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.05%)</title><rect x="670.2" y="675.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="673.2" y="686.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.05%)</title><rect x="670.2" y="659.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="673.2" y="670.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.05%)</title><rect x="670.2" y="643.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="673.2" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (446 samples, 22.10%)</title><rect x="670.8" y="675.0" width="260.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="673.8" y="686.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (15 samples, 0.74%)</title><rect x="671.3" y="659.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="674.3" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (15 samples, 0.74%)</title><rect x="671.3" y="643.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="674.3" y="654.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.05%)</title><rect x="672.5" y="627.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="675.5" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (12 samples, 0.59%)</title><rect x="673.1" y="627.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="676.1" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (7 samples, 0.35%)</title><rect x="673.1" y="611.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="676.1" y="622.0"></text>
</g>
<g>
<title>Unsafe_CopyMemory0(JNIEnv_*, _jobject*, _jobject*, long, _jobject*, long, long) (7 samples, 0.35%)</title><rect x="673.1" y="595.0" width="4.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="676.1" y="606.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.05%)</title><rect x="673.7" y="579.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="676.7" y="590.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.05%)</title><rect x="674.3" y="579.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="677.3" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="674.8" y="579.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="677.8" y="590.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.05%)</title><rect x="674.8" y="563.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="677.8" y="574.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.05%)</title><rect x="674.8" y="547.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="677.8" y="558.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="674.8" y="531.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="677.8" y="542.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.05%)</title><rect x="674.8" y="515.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="677.8" y="526.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="674.8" y="499.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="677.8" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.05%)</title><rect x="675.4" y="579.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="678.4" y="590.0"></text>
</g>
<g>
<title>SafepointMechanism::should_block(Thread*) (1 samples, 0.05%)</title><rect x="675.4" y="563.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="678.4" y="574.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.05%)</title><rect x="676.0" y="579.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="679.0" y="590.0"></text>
</g>
<g>
<title>in_ByteSize(int) (1 samples, 0.05%)</title><rect x="676.6" y="579.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="679.6" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (5 samples, 0.25%)</title><rect x="677.2" y="611.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="680.2" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (5 samples, 0.25%)</title><rect x="677.2" y="595.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="680.2" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (5 samples, 0.25%)</title><rect x="677.2" y="579.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="680.2" y="590.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (4 samples, 0.20%)</title><rect x="677.8" y="563.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="680.8" y="574.0"></text>
</g>
<g>
<title>java/lang/Class.isArray (2 samples, 0.10%)</title><rect x="678.9" y="547.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="681.9" y="558.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.05%)</title><rect x="678.9" y="531.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="681.9" y="542.0"></text>
</g>
<g>
<title>JVM_IsArrayClass (1 samples, 0.05%)</title><rect x="679.5" y="531.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="682.5" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="679.5" y="515.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="682.5" y="526.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.05%)</title><rect x="679.5" y="499.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="682.5" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (429 samples, 21.26%)</title><rect x="680.1" y="659.0" width="250.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="683.1" y="670.0">sun/nio/ch/IOUtil.writeFromNative..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (429 samples, 21.26%)</title><rect x="680.1" y="643.0" width="250.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="683.1" y="654.0">sun/nio/ch/SocketDispatcher.write</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (428 samples, 21.21%)</title><rect x="680.7" y="627.0" width="250.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="683.7" y="638.0">sun/nio/ch/FileDispatcherImpl.wri..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (5 samples, 0.25%)</title><rect x="686.5" y="611.0" width="3.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="689.5" y="622.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.05%)</title><rect x="688.9" y="595.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="691.9" y="606.0"></text>
</g>
<g>
<title>write (413 samples, 20.47%)</title><rect x="689.5" y="611.0" width="241.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="692.5" y="622.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.05%)</title><rect x="931.0" y="659.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="934.0" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.05%)</title><rect x="931.0" y="643.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="934.0" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.05%)</title><rect x="931.0" y="627.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="934.0" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (1 samples, 0.05%)</title><rect x="931.5" y="691.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="934.5" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (1 samples, 0.05%)</title><rect x="931.5" y="675.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="934.5" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.05%)</title><rect x="932.1" y="739.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="935.1" y="750.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.05%)</title><rect x="932.1" y="723.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="935.1" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.15%)</title><rect x="932.7" y="787.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="935.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.15%)</title><rect x="932.7" y="771.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="935.7" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.10%)</title><rect x="933.3" y="755.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="936.3" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.10%)</title><rect x="933.3" y="739.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="936.3" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.10%)</title><rect x="933.3" y="723.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="936.3" y="734.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.10%)</title><rect x="933.3" y="707.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="936.3" y="718.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (1 samples, 0.05%)</title><rect x="934.5" y="787.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="937.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.incrementAndGet (1 samples, 0.05%)</title><rect x="934.5" y="771.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="937.5" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getAndAddLong (1 samples, 0.05%)</title><rect x="934.5" y="755.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="937.5" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getLongVolatile (1 samples, 0.05%)</title><rect x="934.5" y="739.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="937.5" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.status (25 samples, 1.24%)</title><rect x="935.1" y="803.0" width="14.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="938.1" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (25 samples, 1.24%)</title><rect x="935.1" y="787.0" width="14.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="938.1" y="798.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.10%)</title><rect x="936.2" y="771.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="939.2" y="782.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.10%)</title><rect x="936.2" y="755.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="939.2" y="766.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.05%)</title><rect x="936.8" y="739.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="939.8" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.05%)</title><rect x="936.8" y="723.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="939.8" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (21 samples, 1.04%)</title><rect x="937.4" y="771.0" width="12.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="940.4" y="782.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 0.20%)</title><rect x="945.6" y="755.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="948.6" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.20%)</title><rect x="945.6" y="739.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="948.6" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.10%)</title><rect x="945.6" y="723.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="948.6" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.10%)</title><rect x="945.6" y="707.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="948.6" y="718.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="946.2" y="691.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="949.2" y="702.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.05%)</title><rect x="946.7" y="723.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="949.7" y="734.0"></text>
</g>
<g>
<title>java/lang/Integer.stringSize (1 samples, 0.05%)</title><rect x="947.3" y="723.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="950.3" y="734.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.05%)</title><rect x="947.9" y="755.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="950.9" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.05%)</title><rect x="947.9" y="739.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="950.9" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (2 samples, 0.10%)</title><rect x="948.5" y="755.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="951.5" y="766.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (7 samples, 0.35%)</title><rect x="949.7" y="819.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="952.7" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.30%)</title><rect x="950.3" y="803.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="953.3" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.15%)</title><rect x="950.8" y="787.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="953.8" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.10%)</title><rect x="952.6" y="787.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="955.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.05%)</title><rect x="953.2" y="771.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="956.2" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.05%)</title><rect x="953.2" y="755.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="956.2" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (32 samples, 1.59%)</title><rect x="953.8" y="851.0" width="18.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="956.8" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (13 samples, 0.64%)</title><rect x="953.8" y="835.0" width="7.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="956.8" y="846.0"></text>
</g>
<g>
<title>RequestHandler0_status.handleRequest (2 samples, 0.10%)</title><rect x="959.6" y="819.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="962.6" y="830.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.05%)</title><rect x="960.8" y="819.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="963.8" y="830.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.05%)</title><rect x="960.8" y="803.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="963.8" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (17 samples, 0.84%)</title><rect x="961.4" y="835.0" width="9.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="964.4" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (16 samples, 0.79%)</title><rect x="962.0" y="819.0" width="9.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="965.0" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (8 samples, 0.40%)</title><rect x="966.6" y="803.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="969.6" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (7 samples, 0.35%)</title><rect x="967.2" y="787.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="970.2" y="798.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.05%)</title><rect x="970.7" y="771.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="973.7" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.10%)</title><rect x="971.3" y="835.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="974.3" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.25%)</title><rect x="972.5" y="851.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="975.5" y="862.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.25%)</title><rect x="972.5" y="835.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="975.5" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.15%)</title><rect x="973.6" y="819.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="976.6" y="830.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.15%)</title><rect x="973.6" y="803.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="976.6" y="814.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.15%)</title><rect x="973.6" y="787.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="976.6" y="798.0"></text>
</g>
<g>
<title>ThreadSafepointState::handle_polling_page_exception() (1 samples, 0.05%)</title><rect x="974.2" y="771.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="977.2" y="782.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.05%)</title><rect x="974.2" y="755.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="977.2" y="766.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.05%)</title><rect x="974.2" y="739.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="977.2" y="750.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.05%)</title><rect x="974.2" y="723.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="977.2" y="734.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.05%)</title><rect x="974.2" y="707.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="977.2" y="718.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="974.2" y="691.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="977.2" y="702.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.05%)</title><rect x="974.8" y="771.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="977.8" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.25%)</title><rect x="975.4" y="851.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="978.4" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.25%)</title><rect x="975.4" y="835.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="978.4" y="846.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.10%)</title><rect x="977.2" y="819.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="980.2" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.05%)</title><rect x="977.2" y="803.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="980.2" y="814.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (1 samples, 0.05%)</title><rect x="977.7" y="803.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="980.7" y="814.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsOffCount (1 samples, 0.05%)</title><rect x="977.7" y="787.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="980.7" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (179 samples, 8.87%)</title><rect x="978.3" y="867.0" width="104.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="981.3" y="878.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (178 samples, 8.82%)</title><rect x="978.9" y="851.0" width="104.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="981.9" y="862.0">one/nio/net/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.30%)</title><rect x="978.9" y="835.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="981.9" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.25%)</title><rect x="979.5" y="819.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="982.5" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.25%)</title><rect x="979.5" y="803.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="982.5" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="981.8" y="787.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="984.8" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="981.8" y="771.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="984.8" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="981.8" y="755.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="984.8" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (172 samples, 8.52%)</title><rect x="982.4" y="835.0" width="100.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="985.4" y="846.0">sun/nio/ch/S..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.40%)</title><rect x="983.6" y="819.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="986.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.40%)</title><rect x="983.6" y="803.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="986.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (8 samples, 0.40%)</title><rect x="983.6" y="787.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="986.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (7 samples, 0.35%)</title><rect x="984.2" y="771.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="987.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.05%)</title><rect x="984.2" y="755.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="987.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (6 samples, 0.30%)</title><rect x="984.8" y="755.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="987.8" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (5 samples, 0.25%)</title><rect x="985.3" y="739.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="988.3" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (5 samples, 0.25%)</title><rect x="985.3" y="723.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="988.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.05%)</title><rect x="988.3" y="819.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="991.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.05%)</title><rect x="988.3" y="803.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="991.3" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (159 samples, 7.88%)</title><rect x="988.9" y="819.0" width="92.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="991.9" y="830.0">sun/nio/ch/..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.15%)</title><rect x="988.9" y="803.0" width="1.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="991.9" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (156 samples, 7.73%)</title><rect x="990.6" y="803.0" width="91.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="993.6" y="814.0">sun/nio/ch/..</text>
</g>
<g>
<title>java/nio/Buffer.remaining (4 samples, 0.20%)</title><rect x="993.5" y="787.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="996.5" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (8 samples, 0.40%)</title><rect x="995.9" y="787.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="998.9" y="798.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (7 samples, 0.35%)</title><rect x="996.5" y="771.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="999.5" y="782.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.05%)</title><rect x="996.5" y="755.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="999.5" y="766.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.05%)</title><rect x="997.0" y="755.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1000.0" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="997.0" y="739.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1000.0" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (5 samples, 0.25%)</title><rect x="997.6" y="755.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1000.6" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (1 samples, 0.05%)</title><rect x="997.6" y="739.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1000.6" y="750.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.05%)</title><rect x="997.6" y="723.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1000.6" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (4 samples, 0.20%)</title><rect x="998.2" y="739.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1001.2" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (4 samples, 0.20%)</title><rect x="998.2" y="723.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1001.2" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (2 samples, 0.10%)</title><rect x="998.2" y="707.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1001.2" y="718.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.05%)</title><rect x="998.2" y="691.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1001.2" y="702.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.05%)</title><rect x="998.2" y="675.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1001.2" y="686.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.05%)</title><rect x="998.2" y="659.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1001.2" y="670.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.05%)</title><rect x="998.2" y="643.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1001.2" y="654.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.05%)</title><rect x="998.2" y="627.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1001.2" y="638.0"></text>
</g>
<g>
<title>SharedRuntime::extract_attached_method(vframeStream&amp;) (1 samples, 0.05%)</title><rect x="998.2" y="611.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1001.2" y="622.0"></text>
</g>
<g>
<title>CompiledMethod::attached_method(unsigned char*) (1 samples, 0.05%)</title><rect x="998.2" y="595.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1001.2" y="606.0"></text>
</g>
<g>
<title>RelocIterator::set_limits(unsigned char*, unsigned char*) (1 samples, 0.05%)</title><rect x="998.2" y="579.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1001.2" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkOffset (1 samples, 0.05%)</title><rect x="998.8" y="691.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1001.8" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.invalidInput (1 samples, 0.05%)</title><rect x="998.8" y="675.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1001.8" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.10%)</title><rect x="999.4" y="707.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1002.4" y="718.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (2 samples, 0.10%)</title><rect x="999.4" y="691.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1002.4" y="702.0"></text>
</g>
<g>
<title>java/lang/Class.isArray (2 samples, 0.10%)</title><rect x="999.4" y="675.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1002.4" y="686.0"></text>
</g>
<g>
<title>JVM_IsArrayClass (2 samples, 0.10%)</title><rect x="999.4" y="659.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1002.4" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="999.4" y="643.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1002.4" y="654.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.05%)</title><rect x="999.4" y="627.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1002.4" y="638.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.05%)</title><rect x="1000.0" y="643.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1003.0" y="654.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::load&lt;oopDesc*&gt;(void*) (1 samples, 0.05%)</title><rect x="1000.0" y="627.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1003.0" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (136 samples, 6.74%)</title><rect x="1000.5" y="787.0" width="79.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1003.5" y="798.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (136 samples, 6.74%)</title><rect x="1000.5" y="771.0" width="79.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1003.5" y="782.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (136 samples, 6.74%)</title><rect x="1000.5" y="755.0" width="79.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1003.5" y="766.0">sun/nio/c..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (7 samples, 0.35%)</title><rect x="1004.6" y="739.0" width="4.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1007.6" y="750.0"></text>
</g>
<g>
<title>read (122 samples, 6.05%)</title><rect x="1008.7" y="739.0" width="71.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1011.7" y="750.0">read</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.15%)</title><rect x="1080.1" y="787.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1083.1" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.10%)</title><rect x="1080.7" y="771.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1083.7" y="782.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.05%)</title><rect x="1080.7" y="755.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1083.7" y="766.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.05%)</title><rect x="1080.7" y="739.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1083.7" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="1080.7" y="723.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1083.7" y="734.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (1 samples, 0.05%)</title><rect x="1081.2" y="755.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1084.2" y="766.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (1 samples, 0.05%)</title><rect x="1081.2" y="739.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1084.2" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.rewind (1 samples, 0.05%)</title><rect x="1081.2" y="723.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1084.2" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (2 samples, 0.10%)</title><rect x="1081.8" y="819.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1084.8" y="830.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.10%)</title><rect x="1083.0" y="883.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1086.0" y="894.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.05%)</title><rect x="1083.6" y="867.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1086.6" y="878.0"></text>
</g>
<g>
<title>thread_start (181 samples, 8.97%)</title><rect x="1084.2" y="915.0" width="105.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1087.2" y="926.0">thread_start</text>
</g>
<g>
<title>_pthread_start (181 samples, 8.97%)</title><rect x="1084.2" y="899.0" width="105.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1087.2" y="910.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (181 samples, 8.97%)</title><rect x="1084.2" y="883.0" width="105.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1087.2" y="894.0">_pthread_body</text>
</g>
<g>
<title>thread_native_entry(Thread*) (181 samples, 8.97%)</title><rect x="1084.2" y="867.0" width="105.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1087.2" y="878.0">thread_native..</text>
</g>
<g>
<title>Thread::call_run() (181 samples, 8.97%)</title><rect x="1084.2" y="851.0" width="105.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1087.2" y="862.0">Thread::call_..</text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.05%)</title><rect x="1084.2" y="835.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1087.2" y="846.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.05%)</title><rect x="1084.2" y="819.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1087.2" y="830.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (1 samples, 0.05%)</title><rect x="1084.2" y="803.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1087.2" y="814.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.05%)</title><rect x="1084.2" y="787.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1087.2" y="798.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.05%)</title><rect x="1084.2" y="771.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1087.2" y="782.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.05%)</title><rect x="1084.2" y="755.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1087.2" y="766.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="1084.2" y="739.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1087.2" y="750.0"></text>
</g>
<g>
<title>GangWorker::loop() (13 samples, 0.64%)</title><rect x="1084.7" y="835.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1087.7" y="846.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (12 samples, 0.59%)</title><rect x="1084.7" y="819.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1087.7" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.10%)</title><rect x="1084.7" y="803.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1087.7" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.10%)</title><rect x="1084.7" y="787.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1087.7" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (2 samples, 0.10%)</title><rect x="1084.7" y="771.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1087.7" y="782.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.10%)</title><rect x="1084.7" y="755.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1087.7" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.10%)</title><rect x="1084.7" y="739.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1087.7" y="750.0"></text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord const*, HeapWord*, unsigned long) (1 samples, 0.05%)</title><rect x="1085.3" y="723.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1088.3" y="734.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (4 samples, 0.20%)</title><rect x="1085.9" y="803.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1088.9" y="814.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (4 samples, 0.20%)</title><rect x="1085.9" y="787.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1088.9" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (4 samples, 0.20%)</title><rect x="1085.9" y="771.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1088.9" y="782.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (4 samples, 0.20%)</title><rect x="1085.9" y="755.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1088.9" y="766.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_buffer(CardTableEntryClosure*, BufferNode*, bool, unsigned int) (4 samples, 0.20%)</title><rect x="1085.9" y="739.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1088.9" y="750.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.20%)</title><rect x="1085.9" y="723.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1088.9" y="734.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (4 samples, 0.20%)</title><rect x="1085.9" y="707.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1088.9" y="718.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (4 samples, 0.20%)</title><rect x="1085.9" y="691.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1088.9" y="702.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (4 samples, 0.20%)</title><rect x="1085.9" y="675.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1088.9" y="686.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.05%)</title><rect x="1086.5" y="659.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1089.5" y="670.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.10%)</title><rect x="1087.1" y="659.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1090.1" y="670.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.05%)</title><rect x="1087.7" y="643.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1090.7" y="654.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (6 samples, 0.30%)</title><rect x="1088.3" y="803.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1091.3" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.20%)</title><rect x="1088.3" y="787.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1091.3" y="798.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (3 samples, 0.15%)</title><rect x="1088.3" y="771.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1091.3" y="782.0"></text>
</g>
<g>
<title>G1CLDScanClosure::do_cld(ClassLoaderData*) (3 samples, 0.15%)</title><rect x="1088.3" y="755.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1091.3" y="766.0"></text>
</g>
<g>
<title>ClassLoaderData::ChunkedHandleList::oops_do(OopClosure*) (3 samples, 0.15%)</title><rect x="1088.3" y="739.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1091.3" y="750.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)1, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (3 samples, 0.15%)</title><rect x="1088.3" y="723.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1091.3" y="734.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (3 samples, 0.15%)</title><rect x="1088.3" y="707.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1091.3" y="718.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (3 samples, 0.15%)</title><rect x="1088.3" y="691.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1091.3" y="702.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.10%)</title><rect x="1088.8" y="675.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1091.8" y="686.0"></text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord const*, HeapWord*, unsigned long) (1 samples, 0.05%)</title><rect x="1089.4" y="659.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1092.4" y="670.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.05%)</title><rect x="1090.0" y="771.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1093.0" y="782.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.05%)</title><rect x="1090.0" y="755.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1093.0" y="766.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.05%)</title><rect x="1090.0" y="739.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1093.0" y="750.0"></text>
</g>
<g>
<title>frame::oops_code_blob_do(OopClosure*, CodeBlobClosure*, RegisterMap const*) (1 samples, 0.05%)</title><rect x="1090.0" y="723.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1093.0" y="734.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.05%)</title><rect x="1090.0" y="707.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1093.0" y="718.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.05%)</title><rect x="1090.0" y="691.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1093.0" y="702.0"></text>
</g>
<g>
<title>void G1CodeBlobClosure::HeapRegionGatheringOopClosure::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.05%)</title><rect x="1090.0" y="675.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1093.0" y="686.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.05%)</title><rect x="1090.0" y="659.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1093.0" y="670.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (1 samples, 0.05%)</title><rect x="1090.0" y="643.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1093.0" y="654.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.05%)</title><rect x="1090.0" y="627.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.0" y="638.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.05%)</title><rect x="1090.0" y="611.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1093.0" y="622.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="1090.0" y="595.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1093.0" y="606.0"></text>
</g>
<g>
<title>G1RootProcessor::process_string_table_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.05%)</title><rect x="1090.6" y="787.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1093.6" y="798.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (1 samples, 0.05%)</title><rect x="1090.6" y="771.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1093.6" y="782.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.05%)</title><rect x="1090.6" y="755.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1093.6" y="766.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.05%)</title><rect x="1091.2" y="787.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1094.2" y="798.0"></text>
</g>
<g>
<title>SymbolPropertyTable::oops_do(OopClosure*) (1 samples, 0.05%)</title><rect x="1091.2" y="771.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1094.2" y="782.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.05%)</title><rect x="1091.2" y="755.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1094.2" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (1 samples, 0.05%)</title><rect x="1091.2" y="739.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1094.2" y="750.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.05%)</title><rect x="1091.8" y="819.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1094.8" y="830.0"></text>
</g>
<g>
<title>__block_descriptor_tmp (1 samples, 0.05%)</title><rect x="1091.8" y="803.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1094.8" y="814.0"></text>
</g>
<g>
<title>JavaThread::run() (159 samples, 7.88%)</title><rect x="1092.3" y="835.0" width="93.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1095.3" y="846.0">JavaThread:..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (159 samples, 7.88%)</title><rect x="1092.3" y="819.0" width="93.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1095.3" y="830.0">JavaThread:..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (155 samples, 7.68%)</title><rect x="1092.3" y="803.0" width="90.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1095.3" y="814.0">CompileBro..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (152 samples, 7.53%)</title><rect x="1092.3" y="787.0" width="88.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1095.3" y="798.0">CompileBro..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (135 samples, 6.69%)</title><rect x="1092.3" y="771.0" width="79.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1095.3" y="782.0">C2Compile..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (135 samples, 6.69%)</title><rect x="1092.3" y="755.0" width="79.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1095.3" y="766.0">Compile::..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.05%)</title><rect x="1092.3" y="739.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1095.3" y="750.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.05%)</title><rect x="1092.3" y="723.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.3" y="734.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.05%)</title><rect x="1092.3" y="707.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1095.3" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.05%)</title><rect x="1092.3" y="691.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.3" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.05%)</title><rect x="1092.3" y="675.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1095.3" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::clone_loop_heads(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1092.3" y="659.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1095.3" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::clone_loop_head(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1092.3" y="643.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1095.3" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1092.3" y="627.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1095.3" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1092.3" y="611.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1095.3" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.05%)</title><rect x="1092.3" y="595.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1095.3" y="606.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="1092.3" y="579.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1095.3" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1092.3" y="563.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1095.3" y="574.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.05%)</title><rect x="1092.3" y="547.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1095.3" y="558.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.05%)</title><rect x="1092.3" y="531.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1095.3" y="542.0"></text>
</g>
<g>
<title>methodHandle::methodHandle(methodHandle const&amp;) (1 samples, 0.05%)</title><rect x="1092.3" y="515.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1095.3" y="526.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (75 samples, 3.72%)</title><rect x="1092.9" y="739.0" width="43.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1095.9" y="750.0">Comp..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.15%)</title><rect x="1092.9" y="723.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1095.9" y="734.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 0.15%)</title><rect x="1092.9" y="707.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1095.9" y="718.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.05%)</title><rect x="1092.9" y="691.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1095.9" y="702.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.05%)</title><rect x="1092.9" y="675.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1095.9" y="686.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.05%)</title><rect x="1092.9" y="659.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1095.9" y="670.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.10%)</title><rect x="1093.5" y="691.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1096.5" y="702.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 0.10%)</title><rect x="1093.5" y="675.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1096.5" y="686.0"></text>
</g>
<g>
<title>CodeBuffer::CodeBuffer(unsigned char*, int) (1 samples, 0.05%)</title><rect x="1093.5" y="659.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1096.5" y="670.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.05%)</title><rect x="1094.1" y="659.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.1" y="670.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.15%)</title><rect x="1094.7" y="723.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1097.7" y="734.0"></text>
</g>
<g>
<title>Block_Array::grow(unsigned int) (1 samples, 0.05%)</title><rect x="1094.7" y="707.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1097.7" y="718.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1094.7" y="691.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.7" y="702.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="1094.7" y="675.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1097.7" y="686.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.05%)</title><rect x="1095.3" y="707.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1098.3" y="718.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1095.3" y="691.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1098.3" y="702.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.05%)</title><rect x="1095.9" y="707.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.9" y="718.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.25%)</title><rect x="1096.4" y="723.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1099.4" y="734.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.25%)</title><rect x="1096.4" y="707.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1099.4" y="718.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.05%)</title><rect x="1097.0" y="691.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1100.0" y="702.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.05%)</title><rect x="1097.6" y="691.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1100.6" y="702.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.05%)</title><rect x="1097.6" y="675.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1100.6" y="686.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.05%)</title><rect x="1097.6" y="659.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1100.6" y="670.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.05%)</title><rect x="1097.6" y="643.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1100.6" y="654.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.05%)</title><rect x="1098.2" y="691.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1101.2" y="702.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1098.8" y="691.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1101.8" y="702.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.05%)</title><rect x="1098.8" y="675.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1101.8" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.25%)</title><rect x="1099.4" y="723.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1102.4" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.25%)</title><rect x="1099.4" y="707.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1102.4" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.05%)</title><rect x="1099.4" y="691.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1102.4" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.05%)</title><rect x="1099.4" y="675.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1102.4" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.05%)</title><rect x="1100.0" y="691.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1103.0" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.05%)</title><rect x="1100.0" y="675.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1103.0" y="686.0"></text>
</g>
<g>
<title>add_call_kills(MachProjNode*, RegMask&amp;, char const*, bool) (1 samples, 0.05%)</title><rect x="1100.0" y="659.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1103.0" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.05%)</title><rect x="1100.5" y="691.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1103.5" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.10%)</title><rect x="1101.1" y="691.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1104.1" y="702.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.05%)</title><rect x="1101.1" y="675.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1104.1" y="686.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="1101.7" y="675.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1104.7" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (59 samples, 2.92%)</title><rect x="1102.3" y="723.0" width="34.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1105.3" y="734.0">Ph..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.05%)</title><rect x="1102.3" y="707.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1105.3" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.05%)</title><rect x="1102.9" y="707.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1105.9" y="718.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.05%)</title><rect x="1103.5" y="707.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1106.5" y="718.0"></text>
</g>
<g>
<title>Block::has_uncommon_code() const (1 samples, 0.05%)</title><rect x="1103.5" y="691.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1106.5" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.05%)</title><rect x="1104.0" y="707.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1107.0" y="718.0"></text>
</g>
<g>
<title>RegMask::SUBTRACT(RegMask const&amp;) (1 samples, 0.05%)</title><rect x="1104.0" y="691.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1107.0" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.15%)</title><rect x="1104.6" y="707.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1107.6" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.10%)</title><rect x="1105.2" y="691.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1108.2" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.15%)</title><rect x="1106.4" y="707.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1109.4" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (18 samples, 0.89%)</title><rect x="1108.1" y="707.0" width="10.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1111.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (2 samples, 0.10%)</title><rect x="1108.7" y="691.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1111.7" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.05%)</title><rect x="1109.3" y="675.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1112.3" y="686.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.05%)</title><rect x="1109.3" y="659.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1112.3" y="670.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.05%)</title><rect x="1109.3" y="643.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1112.3" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 0.25%)</title><rect x="1109.9" y="691.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1112.9" y="702.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.05%)</title><rect x="1110.5" y="675.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1113.5" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.10%)</title><rect x="1111.1" y="675.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1114.1" y="686.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.05%)</title><rect x="1112.2" y="675.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1115.2" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (9 samples, 0.45%)</title><rect x="1112.8" y="691.0" width="5.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1115.8" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="1113.4" y="675.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1116.4" y="686.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.10%)</title><rect x="1114.0" y="675.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.0" y="686.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (5 samples, 0.25%)</title><rect x="1115.2" y="675.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1118.2" y="686.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.05%)</title><rect x="1118.1" y="691.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1121.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.10%)</title><rect x="1118.7" y="707.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.7" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.10%)</title><rect x="1118.7" y="691.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1121.7" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.05%)</title><rect x="1118.7" y="675.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1121.7" y="686.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.05%)</title><rect x="1119.2" y="675.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1122.2" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (1 samples, 0.05%)</title><rect x="1119.8" y="707.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.8" y="718.0"></text>
</g>
<g>
<title>RegMask::find_last_elem() const (1 samples, 0.05%)</title><rect x="1119.8" y="691.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.8" y="702.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 0.05%)</title><rect x="1119.8" y="675.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1122.8" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 0.05%)</title><rect x="1120.4" y="707.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1123.4" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (10 samples, 0.50%)</title><rect x="1121.0" y="707.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1124.0" y="718.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (1 samples, 0.05%)</title><rect x="1122.8" y="691.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.8" y="702.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.05%)</title><rect x="1123.3" y="691.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.3" y="702.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.05%)</title><rect x="1123.9" y="691.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1126.9" y="702.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (4 samples, 0.20%)</title><rect x="1124.5" y="691.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1127.5" y="702.0"></text>
</g>
<g>
<title>RegMask::Size() const (4 samples, 0.20%)</title><rect x="1124.5" y="675.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.5" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.10%)</title><rect x="1126.8" y="707.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (8 samples, 0.40%)</title><rect x="1128.0" y="707.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.0" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (5 samples, 0.25%)</title><rect x="1129.2" y="691.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.2" y="702.0"></text>
</g>
<g>
<title>RegMask::find_first_elem() const (1 samples, 0.05%)</title><rect x="1132.1" y="691.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.1" y="702.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.05%)</title><rect x="1132.1" y="675.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1135.1" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.05%)</title><rect x="1132.7" y="707.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.7" y="718.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.10%)</title><rect x="1133.3" y="707.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1136.3" y="718.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.05%)</title><rect x="1133.3" y="691.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.3" y="702.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.05%)</title><rect x="1133.9" y="691.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1136.9" y="702.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.05%)</title><rect x="1133.9" y="675.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.9" y="686.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::union_helper(Node*, Node*, unsigned int, unsigned int, Node*, Node*, Node*, Block*, unsigned int) (1 samples, 0.05%)</title><rect x="1133.9" y="659.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.9" y="670.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.05%)</title><rect x="1134.4" y="707.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.4" y="718.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.05%)</title><rect x="1135.0" y="707.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.0" y="718.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.05%)</title><rect x="1135.6" y="707.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.6" y="718.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.05%)</title><rect x="1136.2" y="707.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.2" y="718.0"></text>
</g>
<g>
<title>Compile::Optimize() (39 samples, 1.93%)</title><rect x="1136.8" y="739.0" width="22.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1139.8" y="750.0">C..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.05%)</title><rect x="1136.8" y="723.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1139.8" y="734.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.05%)</title><rect x="1136.8" y="707.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.8" y="718.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.05%)</title><rect x="1136.8" y="691.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.8" y="702.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (15 samples, 0.74%)</title><rect x="1137.4" y="723.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.4" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (15 samples, 0.74%)</title><rect x="1137.4" y="707.0" width="8.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.4" y="718.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1137.4" y="691.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.4" y="702.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1137.4" y="675.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.4" y="686.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1137.4" y="659.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.4" y="670.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1137.4" y="643.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.4" y="654.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1137.4" y="627.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.4" y="638.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1137.4" y="611.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.4" y="622.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1137.4" y="595.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.4" y="606.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1137.4" y="579.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.4" y="590.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1137.4" y="563.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.4" y="574.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1137.4" y="547.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.4" y="558.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1137.4" y="531.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.4" y="542.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1137.4" y="515.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.4" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.05%)</title><rect x="1137.4" y="499.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1140.4" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_post_loop(IdealLoopTree*, Node_List&amp;, CountedLoopNode*, CountedLoopEndNode*, Node*, Node*, CountedLoopNode*&amp;) (1 samples, 0.05%)</title><rect x="1137.4" y="483.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.4" y="494.0"></text>
</g>
<g>
<title>PhaseValues::hash_delete(Node*) (1 samples, 0.05%)</title><rect x="1137.4" y="467.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.4" y="478.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.05%)</title><rect x="1137.4" y="451.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.4" y="462.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.05%)</title><rect x="1137.4" y="435.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.4" y="446.0"></text>
</g>
<g>
<title>NTarjan::EVAL() (1 samples, 0.05%)</title><rect x="1138.0" y="691.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1141.0" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.05%)</title><rect x="1138.5" y="691.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.5" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.20%)</title><rect x="1139.1" y="691.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.1" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (2 samples, 0.10%)</title><rect x="1140.3" y="675.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.3" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.10%)</title><rect x="1141.5" y="691.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.5" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (1 samples, 0.05%)</title><rect x="1141.5" y="675.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.5" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.05%)</title><rect x="1141.5" y="659.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1144.5" y="670.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.05%)</title><rect x="1141.5" y="643.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1144.5" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.05%)</title><rect x="1142.1" y="675.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.1" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.10%)</title><rect x="1142.6" y="691.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.6" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::sort(IdealLoopTree*, IdealLoopTree*) (1 samples, 0.05%)</title><rect x="1143.2" y="675.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.2" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.05%)</title><rect x="1143.8" y="691.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.8" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.05%)</title><rect x="1143.8" y="675.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.8" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.15%)</title><rect x="1144.4" y="691.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.4" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.15%)</title><rect x="1144.4" y="675.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.4" y="686.0"></text>
</g>
<g>
<title>CmpUNode::Value(PhaseGVN*) const (1 samples, 0.05%)</title><rect x="1144.4" y="659.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.4" y="670.0"></text>
</g>
<g>
<title>SubNode::Value_common(PhaseTransform*) const (1 samples, 0.05%)</title><rect x="1144.4" y="643.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.4" y="654.0"></text>
</g>
<g>
<title>Node::uncast() const (1 samples, 0.05%)</title><rect x="1144.4" y="627.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.4" y="638.0"></text>
</g>
<g>
<title>ConstraintCastNode::Identity(PhaseGVN*) (1 samples, 0.05%)</title><rect x="1145.0" y="659.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.0" y="670.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.05%)</title><rect x="1145.0" y="643.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.0" y="654.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.05%)</title><rect x="1145.0" y="627.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.0" y="638.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.05%)</title><rect x="1145.0" y="611.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.0" y="622.0"></text>
</g>
<g>
<title>ConvI2LNode::Ideal(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1145.6" y="659.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.6" y="670.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.05%)</title><rect x="1145.6" y="643.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.6" y="654.0"></text>
</g>
<g>
<title>TypeInt::hash() const (1 samples, 0.05%)</title><rect x="1145.6" y="627.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.6" y="638.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.05%)</title><rect x="1146.1" y="723.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.1" y="734.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.05%)</title><rect x="1146.1" y="707.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1149.1" y="718.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.05%)</title><rect x="1146.1" y="691.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.1" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.05%)</title><rect x="1146.7" y="723.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.7" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.05%)</title><rect x="1146.7" y="707.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.7" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::add_local_var_and_edge(Node*, PointsToNode::EscapeState, Node*, Unique_Node_List*) (1 samples, 0.05%)</title><rect x="1146.7" y="691.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::add_local_var(Node*, PointsToNode::EscapeState) (1 samples, 0.05%)</title><rect x="1146.7" y="675.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.7" y="686.0"></text>
</g>
<g>
<title>GrowableArray&lt;PointsToNode*&gt;::GrowableArray(Arena*, int, int, PointsToNode* const&amp;) (1 samples, 0.05%)</title><rect x="1146.7" y="659.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1149.7" y="670.0"></text>
</g>
<g>
<title>LoadLNode::Opcode() const (1 samples, 0.05%)</title><rect x="1147.3" y="723.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.3" y="734.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (4 samples, 0.20%)</title><rect x="1147.9" y="723.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.9" y="734.0"></text>
</g>
<g>
<title>Unique_Node_List::pop() (1 samples, 0.05%)</title><rect x="1149.7" y="707.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.7" y="718.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.05%)</title><rect x="1149.7" y="691.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.7" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (10 samples, 0.50%)</title><rect x="1150.2" y="723.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.2" y="734.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1150.2" y="707.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.2" y="718.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1150.2" y="691.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.2" y="702.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1150.2" y="675.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.2" y="686.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.05%)</title><rect x="1150.2" y="659.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.2" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.05%)</title><rect x="1150.2" y="643.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.2" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (1 samples, 0.05%)</title><rect x="1150.2" y="627.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.2" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop_handle_data_uses(Node*, Node_List&amp;, IdealLoopTree*, IdealLoopTree*, Node_List*&amp;, Node_List*&amp;, Node_List*&amp;, Node_List&amp;, unsigned int, PhaseIdealLoop::CloneLoopMode) (1 samples, 0.05%)</title><rect x="1150.2" y="611.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.2" y="622.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.05%)</title><rect x="1150.8" y="707.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.8" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.30%)</title><rect x="1151.4" y="707.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (6 samples, 0.30%)</title><rect x="1151.4" y="691.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.4" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.10%)</title><rect x="1152.0" y="675.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.0" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (2 samples, 0.10%)</title><rect x="1152.0" y="659.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.0" y="670.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.05%)</title><rect x="1152.0" y="643.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.0" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (1 samples, 0.05%)</title><rect x="1152.6" y="643.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.6" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.10%)</title><rect x="1153.2" y="675.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.2" y="686.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.05%)</title><rect x="1153.7" y="659.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.7" y="670.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1153.7" y="643.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.7" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.05%)</title><rect x="1154.3" y="675.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.3" y="686.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.05%)</title><rect x="1154.3" y="659.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.3" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.05%)</title><rect x="1154.9" y="707.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.9" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.05%)</title><rect x="1154.9" y="691.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.9" y="702.0"></text>
</g>
<g>
<title>IdealLoopTree::is_member(IdealLoopTree const*) const (1 samples, 0.05%)</title><rect x="1154.9" y="675.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.9" y="686.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.05%)</title><rect x="1155.5" y="707.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.5" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.20%)</title><rect x="1156.1" y="723.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.1" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.15%)</title><rect x="1156.1" y="707.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.1" y="718.0"></text>
</g>
<g>
<title>IfNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.05%)</title><rect x="1156.1" y="691.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.1" y="702.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.05%)</title><rect x="1156.7" y="691.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.7" y="702.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.05%)</title><rect x="1156.7" y="675.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.7" y="686.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.05%)</title><rect x="1156.7" y="659.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.7" y="670.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.05%)</title><rect x="1156.7" y="643.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.7" y="654.0"></text>
</g>
<g>
<title>RegionNode::hash() const (1 samples, 0.05%)</title><rect x="1157.3" y="691.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.3" y="702.0"></text>
</g>
<g>
<title>Unique_Node_List::pop() (1 samples, 0.05%)</title><rect x="1157.8" y="707.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.8" y="718.0"></text>
</g>
<g>
<title>Node_Array::at(unsigned int) const (1 samples, 0.05%)</title><rect x="1157.8" y="691.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.8" y="702.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.05%)</title><rect x="1158.4" y="723.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.4" y="734.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.05%)</title><rect x="1158.4" y="707.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.4" y="718.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.05%)</title><rect x="1158.4" y="691.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.4" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.05%)</title><rect x="1158.4" y="675.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.4" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.05%)</title><rect x="1158.4" y="659.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.4" y="670.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1158.4" y="643.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.4" y="654.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.05%)</title><rect x="1158.4" y="627.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.4" y="638.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.05%)</title><rect x="1159.0" y="723.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.0" y="734.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.05%)</title><rect x="1159.0" y="707.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.0" y="718.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.05%)</title><rect x="1159.0" y="691.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.0" y="702.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.05%)</title><rect x="1159.0" y="675.0" width="0.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1162.0" y="686.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (1 samples, 0.05%)</title><rect x="1159.0" y="659.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1162.0" y="670.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (1 samples, 0.05%)</title><rect x="1159.0" y="643.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1162.0" y="654.0"></text>
</g>
<g>
<title>CompileWrapper::CompileWrapper(Compile*) (1 samples, 0.05%)</title><rect x="1159.6" y="739.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.6" y="750.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.05%)</title><rect x="1159.6" y="723.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.6" y="734.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.05%)</title><rect x="1159.6" y="707.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.6" y="718.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.05%)</title><rect x="1159.6" y="691.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.6" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (15 samples, 0.74%)</title><rect x="1160.2" y="739.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.2" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (15 samples, 0.74%)</title><rect x="1160.2" y="723.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (15 samples, 0.74%)</title><rect x="1160.2" y="707.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 0.69%)</title><rect x="1160.2" y="691.0" width="8.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.55%)</title><rect x="1160.2" y="675.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.2" y="686.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="1160.2" y="659.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.2" y="670.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.05%)</title><rect x="1160.2" y="643.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.2" y="654.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1160.2" y="627.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.2" y="638.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1160.2" y="611.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.2" y="622.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1160.2" y="595.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.2" y="606.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.05%)</title><rect x="1160.2" y="579.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.2" y="590.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.05%)</title><rect x="1160.2" y="563.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.2" y="574.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.05%)</title><rect x="1160.2" y="547.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.2" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.40%)</title><rect x="1160.8" y="659.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.8" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.40%)</title><rect x="1160.8" y="643.0" width="4.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.40%)</title><rect x="1160.8" y="627.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.40%)</title><rect x="1160.8" y="611.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.40%)</title><rect x="1160.8" y="595.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.8" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.35%)</title><rect x="1160.8" y="579.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.8" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.35%)</title><rect x="1160.8" y="563.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.35%)</title><rect x="1160.8" y="547.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.35%)</title><rect x="1160.8" y="531.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.25%)</title><rect x="1160.8" y="515.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.8" y="526.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1160.8" y="499.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.8" y="510.0"></text>
</g>
<g>
<title>CallGenerator::is_inlined_method_handle_intrinsic(JVMState*, ciMethod*) (1 samples, 0.05%)</title><rect x="1160.8" y="483.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.8" y="494.0"></text>
</g>
<g>
<title>ciBytecodeStream::reset_to_bci(int) (1 samples, 0.05%)</title><rect x="1160.8" y="467.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.8" y="478.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.05%)</title><rect x="1161.3" y="499.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.3" y="510.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.05%)</title><rect x="1161.3" y="483.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.3" y="494.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.05%)</title><rect x="1161.3" y="467.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.3" y="478.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.05%)</title><rect x="1161.3" y="451.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.3" y="462.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1161.3" y="435.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.3" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.15%)</title><rect x="1161.9" y="499.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.9" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.15%)</title><rect x="1161.9" y="483.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.9" y="494.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.05%)</title><rect x="1161.9" y="467.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.9" y="478.0"></text>
</g>
<g>
<title>PhiNode::PhiNode(Node*, Type const*, TypePtr const*, int, int, int, int) (1 samples, 0.05%)</title><rect x="1161.9" y="451.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.9" y="462.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.05%)</title><rect x="1161.9" y="435.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1162.5" y="467.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1162.5" y="451.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1162.5" y="435.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.5" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1162.5" y="419.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.5" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1162.5" y="403.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1162.5" y="387.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.5" y="398.0"></text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.05%)</title><rect x="1162.5" y="371.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.5" y="382.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.05%)</title><rect x="1162.5" y="355.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.5" y="366.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.05%)</title><rect x="1162.5" y="339.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.5" y="350.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.05%)</title><rect x="1162.5" y="323.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.5" y="334.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.05%)</title><rect x="1162.5" y="307.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.05%)</title><rect x="1163.1" y="467.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.1" y="478.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.05%)</title><rect x="1163.1" y="451.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.1" y="462.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.05%)</title><rect x="1163.1" y="435.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.05%)</title><rect x="1163.7" y="515.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.7" y="526.0"></text>
</g>
<g>
<title>Parse::maybe_add_predicate_after_if(Parse::Block*) (1 samples, 0.05%)</title><rect x="1163.7" y="499.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.7" y="510.0"></text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.05%)</title><rect x="1163.7" y="483.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.7" y="494.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.05%)</title><rect x="1163.7" y="467.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.7" y="478.0"></text>
</g>
<g>
<title>Opaque1Node::bottom_type() const (1 samples, 0.05%)</title><rect x="1163.7" y="451.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.7" y="462.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.05%)</title><rect x="1164.3" y="515.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.3" y="526.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.05%)</title><rect x="1164.3" y="499.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.3" y="510.0"></text>
</g>
<g>
<title>_setcontext (1 samples, 0.05%)</title><rect x="1164.3" y="483.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1167.3" y="494.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1164.9" y="579.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.9" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1164.9" y="563.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.9" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1164.9" y="547.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1164.9" y="531.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1164.9" y="515.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1164.9" y="499.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.9" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1164.9" y="483.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.9" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1164.9" y="467.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1164.9" y="451.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1164.9" y="435.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1164.9" y="419.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.9" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1164.9" y="403.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.9" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1164.9" y="387.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1164.9" y="371.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1164.9" y="355.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1164.9" y="339.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1164.9" y="323.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.9" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1164.9" y="307.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1164.9" y="291.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1164.9" y="275.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1164.9" y="259.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.9" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1164.9" y="243.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.9" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1164.9" y="227.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.9" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1164.9" y="211.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1164.9" y="195.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1164.9" y="179.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1164.9" y="163.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.9" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1164.9" y="147.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.9" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1164.9" y="131.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1164.9" y="115.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.9" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1164.9" y="99.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.9" y="110.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.05%)</title><rect x="1164.9" y="83.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.9" y="94.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.05%)</title><rect x="1164.9" y="67.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.9" y="78.0"></text>
</g>
<g>
<title>TypeInstPtr::xdual() const (1 samples, 0.05%)</title><rect x="1164.9" y="51.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.9" y="62.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1165.4" y="659.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.4" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1165.4" y="643.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.4" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1165.4" y="627.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1165.4" y="611.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1165.4" y="595.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1165.4" y="579.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.4" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1165.4" y="563.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.4" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1165.4" y="547.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1165.4" y="531.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1165.4" y="515.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1165.4" y="499.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.4" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1165.4" y="483.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.4" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1165.4" y="467.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.4" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1165.4" y="451.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1165.4" y="435.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1165.4" y="419.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1165.4" y="403.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.4" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1165.4" y="387.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.4" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1165.4" y="371.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1165.4" y="355.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1165.4" y="339.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1165.4" y="323.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.4" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.05%)</title><rect x="1165.4" y="307.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.4" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.05%)</title><rect x="1165.4" y="291.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.05%)</title><rect x="1165.4" y="275.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.05%)</title><rect x="1165.4" y="259.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.05%)</title><rect x="1165.4" y="243.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.4" y="254.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.05%)</title><rect x="1165.4" y="227.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.4" y="238.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.05%)</title><rect x="1165.4" y="211.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.4" y="222.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.05%)</title><rect x="1165.4" y="195.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.4" y="206.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.05%)</title><rect x="1165.4" y="179.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.4" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.05%)</title><rect x="1165.4" y="163.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.4" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.05%)</title><rect x="1165.4" y="147.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.4" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1165.4" y="131.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.4" y="142.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.05%)</title><rect x="1165.4" y="115.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.4" y="126.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.05%)</title><rect x="1165.4" y="99.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.4" y="110.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.05%)</title><rect x="1165.4" y="83.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.4" y="94.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="1165.4" y="67.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.4" y="78.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1165.4" y="51.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.4" y="62.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (1 samples, 0.05%)</title><rect x="1165.4" y="35.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.4" y="46.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="1166.0" y="659.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.0" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1166.0" y="643.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.0" y="654.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.05%)</title><rect x="1166.0" y="627.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.0" y="638.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.05%)</title><rect x="1166.0" y="611.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.0" y="622.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.05%)</title><rect x="1166.0" y="595.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.0" y="606.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.05%)</title><rect x="1166.0" y="579.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.0" y="590.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.05%)</title><rect x="1166.0" y="563.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.05%)</title><rect x="1166.6" y="675.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.6" y="686.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.05%)</title><rect x="1166.6" y="659.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (2 samples, 0.10%)</title><rect x="1167.2" y="675.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.2" y="686.0"></text>
</g>
<g>
<title>Parse::adjust_map_after_if(BoolTest::mask, Node*, float, Parse::Block*, Parse::Block*) (1 samples, 0.05%)</title><rect x="1167.2" y="659.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.2" y="670.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.05%)</title><rect x="1167.2" y="643.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.2" y="654.0"></text>
</g>
<g>
<title>Parse::branch_prediction(float&amp;, BoolTest::mask, int, Node*) (1 samples, 0.05%)</title><rect x="1167.8" y="659.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.8" y="670.0"></text>
</g>
<g>
<title>Parse::dynamic_branch_prediction(float&amp;, BoolTest::mask, Node*) (1 samples, 0.05%)</title><rect x="1167.8" y="643.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.8" y="654.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.05%)</title><rect x="1167.8" y="627.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.8" y="638.0"></text>
</g>
<g>
<title>VirtualCallData::cell_count() const (1 samples, 0.05%)</title><rect x="1167.8" y="611.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.8" y="622.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.05%)</title><rect x="1168.4" y="691.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.4" y="702.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.05%)</title><rect x="1168.9" y="739.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.9" y="750.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.05%)</title><rect x="1168.9" y="723.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.9" y="734.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.05%)</title><rect x="1168.9" y="707.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.9" y="718.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.05%)</title><rect x="1168.9" y="691.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.9" y="702.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (3 samples, 0.15%)</title><rect x="1169.5" y="739.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.5" y="750.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (3 samples, 0.15%)</title><rect x="1169.5" y="723.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.5" y="734.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.15%)</title><rect x="1169.5" y="707.0" width="1.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1172.5" y="718.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (16 samples, 0.79%)</title><rect x="1171.3" y="771.0" width="9.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.3" y="782.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (16 samples, 0.79%)</title><rect x="1171.3" y="755.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.3" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_method() (16 samples, 0.79%)</title><rect x="1171.3" y="739.0" width="9.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.3" y="750.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (15 samples, 0.74%)</title><rect x="1171.3" y="723.0" width="8.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.3" y="734.0"></text>
</g>
<g>
<title>Compilation::build_hir() (10 samples, 0.50%)</title><rect x="1171.3" y="707.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.3" y="718.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (8 samples, 0.40%)</title><rect x="1171.3" y="691.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.3" y="702.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (8 samples, 0.40%)</title><rect x="1171.3" y="675.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.3" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (7 samples, 0.35%)</title><rect x="1171.3" y="659.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.3" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (7 samples, 0.35%)</title><rect x="1171.3" y="643.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.3" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (7 samples, 0.35%)</title><rect x="1171.3" y="627.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.3" y="638.0"></text>
</g>
<g>
<title>BlockBegin::try_merge(ValueStack*) (1 samples, 0.05%)</title><rect x="1171.3" y="611.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.3" y="622.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.05%)</title><rect x="1171.3" y="595.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.3" y="606.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.05%)</title><rect x="1171.3" y="579.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.3" y="590.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1171.3" y="563.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.3" y="574.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.05%)</title><rect x="1171.3" y="547.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.3" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (4 samples, 0.20%)</title><rect x="1171.9" y="611.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.9" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (4 samples, 0.20%)</title><rect x="1171.9" y="595.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.9" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (4 samples, 0.20%)</title><rect x="1171.9" y="579.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.9" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (4 samples, 0.20%)</title><rect x="1171.9" y="563.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.9" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (4 samples, 0.20%)</title><rect x="1171.9" y="547.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.9" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (2 samples, 0.10%)</title><rect x="1171.9" y="531.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.9" y="542.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (2 samples, 0.10%)</title><rect x="1171.9" y="515.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.9" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (2 samples, 0.10%)</title><rect x="1171.9" y="499.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.9" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (2 samples, 0.10%)</title><rect x="1171.9" y="483.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.9" y="494.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (2 samples, 0.10%)</title><rect x="1171.9" y="467.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.9" y="478.0"></text>
</g>
<g>
<title>ciField::initialize_from(fieldDescriptor*) (2 samples, 0.10%)</title><rect x="1171.9" y="451.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.9" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.10%)</title><rect x="1173.0" y="531.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.0" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.05%)</title><rect x="1173.0" y="515.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.0" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.05%)</title><rect x="1173.0" y="499.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.0" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.05%)</title><rect x="1173.0" y="483.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.0" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.05%)</title><rect x="1173.0" y="467.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.0" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.05%)</title><rect x="1173.0" y="451.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.0" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.05%)</title><rect x="1173.0" y="435.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.0" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*, bool) (1 samples, 0.05%)</title><rect x="1173.0" y="419.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.0" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.05%)</title><rect x="1173.0" y="403.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.0" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.05%)</title><rect x="1173.0" y="387.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.0" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.05%)</title><rect x="1173.0" y="371.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.0" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.05%)</title><rect x="1173.0" y="355.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.0" y="366.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.05%)</title><rect x="1173.0" y="339.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.0" y="350.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.05%)</title><rect x="1173.0" y="323.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.0" y="334.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.05%)</title><rect x="1173.0" y="307.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.0" y="318.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.05%)</title><rect x="1173.0" y="291.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.0" y="302.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.05%)</title><rect x="1173.0" y="275.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.0" y="286.0"></text>
</g>
<g>
<title>BlockBegin::try_merge(ValueStack*) (1 samples, 0.05%)</title><rect x="1173.0" y="259.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.0" y="270.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.05%)</title><rect x="1173.0" y="243.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.0" y="254.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.05%)</title><rect x="1173.0" y="227.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.0" y="238.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.05%)</title><rect x="1173.0" y="211.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.0" y="222.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.05%)</title><rect x="1173.0" y="195.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.0" y="206.0"></text>
</g>
<g>
<title>ResourceBitMap::ResourceBitMap(unsigned long) (1 samples, 0.05%)</title><rect x="1173.0" y="179.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.0" y="190.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="1173.0" y="163.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1176.0" y="174.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.05%)</title><rect x="1173.6" y="515.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.6" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.05%)</title><rect x="1173.6" y="499.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.6" y="510.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.05%)</title><rect x="1173.6" y="483.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.6" y="494.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.05%)</title><rect x="1173.6" y="467.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.6" y="478.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.05%)</title><rect x="1173.6" y="451.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.6" y="462.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.05%)</title><rect x="1173.6" y="435.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.6" y="446.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.05%)</title><rect x="1173.6" y="419.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.6" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.05%)</title><rect x="1173.6" y="403.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.6" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.05%)</title><rect x="1173.6" y="387.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.6" y="398.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.05%)</title><rect x="1173.6" y="371.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1176.6" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::load_constant() (1 samples, 0.05%)</title><rect x="1174.2" y="611.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.2" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.05%)</title><rect x="1174.2" y="595.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.2" y="606.0"></text>
</g>
<g>
<title>ValueMap::find_insert(Instruction*) (1 samples, 0.05%)</title><rect x="1174.2" y="579.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.2" y="590.0"></text>
</g>
<g>
<title>Constant::name() const (1 samples, 0.05%)</title><rect x="1174.2" y="563.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.2" y="574.0"></text>
</g>
<g>
<title>ciInstanceKlass::update_if_shared(InstanceKlass::ClassState) (1 samples, 0.05%)</title><rect x="1174.8" y="611.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.8" y="622.0"></text>
</g>
<g>
<title>GrowableArray&lt;XHandler*&gt;::append(XHandler* const&amp;) (1 samples, 0.05%)</title><rect x="1175.4" y="659.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.4" y="670.0"></text>
</g>
<g>
<title>IR::eliminate_null_checks() (2 samples, 0.10%)</title><rect x="1176.0" y="691.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.0" y="702.0"></text>
</g>
<g>
<title>Optimizer::eliminate_null_checks() (2 samples, 0.10%)</title><rect x="1176.0" y="675.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.0" y="686.0"></text>
</g>
<g>
<title>NullCheckEliminator::iterate_all() (2 samples, 0.10%)</title><rect x="1176.0" y="659.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.0" y="670.0"></text>
</g>
<g>
<title>NullCheckEliminator::handle_AccessField(AccessField*) (1 samples, 0.05%)</title><rect x="1176.0" y="643.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.0" y="654.0"></text>
</g>
<g>
<title>NullCheckEliminator::iterate_one(BlockBegin*) (1 samples, 0.05%)</title><rect x="1176.6" y="643.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.6" y="654.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.05%)</title><rect x="1177.1" y="707.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.1" y="718.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.05%)</title><rect x="1177.1" y="691.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.1" y="702.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_lir_list(LIR_List*) (1 samples, 0.05%)</title><rect x="1177.1" y="675.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.1" y="686.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.05%)</title><rect x="1177.1" y="659.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.1" y="670.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (1 samples, 0.05%)</title><rect x="1177.1" y="643.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.1" y="654.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.05%)</title><rect x="1177.1" y="627.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.1" y="638.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.05%)</title><rect x="1177.1" y="611.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.1" y="622.0"></text>
</g>
<g>
<title>DIR_Chunk* GrowableArray&lt;DIR_Chunk*&gt;::insert_sorted&lt;&amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;) (1 samples, 0.05%)</title><rect x="1177.1" y="595.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.1" y="606.0"></text>
</g>
<g>
<title>int GrowableArray&lt;DIR_Chunk*&gt;::find_sorted&lt;DIR_Chunk*, &amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;, bool&amp;) (1 samples, 0.05%)</title><rect x="1177.1" y="579.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.1" y="590.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.05%)</title><rect x="1177.1" y="563.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1180.1" y="574.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (4 samples, 0.20%)</title><rect x="1177.7" y="707.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.7" y="718.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.05%)</title><rect x="1177.7" y="691.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.7" y="702.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.05%)</title><rect x="1177.7" y="675.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.7" y="686.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (3 samples, 0.15%)</title><rect x="1178.3" y="691.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.3" y="702.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.05%)</title><rect x="1178.3" y="675.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.3" y="686.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.05%)</title><rect x="1178.3" y="659.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.3" y="670.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.05%)</title><rect x="1178.3" y="643.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.3" y="654.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.05%)</title><rect x="1178.3" y="627.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.3" y="638.0"></text>
</g>
<g>
<title>LinearScanWalker::split_before_usage(Interval*, int, int) (1 samples, 0.05%)</title><rect x="1178.3" y="611.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.3" y="622.0"></text>
</g>
<g>
<title>IntervalWalker::append_to_unhandled(Interval**, Interval*) (1 samples, 0.05%)</title><rect x="1178.3" y="595.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.3" y="606.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.05%)</title><rect x="1178.9" y="675.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.9" y="686.0"></text>
</g>
<g>
<title>GrowableArray&lt;Interval*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.05%)</title><rect x="1178.9" y="659.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.9" y="670.0"></text>
</g>
<g>
<title>LinearScan::resolve_exception_handlers() (1 samples, 0.05%)</title><rect x="1179.5" y="675.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.5" y="686.0"></text>
</g>
<g>
<title>LinearScan::resolve_exception_edge(XHandler*, int, MoveResolver&amp;) (1 samples, 0.05%)</title><rect x="1179.5" y="659.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.5" y="670.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.05%)</title><rect x="1180.1" y="723.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.1" y="734.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.05%)</title><rect x="1180.1" y="707.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.1" y="718.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.05%)</title><rect x="1180.1" y="691.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.1" y="702.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.05%)</title><rect x="1180.1" y="675.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.1" y="686.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.05%)</title><rect x="1180.1" y="659.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.1" y="670.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.05%)</title><rect x="1180.1" y="643.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.1" y="654.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="1180.1" y="627.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1183.1" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.05%)</title><rect x="1180.6" y="771.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.6" y="782.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.05%)</title><rect x="1180.6" y="755.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.6" y="766.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciMetadata*&gt;::insert_before(int, ciMetadata* const&amp;) (1 samples, 0.05%)</title><rect x="1180.6" y="739.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.6" y="750.0"></text>
</g>
<g>
<title>CompileBroker::possibly_add_compiler_threads() (1 samples, 0.05%)</title><rect x="1181.2" y="787.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.2" y="798.0"></text>
</g>
<g>
<title>si_module_static_search.si (1 samples, 0.05%)</title><rect x="1181.2" y="771.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1184.2" y="782.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.10%)</title><rect x="1181.8" y="787.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.8" y="798.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.10%)</title><rect x="1181.8" y="771.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.8" y="782.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.10%)</title><rect x="1181.8" y="755.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.8" y="766.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.10%)</title><rect x="1181.8" y="739.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.8" y="750.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.10%)</title><rect x="1181.8" y="723.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1184.8" y="734.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (4 samples, 0.20%)</title><rect x="1183.0" y="803.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.0" y="814.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2 samples, 0.10%)</title><rect x="1183.0" y="787.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.0" y="798.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 0.10%)</title><rect x="1183.0" y="771.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.0" y="782.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.05%)</title><rect x="1183.0" y="755.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1186.0" y="766.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.05%)</title><rect x="1183.0" y="739.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.0" y="750.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.05%)</title><rect x="1183.0" y="723.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.0" y="734.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1183.0" y="707.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.0" y="718.0"></text>
</g>
<g>
<title>free (1 samples, 0.05%)</title><rect x="1183.6" y="755.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1186.6" y="766.0"></text>
</g>
<g>
<title>small_size (1 samples, 0.05%)</title><rect x="1183.6" y="739.0" width="0.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1186.6" y="750.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.10%)</title><rect x="1184.2" y="787.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.2" y="798.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.10%)</title><rect x="1184.2" y="771.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.2" y="782.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (2 samples, 0.10%)</title><rect x="1184.2" y="755.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.2" y="766.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.10%)</title><rect x="1184.2" y="739.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1187.2" y="750.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.15%)</title><rect x="1185.3" y="835.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.3" y="846.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.15%)</title><rect x="1185.3" y="819.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.3" y="830.0"></text>
</g>
<g>
<title>EventMark::~EventMark() (1 samples, 0.05%)</title><rect x="1185.3" y="803.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.3" y="814.0"></text>
</g>
<g>
<title>FormatBuffer&lt;256ul&gt;::append(char const*, ...) (1 samples, 0.05%)</title><rect x="1185.3" y="787.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.3" y="798.0"></text>
</g>
<g>
<title>jio_vsnprintf (1 samples, 0.05%)</title><rect x="1185.3" y="771.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1188.3" y="782.0"></text>
</g>
<g>
<title>os::vsnprintf(char*, unsigned long, char const*, __va_list_tag*) (1 samples, 0.05%)</title><rect x="1185.3" y="755.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.3" y="766.0"></text>
</g>
<g>
<title>vsnprintf (1 samples, 0.05%)</title><rect x="1185.3" y="739.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1188.3" y="750.0"></text>
</g>
<g>
<title>_vsnprintf (1 samples, 0.05%)</title><rect x="1185.3" y="723.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1188.3" y="734.0"></text>
</g>
<g>
<title>__v2printf (1 samples, 0.05%)</title><rect x="1185.3" y="707.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1188.3" y="718.0"></text>
</g>
<g>
<title>__vfprintf (1 samples, 0.05%)</title><rect x="1185.3" y="691.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1188.3" y="702.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.05%)</title><rect x="1185.9" y="803.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.9" y="814.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.05%)</title><rect x="1185.9" y="787.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.9" y="798.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.05%)</title><rect x="1185.9" y="771.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.9" y="782.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="1185.9" y="755.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1188.9" y="766.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.05%)</title><rect x="1186.5" y="803.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1189.5" y="814.0"></text>
</g>
<g>
<title>WatcherThread::run() (5 samples, 0.25%)</title><rect x="1187.1" y="835.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.1" y="846.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (5 samples, 0.25%)</title><rect x="1187.1" y="819.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.1" y="830.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 0.25%)</title><rect x="1187.1" y="803.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.1" y="814.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (5 samples, 0.25%)</title><rect x="1187.1" y="787.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.1" y="798.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 0.25%)</title><rect x="1187.1" y="771.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.1" y="782.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.25%)</title><rect x="1187.1" y="755.0" width="2.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1190.1" y="766.0"></text>
</g>
</g>
</svg>
