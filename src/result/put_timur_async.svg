<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="517"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="517"> </text>
<g id="frames">
<g>
<title>all (5,169 samples, 100.00%)</title><rect x="10.0" y="483.0" width="1180.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="13.0" y="494.0">all</text>
</g>
<g>
<title>[NIO Selector #0 tid=40963] (357 samples, 6.91%)</title><rect x="10.0" y="467.0" width="81.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="13.0" y="478.0">[NIO Sele..</text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.04%)</title><rect x="10.7" y="451.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.7" y="462.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (351 samples, 6.79%)</title><rect x="11.1" y="451.0" width="80.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.1" y="462.0">one/nio/s..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (230 samples, 4.45%)</title><rect x="11.4" y="435.0" width="52.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="14.4" y="446.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (3 samples, 0.06%)</title><rect x="11.6" y="419.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="14.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (225 samples, 4.35%)</title><rect x="12.5" y="419.0" width="51.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="15.5" y="430.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (224 samples, 4.33%)</title><rect x="12.7" y="403.0" width="51.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.7" y="414.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (223 samples, 4.31%)</title><rect x="13.0" y="387.0" width="50.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="16.0" y="398.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (210 samples, 4.06%)</title><rect x="13.0" y="371.0" width="47.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.0" y="382.0">sun/..</text>
</g>
<g>
<title>kevent (196 samples, 3.79%)</title><rect x="16.2" y="355.0" width="44.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="19.2" y="366.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (7 samples, 0.14%)</title><rect x="60.9" y="371.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="63.9" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (6 samples, 0.12%)</title><rect x="61.1" y="355.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="64.1" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.add (6 samples, 0.12%)</title><rect x="61.1" y="339.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="64.1" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 0.10%)</title><rect x="61.4" y="323.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="64.4" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.10%)</title><rect x="61.4" y="307.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="64.4" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.04%)</title><rect x="61.4" y="291.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="64.4" y="302.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.04%)</title><rect x="62.0" y="291.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="65.0" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (2 samples, 0.04%)</title><rect x="62.7" y="371.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="65.7" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (2 samples, 0.04%)</title><rect x="62.7" y="355.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="65.7" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (3 samples, 0.06%)</title><rect x="63.2" y="371.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="66.2" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (118 samples, 2.28%)</title><rect x="63.9" y="435.0" width="26.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="66.9" y="446.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (118 samples, 2.28%)</title><rect x="63.9" y="419.0" width="26.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="66.9" y="430.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (79 samples, 1.53%)</title><rect x="63.9" y="403.0" width="18.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="66.9" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (65 samples, 1.26%)</title><rect x="63.9" y="387.0" width="14.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="66.9" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (65 samples, 1.26%)</title><rect x="63.9" y="371.0" width="14.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="66.9" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.handleDefault (64 samples, 1.24%)</title><rect x="64.1" y="355.0" width="14.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="67.1" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.entity (63 samples, 1.22%)</title><rect x="64.3" y="339.0" width="14.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="67.3" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.08%)</title><rect x="64.8" y="323.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="67.8" y="334.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (3 samples, 0.06%)</title><rect x="65.0" y="307.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="68.0" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.executeAsync (57 samples, 1.10%)</title><rect x="65.7" y="323.0" width="13.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="68.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (56 samples, 1.08%)</title><rect x="65.9" y="307.0" width="12.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="68.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (56 samples, 1.08%)</title><rect x="65.9" y="291.0" width="12.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="68.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (52 samples, 1.01%)</title><rect x="65.9" y="275.0" width="11.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="68.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.06%)</title><rect x="65.9" y="259.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="68.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (49 samples, 0.95%)</title><rect x="66.6" y="259.0" width="11.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="69.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (49 samples, 0.95%)</title><rect x="66.6" y="243.0" width="11.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="69.6" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (49 samples, 0.95%)</title><rect x="66.6" y="227.0" width="11.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="69.6" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (49 samples, 0.95%)</title><rect x="66.6" y="211.0" width="11.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="69.6" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (49 samples, 0.95%)</title><rect x="66.6" y="195.0" width="11.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="69.6" y="206.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (44 samples, 0.85%)</title><rect x="67.5" y="179.0" width="10.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="70.5" y="190.0"></text>
</g>
<g>
<title>__psynch_cvsignal (39 samples, 0.75%)</title><rect x="68.4" y="163.0" width="8.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="71.4" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.06%)</title><rect x="78.0" y="275.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="81.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.06%)</title><rect x="78.0" y="259.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="81.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.04%)</title><rect x="78.0" y="243.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="81.0" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (8 samples, 0.15%)</title><rect x="78.7" y="387.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="81.7" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4 samples, 0.08%)</title><rect x="78.7" y="371.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="81.7" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.06%)</title><rect x="78.9" y="355.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="81.9" y="366.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.06%)</title><rect x="78.9" y="339.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="81.9" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.06%)</title><rect x="78.9" y="323.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="81.9" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.08%)</title><rect x="79.6" y="371.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="82.6" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.08%)</title><rect x="79.6" y="355.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="82.6" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.10%)</title><rect x="80.5" y="387.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="83.5" y="398.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.06%)</title><rect x="80.5" y="371.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="83.5" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.04%)</title><rect x="80.5" y="355.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="83.5" y="366.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.04%)</title><rect x="81.2" y="371.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="84.2" y="382.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="81.2" y="355.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="84.2" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (38 samples, 0.74%)</title><rect x="82.1" y="403.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="85.1" y="414.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (37 samples, 0.72%)</title><rect x="82.1" y="387.0" width="8.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="85.1" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (37 samples, 0.72%)</title><rect x="82.1" y="371.0" width="8.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="85.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (37 samples, 0.72%)</title><rect x="82.1" y="355.0" width="8.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="85.1" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (35 samples, 0.68%)</title><rect x="82.6" y="339.0" width="8.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="85.6" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (29 samples, 0.56%)</title><rect x="82.6" y="323.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="85.6" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (29 samples, 0.56%)</title><rect x="82.6" y="307.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="85.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (29 samples, 0.56%)</title><rect x="82.6" y="291.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="85.6" y="302.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (4 samples, 0.08%)</title><rect x="83.3" y="275.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="86.3" y="286.0"></text>
</g>
<g>
<title>read (22 samples, 0.43%)</title><rect x="84.2" y="275.0" width="5.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="87.2" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (6 samples, 0.12%)</title><rect x="89.2" y="323.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="92.2" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.12%)</title><rect x="89.2" y="307.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="92.2" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.12%)</title><rect x="89.2" y="291.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="92.2" y="302.0"></text>
</g>
<g>
<title>unsafe_arraycopy (2 samples, 0.04%)</title><rect x="90.1" y="275.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="93.1" y="286.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="90.8" y="435.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="93.8" y="446.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="90.8" y="419.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="93.8" y="430.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=24323] (335 samples, 6.48%)</title><rect x="91.5" y="467.0" width="76.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="94.5" y="478.0">[NIO Sel..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (333 samples, 6.44%)</title><rect x="91.7" y="451.0" width="76.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="94.7" y="462.0">one/nio/..</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="91.7" y="435.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="94.7" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (207 samples, 4.00%)</title><rect x="92.2" y="435.0" width="47.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="95.2" y="446.0">one/..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (206 samples, 3.99%)</title><rect x="92.4" y="419.0" width="47.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="95.4" y="430.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (206 samples, 3.99%)</title><rect x="92.4" y="403.0" width="47.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="95.4" y="414.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (206 samples, 3.99%)</title><rect x="92.4" y="387.0" width="47.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="95.4" y="398.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (197 samples, 3.81%)</title><rect x="92.4" y="371.0" width="45.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="95.4" y="382.0">sun/..</text>
</g>
<g>
<title>kevent (190 samples, 3.68%)</title><rect x="94.0" y="355.0" width="43.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="97.0" y="366.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.06%)</title><rect x="137.4" y="371.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="140.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.06%)</title><rect x="137.4" y="355.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="140.4" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.06%)</title><rect x="137.4" y="339.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="140.4" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.06%)</title><rect x="137.4" y="323.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="140.4" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.06%)</title><rect x="137.4" y="307.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="140.4" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.04%)</title><rect x="137.4" y="291.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="140.4" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (4 samples, 0.08%)</title><rect x="138.1" y="371.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="141.1" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (4 samples, 0.08%)</title><rect x="138.1" y="355.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="141.1" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (4 samples, 0.08%)</title><rect x="138.1" y="339.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="141.1" y="350.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (4 samples, 0.08%)</title><rect x="138.1" y="323.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="141.1" y="334.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (4 samples, 0.08%)</title><rect x="138.1" y="307.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="141.1" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (2 samples, 0.04%)</title><rect x="139.0" y="371.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="142.0" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (2 samples, 0.04%)</title><rect x="139.0" y="355.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="142.0" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.04%)</title><rect x="139.0" y="339.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="142.0" y="350.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.04%)</title><rect x="139.0" y="323.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="142.0" y="334.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.04%)</title><rect x="139.0" y="307.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="142.0" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (124 samples, 2.40%)</title><rect x="139.4" y="435.0" width="28.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="142.4" y="446.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (124 samples, 2.40%)</title><rect x="139.4" y="419.0" width="28.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="142.4" y="430.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (79 samples, 1.53%)</title><rect x="139.4" y="403.0" width="18.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="142.4" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (71 samples, 1.37%)</title><rect x="139.9" y="387.0" width="16.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="142.9" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (71 samples, 1.37%)</title><rect x="139.9" y="371.0" width="16.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="142.9" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.handleDefault (69 samples, 1.33%)</title><rect x="140.4" y="355.0" width="15.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="143.4" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.entity (68 samples, 1.32%)</title><rect x="140.6" y="339.0" width="15.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="143.6" y="350.0"></text>
</g>
<g>
<title>java/lang/String.isEmpty (2 samples, 0.04%)</title><rect x="140.6" y="323.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="143.6" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.04%)</title><rect x="140.6" y="307.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="143.6" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.04%)</title><rect x="141.3" y="323.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="144.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.executeAsync (63 samples, 1.22%)</title><rect x="141.7" y="323.0" width="14.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="144.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (63 samples, 1.22%)</title><rect x="141.7" y="307.0" width="14.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="144.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (63 samples, 1.22%)</title><rect x="141.7" y="291.0" width="14.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="144.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (58 samples, 1.12%)</title><rect x="141.7" y="275.0" width="13.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="144.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (58 samples, 1.12%)</title><rect x="141.7" y="259.0" width="13.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="144.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (58 samples, 1.12%)</title><rect x="141.7" y="243.0" width="13.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="144.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (58 samples, 1.12%)</title><rect x="141.7" y="227.0" width="13.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="144.7" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (58 samples, 1.12%)</title><rect x="141.7" y="211.0" width="13.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="144.7" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (58 samples, 1.12%)</title><rect x="141.7" y="195.0" width="13.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="144.7" y="206.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (55 samples, 1.06%)</title><rect x="142.4" y="179.0" width="12.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="145.4" y="190.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.06%)</title><rect x="143.1" y="163.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="146.1" y="174.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (3 samples, 0.06%)</title><rect x="143.1" y="147.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="146.1" y="158.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (2 samples, 0.04%)</title><rect x="143.3" y="131.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="146.3" y="142.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (2 samples, 0.04%)</title><rect x="143.3" y="115.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="146.3" y="126.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (2 samples, 0.04%)</title><rect x="143.3" y="99.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="146.3" y="110.0"></text>
</g>
<g>
<title>int Atomic::load&lt;int&gt;(int const volatile*) (2 samples, 0.04%)</title><rect x="143.3" y="83.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="146.3" y="94.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.04%)</title><rect x="144.0" y="163.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="147.0" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (44 samples, 0.85%)</title><rect x="144.5" y="163.0" width="10.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="147.5" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.10%)</title><rect x="155.0" y="275.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="158.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.10%)</title><rect x="155.0" y="259.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="158.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.04%)</title><rect x="155.2" y="243.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="158.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (2 samples, 0.04%)</title><rect x="155.2" y="227.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="158.2" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.04%)</title><rect x="155.2" y="211.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="158.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.04%)</title><rect x="155.6" y="243.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="158.6" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.04%)</title><rect x="155.6" y="227.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="158.6" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3 samples, 0.06%)</title><rect x="156.1" y="387.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="159.1" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.04%)</title><rect x="156.8" y="387.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="159.8" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (45 samples, 0.87%)</title><rect x="157.5" y="403.0" width="10.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="160.5" y="414.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (3 samples, 0.06%)</title><rect x="157.7" y="387.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="160.7" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (41 samples, 0.79%)</title><rect x="158.4" y="387.0" width="9.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="161.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (41 samples, 0.79%)</title><rect x="158.4" y="371.0" width="9.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="161.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (41 samples, 0.79%)</title><rect x="158.4" y="355.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="161.4" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (40 samples, 0.77%)</title><rect x="158.6" y="339.0" width="9.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="161.6" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (36 samples, 0.70%)</title><rect x="158.6" y="323.0" width="8.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="161.6" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (36 samples, 0.70%)</title><rect x="158.6" y="307.0" width="8.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="161.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (34 samples, 0.66%)</title><rect x="159.1" y="291.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="162.1" y="302.0"></text>
</g>
<g>
<title>read (29 samples, 0.56%)</title><rect x="160.2" y="275.0" width="6.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="163.2" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.08%)</title><rect x="166.8" y="323.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="169.8" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.08%)</title><rect x="166.8" y="307.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="169.8" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.08%)</title><rect x="166.8" y="291.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="169.8" y="302.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=39939] (292 samples, 5.65%)</title><rect x="168.0" y="467.0" width="66.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="171.0" y="478.0">[NIO Se..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (289 samples, 5.59%)</title><rect x="168.4" y="451.0" width="66.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="171.4" y="462.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (188 samples, 3.64%)</title><rect x="168.9" y="435.0" width="42.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="171.9" y="446.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.04%)</title><rect x="169.1" y="419.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="172.1" y="430.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.04%)</title><rect x="169.6" y="419.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="172.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (183 samples, 3.54%)</title><rect x="170.0" y="419.0" width="41.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="173.0" y="430.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (183 samples, 3.54%)</title><rect x="170.0" y="403.0" width="41.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="173.0" y="414.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (183 samples, 3.54%)</title><rect x="170.0" y="387.0" width="41.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="173.0" y="398.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (173 samples, 3.35%)</title><rect x="170.0" y="371.0" width="39.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="173.0" y="382.0">sun..</text>
</g>
<g>
<title>kevent (160 samples, 3.10%)</title><rect x="173.0" y="355.0" width="36.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="176.0" y="366.0">kev..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (7 samples, 0.14%)</title><rect x="209.5" y="371.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="212.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (6 samples, 0.12%)</title><rect x="209.7" y="355.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="212.7" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4 samples, 0.08%)</title><rect x="210.2" y="339.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="213.2" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.06%)</title><rect x="210.4" y="323.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="213.4" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.06%)</title><rect x="210.4" y="307.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.4" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.04%)</title><rect x="210.7" y="291.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="213.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.04%)</title><rect x="211.3" y="371.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="214.3" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.04%)</title><rect x="211.3" y="355.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="214.3" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.04%)</title><rect x="211.3" y="339.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="214.3" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.04%)</title><rect x="211.3" y="323.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="214.3" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.04%)</title><rect x="211.3" y="307.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="214.3" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (98 samples, 1.90%)</title><rect x="211.8" y="435.0" width="22.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="214.8" y="446.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (98 samples, 1.90%)</title><rect x="211.8" y="419.0" width="22.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="214.8" y="430.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (70 samples, 1.35%)</title><rect x="211.8" y="403.0" width="16.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="214.8" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (57 samples, 1.10%)</title><rect x="212.3" y="387.0" width="13.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="215.3" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (57 samples, 1.10%)</title><rect x="212.3" y="371.0" width="13.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="215.3" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.handleDefault (56 samples, 1.08%)</title><rect x="212.5" y="355.0" width="12.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="215.5" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.entity (54 samples, 1.04%)</title><rect x="212.9" y="339.0" width="12.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="215.9" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.06%)</title><rect x="213.2" y="323.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="216.2" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.executeAsync (50 samples, 0.97%)</title><rect x="213.9" y="323.0" width="11.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="216.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (50 samples, 0.97%)</title><rect x="213.9" y="307.0" width="11.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="216.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (50 samples, 0.97%)</title><rect x="213.9" y="291.0" width="11.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="216.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (47 samples, 0.91%)</title><rect x="214.1" y="275.0" width="10.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="217.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (47 samples, 0.91%)</title><rect x="214.1" y="259.0" width="10.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="217.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (47 samples, 0.91%)</title><rect x="214.1" y="243.0" width="10.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="217.1" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (47 samples, 0.91%)</title><rect x="214.1" y="227.0" width="10.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="217.1" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (47 samples, 0.91%)</title><rect x="214.1" y="211.0" width="10.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="217.1" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (47 samples, 0.91%)</title><rect x="214.1" y="195.0" width="10.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="217.1" y="206.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (45 samples, 0.87%)</title><rect x="214.5" y="179.0" width="10.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="217.5" y="190.0"></text>
</g>
<g>
<title>__psynch_cvsignal (36 samples, 0.70%)</title><rect x="216.1" y="163.0" width="8.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="219.1" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.04%)</title><rect x="224.8" y="275.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="227.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.04%)</title><rect x="224.8" y="259.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="227.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.04%)</title><rect x="224.8" y="243.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="227.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (2 samples, 0.04%)</title><rect x="224.8" y="227.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="227.8" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.04%)</title><rect x="224.8" y="211.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="227.8" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (2 samples, 0.04%)</title><rect x="224.8" y="195.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.8" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5 samples, 0.10%)</title><rect x="225.3" y="387.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="228.3" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="226.0" y="371.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="229.0" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="226.0" y="355.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="229.0" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.06%)</title><rect x="226.4" y="387.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="229.4" y="398.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.04%)</title><rect x="226.4" y="371.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="229.4" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.04%)</title><rect x="226.4" y="355.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="229.4" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.06%)</title><rect x="227.1" y="387.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="230.1" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.06%)</title><rect x="227.1" y="371.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="230.1" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (28 samples, 0.54%)</title><rect x="227.8" y="403.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="230.8" y="414.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (28 samples, 0.54%)</title><rect x="227.8" y="387.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="230.8" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (28 samples, 0.54%)</title><rect x="227.8" y="371.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="230.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (28 samples, 0.54%)</title><rect x="227.8" y="355.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="230.8" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (25 samples, 0.48%)</title><rect x="228.5" y="339.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="231.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (25 samples, 0.48%)</title><rect x="228.5" y="323.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="231.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (25 samples, 0.48%)</title><rect x="228.5" y="307.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="231.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (23 samples, 0.44%)</title><rect x="228.9" y="291.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="231.9" y="302.0"></text>
</g>
<g>
<title>read (22 samples, 0.43%)</title><rect x="229.2" y="275.0" width="5.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="232.2" y="286.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=24835] (269 samples, 5.20%)</title><rect x="234.6" y="467.0" width="61.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="237.6" y="478.0">[NIO S..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (265 samples, 5.13%)</title><rect x="235.1" y="451.0" width="60.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.1" y="462.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (2 samples, 0.04%)</title><rect x="235.5" y="435.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.5" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (2 samples, 0.04%)</title><rect x="235.5" y="419.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="238.5" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (180 samples, 3.48%)</title><rect x="236.0" y="435.0" width="41.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="239.0" y="446.0">one..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (174 samples, 3.37%)</title><rect x="236.9" y="419.0" width="39.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="239.9" y="430.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (174 samples, 3.37%)</title><rect x="236.9" y="403.0" width="39.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="239.9" y="414.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (171 samples, 3.31%)</title><rect x="237.6" y="387.0" width="39.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="240.6" y="398.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (162 samples, 3.13%)</title><rect x="238.1" y="371.0" width="36.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="241.1" y="382.0">sun..</text>
</g>
<g>
<title>kevent (157 samples, 3.04%)</title><rect x="239.2" y="355.0" width="35.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="242.2" y="366.0">kev..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (4 samples, 0.08%)</title><rect x="275.0" y="371.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="278.0" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.06%)</title><rect x="275.3" y="355.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="278.3" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.04%)</title><rect x="275.5" y="339.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="278.5" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.04%)</title><rect x="275.5" y="323.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="278.5" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.04%)</title><rect x="275.5" y="307.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.04%)</title><rect x="276.0" y="371.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="279.0" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (2 samples, 0.04%)</title><rect x="276.6" y="419.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="279.6" y="430.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (2 samples, 0.04%)</title><rect x="276.6" y="403.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="279.6" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (2 samples, 0.04%)</title><rect x="276.6" y="387.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.6" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (80 samples, 1.55%)</title><rect x="277.1" y="435.0" width="18.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="280.1" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (80 samples, 1.55%)</title><rect x="277.1" y="419.0" width="18.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="280.1" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (56 samples, 1.08%)</title><rect x="277.1" y="403.0" width="12.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="280.1" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (42 samples, 0.81%)</title><rect x="277.8" y="387.0" width="9.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="280.8" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (42 samples, 0.81%)</title><rect x="277.8" y="371.0" width="9.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="280.8" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.handleDefault (41 samples, 0.79%)</title><rect x="278.0" y="355.0" width="9.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="281.0" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.entity (41 samples, 0.79%)</title><rect x="278.0" y="339.0" width="9.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="281.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.executeAsync (39 samples, 0.75%)</title><rect x="278.5" y="323.0" width="8.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="281.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (39 samples, 0.75%)</title><rect x="278.5" y="307.0" width="8.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="281.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (38 samples, 0.74%)</title><rect x="278.7" y="291.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="281.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (33 samples, 0.64%)</title><rect x="278.9" y="275.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="281.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (33 samples, 0.64%)</title><rect x="278.9" y="259.0" width="7.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="281.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (33 samples, 0.64%)</title><rect x="278.9" y="243.0" width="7.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="281.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (33 samples, 0.64%)</title><rect x="278.9" y="227.0" width="7.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="281.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (33 samples, 0.64%)</title><rect x="278.9" y="211.0" width="7.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="281.9" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (33 samples, 0.64%)</title><rect x="278.9" y="195.0" width="7.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="281.9" y="206.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (30 samples, 0.58%)</title><rect x="279.6" y="179.0" width="6.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="282.6" y="190.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.06%)</title><rect x="280.3" y="163.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="283.3" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (23 samples, 0.44%)</title><rect x="281.0" y="163.0" width="5.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="284.0" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.08%)</title><rect x="286.5" y="275.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="289.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.08%)</title><rect x="286.5" y="259.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="289.5" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.04%)</title><rect x="286.5" y="243.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.5" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.04%)</title><rect x="286.9" y="243.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="289.9" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5 samples, 0.10%)</title><rect x="287.4" y="387.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="290.4" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.04%)</title><rect x="287.6" y="371.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="290.6" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="288.0" y="371.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="291.0" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.04%)</title><rect x="288.0" y="355.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="291.0" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.10%)</title><rect x="288.5" y="387.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="291.5" y="398.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.06%)</title><rect x="288.7" y="371.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.7" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.06%)</title><rect x="288.7" y="355.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="291.7" y="366.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.06%)</title><rect x="288.7" y="339.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="291.7" y="350.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.06%)</title><rect x="288.7" y="323.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="291.7" y="334.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.04%)</title><rect x="289.0" y="307.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="292.0" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (24 samples, 0.46%)</title><rect x="289.9" y="403.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.9" y="414.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (24 samples, 0.46%)</title><rect x="289.9" y="387.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="292.9" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (24 samples, 0.46%)</title><rect x="289.9" y="371.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="292.9" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (24 samples, 0.46%)</title><rect x="289.9" y="355.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="292.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (23 samples, 0.44%)</title><rect x="290.1" y="339.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="293.1" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (22 samples, 0.43%)</title><rect x="290.1" y="323.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="293.1" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (22 samples, 0.43%)</title><rect x="290.1" y="307.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="293.1" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (21 samples, 0.41%)</title><rect x="290.3" y="291.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="293.3" y="302.0"></text>
</g>
<g>
<title>read (19 samples, 0.37%)</title><rect x="290.8" y="275.0" width="4.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="293.8" y="286.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.04%)</title><rect x="295.6" y="451.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="298.6" y="462.0"></text>
</g>
<g>
<title>[tid=14595] (2 samples, 0.04%)</title><rect x="296.0" y="467.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="299.0" y="478.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.04%)</title><rect x="296.0" y="451.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="299.0" y="462.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.04%)</title><rect x="296.0" y="435.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="299.0" y="446.0"></text>
</g>
<g>
<title>_pthread_body (2 samples, 0.04%)</title><rect x="296.0" y="419.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="299.0" y="430.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.04%)</title><rect x="296.0" y="403.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="299.0" y="414.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.04%)</title><rect x="296.0" y="387.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="299.0" y="398.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.04%)</title><rect x="296.0" y="371.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="299.0" y="382.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2 samples, 0.04%)</title><rect x="296.0" y="355.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="299.0" y="366.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (2 samples, 0.04%)</title><rect x="296.0" y="339.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="299.0" y="350.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (2 samples, 0.04%)</title><rect x="296.0" y="323.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="299.0" y="334.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.04%)</title><rect x="296.0" y="307.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="299.0" y="318.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (2 samples, 0.04%)</title><rect x="296.0" y="291.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="299.0" y="302.0"></text>
</g>
<g>
<title>[tid=18947] (4 samples, 0.08%)</title><rect x="297.0" y="467.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="300.0" y="478.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.08%)</title><rect x="297.0" y="451.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="300.0" y="462.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.08%)</title><rect x="297.0" y="435.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="300.0" y="446.0"></text>
</g>
<g>
<title>_pthread_body (4 samples, 0.08%)</title><rect x="297.0" y="419.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="300.0" y="430.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.08%)</title><rect x="297.0" y="403.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="300.0" y="414.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.08%)</title><rect x="297.0" y="387.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="300.0" y="398.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (4 samples, 0.08%)</title><rect x="297.0" y="371.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="300.0" y="382.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (4 samples, 0.08%)</title><rect x="297.0" y="355.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="300.0" y="366.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (2 samples, 0.04%)</title><rect x="297.0" y="339.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="300.0" y="350.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples, 0.04%)</title><rect x="297.0" y="323.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="300.0" y="334.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (2 samples, 0.04%)</title><rect x="297.0" y="307.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="300.0" y="318.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (2 samples, 0.04%)</title><rect x="297.4" y="339.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="300.4" y="350.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.04%)</title><rect x="297.4" y="323.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="300.4" y="334.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.04%)</title><rect x="297.4" y="307.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="300.4" y="318.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.04%)</title><rect x="297.4" y="291.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="300.4" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="297.4" y="275.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="300.4" y="286.0"></text>
</g>
<g>
<title>[tid=22787] (17 samples, 0.33%)</title><rect x="297.9" y="467.0" width="3.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="300.9" y="478.0"></text>
</g>
<g>
<title>thread_start (17 samples, 0.33%)</title><rect x="297.9" y="451.0" width="3.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="300.9" y="462.0"></text>
</g>
<g>
<title>_pthread_start (17 samples, 0.33%)</title><rect x="297.9" y="435.0" width="3.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="300.9" y="446.0"></text>
</g>
<g>
<title>_pthread_body (17 samples, 0.33%)</title><rect x="297.9" y="419.0" width="3.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="300.9" y="430.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (17 samples, 0.33%)</title><rect x="297.9" y="403.0" width="3.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="300.9" y="414.0"></text>
</g>
<g>
<title>Thread::call_run() (17 samples, 0.33%)</title><rect x="297.9" y="387.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="300.9" y="398.0"></text>
</g>
<g>
<title>WatcherThread::run() (16 samples, 0.31%)</title><rect x="298.1" y="371.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="301.1" y="382.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (15 samples, 0.29%)</title><rect x="298.3" y="355.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="301.3" y="366.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (15 samples, 0.29%)</title><rect x="298.3" y="339.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="301.3" y="350.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (15 samples, 0.29%)</title><rect x="298.3" y="323.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="301.3" y="334.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (14 samples, 0.27%)</title><rect x="298.6" y="307.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="301.6" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (14 samples, 0.27%)</title><rect x="298.6" y="291.0" width="3.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="301.6" y="302.0"></text>
</g>
<g>
<title>[worker tid=27139] (1,010 samples, 19.54%)</title><rect x="302.4" y="467.0" width="230.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="305.4" y="478.0">[worker tid=27139]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (9 samples, 0.17%)</title><rect x="302.4" y="451.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="305.4" y="462.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (9 samples, 0.17%)</title><rect x="302.4" y="435.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="305.4" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (9 samples, 0.17%)</title><rect x="302.4" y="419.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="305.4" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (4 samples, 0.08%)</title><rect x="303.6" y="403.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="306.6" y="414.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.04%)</title><rect x="304.7" y="451.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="307.7" y="462.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.04%)</title><rect x="304.7" y="435.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="307.7" y="446.0"></text>
</g>
<g>
<title>java/lang/Thread.run (993 samples, 19.21%)</title><rect x="305.4" y="451.0" width="226.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="308.4" y="462.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (993 samples, 19.21%)</title><rect x="305.4" y="435.0" width="226.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="308.4" y="446.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (993 samples, 19.21%)</title><rect x="305.4" y="419.0" width="226.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.4" y="430.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 0.04%)</title><rect x="305.4" y="403.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="308.4" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.04%)</title><rect x="305.4" y="387.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="308.4" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (2 samples, 0.04%)</title><rect x="305.4" y="371.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="308.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (255 samples, 4.93%)</title><rect x="305.9" y="403.0" width="58.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="308.9" y="414.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (254 samples, 4.91%)</title><rect x="306.1" y="387.0" width="58.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="309.1" y="398.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (223 samples, 4.31%)</title><rect x="306.1" y="371.0" width="50.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="309.1" y="382.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.04%)</title><rect x="306.5" y="355.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="309.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.04%)</title><rect x="306.5" y="339.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="309.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.04%)</title><rect x="306.5" y="323.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="309.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.04%)</title><rect x="306.5" y="307.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="309.5" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.04%)</title><rect x="306.5" y="291.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="309.5" y="302.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (2 samples, 0.04%)</title><rect x="306.5" y="275.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="309.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (219 samples, 4.24%)</title><rect x="307.0" y="355.0" width="50.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="310.0" y="366.0">java/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (219 samples, 4.24%)</title><rect x="307.0" y="339.0" width="50.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.0" y="350.0">jdk/i..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (215 samples, 4.16%)</title><rect x="307.9" y="323.0" width="49.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="310.9" y="334.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.04%)</title><rect x="308.6" y="307.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="311.6" y="318.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.04%)</title><rect x="309.3" y="307.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="312.3" y="318.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.04%)</title><rect x="309.3" y="291.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="312.3" y="302.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (2 samples, 0.04%)</title><rect x="309.3" y="275.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="312.3" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (2 samples, 0.04%)</title><rect x="309.3" y="259.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="312.3" y="270.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.06%)</title><rect x="309.7" y="307.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="312.7" y="318.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (2 samples, 0.04%)</title><rect x="309.7" y="291.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="312.7" y="302.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (195 samples, 3.77%)</title><rect x="310.9" y="307.0" width="44.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="313.9" y="318.0">Park..</text>
</g>
<g>
<title>__psynch_cvwait (189 samples, 3.66%)</title><rect x="311.8" y="291.0" width="43.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="314.8" y="302.0">__ps..</text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.04%)</title><rect x="354.9" y="291.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="357.9" y="302.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (3 samples, 0.06%)</title><rect x="355.6" y="307.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="358.6" y="318.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.04%)</title><rect x="356.3" y="307.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="359.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (8 samples, 0.15%)</title><rect x="357.0" y="371.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="360.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (8 samples, 0.15%)</title><rect x="357.0" y="355.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="360.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (5 samples, 0.10%)</title><rect x="357.0" y="339.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="360.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.06%)</title><rect x="357.0" y="323.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="360.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.06%)</title><rect x="357.0" y="307.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="360.0" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.06%)</title><rect x="357.0" y="291.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="360.0" y="302.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (3 samples, 0.06%)</title><rect x="357.0" y="275.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="360.0" y="286.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.06%)</title><rect x="357.0" y="259.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="360.0" y="270.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.06%)</title><rect x="357.0" y="243.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="360.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.06%)</title><rect x="358.1" y="339.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="361.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.06%)</title><rect x="358.1" y="323.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="361.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.06%)</title><rect x="358.1" y="307.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="361.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (23 samples, 0.44%)</title><rect x="358.8" y="371.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="361.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (23 samples, 0.44%)</title><rect x="358.8" y="355.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="361.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (23 samples, 0.44%)</title><rect x="358.8" y="339.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="361.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (23 samples, 0.44%)</title><rect x="358.8" y="323.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="361.8" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (23 samples, 0.44%)</title><rect x="358.8" y="307.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="361.8" y="318.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (22 samples, 0.43%)</title><rect x="358.8" y="291.0" width="5.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="361.8" y="302.0"></text>
</g>
<g>
<title>__psynch_cvsignal (16 samples, 0.31%)</title><rect x="359.7" y="275.0" width="3.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="362.7" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$71/1596990242.run (736 samples, 14.24%)</title><rect x="364.1" y="403.0" width="168.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="367.1" y="414.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$executeAsync$3 (736 samples, 14.24%)</title><rect x="364.1" y="387.0" width="168.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="367.1" y="398.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (210 samples, 4.06%)</title><rect x="364.3" y="371.0" width="47.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="367.3" y="382.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (207 samples, 4.00%)</title><rect x="364.5" y="355.0" width="47.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="367.5" y="366.0">one/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 0.10%)</title><rect x="364.8" y="339.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="367.8" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (201 samples, 3.89%)</title><rect x="365.9" y="339.0" width="45.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="368.9" y="350.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session.write (201 samples, 3.89%)</title><rect x="365.9" y="323.0" width="45.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="368.9" y="334.0">one/..</text>
</g>
<g>
<title>gettimeofday (3 samples, 0.06%)</title><rect x="366.6" y="307.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="369.6" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (194 samples, 3.75%)</title><rect x="367.3" y="307.0" width="44.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="370.3" y="318.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (194 samples, 3.75%)</title><rect x="367.3" y="291.0" width="44.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="370.3" y="302.0">one/..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (194 samples, 3.75%)</title><rect x="367.3" y="275.0" width="44.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="370.3" y="286.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (194 samples, 3.75%)</title><rect x="367.3" y="259.0" width="44.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="370.3" y="270.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (194 samples, 3.75%)</title><rect x="367.3" y="243.0" width="44.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="370.3" y="254.0">sun/..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.06%)</title><rect x="367.3" y="227.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="370.3" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.06%)</title><rect x="367.3" y="211.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="370.3" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.06%)</title><rect x="367.3" y="195.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="370.3" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.06%)</title><rect x="367.3" y="179.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="370.3" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.06%)</title><rect x="367.3" y="163.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="370.3" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.04%)</title><rect x="367.5" y="147.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="370.5" y="158.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (2 samples, 0.04%)</title><rect x="367.5" y="131.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="370.5" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (179 samples, 3.46%)</title><rect x="367.9" y="227.0" width="40.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="370.9" y="238.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (3 samples, 0.06%)</title><rect x="367.9" y="211.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="370.9" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (176 samples, 3.40%)</title><rect x="368.6" y="211.0" width="40.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="371.6" y="222.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (174 samples, 3.37%)</title><rect x="369.1" y="195.0" width="39.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="372.1" y="206.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (4 samples, 0.08%)</title><rect x="370.0" y="179.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="373.0" y="190.0"></text>
</g>
<g>
<title>write (166 samples, 3.21%)</title><rect x="370.9" y="179.0" width="37.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="373.9" y="190.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (5 samples, 0.10%)</title><rect x="408.8" y="227.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="411.8" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (5 samples, 0.10%)</title><rect x="408.8" y="211.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="411.8" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (4 samples, 0.08%)</title><rect x="409.0" y="195.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="412.0" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (4 samples, 0.08%)</title><rect x="409.0" y="179.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="412.0" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.rewind (4 samples, 0.08%)</title><rect x="409.0" y="163.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="412.0" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (7 samples, 0.14%)</title><rect x="410.0" y="227.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="413.0" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.14%)</title><rect x="410.0" y="211.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="413.0" y="222.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.06%)</title><rect x="410.9" y="195.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="413.9" y="206.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (2 samples, 0.04%)</title><rect x="410.9" y="179.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="413.9" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.04%)</title><rect x="411.8" y="355.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="414.8" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$69/1693506190.act (525 samples, 10.16%)</title><rect x="412.2" y="371.0" width="119.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="415.2" y="382.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$entity$1 (525 samples, 10.16%)</title><rect x="412.2" y="355.0" width="119.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="415.2" y="366.0">ru/mail/polis/s..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.08%)</title><rect x="412.2" y="339.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="415.2" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.06%)</title><rect x="412.5" y="323.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="415.5" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="412.5" y="307.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="415.5" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="412.5" y="291.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="415.5" y="302.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.06%)</title><rect x="412.5" y="275.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="415.5" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/lorismelik/RocksDAO.upsert (521 samples, 10.08%)</title><rect x="413.1" y="339.0" width="119.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="416.1" y="350.0">ru/mail/polis/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (519 samples, 10.04%)</title><rect x="413.1" y="323.0" width="118.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="416.1" y="334.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (519 samples, 10.04%)</title><rect x="413.1" y="307.0" width="118.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="416.1" y="318.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (516 samples, 9.98%)</title><rect x="413.8" y="291.0" width="117.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="416.8" y="302.0">Java_org_rocks..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (513 samples, 9.92%)</title><rect x="414.3" y="275.0" width="117.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="417.3" y="286.0">rocksdb_put_he..</text>
</g>
<g>
<title>free_tiny (3 samples, 0.06%)</title><rect x="415.4" y="259.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="418.4" y="270.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.04%)</title><rect x="416.1" y="259.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="419.1" y="270.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.08%)</title><rect x="416.6" y="259.0" width="0.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="419.6" y="270.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="417.0" y="243.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="420.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (494 samples, 9.56%)</title><rect x="417.5" y="259.0" width="112.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="420.5" y="270.0">rocksdb::Compa..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (492 samples, 9.52%)</title><rect x="417.9" y="243.0" width="112.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="420.9" y="254.0">rocksdb::DBImp..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (490 samples, 9.48%)</title><rect x="417.9" y="227.0" width="111.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="420.9" y="238.0">rocksdb::DB::..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (471 samples, 9.11%)</title><rect x="418.4" y="211.0" width="107.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="421.4" y="222.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (469 samples, 9.07%)</title><rect x="418.6" y="195.0" width="107.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="421.6" y="206.0">rocksdb::DBIm..</text>
</g>
<g>
<title>pthread_mutex_destroy (2 samples, 0.04%)</title><rect x="421.4" y="179.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="424.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (124 samples, 2.40%)</title><rect x="421.8" y="179.0" width="28.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="424.8" y="190.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (121 samples, 2.34%)</title><rect x="422.3" y="163.0" width="27.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="425.3" y="174.0">r..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (119 samples, 2.30%)</title><rect x="422.7" y="147.0" width="27.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="425.7" y="158.0">r..</text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (119 samples, 2.30%)</title><rect x="422.7" y="131.0" width="27.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="425.7" y="142.0">r..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="423.2" y="115.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="426.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (115 samples, 2.22%)</title><rect x="423.7" y="115.0" width="26.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="426.7" y="126.0">r..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="423.9" y="99.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="426.9" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (110 samples, 2.13%)</title><rect x="424.8" y="99.0" width="25.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="427.8" y="110.0">r..</text>
</g>
<g>
<title>write (109 samples, 2.11%)</title><rect x="425.0" y="83.0" width="24.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="428.0" y="94.0">w..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (33 samples, 0.64%)</title><rect x="450.4" y="179.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="453.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (30 samples, 0.58%)</title><rect x="451.0" y="163.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="454.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (29 samples, 0.56%)</title><rect x="451.3" y="147.0" width="6.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="454.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (29 samples, 0.56%)</title><rect x="451.3" y="131.0" width="6.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="454.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (26 samples, 0.50%)</title><rect x="451.7" y="115.0" width="6.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="454.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (24 samples, 0.46%)</title><rect x="452.2" y="99.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="455.2" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="454.7" y="83.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="457.7" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.04%)</title><rect x="455.2" y="83.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="458.2" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (8 samples, 0.15%)</title><rect x="455.8" y="83.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="458.8" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (5 samples, 0.10%)</title><rect x="456.5" y="67.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="459.5" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (5 samples, 0.10%)</title><rect x="456.5" y="51.0" width="1.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="459.5" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (25 samples, 0.48%)</title><rect x="457.9" y="179.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="460.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (22 samples, 0.43%)</title><rect x="458.6" y="163.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="461.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (2 samples, 0.04%)</title><rect x="458.6" y="147.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="461.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (20 samples, 0.39%)</title><rect x="459.0" y="147.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="462.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (20 samples, 0.39%)</title><rect x="459.0" y="131.0" width="4.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="462.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (18 samples, 0.35%)</title><rect x="459.3" y="115.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="462.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (17 samples, 0.33%)</title><rect x="459.5" y="99.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="462.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.04%)</title><rect x="459.9" y="83.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="462.9" y="94.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (13 samples, 0.25%)</title><rect x="460.4" y="83.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="463.4" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.06%)</title><rect x="462.5" y="67.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="465.5" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.04%)</title><rect x="462.7" y="51.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="465.7" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (152 samples, 2.94%)</title><rect x="463.8" y="179.0" width="34.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="466.8" y="190.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (151 samples, 2.92%)</title><rect x="463.8" y="163.0" width="34.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="466.8" y="174.0">ro..</text>
</g>
<g>
<title>xdrrec_ops (144 samples, 2.79%)</title><rect x="465.4" y="147.0" width="32.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="468.4" y="158.0">xd..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (2 samples, 0.04%)</title><rect x="498.5" y="179.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="501.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (2 samples, 0.04%)</title><rect x="498.5" y="163.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="501.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (11 samples, 0.21%)</title><rect x="499.0" y="179.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="502.0" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (9 samples, 0.17%)</title><rect x="499.2" y="163.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="502.2" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (9 samples, 0.17%)</title><rect x="499.2" y="147.0" width="2.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="502.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (89 samples, 1.72%)</title><rect x="501.5" y="179.0" width="20.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="504.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (88 samples, 1.70%)</title><rect x="501.7" y="163.0" width="20.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="504.7" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (72 samples, 1.39%)</title><rect x="502.9" y="147.0" width="16.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="505.9" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (64 samples, 1.24%)</title><rect x="502.9" y="131.0" width="14.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="505.9" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (7 samples, 0.14%)</title><rect x="517.5" y="131.0" width="1.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="520.5" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (6 samples, 0.12%)</title><rect x="517.7" y="115.0" width="1.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="520.7" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (6 samples, 0.12%)</title><rect x="517.7" y="99.0" width="1.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="520.7" y="110.0"></text>
</g>
<g>
<title>xdrrec_ops (11 samples, 0.21%)</title><rect x="519.3" y="147.0" width="2.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="522.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (15 samples, 0.29%)</title><rect x="521.8" y="179.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="524.8" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (14 samples, 0.27%)</title><rect x="522.0" y="163.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="525.0" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (14 samples, 0.27%)</title><rect x="522.0" y="147.0" width="3.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="525.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 0.12%)</title><rect x="525.9" y="211.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="528.9" y="222.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.04%)</title><rect x="526.2" y="195.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="529.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="526.8" y="195.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="529.8" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (2 samples, 0.04%)</title><rect x="526.8" y="179.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="529.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (2 samples, 0.04%)</title><rect x="527.3" y="211.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="530.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (7 samples, 0.14%)</title><rect x="527.7" y="211.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="530.7" y="222.0"></text>
</g>
<g>
<title>free (6 samples, 0.12%)</title><rect x="527.7" y="195.0" width="1.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="530.7" y="206.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.04%)</title><rect x="528.7" y="179.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="531.7" y="190.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (2 samples, 0.04%)</title><rect x="529.3" y="211.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="532.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (2 samples, 0.04%)</title><rect x="529.8" y="227.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="532.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="530.3" y="259.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="533.3" y="270.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="530.7" y="259.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="533.7" y="270.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.06%)</title><rect x="530.7" y="243.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="533.7" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.04%)</title><rect x="530.9" y="227.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="533.9" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="530.9" y="211.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="533.9" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.shiftBytes (2 samples, 0.04%)</title><rect x="531.6" y="323.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="534.6" y="334.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (4 samples, 0.08%)</title><rect x="532.1" y="451.0" width="0.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="535.1" y="462.0"></text>
</g>
<g>
<title>[worker tid=27651] (945 samples, 18.28%)</title><rect x="533.0" y="467.0" width="215.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="536.0" y="478.0">[worker tid=27651]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (11 samples, 0.21%)</title><rect x="533.0" y="451.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="536.0" y="462.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (10 samples, 0.19%)</title><rect x="533.2" y="435.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="536.2" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (8 samples, 0.15%)</title><rect x="533.7" y="419.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="536.7" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.04%)</title><rect x="535.1" y="403.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="538.1" y="414.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.04%)</title><rect x="535.5" y="451.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="538.5" y="462.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.04%)</title><rect x="535.5" y="435.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="538.5" y="446.0"></text>
</g>
<g>
<title>java/lang/Thread.run (931 samples, 18.01%)</title><rect x="536.0" y="451.0" width="212.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="539.0" y="462.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (931 samples, 18.01%)</title><rect x="536.0" y="435.0" width="212.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="539.0" y="446.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (931 samples, 18.01%)</title><rect x="536.0" y="419.0" width="212.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="539.0" y="430.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (3 samples, 0.06%)</title><rect x="536.0" y="403.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="539.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.06%)</title><rect x="536.0" y="387.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="539.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (3 samples, 0.06%)</title><rect x="536.0" y="371.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="539.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (258 samples, 4.99%)</title><rect x="536.7" y="403.0" width="58.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="539.7" y="414.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (258 samples, 4.99%)</title><rect x="536.7" y="387.0" width="58.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="539.7" y="398.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (244 samples, 4.72%)</title><rect x="536.7" y="371.0" width="55.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="539.7" y="382.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 0.06%)</title><rect x="536.9" y="355.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="539.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.04%)</title><rect x="537.1" y="339.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="540.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.04%)</title><rect x="537.1" y="323.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="540.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.04%)</title><rect x="537.1" y="307.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="540.1" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.04%)</title><rect x="537.1" y="291.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="540.1" y="302.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (2 samples, 0.04%)</title><rect x="537.1" y="275.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="540.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (240 samples, 4.64%)</title><rect x="537.6" y="355.0" width="54.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="540.6" y="366.0">java/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (240 samples, 4.64%)</title><rect x="537.6" y="339.0" width="54.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="540.6" y="350.0">jdk/i..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (231 samples, 4.47%)</title><rect x="539.6" y="323.0" width="52.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="542.6" y="334.0">Unsaf..</text>
</g>
<g>
<title>Parker::park(bool, long) (219 samples, 4.24%)</title><rect x="540.5" y="307.0" width="50.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="543.5" y="318.0">Parke..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.04%)</title><rect x="540.5" y="291.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="543.5" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (214 samples, 4.14%)</title><rect x="541.0" y="291.0" width="48.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="544.0" y="302.0">__ps..</text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.04%)</title><rect x="589.8" y="291.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="592.8" y="302.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.08%)</title><rect x="591.0" y="307.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="594.0" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.06%)</title><rect x="591.0" y="291.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="594.0" y="302.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.06%)</title><rect x="591.0" y="275.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="594.0" y="286.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="591.2" y="259.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="594.2" y="270.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="591.2" y="243.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="594.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.04%)</title><rect x="592.4" y="371.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="595.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.04%)</title><rect x="592.4" y="355.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="595.4" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (2 samples, 0.04%)</title><rect x="592.4" y="339.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="595.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (12 samples, 0.23%)</title><rect x="592.8" y="371.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="595.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 0.23%)</title><rect x="592.8" y="355.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="595.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 0.23%)</title><rect x="592.8" y="339.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="595.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 0.23%)</title><rect x="592.8" y="323.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="595.8" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (12 samples, 0.23%)</title><rect x="592.8" y="307.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="595.8" y="318.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (10 samples, 0.19%)</title><rect x="593.0" y="291.0" width="2.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="596.0" y="302.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.14%)</title><rect x="593.5" y="275.0" width="1.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="596.5" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$71/1596990242.run (670 samples, 12.96%)</title><rect x="595.5" y="403.0" width="153.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="598.5" y="414.0">ru/mail/polis/servi..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$executeAsync$3 (670 samples, 12.96%)</title><rect x="595.5" y="387.0" width="153.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="598.5" y="398.0">ru/mail/polis/servi..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (167 samples, 3.23%)</title><rect x="595.5" y="371.0" width="38.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="598.5" y="382.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (163 samples, 3.15%)</title><rect x="595.8" y="355.0" width="37.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="598.8" y="366.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.12%)</title><rect x="595.8" y="339.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="598.8" y="350.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.04%)</title><rect x="596.7" y="323.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="599.7" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.04%)</title><rect x="596.7" y="307.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="599.7" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.04%)</title><rect x="596.7" y="291.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="599.7" y="302.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.04%)</title><rect x="596.7" y="275.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="599.7" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (157 samples, 3.04%)</title><rect x="597.1" y="339.0" width="35.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="600.1" y="350.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (156 samples, 3.02%)</title><rect x="597.4" y="323.0" width="35.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="600.4" y="334.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (150 samples, 2.90%)</title><rect x="598.1" y="307.0" width="34.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="601.1" y="318.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (150 samples, 2.90%)</title><rect x="598.1" y="291.0" width="34.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="601.1" y="302.0">on..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (150 samples, 2.90%)</title><rect x="598.1" y="275.0" width="34.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="601.1" y="286.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (150 samples, 2.90%)</title><rect x="598.1" y="259.0" width="34.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="601.1" y="270.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (150 samples, 2.90%)</title><rect x="598.1" y="243.0" width="34.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="601.1" y="254.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (142 samples, 2.75%)</title><rect x="598.1" y="227.0" width="32.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="601.1" y="238.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (142 samples, 2.75%)</title><rect x="598.1" y="211.0" width="32.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="601.1" y="222.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (142 samples, 2.75%)</title><rect x="598.1" y="195.0" width="32.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="601.1" y="206.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (4 samples, 0.08%)</title><rect x="599.2" y="179.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="602.2" y="190.0"></text>
</g>
<g>
<title>write (133 samples, 2.57%)</title><rect x="600.1" y="179.0" width="30.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="603.1" y="190.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (5 samples, 0.10%)</title><rect x="630.5" y="227.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="633.5" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (5 samples, 0.10%)</title><rect x="630.5" y="211.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="633.5" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (4 samples, 0.08%)</title><rect x="630.7" y="195.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="633.7" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (4 samples, 0.08%)</title><rect x="630.7" y="179.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="633.7" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.rewind (4 samples, 0.08%)</title><rect x="630.7" y="163.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="633.7" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (3 samples, 0.06%)</title><rect x="631.6" y="227.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="634.6" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.06%)</title><rect x="631.6" y="211.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="634.6" y="222.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.04%)</title><rect x="631.8" y="195.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="634.8" y="206.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="631.8" y="179.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="634.8" y="190.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.06%)</title><rect x="632.3" y="307.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="635.3" y="318.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="632.3" y="291.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="635.3" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.06%)</title><rect x="633.0" y="355.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="636.0" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$69/1693506190.act (503 samples, 9.73%)</title><rect x="633.7" y="371.0" width="114.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="636.7" y="382.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$entity$1 (502 samples, 9.71%)</title><rect x="633.9" y="355.0" width="114.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="636.9" y="366.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="633.9" y="339.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="636.9" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="633.9" y="323.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="636.9" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="633.9" y="307.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="636.9" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="633.9" y="291.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="636.9" y="302.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="633.9" y="275.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="636.9" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/lorismelik/RocksDAO.upsert (500 samples, 9.67%)</title><rect x="634.4" y="339.0" width="114.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="637.4" y="350.0">ru/mail/polis/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (494 samples, 9.56%)</title><rect x="634.4" y="323.0" width="112.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="637.4" y="334.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (494 samples, 9.56%)</title><rect x="634.4" y="307.0" width="112.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="637.4" y="318.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (491 samples, 9.50%)</title><rect x="635.0" y="291.0" width="112.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="638.0" y="302.0">Java_org_rocks..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (488 samples, 9.44%)</title><rect x="635.3" y="275.0" width="111.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="638.3" y="286.0">rocksdb_put_h..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (2 samples, 0.04%)</title><rect x="635.5" y="259.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="638.5" y="270.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.06%)</title><rect x="636.4" y="259.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="639.4" y="270.0"></text>
</g>
<g>
<title>tiny_free_no_lock (3 samples, 0.06%)</title><rect x="636.4" y="243.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="639.4" y="254.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.04%)</title><rect x="637.1" y="259.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="640.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (473 samples, 9.15%)</title><rect x="637.6" y="259.0" width="107.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="640.6" y="270.0">rocksdb::Comp..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (473 samples, 9.15%)</title><rect x="637.6" y="243.0" width="107.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="640.6" y="254.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (472 samples, 9.13%)</title><rect x="637.6" y="227.0" width="107.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="640.6" y="238.0">rocksdb::DB::..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (2 samples, 0.04%)</title><rect x="638.0" y="211.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="641.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (455 samples, 8.80%)</title><rect x="638.5" y="211.0" width="103.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="641.5" y="222.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (452 samples, 8.74%)</title><rect x="638.5" y="195.0" width="103.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="641.5" y="206.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (115 samples, 2.22%)</title><rect x="641.2" y="179.0" width="26.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="644.2" y="190.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (110 samples, 2.13%)</title><rect x="641.7" y="163.0" width="25.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="644.7" y="174.0">r..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (108 samples, 2.09%)</title><rect x="642.1" y="147.0" width="24.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="645.1" y="158.0">r..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (3 samples, 0.06%)</title><rect x="642.1" y="131.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="645.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (105 samples, 2.03%)</title><rect x="642.8" y="131.0" width="24.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="645.8" y="142.0">r..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (101 samples, 1.95%)</title><rect x="643.7" y="115.0" width="23.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="646.7" y="126.0">r..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (98 samples, 1.90%)</title><rect x="644.4" y="99.0" width="22.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="647.4" y="110.0">r..</text>
</g>
<g>
<title>write (96 samples, 1.86%)</title><rect x="644.9" y="83.0" width="21.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="647.9" y="94.0">w..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (43 samples, 0.83%)</title><rect x="667.7" y="179.0" width="9.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="670.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::Continue() (2 samples, 0.04%)</title><rect x="667.9" y="163.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="670.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (40 samples, 0.77%)</title><rect x="668.4" y="163.0" width="9.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="671.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (40 samples, 0.77%)</title><rect x="668.4" y="147.0" width="9.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="671.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (40 samples, 0.77%)</title><rect x="668.4" y="131.0" width="9.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="671.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (33 samples, 0.64%)</title><rect x="669.5" y="115.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="672.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.04%)</title><rect x="670.2" y="99.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="673.2" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (28 samples, 0.54%)</title><rect x="670.7" y="99.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="673.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (11 samples, 0.21%)</title><rect x="674.5" y="83.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="677.5" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (5 samples, 0.10%)</title><rect x="675.9" y="67.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="678.9" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (4 samples, 0.08%)</title><rect x="676.1" y="51.0" width="0.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="679.1" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (18 samples, 0.35%)</title><rect x="677.5" y="179.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="680.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (15 samples, 0.29%)</title><rect x="678.2" y="163.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="681.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (15 samples, 0.29%)</title><rect x="678.2" y="147.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="681.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (14 samples, 0.27%)</title><rect x="678.4" y="131.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="681.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (10 samples, 0.19%)</title><rect x="678.9" y="115.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="681.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (9 samples, 0.17%)</title><rect x="679.1" y="99.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="682.1" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.04%)</title><rect x="679.1" y="83.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="682.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (6 samples, 0.12%)</title><rect x="679.8" y="83.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="682.8" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.04%)</title><rect x="680.7" y="67.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="683.7" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.04%)</title><rect x="680.7" y="51.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="683.7" y="62.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.04%)</title><rect x="680.7" y="35.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="683.7" y="46.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="681.2" y="115.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="684.2" y="126.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="681.2" y="99.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="684.2" y="110.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.04%)</title><rect x="681.2" y="83.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="684.2" y="94.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (155 samples, 3.00%)</title><rect x="681.6" y="179.0" width="35.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="684.6" y="190.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (155 samples, 3.00%)</title><rect x="681.6" y="163.0" width="35.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="684.6" y="174.0">roc..</text>
</g>
<g>
<title>xdrrec_ops (146 samples, 2.82%)</title><rect x="683.7" y="147.0" width="33.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="686.7" y="158.0">xd..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (3 samples, 0.06%)</title><rect x="717.0" y="179.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="720.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (2 samples, 0.04%)</title><rect x="717.0" y="163.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="720.0" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (2 samples, 0.04%)</title><rect x="717.0" y="147.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="720.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (10 samples, 0.19%)</title><rect x="717.7" y="179.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="720.7" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (7 samples, 0.14%)</title><rect x="718.1" y="163.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="721.1" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.12%)</title><rect x="718.1" y="147.0" width="1.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="721.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (78 samples, 1.51%)</title><rect x="720.0" y="179.0" width="17.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="723.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (76 samples, 1.47%)</title><rect x="720.2" y="163.0" width="17.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="723.2" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (61 samples, 1.18%)</title><rect x="721.1" y="147.0" width="13.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="724.1" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (46 samples, 0.89%)</title><rect x="721.1" y="131.0" width="10.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="724.1" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (15 samples, 0.29%)</title><rect x="731.6" y="131.0" width="3.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="734.6" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (14 samples, 0.27%)</title><rect x="731.8" y="115.0" width="3.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="734.8" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (14 samples, 0.27%)</title><rect x="731.8" y="99.0" width="3.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="734.8" y="110.0"></text>
</g>
<g>
<title>xdrrec_ops (10 samples, 0.19%)</title><rect x="735.3" y="147.0" width="2.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="738.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (14 samples, 0.27%)</title><rect x="737.8" y="179.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="740.8" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (9 samples, 0.17%)</title><rect x="738.2" y="163.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="741.2" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (9 samples, 0.17%)</title><rect x="738.2" y="147.0" width="2.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="741.2" y="158.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (3 samples, 0.06%)</title><rect x="740.3" y="163.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="743.3" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (3 samples, 0.06%)</title><rect x="740.3" y="147.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="743.3" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (3 samples, 0.06%)</title><rect x="740.3" y="131.0" width="0.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="743.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (2 samples, 0.04%)</title><rect x="742.3" y="211.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="745.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="742.8" y="211.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="745.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="742.8" y="195.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="745.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (6 samples, 0.12%)</title><rect x="743.2" y="211.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="746.2" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (4 samples, 0.08%)</title><rect x="743.2" y="195.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="746.2" y="206.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="743.5" y="179.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="746.5" y="190.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.06%)</title><rect x="743.5" y="163.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="746.5" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.06%)</title><rect x="743.5" y="147.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="746.5" y="158.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.06%)</title><rect x="743.5" y="131.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="746.5" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.06%)</title><rect x="743.5" y="115.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="746.5" y="126.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.04%)</title><rect x="744.2" y="195.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="747.2" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (2 samples, 0.04%)</title><rect x="744.2" y="179.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="747.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (2 samples, 0.04%)</title><rect x="744.6" y="211.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="747.6" y="222.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (4 samples, 0.08%)</title><rect x="745.8" y="259.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="748.8" y="270.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.08%)</title><rect x="745.8" y="243.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="748.8" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.08%)</title><rect x="745.8" y="227.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="748.8" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.06%)</title><rect x="746.0" y="211.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="749.0" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.06%)</title><rect x="746.0" y="195.0" width="0.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="749.0" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.shiftBytes (6 samples, 0.12%)</title><rect x="747.1" y="323.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="750.1" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.clone (3 samples, 0.06%)</title><rect x="747.8" y="307.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="750.8" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.06%)</title><rect x="747.8" y="291.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="750.8" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="747.8" y="275.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="750.8" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="747.8" y="259.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="750.8" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="748.0" y="243.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="751.0" y="254.0"></text>
</g>
<g>
<title>[worker tid=35075] (959 samples, 18.55%)</title><rect x="748.7" y="467.0" width="219.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="751.7" y="478.0">[worker tid=35075]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (12 samples, 0.23%)</title><rect x="748.7" y="451.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="751.7" y="462.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (10 samples, 0.19%)</title><rect x="749.0" y="435.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="752.0" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (6 samples, 0.12%)</title><rect x="749.6" y="419.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="752.6" y="430.0"></text>
</g>
<g>
<title>java/lang/Thread.run (944 samples, 18.26%)</title><rect x="751.9" y="451.0" width="215.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="754.9" y="462.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (944 samples, 18.26%)</title><rect x="751.9" y="435.0" width="215.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="754.9" y="446.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (944 samples, 18.26%)</title><rect x="751.9" y="419.0" width="215.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="754.9" y="430.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (6 samples, 0.12%)</title><rect x="751.9" y="403.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="754.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.12%)</title><rect x="751.9" y="387.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="754.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (6 samples, 0.12%)</title><rect x="751.9" y="371.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="754.9" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (4 samples, 0.08%)</title><rect x="752.4" y="355.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="755.4" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (257 samples, 4.97%)</title><rect x="753.5" y="403.0" width="58.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="756.5" y="414.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (257 samples, 4.97%)</title><rect x="753.5" y="387.0" width="58.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="756.5" y="398.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (234 samples, 4.53%)</title><rect x="753.5" y="371.0" width="53.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="756.5" y="382.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (232 samples, 4.49%)</title><rect x="754.0" y="355.0" width="52.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="757.0" y="366.0">java/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (232 samples, 4.49%)</title><rect x="754.0" y="339.0" width="52.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="757.0" y="350.0">jdk/i..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (223 samples, 4.31%)</title><rect x="756.0" y="323.0" width="50.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="759.0" y="334.0">Unsaf..</text>
</g>
<g>
<title>Parker::park(bool, long) (212 samples, 4.10%)</title><rect x="756.9" y="307.0" width="48.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="759.9" y="318.0">Park..</text>
</g>
<g>
<title>__psynch_cvwait (207 samples, 4.00%)</title><rect x="757.2" y="291.0" width="47.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="760.2" y="302.0">__ps..</text>
</g>
<g>
<title>_pthread_cond_wait (4 samples, 0.08%)</title><rect x="804.4" y="291.0" width="0.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="807.4" y="302.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.04%)</title><rect x="805.8" y="307.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="808.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (4 samples, 0.08%)</title><rect x="806.9" y="371.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="809.9" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (4 samples, 0.08%)</title><rect x="806.9" y="355.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="809.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (3 samples, 0.06%)</title><rect x="806.9" y="339.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="809.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (2 samples, 0.04%)</title><rect x="807.2" y="323.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="810.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (19 samples, 0.37%)</title><rect x="807.9" y="371.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="810.9" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 0.37%)</title><rect x="807.9" y="355.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="810.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 0.37%)</title><rect x="807.9" y="339.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="810.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 0.37%)</title><rect x="807.9" y="323.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="810.9" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (19 samples, 0.37%)</title><rect x="807.9" y="307.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="810.9" y="318.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (16 samples, 0.31%)</title><rect x="808.5" y="291.0" width="3.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="811.5" y="302.0"></text>
</g>
<g>
<title>__psynch_cvsignal (14 samples, 0.27%)</title><rect x="809.0" y="275.0" width="3.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="812.0" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$71/1596990242.run (680 samples, 13.16%)</title><rect x="812.2" y="403.0" width="155.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="815.2" y="414.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$executeAsync$3 (680 samples, 13.16%)</title><rect x="812.2" y="387.0" width="155.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="815.2" y="398.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (179 samples, 3.46%)</title><rect x="812.2" y="371.0" width="40.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="815.2" y="382.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (170 samples, 3.29%)</title><rect x="812.4" y="355.0" width="38.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="815.4" y="366.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (7 samples, 0.14%)</title><rect x="812.4" y="339.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="815.4" y="350.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (4 samples, 0.08%)</title><rect x="813.1" y="323.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="816.1" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.08%)</title><rect x="813.1" y="307.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="816.1" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.08%)</title><rect x="813.1" y="291.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="816.1" y="302.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.08%)</title><rect x="813.1" y="275.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="816.1" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (163 samples, 3.15%)</title><rect x="814.0" y="339.0" width="37.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="817.0" y="350.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (163 samples, 3.15%)</title><rect x="814.0" y="323.0" width="37.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="817.0" y="334.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (160 samples, 3.10%)</title><rect x="814.2" y="307.0" width="36.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="817.2" y="318.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (160 samples, 3.10%)</title><rect x="814.2" y="291.0" width="36.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="817.2" y="302.0">one..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (160 samples, 3.10%)</title><rect x="814.2" y="275.0" width="36.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="817.2" y="286.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (160 samples, 3.10%)</title><rect x="814.2" y="259.0" width="36.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="817.2" y="270.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (160 samples, 3.10%)</title><rect x="814.2" y="243.0" width="36.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="817.2" y="254.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (154 samples, 2.98%)</title><rect x="814.5" y="227.0" width="35.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="817.5" y="238.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (4 samples, 0.08%)</title><rect x="814.5" y="211.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="817.5" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (150 samples, 2.90%)</title><rect x="815.4" y="211.0" width="34.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="818.4" y="222.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (149 samples, 2.88%)</title><rect x="815.6" y="195.0" width="34.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="818.6" y="206.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.04%)</title><rect x="817.0" y="179.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="820.0" y="190.0"></text>
</g>
<g>
<title>write (141 samples, 2.73%)</title><rect x="817.4" y="179.0" width="32.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="820.4" y="190.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.08%)</title><rect x="849.6" y="227.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="852.6" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (4 samples, 0.08%)</title><rect x="849.6" y="211.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="852.6" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (4 samples, 0.08%)</title><rect x="849.6" y="195.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="852.6" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (4 samples, 0.08%)</title><rect x="849.6" y="179.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="852.6" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.rewind (4 samples, 0.08%)</title><rect x="849.6" y="163.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="852.6" y="174.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.04%)</title><rect x="850.8" y="307.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="853.8" y="318.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title><rect x="850.8" y="291.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="853.8" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8 samples, 0.15%)</title><rect x="851.2" y="355.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="854.2" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.08%)</title><rect x="852.1" y="339.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="855.1" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.08%)</title><rect x="852.1" y="323.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="855.1" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$69/1693506190.act (501 samples, 9.69%)</title><rect x="853.1" y="371.0" width="114.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="856.1" y="382.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$entity$1 (501 samples, 9.69%)</title><rect x="853.1" y="355.0" width="114.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="856.1" y="366.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.08%)</title><rect x="853.5" y="339.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="856.5" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.08%)</title><rect x="853.5" y="323.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="856.5" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="853.5" y="307.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="856.5" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.08%)</title><rect x="853.5" y="291.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="856.5" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/lorismelik/RocksDAO.upsert (495 samples, 9.58%)</title><rect x="854.4" y="339.0" width="113.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="857.4" y="350.0">ru/mail/polis/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (494 samples, 9.56%)</title><rect x="854.4" y="323.0" width="112.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="857.4" y="334.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (494 samples, 9.56%)</title><rect x="854.4" y="307.0" width="112.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="857.4" y="318.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (489 samples, 9.46%)</title><rect x="855.6" y="291.0" width="111.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="858.6" y="302.0">Java_org_rock..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (487 samples, 9.42%)</title><rect x="855.8" y="275.0" width="111.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="858.8" y="286.0">rocksdb_put_h..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (2 samples, 0.04%)</title><rect x="855.8" y="259.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="858.8" y="270.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.08%)</title><rect x="856.7" y="259.0" width="0.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="859.7" y="270.0"></text>
</g>
<g>
<title>tiny_free_no_lock (2 samples, 0.04%)</title><rect x="857.2" y="243.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="860.2" y="254.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.12%)</title><rect x="857.6" y="259.0" width="1.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="860.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (470 samples, 9.09%)</title><rect x="859.2" y="259.0" width="107.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="862.2" y="270.0">rocksdb::Comp..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (470 samples, 9.09%)</title><rect x="859.2" y="243.0" width="107.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="862.2" y="254.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (467 samples, 9.03%)</title><rect x="859.4" y="227.0" width="106.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="862.4" y="238.0">rocksdb::DB::..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (456 samples, 8.82%)</title><rect x="859.7" y="211.0" width="104.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="862.7" y="222.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (454 samples, 8.78%)</title><rect x="859.7" y="195.0" width="103.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="862.7" y="206.0">rocksdb::DBI..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="861.3" y="179.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="864.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::~ColumnFamilyHandleImpl() (2 samples, 0.04%)</title><rect x="861.7" y="179.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="864.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (2 samples, 0.04%)</title><rect x="862.2" y="179.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="865.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (121 samples, 2.34%)</title><rect x="862.6" y="179.0" width="27.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="865.6" y="190.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (117 samples, 2.26%)</title><rect x="862.6" y="163.0" width="26.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="865.6" y="174.0">r..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (115 samples, 2.22%)</title><rect x="863.1" y="147.0" width="26.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="866.1" y="158.0">r..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (4 samples, 0.08%)</title><rect x="863.3" y="131.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="866.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (110 samples, 2.13%)</title><rect x="864.2" y="131.0" width="25.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="867.2" y="142.0">r..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="864.5" y="115.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="867.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (107 samples, 2.07%)</title><rect x="864.9" y="115.0" width="24.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="867.9" y="126.0">r..</text>
</g>
<g>
<title>_dispatch_queue_attrs (2 samples, 0.04%)</title><rect x="865.2" y="99.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="868.2" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (103 samples, 1.99%)</title><rect x="865.8" y="99.0" width="23.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="868.8" y="110.0">r..</text>
</g>
<g>
<title>write (101 samples, 1.95%)</title><rect x="866.3" y="83.0" width="23.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="869.3" y="94.0">w..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Clear() (3 samples, 0.06%)</title><rect x="889.3" y="163.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="892.3" y="174.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (3 samples, 0.06%)</title><rect x="889.3" y="147.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="892.3" y="158.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (2 samples, 0.04%)</title><rect x="889.6" y="131.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="892.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (3 samples, 0.06%)</title><rect x="890.5" y="179.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="893.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (26 samples, 0.50%)</title><rect x="891.2" y="179.0" width="5.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="894.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (25 samples, 0.48%)</title><rect x="891.4" y="163.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="894.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (24 samples, 0.46%)</title><rect x="891.6" y="147.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="894.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (21 samples, 0.41%)</title><rect x="892.3" y="131.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="895.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (21 samples, 0.41%)</title><rect x="892.3" y="115.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="895.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (19 samples, 0.37%)</title><rect x="892.8" y="99.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="895.8" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 0.14%)</title><rect x="895.5" y="83.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="898.5" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.06%)</title><rect x="896.4" y="67.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="899.4" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.06%)</title><rect x="896.4" y="51.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="899.4" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (19 samples, 0.37%)</title><rect x="897.1" y="179.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="900.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (18 samples, 0.35%)</title><rect x="897.3" y="163.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="900.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (16 samples, 0.31%)</title><rect x="897.8" y="147.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="900.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (15 samples, 0.29%)</title><rect x="898.0" y="131.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="901.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (12 samples, 0.23%)</title><rect x="898.3" y="115.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="901.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (10 samples, 0.19%)</title><rect x="898.7" y="99.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="901.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (7 samples, 0.14%)</title><rect x="899.4" y="83.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="902.4" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.04%)</title><rect x="900.5" y="67.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="903.5" y="78.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="901.0" y="115.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="904.0" y="126.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="901.0" y="99.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="904.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (172 samples, 3.33%)</title><rect x="901.4" y="179.0" width="39.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="904.4" y="190.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (170 samples, 3.29%)</title><rect x="901.4" y="163.0" width="38.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="904.4" y="174.0">roc..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (3 samples, 0.06%)</title><rect x="902.4" y="147.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="905.4" y="158.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.06%)</title><rect x="902.4" y="131.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="905.4" y="142.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (3 samples, 0.06%)</title><rect x="902.4" y="115.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="905.4" y="126.0"></text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="902.4" y="99.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="905.4" y="110.0"></text>
</g>
<g>
<title>xdrrec_ops (163 samples, 3.15%)</title><rect x="903.0" y="147.0" width="37.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="906.0" y="158.0">xdr..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (2 samples, 0.04%)</title><rect x="940.3" y="163.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="943.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (12 samples, 0.23%)</title><rect x="940.9" y="179.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="943.9" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (12 samples, 0.23%)</title><rect x="940.9" y="163.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="943.9" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (12 samples, 0.23%)</title><rect x="940.9" y="147.0" width="2.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="943.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (68 samples, 1.32%)</title><rect x="943.7" y="179.0" width="15.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="946.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (67 samples, 1.30%)</title><rect x="943.7" y="163.0" width="15.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="946.7" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (55 samples, 1.06%)</title><rect x="944.4" y="147.0" width="12.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="947.4" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (40 samples, 0.77%)</title><rect x="944.6" y="131.0" width="9.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="947.6" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (14 samples, 0.27%)</title><rect x="953.7" y="131.0" width="3.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="956.7" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (11 samples, 0.21%)</title><rect x="954.4" y="115.0" width="2.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="957.4" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (11 samples, 0.21%)</title><rect x="954.4" y="99.0" width="2.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="957.4" y="110.0"></text>
</g>
<g>
<title>xdrrec_ops (9 samples, 0.17%)</title><rect x="956.9" y="147.0" width="2.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="959.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (12 samples, 0.23%)</title><rect x="959.2" y="179.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="962.2" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (9 samples, 0.17%)</title><rect x="959.4" y="163.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="962.4" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.14%)</title><rect x="959.4" y="147.0" width="1.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="962.4" y="158.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (2 samples, 0.04%)</title><rect x="961.5" y="163.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="964.5" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.04%)</title><rect x="961.5" y="147.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="964.5" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.04%)</title><rect x="961.5" y="131.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="964.5" y="142.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (2 samples, 0.04%)</title><rect x="962.9" y="179.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="965.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="963.8" y="211.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="966.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.04%)</title><rect x="963.8" y="195.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="966.8" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (2 samples, 0.04%)</title><rect x="963.8" y="179.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="966.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (3 samples, 0.06%)</title><rect x="964.2" y="211.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="967.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (5 samples, 0.10%)</title><rect x="964.9" y="211.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="967.9" y="222.0"></text>
</g>
<g>
<title>free (3 samples, 0.06%)</title><rect x="964.9" y="195.0" width="0.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="967.9" y="206.0"></text>
</g>
<g>
<title>tiny_size (3 samples, 0.06%)</title><rect x="964.9" y="179.0" width="0.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="967.9" y="190.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.04%)</title><rect x="965.6" y="195.0" width="0.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="968.6" y="206.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="966.5" y="259.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="969.5" y="270.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="966.5" y="243.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="969.5" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.04%)</title><rect x="966.5" y="227.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="969.5" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="966.5" y="211.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="969.5" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="966.5" y="195.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="969.5" y="206.0"></text>
</g>
<g>
<title>[worker tid=36355] (974 samples, 18.84%)</title><rect x="967.7" y="467.0" width="222.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="970.7" y="478.0">[worker tid=36355]</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (7 samples, 0.14%)</title><rect x="967.9" y="451.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="970.9" y="462.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (7 samples, 0.14%)</title><rect x="967.9" y="435.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="970.9" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (6 samples, 0.12%)</title><rect x="967.9" y="419.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="970.9" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (3 samples, 0.06%)</title><rect x="968.6" y="403.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="971.6" y="414.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.04%)</title><rect x="969.5" y="451.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="972.5" y="462.0"></text>
</g>
<g>
<title>java/lang/Thread.run (961 samples, 18.59%)</title><rect x="970.4" y="451.0" width="219.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="973.4" y="462.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (961 samples, 18.59%)</title><rect x="970.4" y="435.0" width="219.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="973.4" y="446.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (961 samples, 18.59%)</title><rect x="970.4" y="419.0" width="219.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="973.4" y="430.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (227 samples, 4.39%)</title><rect x="970.4" y="403.0" width="51.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="973.4" y="414.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (227 samples, 4.39%)</title><rect x="970.4" y="387.0" width="51.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="973.4" y="398.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (205 samples, 3.97%)</title><rect x="970.4" y="371.0" width="46.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="973.4" y="382.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 0.06%)</title><rect x="970.8" y="355.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="973.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.06%)</title><rect x="970.8" y="339.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="973.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.06%)</title><rect x="970.8" y="323.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="973.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.06%)</title><rect x="970.8" y="307.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="973.8" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.06%)</title><rect x="970.8" y="291.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="973.8" y="302.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.06%)</title><rect x="970.8" y="275.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="973.8" y="286.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.04%)</title><rect x="971.1" y="259.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="974.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (200 samples, 3.87%)</title><rect x="971.5" y="355.0" width="45.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="974.5" y="366.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (200 samples, 3.87%)</title><rect x="971.5" y="339.0" width="45.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="974.5" y="350.0">jdk/..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (193 samples, 3.73%)</title><rect x="973.1" y="323.0" width="44.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="976.1" y="334.0">Unsa..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.04%)</title><rect x="973.6" y="307.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="976.6" y="318.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.04%)</title><rect x="973.6" y="291.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="976.6" y="302.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (2 samples, 0.04%)</title><rect x="973.6" y="275.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="976.6" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (2 samples, 0.04%)</title><rect x="973.6" y="259.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="976.6" y="270.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.04%)</title><rect x="974.0" y="307.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="977.0" y="318.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (180 samples, 3.48%)</title><rect x="974.5" y="307.0" width="41.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="977.5" y="318.0">Par..</text>
</g>
<g>
<title>__psynch_cvwait (178 samples, 3.44%)</title><rect x="975.0" y="291.0" width="40.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="978.0" y="302.0">__p..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.04%)</title><rect x="1015.8" y="307.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1018.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (22 samples, 0.43%)</title><rect x="1017.2" y="371.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1020.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (22 samples, 0.43%)</title><rect x="1017.2" y="355.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1020.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (22 samples, 0.43%)</title><rect x="1017.2" y="339.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1020.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (22 samples, 0.43%)</title><rect x="1017.2" y="323.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1020.2" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (22 samples, 0.43%)</title><rect x="1017.2" y="307.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1020.2" y="318.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (19 samples, 0.37%)</title><rect x="1017.9" y="291.0" width="4.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1020.9" y="302.0"></text>
</g>
<g>
<title>__psynch_cvsignal (17 samples, 0.33%)</title><rect x="1018.1" y="275.0" width="3.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1021.1" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$71/1596990242.run (734 samples, 14.20%)</title><rect x="1022.2" y="403.0" width="167.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1025.2" y="414.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$executeAsync$3 (734 samples, 14.20%)</title><rect x="1022.2" y="387.0" width="167.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1025.2" y="398.0">ru/mail/polis/service..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (181 samples, 3.50%)</title><rect x="1022.2" y="371.0" width="41.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1025.2" y="382.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (175 samples, 3.39%)</title><rect x="1022.4" y="355.0" width="40.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1025.4" y="366.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (14 samples, 0.27%)</title><rect x="1022.7" y="339.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1025.7" y="350.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (8 samples, 0.15%)</title><rect x="1024.0" y="323.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1027.0" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (8 samples, 0.15%)</title><rect x="1024.0" y="307.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1027.0" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (8 samples, 0.15%)</title><rect x="1024.0" y="291.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1027.0" y="302.0"></text>
</g>
<g>
<title>java/lang/String.charAt (8 samples, 0.15%)</title><rect x="1024.0" y="275.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1027.0" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (160 samples, 3.10%)</title><rect x="1025.9" y="339.0" width="36.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1028.9" y="350.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (159 samples, 3.08%)</title><rect x="1026.1" y="323.0" width="36.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1029.1" y="334.0">one..</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.04%)</title><rect x="1026.1" y="307.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1029.1" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (157 samples, 3.04%)</title><rect x="1026.5" y="307.0" width="35.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1029.5" y="318.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (157 samples, 3.04%)</title><rect x="1026.5" y="291.0" width="35.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1029.5" y="302.0">one..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (157 samples, 3.04%)</title><rect x="1026.5" y="275.0" width="35.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1029.5" y="286.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (157 samples, 3.04%)</title><rect x="1026.5" y="259.0" width="35.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1029.5" y="270.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (157 samples, 3.04%)</title><rect x="1026.5" y="243.0" width="35.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1029.5" y="254.0">sun..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.06%)</title><rect x="1026.5" y="227.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1029.5" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.06%)</title><rect x="1026.5" y="211.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1029.5" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.06%)</title><rect x="1026.5" y="195.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1029.5" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.06%)</title><rect x="1026.5" y="179.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1029.5" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.06%)</title><rect x="1026.5" y="163.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1029.5" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (2 samples, 0.04%)</title><rect x="1026.8" y="147.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1029.8" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (145 samples, 2.81%)</title><rect x="1027.2" y="227.0" width="33.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1030.2" y="238.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (144 samples, 2.79%)</title><rect x="1027.5" y="211.0" width="32.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1030.5" y="222.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (144 samples, 2.79%)</title><rect x="1027.5" y="195.0" width="32.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1030.5" y="206.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (3 samples, 0.06%)</title><rect x="1028.1" y="179.0" width="0.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1031.1" y="190.0"></text>
</g>
<g>
<title>write (137 samples, 2.65%)</title><rect x="1029.1" y="179.0" width="31.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1032.1" y="190.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (7 samples, 0.14%)</title><rect x="1060.3" y="227.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1063.3" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (7 samples, 0.14%)</title><rect x="1060.3" y="211.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1063.3" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (6 samples, 0.12%)</title><rect x="1060.6" y="195.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1063.6" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (6 samples, 0.12%)</title><rect x="1060.6" y="179.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1063.6" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.rewind (6 samples, 0.12%)</title><rect x="1060.6" y="163.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1063.6" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.04%)</title><rect x="1061.9" y="227.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1064.9" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.04%)</title><rect x="1061.9" y="211.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1064.9" y="222.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.04%)</title><rect x="1061.9" y="195.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1064.9" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.10%)</title><rect x="1062.4" y="355.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1065.4" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.04%)</title><rect x="1063.1" y="339.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1066.1" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.04%)</title><rect x="1063.1" y="323.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1066.1" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$69/1693506190.act (553 samples, 10.70%)</title><rect x="1063.5" y="371.0" width="126.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1066.5" y="382.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$entity$1 (553 samples, 10.70%)</title><rect x="1063.5" y="355.0" width="126.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1066.5" y="366.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/dao/lorismelik/RocksDAO.upsert (551 samples, 10.66%)</title><rect x="1064.0" y="339.0" width="125.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1067.0" y="350.0">ru/mail/polis/d..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (551 samples, 10.66%)</title><rect x="1064.0" y="323.0" width="125.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1067.0" y="334.0">org/rocksdb/Roc..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (551 samples, 10.66%)</title><rect x="1064.0" y="307.0" width="125.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1067.0" y="318.0">org/rocksdb/Roc..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (546 samples, 10.56%)</title><rect x="1065.1" y="291.0" width="124.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1068.1" y="302.0">Java_org_rocksd..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (542 samples, 10.49%)</title><rect x="1065.4" y="275.0" width="123.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1068.4" y="286.0">rocksdb_put_hel..</text>
</g>
<g>
<title>free (2 samples, 0.04%)</title><rect x="1065.8" y="259.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1068.8" y="270.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.08%)</title><rect x="1066.3" y="259.0" width="0.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1069.3" y="270.0"></text>
</g>
<g>
<title>__ulock_wait (2 samples, 0.04%)</title><rect x="1066.3" y="243.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1069.3" y="254.0"></text>
</g>
<g>
<title>tiny_free_no_lock (2 samples, 0.04%)</title><rect x="1066.7" y="243.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1069.7" y="254.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.04%)</title><rect x="1067.2" y="259.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1070.2" y="270.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (9 samples, 0.17%)</title><rect x="1067.6" y="259.0" width="2.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1070.6" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.04%)</title><rect x="1068.3" y="243.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1071.3" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.04%)</title><rect x="1068.3" y="227.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1071.3" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.04%)</title><rect x="1068.3" y="211.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1071.3" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="1068.3" y="195.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1071.3" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="1068.3" y="179.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1071.3" y="190.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.06%)</title><rect x="1069.0" y="243.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1072.0" y="254.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.04%)</title><rect x="1069.2" y="227.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1072.2" y="238.0"></text>
</g>
<g>
<title>Chunk::next() const (2 samples, 0.04%)</title><rect x="1069.2" y="211.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1072.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (520 samples, 10.06%)</title><rect x="1069.7" y="259.0" width="118.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1072.7" y="270.0">rocksdb::Compa..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (519 samples, 10.04%)</title><rect x="1069.9" y="243.0" width="118.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1072.9" y="254.0">rocksdb::DBImp..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (519 samples, 10.04%)</title><rect x="1069.9" y="227.0" width="118.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1072.9" y="238.0">rocksdb::DB::P..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (2 samples, 0.04%)</title><rect x="1070.6" y="211.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1073.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (506 samples, 9.79%)</title><rect x="1071.1" y="211.0" width="115.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1074.1" y="222.0">rocksdb::DBImp..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (504 samples, 9.75%)</title><rect x="1071.3" y="195.0" width="115.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1074.3" y="206.0">rocksdb::DBImp..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (142 samples, 2.75%)</title><rect x="1075.2" y="179.0" width="32.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1078.2" y="190.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (2 samples, 0.04%)</title><rect x="1075.2" y="163.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1078.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (139 samples, 2.69%)</title><rect x="1075.6" y="163.0" width="31.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1078.6" y="174.0">ro..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (139 samples, 2.69%)</title><rect x="1075.6" y="147.0" width="31.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1078.6" y="158.0">ro..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (3 samples, 0.06%)</title><rect x="1075.6" y="131.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1078.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (136 samples, 2.63%)</title><rect x="1076.3" y="131.0" width="31.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1079.3" y="142.0">ro..</text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync() (2 samples, 0.04%)</title><rect x="1076.3" y="115.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1079.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (133 samples, 2.57%)</title><rect x="1077.0" y="115.0" width="30.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.0" y="126.0">ro..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (133 samples, 2.57%)</title><rect x="1077.0" y="99.0" width="30.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1080.0" y="110.0">ro..</text>
</g>
<g>
<title>write (131 samples, 2.53%)</title><rect x="1077.5" y="83.0" width="29.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1080.5" y="94.0">wr..</text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.04%)</title><rect x="1107.6" y="179.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1110.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (40 samples, 0.77%)</title><rect x="1108.0" y="179.0" width="9.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1111.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (35 samples, 0.68%)</title><rect x="1109.0" y="163.0" width="7.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (34 samples, 0.66%)</title><rect x="1109.2" y="147.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1112.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (32 samples, 0.62%)</title><rect x="1109.6" y="131.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1112.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (32 samples, 0.62%)</title><rect x="1109.6" y="115.0" width="7.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1112.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (26 samples, 0.50%)</title><rect x="1111.0" y="99.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1114.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.04%)</title><rect x="1114.7" y="83.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.7" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (6 samples, 0.12%)</title><rect x="1115.4" y="83.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1118.4" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.06%)</title><rect x="1116.0" y="67.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1119.0" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.04%)</title><rect x="1116.3" y="51.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1119.3" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (21 samples, 0.41%)</title><rect x="1117.2" y="179.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1120.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (18 samples, 0.35%)</title><rect x="1117.9" y="163.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1120.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (17 samples, 0.33%)</title><rect x="1118.1" y="147.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1121.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (17 samples, 0.33%)</title><rect x="1118.1" y="131.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (12 samples, 0.23%)</title><rect x="1118.5" y="115.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1121.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (12 samples, 0.23%)</title><rect x="1118.5" y="99.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (9 samples, 0.17%)</title><rect x="1119.2" y="83.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1122.2" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.06%)</title><rect x="1120.6" y="67.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.6" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.04%)</title><rect x="1120.8" y="51.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.8" y="62.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="1121.3" y="115.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1124.3" y="126.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.06%)</title><rect x="1121.3" y="99.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1124.3" y="110.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.06%)</title><rect x="1121.3" y="83.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1124.3" y="94.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.06%)</title><rect x="1121.3" y="67.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1124.3" y="78.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="1121.5" y="51.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1124.5" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (154 samples, 2.98%)</title><rect x="1122.2" y="179.0" width="35.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.2" y="190.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (154 samples, 2.98%)</title><rect x="1122.2" y="163.0" width="35.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1125.2" y="174.0">roc..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (2 samples, 0.04%)</title><rect x="1123.3" y="147.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.3" y="158.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.04%)</title><rect x="1123.3" y="131.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1126.3" y="142.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (2 samples, 0.04%)</title><rect x="1123.3" y="115.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1126.3" y="126.0"></text>
</g>
<g>
<title>_res (2 samples, 0.04%)</title><rect x="1123.3" y="99.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1126.3" y="110.0"></text>
</g>
<g>
<title>xdrrec_ops (146 samples, 2.82%)</title><rect x="1124.0" y="147.0" width="33.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1127.0" y="158.0">xd..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (3 samples, 0.06%)</title><rect x="1157.4" y="179.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (3 samples, 0.06%)</title><rect x="1157.4" y="163.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (16 samples, 0.31%)</title><rect x="1158.0" y="179.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.0" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (14 samples, 0.27%)</title><rect x="1158.3" y="163.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.3" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (13 samples, 0.25%)</title><rect x="1158.3" y="147.0" width="2.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1161.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (94 samples, 1.82%)</title><rect x="1161.7" y="179.0" width="21.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.7" y="190.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (93 samples, 1.80%)</title><rect x="1161.7" y="163.0" width="21.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.7" y="174.0">r..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (74 samples, 1.43%)</title><rect x="1163.5" y="147.0" width="16.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.5" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (66 samples, 1.28%)</title><rect x="1163.5" y="131.0" width="15.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1166.5" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (7 samples, 0.14%)</title><rect x="1178.6" y="131.0" width="1.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1181.6" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (7 samples, 0.14%)</title><rect x="1178.6" y="115.0" width="1.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1181.6" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (7 samples, 0.14%)</title><rect x="1178.6" y="99.0" width="1.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1181.6" y="110.0"></text>
</g>
<g>
<title>xdrrec_ops (11 samples, 0.21%)</title><rect x="1180.4" y="147.0" width="2.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1183.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (11 samples, 0.21%)</title><rect x="1183.2" y="179.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.2" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (9 samples, 0.17%)</title><rect x="1183.2" y="163.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.2" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (9 samples, 0.17%)</title><rect x="1183.2" y="147.0" width="2.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1186.2" y="158.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (2 samples, 0.04%)</title><rect x="1185.2" y="163.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.2" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.04%)</title><rect x="1185.2" y="147.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1188.2" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.04%)</title><rect x="1185.2" y="131.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1188.2" y="142.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (2 samples, 0.04%)</title><rect x="1185.9" y="179.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.04%)</title><rect x="1185.9" y="163.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (3 samples, 0.06%)</title><rect x="1186.8" y="211.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (3 samples, 0.06%)</title><rect x="1187.5" y="211.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.5" y="222.0"></text>
</g>
<g>
<title>free (2 samples, 0.04%)</title><rect x="1187.5" y="195.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1190.5" y="206.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.04%)</title><rect x="1187.5" y="179.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1190.5" y="190.0"></text>
</g>
<g>
<title>vtable for std::__1::time_get_byname&lt;char, std::__1::istreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="1188.4" y="259.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.4" y="270.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="1188.4" y="243.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1191.4" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.04%)</title><rect x="1188.4" y="227.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1191.4" y="238.0"></text>
</g>
<g>
<title>vtable for std::__1::codecvt_byname&lt;wchar_t, char, __mbstate_t&gt; (2 samples, 0.04%)</title><rect x="1189.1" y="275.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.1" y="286.0"></text>
</g>
</g>
</svg>
