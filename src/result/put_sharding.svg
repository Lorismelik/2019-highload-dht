<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (5,838 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (39 samples, 0.67%)</title><rect x="10.4" y="883.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.4" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (39 samples, 0.67%)</title><rect x="10.4" y="867.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.4" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (19 samples, 0.33%)</title><rect x="10.4" y="851.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.4" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (4 samples, 0.07%)</title><rect x="10.4" y="835.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.4" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.03%)</title><rect x="10.8" y="819.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.8" y="830.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (14 samples, 0.24%)</title><rect x="11.2" y="835.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.2" y="846.0"></text>
</g>
<g>
<title>__psynch_cvwait (13 samples, 0.22%)</title><rect x="11.4" y="819.0" width="2.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="14.4" y="830.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (3 samples, 0.05%)</title><rect x="14.2" y="851.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="17.2" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (17 samples, 0.29%)</title><rect x="14.9" y="851.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="17.9" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (10 samples, 0.17%)</title><rect x="16.3" y="835.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="19.3" y="846.0"></text>
</g>
<g>
<title>[not_walkable] (3 samples, 0.05%)</title><rect x="18.3" y="883.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="21.3" y="894.0"></text>
</g>
<g>
<title>[unknown_Java] (8 samples, 0.14%)</title><rect x="19.1" y="883.0" width="1.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="22.1" y="894.0"></text>
</g>
<g>
<title>java/lang/Thread.run (4,403 samples, 75.42%)</title><rect x="20.7" y="883.0" width="890.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.7" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (4,403 samples, 75.42%)</title><rect x="20.7" y="867.0" width="890.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.7" y="878.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (4,403 samples, 75.42%)</title><rect x="20.7" y="851.0" width="890.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.7" y="862.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 0.03%)</title><rect x="20.9" y="835.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="20.9" y="819.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="23.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (2 samples, 0.03%)</title><rect x="20.9" y="803.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.03%)</title><rect x="20.9" y="787.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.9" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.03%)</title><rect x="20.9" y="771.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.9" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.03%)</title><rect x="20.9" y="755.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.03%)</title><rect x="21.3" y="835.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="24.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.03%)</title><rect x="21.3" y="819.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="24.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1,142 samples, 19.56%)</title><rect x="21.7" y="835.0" width="230.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.7" y="846.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1,134 samples, 19.42%)</title><rect x="22.5" y="819.0" width="229.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="25.5" y="830.0">java/util/concurrent/LinkedBlo..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1,040 samples, 17.81%)</title><rect x="22.7" y="803.0" width="210.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.7" y="814.0">java/util/concurrent/locks/A..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (8 samples, 0.14%)</title><rect x="22.9" y="787.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="25.9" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="24.1" y="771.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="27.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (6 samples, 0.10%)</title><rect x="24.6" y="787.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (6 samples, 0.10%)</title><rect x="25.8" y="787.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.05%)</title><rect x="26.4" y="771.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="29.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.05%)</title><rect x="26.4" y="755.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="29.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.05%)</title><rect x="26.4" y="739.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.4" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.05%)</title><rect x="26.4" y="723.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.4" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.05%)</title><rect x="26.4" y="707.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (9 samples, 0.15%)</title><rect x="27.0" y="787.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="30.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.15%)</title><rect x="27.0" y="771.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="30.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.09%)</title><rect x="27.0" y="755.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="30.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.09%)</title><rect x="27.0" y="739.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="30.0" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 0.09%)</title><rect x="27.0" y="723.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.0" y="734.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (5 samples, 0.09%)</title><rect x="27.0" y="707.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="30.0" y="718.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.07%)</title><rect x="27.0" y="691.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="30.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.07%)</title><rect x="28.0" y="755.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1,010 samples, 17.30%)</title><rect x="28.8" y="787.0" width="204.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.8" y="798.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1,010 samples, 17.30%)</title><rect x="28.8" y="771.0" width="204.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.8" y="782.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (984 samples, 16.86%)</title><rect x="34.1" y="755.0" width="198.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="37.1" y="766.0">Unsafe_Park(JNIEnv_*, _job..</text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (3 samples, 0.05%)</title><rect x="36.1" y="739.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="39.1" y="750.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (5 samples, 0.09%)</title><rect x="36.7" y="739.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="39.7" y="750.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (5 samples, 0.09%)</title><rect x="36.7" y="723.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="39.7" y="734.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (5 samples, 0.09%)</title><rect x="36.7" y="707.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="39.7" y="718.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (5 samples, 0.09%)</title><rect x="36.7" y="691.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="39.7" y="702.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (3 samples, 0.05%)</title><rect x="37.1" y="675.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="40.1" y="686.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (7 samples, 0.12%)</title><rect x="37.7" y="739.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="40.7" y="750.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (4 samples, 0.07%)</title><rect x="37.7" y="723.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="40.7" y="734.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.03%)</title><rect x="38.1" y="707.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="41.1" y="718.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (2 samples, 0.03%)</title><rect x="39.3" y="739.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="42.3" y="750.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (2 samples, 0.03%)</title><rect x="39.3" y="723.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="42.3" y="734.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::should_commit() (2 samples, 0.03%)</title><rect x="39.7" y="739.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="42.7" y="750.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (929 samples, 15.91%)</title><rect x="40.1" y="739.0" width="187.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="43.1" y="750.0">Parker::park(bool, long)</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (4 samples, 0.07%)</title><rect x="41.5" y="723.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="44.5" y="734.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.12%)</title><rect x="42.3" y="723.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="45.3" y="734.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.03%)</title><rect x="43.1" y="707.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="46.1" y="718.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (2 samples, 0.03%)</title><rect x="43.8" y="723.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="46.8" y="734.0"></text>
</g>
<g>
<title>__psynch_cvwait (897 samples, 15.36%)</title><rect x="44.2" y="723.0" width="181.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="47.2" y="734.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (11 samples, 0.19%)</title><rect x="225.5" y="723.0" width="2.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="228.5" y="734.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (4 samples, 0.07%)</title><rect x="228.1" y="739.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="231.1" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.05%)</title><rect x="228.9" y="739.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="231.9" y="750.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="229.1" y="723.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="232.1" y="734.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="229.1" y="707.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="232.1" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (7 samples, 0.12%)</title><rect x="229.5" y="739.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="232.5" y="750.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll(Thread*) (2 samples, 0.03%)</title><rect x="229.9" y="723.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="232.9" y="734.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.05%)</title><rect x="230.3" y="723.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="233.3" y="734.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.05%)</title><rect x="230.3" y="707.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="233.3" y="718.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.05%)</title><rect x="230.3" y="691.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="233.3" y="702.0"></text>
</g>
<g>
<title>pthread_cond_wait (4 samples, 0.07%)</title><rect x="231.7" y="739.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="234.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (17 samples, 0.29%)</title><rect x="232.9" y="803.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="235.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (17 samples, 0.29%)</title><rect x="232.9" y="787.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="235.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (12 samples, 0.21%)</title><rect x="232.9" y="771.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="235.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (6 samples, 0.10%)</title><rect x="233.3" y="755.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="236.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (6 samples, 0.10%)</title><rect x="233.3" y="739.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="236.3" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (5 samples, 0.09%)</title><rect x="233.5" y="723.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="236.5" y="734.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (5 samples, 0.09%)</title><rect x="233.5" y="707.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="236.5" y="718.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (5 samples, 0.09%)</title><rect x="233.5" y="691.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="236.5" y="702.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.09%)</title><rect x="233.5" y="675.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="236.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (4 samples, 0.07%)</title><rect x="234.6" y="755.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="237.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.09%)</title><rect x="235.4" y="771.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="238.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.09%)</title><rect x="235.4" y="755.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="238.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.03%)</title><rect x="236.0" y="739.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="239.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (75 samples, 1.28%)</title><rect x="236.4" y="803.0" width="15.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="239.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (75 samples, 1.28%)</title><rect x="236.4" y="787.0" width="15.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="239.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (75 samples, 1.28%)</title><rect x="236.4" y="771.0" width="15.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="239.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (75 samples, 1.28%)</title><rect x="236.4" y="755.0" width="15.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="239.4" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (75 samples, 1.28%)</title><rect x="236.4" y="739.0" width="15.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="239.4" y="750.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (72 samples, 1.23%)</title><rect x="237.0" y="723.0" width="14.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="240.0" y="734.0"></text>
</g>
<g>
<title>Thread::current_or_null() (2 samples, 0.03%)</title><rect x="238.2" y="707.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="241.2" y="718.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.03%)</title><rect x="238.6" y="707.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="241.6" y="718.0"></text>
</g>
<g>
<title>__psynch_cvsignal (58 samples, 0.99%)</title><rect x="239.0" y="707.0" width="11.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="242.0" y="718.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.03%)</title><rect x="251.1" y="707.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="254.1" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$76/2009892315.run (2 samples, 0.03%)</title><rect x="252.1" y="819.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="255.1" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$76/2009892315.run (3,255 samples, 55.76%)</title><rect x="252.8" y="835.0" width="657.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="255.8" y="846.0">ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$76/2009892315.run</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$executeAsync$4 (3,255 samples, 55.76%)</title><rect x="252.8" y="819.0" width="657.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="255.8" y="830.0">ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$executeAsync$4</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (689 samples, 11.80%)</title><rect x="253.4" y="803.0" width="139.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="256.4" y="814.0">one/nio/http/Http..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.05%)</title><rect x="253.8" y="787.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="256.8" y="798.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="253.8" y="771.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="256.8" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (645 samples, 11.05%)</title><rect x="254.4" y="787.0" width="130.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="257.4" y="798.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (22 samples, 0.38%)</title><rect x="254.4" y="771.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="257.4" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (17 samples, 0.29%)</title><rect x="255.4" y="755.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="258.4" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (6 samples, 0.10%)</title><rect x="255.4" y="739.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="258.4" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.03%)</title><rect x="256.0" y="723.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="259.0" y="734.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.03%)</title><rect x="256.0" y="707.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="259.0" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (11 samples, 0.19%)</title><rect x="256.6" y="739.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="259.6" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (11 samples, 0.19%)</title><rect x="256.6" y="723.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="259.6" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (623 samples, 10.67%)</title><rect x="258.8" y="771.0" width="125.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="261.8" y="782.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/Session.write (623 samples, 10.67%)</title><rect x="258.8" y="755.0" width="125.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="261.8" y="766.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (623 samples, 10.67%)</title><rect x="258.8" y="739.0" width="125.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="261.8" y="750.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (623 samples, 10.67%)</title><rect x="258.8" y="723.0" width="125.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="261.8" y="734.0">one/nio/net/Jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (12 samples, 0.21%)</title><rect x="258.8" y="707.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="261.8" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (12 samples, 0.21%)</title><rect x="258.8" y="691.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="261.8" y="702.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.09%)</title><rect x="258.8" y="675.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="261.8" y="686.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (4 samples, 0.07%)</title><rect x="258.8" y="659.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="261.8" y="670.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.05%)</title><rect x="259.0" y="643.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="262.0" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.12%)</title><rect x="259.8" y="675.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="262.8" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (611 samples, 10.47%)</title><rect x="261.2" y="707.0" width="123.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="264.2" y="718.0">sun/nio/ch/Sock..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="261.2" y="691.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="264.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="261.2" y="675.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="264.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="261.2" y="659.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="264.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="261.2" y="643.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="264.2" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (608 samples, 10.41%)</title><rect x="261.8" y="691.0" width="122.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="264.8" y="702.0">sun/nio/ch/IOUt..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (608 samples, 10.41%)</title><rect x="261.8" y="675.0" width="122.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="264.8" y="686.0">sun/nio/ch/IOUt..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (584 samples, 10.00%)</title><rect x="262.5" y="659.0" width="118.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="265.5" y="670.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (584 samples, 10.00%)</title><rect x="262.5" y="643.0" width="118.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="265.5" y="654.0">sun/nio/ch/Soc..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (584 samples, 10.00%)</title><rect x="262.5" y="627.0" width="118.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.5" y="638.0">sun/nio/ch/Fil..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (4 samples, 0.07%)</title><rect x="265.5" y="611.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="268.5" y="622.0"></text>
</g>
<g>
<title>write (563 samples, 9.64%)</title><rect x="266.7" y="611.0" width="113.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="269.7" y="622.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (21 samples, 0.36%)</title><rect x="380.5" y="659.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="383.5" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.05%)</title><rect x="380.9" y="643.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="383.9" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.05%)</title><rect x="380.9" y="627.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="383.9" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (16 samples, 0.27%)</title><rect x="381.5" y="643.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="384.5" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (39 samples, 0.67%)</title><rect x="384.7" y="787.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="387.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="385.1" y="771.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="388.1" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (16 samples, 0.27%)</title><rect x="385.5" y="771.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="388.5" y="782.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="385.5" y="755.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="388.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="385.5" y="739.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="388.5" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (14 samples, 0.24%)</title><rect x="386.0" y="755.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="389.0" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (9 samples, 0.15%)</title><rect x="386.6" y="739.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="389.6" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (7 samples, 0.12%)</title><rect x="387.0" y="723.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="390.0" y="734.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (4 samples, 0.07%)</title><rect x="387.2" y="707.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="390.2" y="718.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.03%)</title><rect x="388.0" y="707.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="391.0" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="388.0" y="691.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="391.0" y="702.0"></text>
</g>
<g>
<title>java/lang/String.substring (19 samples, 0.33%)</title><rect x="388.8" y="771.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="391.8" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (19 samples, 0.33%)</title><rect x="388.8" y="755.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="391.8" y="766.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (14 samples, 0.24%)</title><rect x="389.0" y="739.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="392.0" y="750.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.09%)</title><rect x="389.2" y="723.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="392.2" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.14%)</title><rect x="390.2" y="723.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="393.2" y="734.0"></text>
</g>
<g>
<title>__vsnprintf_chk (2 samples, 0.03%)</title><rect x="390.2" y="707.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="393.2" y="718.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="390.6" y="707.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="393.6" y="718.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.07%)</title><rect x="391.0" y="707.0" width="0.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="394.0" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (2 samples, 0.03%)</title><rect x="391.8" y="739.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="394.8" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$77/168123737.act (2,563 samples, 43.90%)</title><rect x="392.6" y="803.0" width="518.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="395.6" y="814.0">ru/mail/polis/service/lorismelik/AsyncServiceImpl$$Lambda$77/168123737.act</text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$entity$2 (2,563 samples, 43.90%)</title><rect x="392.6" y="787.0" width="518.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="395.6" y="798.0">ru/mail/polis/service/lorismelik/AsyncServiceImpl.lambda$entity$2</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 0.12%)</title><rect x="392.6" y="771.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="395.6" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.05%)</title><rect x="393.4" y="755.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="396.4" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="393.4" y="739.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="396.4" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="393.6" y="723.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="396.6" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="393.6" y="707.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="396.6" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/lorismelik/RocksDAO.upsert (2,556 samples, 43.78%)</title><rect x="394.0" y="771.0" width="516.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="397.0" y="782.0">ru/mail/polis/dao/lorismelik/RocksDAO.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,534 samples, 43.41%)</title><rect x="394.0" y="755.0" width="512.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="397.0" y="766.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,534 samples, 43.41%)</title><rect x="394.0" y="739.0" width="512.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="397.0" y="750.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (2,524 samples, 43.23%)</title><rect x="395.9" y="723.0" width="510.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="398.9" y="734.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.05%)</title><rect x="396.3" y="707.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="399.3" y="718.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="397.3" y="707.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="400.3" y="718.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (2 samples, 0.03%)</title><rect x="397.7" y="707.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="400.7" y="718.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2 samples, 0.03%)</title><rect x="398.1" y="707.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="401.1" y="718.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (2,511 samples, 43.01%)</title><rect x="398.5" y="707.0" width="507.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="401.5" y="718.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.03%)</title><rect x="399.7" y="691.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="402.7" y="702.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="400.1" y="691.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="403.1" y="702.0"></text>
</g>
<g>
<title>_setcontext (2 samples, 0.03%)</title><rect x="400.5" y="691.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="403.5" y="702.0"></text>
</g>
<g>
<title>free (5 samples, 0.09%)</title><rect x="400.9" y="691.0" width="1.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="403.9" y="702.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.03%)</title><rect x="401.5" y="675.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="404.5" y="686.0"></text>
</g>
<g>
<title>free_tiny (14 samples, 0.24%)</title><rect x="401.9" y="691.0" width="2.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="404.9" y="702.0"></text>
</g>
<g>
<title>tiny_free_no_lock (9 samples, 0.15%)</title><rect x="402.9" y="675.0" width="1.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="405.9" y="686.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (7 samples, 0.12%)</title><rect x="404.7" y="691.0" width="1.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="407.7" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (5 samples, 0.09%)</title><rect x="405.2" y="675.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="408.2" y="686.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (5 samples, 0.09%)</title><rect x="405.2" y="659.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="408.2" y="670.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.05%)</title><rect x="405.6" y="643.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="408.6" y="654.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.05%)</title><rect x="405.6" y="627.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="408.6" y="638.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="405.6" y="611.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="408.6" y="622.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (14 samples, 0.24%)</title><rect x="406.2" y="691.0" width="2.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="409.2" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.07%)</title><rect x="407.8" y="675.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="410.8" y="686.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="408.0" y="659.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="411.0" y="670.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="408.6" y="675.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="411.6" y="686.0"></text>
</g>
<g>
<title>operator new(unsigned long) (20 samples, 0.34%)</title><rect x="409.0" y="691.0" width="4.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="412.0" y="702.0"></text>
</g>
<g>
<title>malloc (19 samples, 0.33%)</title><rect x="409.2" y="675.0" width="3.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="412.2" y="686.0"></text>
</g>
<g>
<title>malloc_zone_malloc (19 samples, 0.33%)</title><rect x="409.2" y="659.0" width="3.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="412.2" y="670.0"></text>
</g>
<g>
<title>default_zone_malloc (4 samples, 0.07%)</title><rect x="409.4" y="643.0" width="0.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="412.4" y="654.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (14 samples, 0.24%)</title><rect x="410.2" y="643.0" width="2.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="413.2" y="654.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (10 samples, 0.17%)</title><rect x="411.0" y="627.0" width="2.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="414.0" y="638.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.05%)</title><rect x="412.4" y="611.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="415.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2,437 samples, 41.74%)</title><rect x="413.0" y="691.0" width="492.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="416.0" y="702.0">rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::ba..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,433 samples, 41.68%)</title><rect x="413.8" y="675.0" width="491.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="416.8" y="686.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFa..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,429 samples, 41.61%)</title><rect x="414.0" y="659.0" width="491.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="417.0" y="670.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamily..</text>
</g>
<g>
<title>__cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const (2 samples, 0.03%)</title><rect x="414.5" y="643.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="417.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2,383 samples, 40.82%)</title><rect x="415.3" y="643.0" width="481.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="418.3" y="654.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::Writ..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (2,369 samples, 40.58%)</title><rect x="415.7" y="627.0" width="478.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="418.7" y="638.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::..</text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.09%)</title><rect x="424.4" y="611.0" width="1.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="427.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (5 samples, 0.09%)</title><rect x="425.8" y="611.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="428.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (497 samples, 8.51%)</title><rect x="426.8" y="611.0" width="100.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="429.8" y="622.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (489 samples, 8.38%)</title><rect x="427.6" y="595.0" width="98.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="430.6" y="606.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (487 samples, 8.34%)</title><rect x="427.6" y="579.0" width="98.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="430.6" y="590.0">rocksdb::log..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (10 samples, 0.17%)</title><rect x="428.0" y="563.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="431.0" y="574.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (475 samples, 8.14%)</title><rect x="430.0" y="563.0" width="96.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="433.0" y="574.0">rocksdb::lo..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (7 samples, 0.12%)</title><rect x="431.6" y="547.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="434.6" y="558.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="432.4" y="531.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="435.4" y="542.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (460 samples, 7.88%)</title><rect x="433.0" y="547.0" width="93.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="436.0" y="558.0">rocksdb::Wr..</text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.09%)</title><rect x="433.0" y="531.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="436.0" y="542.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (455 samples, 7.79%)</title><rect x="434.1" y="531.0" width="91.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="437.1" y="542.0">rocksdb::Wr..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (3 samples, 0.05%)</title><rect x="434.9" y="515.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="437.9" y="526.0"></text>
</g>
<g>
<title>write (448 samples, 7.67%)</title><rect x="435.5" y="515.0" width="90.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="438.5" y="526.0">write</text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (2 samples, 0.03%)</title><rect x="526.0" y="579.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="529.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Clear() (3 samples, 0.05%)</title><rect x="526.4" y="595.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="529.4" y="606.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.03%)</title><rect x="526.6" y="579.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="529.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (2 samples, 0.03%)</title><rect x="527.2" y="611.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="530.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.03%)</title><rect x="527.6" y="611.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="530.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (5 samples, 0.09%)</title><rect x="528.0" y="611.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="531.0" y="622.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.05%)</title><rect x="528.4" y="595.0" width="0.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="531.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (98 samples, 1.68%)</title><rect x="529.5" y="611.0" width="19.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="532.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::Continue() (2 samples, 0.03%)</title><rect x="530.5" y="595.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="533.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (91 samples, 1.56%)</title><rect x="530.9" y="595.0" width="18.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="533.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (3 samples, 0.05%)</title><rect x="532.5" y="579.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="535.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (80 samples, 1.37%)</title><rect x="533.1" y="579.0" width="16.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="536.1" y="590.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (2 samples, 0.03%)</title><rect x="533.1" y="563.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="536.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (77 samples, 1.32%)</title><rect x="533.7" y="563.0" width="15.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="536.7" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (68 samples, 1.16%)</title><rect x="534.9" y="547.0" width="13.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="537.9" y="558.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.05%)</title><rect x="537.3" y="531.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="540.3" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.03%)</title><rect x="537.9" y="531.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="540.9" y="542.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (49 samples, 0.84%)</title><rect x="538.8" y="531.0" width="9.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="541.8" y="542.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (3 samples, 0.05%)</title><rect x="543.0" y="515.0" width="0.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="546.0" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.03%)</title><rect x="543.6" y="515.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="546.6" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.03%)</title><rect x="544.0" y="515.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="547.0" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (18 samples, 0.31%)</title><rect x="544.4" y="515.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="547.4" y="526.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (7 samples, 0.12%)</title><rect x="546.4" y="499.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="549.4" y="510.0"></text>
</g>
<g>
<title>_platform_memcmp (4 samples, 0.07%)</title><rect x="547.0" y="483.0" width="0.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="550.0" y="494.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.03%)</title><rect x="548.1" y="515.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="551.1" y="526.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.03%)</title><rect x="548.9" y="547.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="551.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (63 samples, 1.08%)</title><rect x="549.3" y="611.0" width="12.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="552.3" y="622.0"></text>
</g>
<g>
<title>free (2 samples, 0.03%)</title><rect x="550.7" y="595.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="553.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.03%)</title><rect x="551.7" y="595.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="554.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (46 samples, 0.79%)</title><rect x="552.1" y="595.0" width="9.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="555.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (43 samples, 0.74%)</title><rect x="552.7" y="579.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="555.7" y="590.0"></text>
</g>
<g>
<title>Java_org_rocksdb_Statistics_toString (2 samples, 0.03%)</title><rect x="552.7" y="563.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="555.7" y="574.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.07%)</title><rect x="553.1" y="563.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="556.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (37 samples, 0.63%)</title><rect x="553.9" y="563.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="556.9" y="574.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.07%)</title><rect x="554.1" y="547.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="557.1" y="558.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.07%)</title><rect x="554.1" y="531.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="557.1" y="542.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.07%)</title><rect x="554.1" y="515.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="557.1" y="526.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.05%)</title><rect x="554.3" y="499.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="557.3" y="510.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.05%)</title><rect x="554.3" y="483.0" width="0.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="557.3" y="494.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (31 samples, 0.53%)</title><rect x="555.1" y="547.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="558.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (24 samples, 0.41%)</title><rect x="556.5" y="531.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="559.5" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.03%)</title><rect x="557.1" y="515.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="560.1" y="526.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (18 samples, 0.31%)</title><rect x="557.8" y="515.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="560.8" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (11 samples, 0.19%)</title><rect x="559.0" y="499.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="562.0" y="510.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.07%)</title><rect x="560.2" y="483.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="563.2" y="494.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="560.6" y="467.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="563.6" y="478.0"></text>
</g>
<g>
<title>tiny_free_no_lock (2 samples, 0.03%)</title><rect x="561.6" y="595.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="564.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (1,126 samples, 19.29%)</title><rect x="562.0" y="611.0" width="227.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="565.0" y="622.0">rocksdb::WriteThread::Complete..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (1,125 samples, 19.27%)</title><rect x="562.0" y="595.0" width="227.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="565.0" y="606.0">rocksdb::WriteThread::AwaitSta..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (5 samples, 0.09%)</title><rect x="564.6" y="579.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="567.6" y="590.0"></text>
</g>
<g>
<title>clock_gettime (5 samples, 0.09%)</title><rect x="564.6" y="563.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="567.6" y="574.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (2 samples, 0.03%)</title><rect x="565.0" y="547.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="568.0" y="558.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (23 samples, 0.39%)</title><rect x="565.6" y="579.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="568.6" y="590.0"></text>
</g>
<g>
<title>__psynch_cvwait (19 samples, 0.33%)</title><rect x="565.6" y="563.0" width="3.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="568.6" y="574.0"></text>
</g>
<g>
<title>_pthread_cond_wait (4 samples, 0.07%)</title><rect x="569.5" y="563.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="572.5" y="574.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (3 samples, 0.05%)</title><rect x="569.7" y="547.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="572.7" y="558.0"></text>
</g>
<g>
<title>__psynch_mutexwait (2 samples, 0.03%)</title><rect x="569.9" y="531.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="572.9" y="542.0"></text>
</g>
<g>
<title>xdrrec_ops (1,082 samples, 18.53%)</title><rect x="570.7" y="579.0" width="218.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="573.7" y="590.0">xdrrec_ops</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (11 samples, 0.19%)</title><rect x="789.6" y="611.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="792.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (5 samples, 0.09%)</title><rect x="790.0" y="595.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="793.0" y="606.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (2 samples, 0.03%)</title><rect x="790.2" y="579.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="793.2" y="590.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.03%)</title><rect x="790.2" y="563.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="793.2" y="574.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (2 samples, 0.03%)</title><rect x="790.6" y="579.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="793.6" y="590.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.03%)</title><rect x="790.6" y="563.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="793.6" y="574.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.03%)</title><rect x="790.6" y="547.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="793.6" y="558.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (3 samples, 0.05%)</title><rect x="791.0" y="595.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="794.0" y="606.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.05%)</title><rect x="791.0" y="579.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="794.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (38 samples, 0.65%)</title><rect x="791.8" y="611.0" width="7.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="794.8" y="622.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (24 samples, 0.41%)</title><rect x="793.0" y="595.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="796.0" y="606.0"></text>
</g>
<g>
<title>__psynch_cvsignal (23 samples, 0.39%)</title><rect x="793.0" y="579.0" width="4.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="796.0" y="590.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (8 samples, 0.14%)</title><rect x="797.9" y="595.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="800.9" y="606.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (8 samples, 0.14%)</title><rect x="797.9" y="579.0" width="1.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="800.9" y="590.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (8 samples, 0.14%)</title><rect x="797.9" y="563.0" width="1.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="800.9" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (425 samples, 7.28%)</title><rect x="799.5" y="611.0" width="85.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="802.5" y="622.0">rocksdb::W..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (423 samples, 7.25%)</title><rect x="799.5" y="595.0" width="85.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="802.5" y="606.0">rocksdb::W..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (2 samples, 0.03%)</title><rect x="803.3" y="579.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="806.3" y="590.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.03%)</title><rect x="803.3" y="563.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="806.3" y="574.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (262 samples, 4.49%)</title><rect x="803.7" y="579.0" width="53.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="806.7" y="590.0">std::..</text>
</g>
<g>
<title>__psynch_cvwait (234 samples, 4.01%)</title><rect x="803.7" y="563.0" width="47.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="806.7" y="574.0">__ps..</text>
</g>
<g>
<title>_pthread_cond_wait (26 samples, 0.45%)</title><rect x="851.0" y="563.0" width="5.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="854.0" y="574.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (2 samples, 0.03%)</title><rect x="851.6" y="547.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="854.6" y="558.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (21 samples, 0.36%)</title><rect x="852.0" y="547.0" width="4.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="855.0" y="558.0"></text>
</g>
<g>
<title>__psynch_mutexwait (21 samples, 0.36%)</title><rect x="852.0" y="531.0" width="4.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="855.0" y="542.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (2 samples, 0.03%)</title><rect x="856.7" y="579.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="859.7" y="590.0"></text>
</g>
<g>
<title>xdrrec_ops (136 samples, 2.33%)</title><rect x="857.5" y="579.0" width="27.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="860.5" y="590.0">x..</text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (37 samples, 0.63%)</title><rect x="885.4" y="611.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="888.4" y="622.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (34 samples, 0.58%)</title><rect x="885.4" y="595.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="888.4" y="606.0"></text>
</g>
<g>
<title>__psynch_cvsignal (34 samples, 0.58%)</title><rect x="885.4" y="579.0" width="6.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="888.4" y="590.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (3 samples, 0.05%)</title><rect x="892.3" y="595.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="895.3" y="606.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (3 samples, 0.05%)</title><rect x="892.3" y="579.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="895.3" y="590.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (3 samples, 0.05%)</title><rect x="892.3" y="563.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="895.3" y="574.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (3 samples, 0.05%)</title><rect x="893.9" y="611.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="896.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.03%)</title><rect x="894.1" y="595.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="897.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (2 samples, 0.03%)</title><rect x="894.7" y="627.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="897.7" y="638.0"></text>
</g>
<g>
<title>std::__1::condition_variable::~condition_variable() (2 samples, 0.03%)</title><rect x="895.5" y="627.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="898.5" y="638.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="896.1" y="627.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="899.1" y="638.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (2 samples, 0.03%)</title><rect x="896.5" y="627.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="899.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (2 samples, 0.03%)</title><rect x="897.1" y="643.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="900.1" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 0.10%)</title><rect x="897.5" y="643.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="900.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (4 samples, 0.07%)</title><rect x="897.7" y="627.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="900.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (14 samples, 0.24%)</title><rect x="898.7" y="643.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="901.7" y="654.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="898.9" y="627.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="901.9" y="638.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (7 samples, 0.12%)</title><rect x="899.3" y="627.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="902.3" y="638.0"></text>
</g>
<g>
<title>operator new(unsigned long) (6 samples, 0.10%)</title><rect x="899.5" y="611.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="902.5" y="622.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.10%)</title><rect x="899.5" y="595.0" width="1.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="902.5" y="606.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.10%)</title><rect x="899.5" y="579.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="902.5" y="590.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (6 samples, 0.10%)</title><rect x="899.5" y="563.0" width="1.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="902.5" y="574.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (6 samples, 0.10%)</title><rect x="899.5" y="547.0" width="1.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="902.5" y="558.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (2 samples, 0.03%)</title><rect x="900.4" y="531.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="903.4" y="542.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (4 samples, 0.07%)</title><rect x="900.8" y="627.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="903.8" y="638.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (4 samples, 0.07%)</title><rect x="900.8" y="611.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="903.8" y="622.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="901.2" y="595.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="904.2" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (15 samples, 0.26%)</title><rect x="901.6" y="643.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="904.6" y="654.0"></text>
</g>
<g>
<title>free (8 samples, 0.14%)</title><rect x="902.0" y="627.0" width="1.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="905.0" y="638.0"></text>
</g>
<g>
<title>tiny_size (6 samples, 0.10%)</title><rect x="902.4" y="611.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="905.4" y="622.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.07%)</title><rect x="903.6" y="627.0" width="0.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="906.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (3 samples, 0.05%)</title><rect x="905.0" y="659.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="908.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (2 samples, 0.03%)</title><rect x="905.6" y="691.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="908.6" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.shiftBytes (14 samples, 0.24%)</title><rect x="906.2" y="755.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="909.2" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.clone (14 samples, 0.24%)</title><rect x="906.2" y="739.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="909.2" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (10 samples, 0.17%)</title><rect x="906.4" y="723.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="909.4" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (10 samples, 0.17%)</title><rect x="906.4" y="707.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="909.4" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.17%)</title><rect x="906.4" y="691.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="909.4" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (3 samples, 0.05%)</title><rect x="908.4" y="723.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="911.4" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.05%)</title><rect x="908.4" y="707.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="911.4" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.05%)</title><rect x="908.4" y="691.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="911.4" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.toArray (8 samples, 0.14%)</title><rect x="909.0" y="755.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="912.0" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (6 samples, 0.10%)</title><rect x="909.5" y="739.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="912.5" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.09%)</title><rect x="909.7" y="723.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="912.7" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.09%)</title><rect x="909.7" y="707.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="912.7" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="909.7" y="691.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="912.7" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.05%)</title><rect x="910.1" y="691.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="913.1" y="702.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,094 samples, 18.74%)</title><rect x="910.9" y="883.0" width="221.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="913.9" y="894.0">one/nio/server/SelectorThread..</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (3 samples, 0.05%)</title><rect x="912.1" y="867.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="915.1" y="878.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (2 samples, 0.03%)</title><rect x="912.7" y="867.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="915.7" y="878.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (2 samples, 0.03%)</title><rect x="912.7" y="851.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="915.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.03%)</title><rect x="912.7" y="835.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="915.7" y="846.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (651 samples, 11.15%)</title><rect x="913.1" y="867.0" width="131.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="916.1" y="878.0">one/nio/net/Java..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (15 samples, 0.26%)</title><rect x="913.1" y="851.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="916.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (13 samples, 0.22%)</title><rect x="913.5" y="835.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="916.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (13 samples, 0.22%)</title><rect x="913.5" y="819.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="916.5" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (8 samples, 0.14%)</title><rect x="913.5" y="803.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="916.5" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (8 samples, 0.14%)</title><rect x="913.5" y="787.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="916.5" y="798.0"></text>
</g>
<g>
<title>__cxx_global_var_init (3 samples, 0.05%)</title><rect x="913.9" y="771.0" width="0.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="916.9" y="782.0"></text>
</g>
<g>
<title>_res (2 samples, 0.03%)</title><rect x="914.5" y="771.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="917.5" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (5 samples, 0.09%)</title><rect x="915.1" y="803.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="918.1" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.setRelease (2 samples, 0.03%)</title><rect x="915.7" y="787.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="918.7" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (636 samples, 10.89%)</title><rect x="916.1" y="851.0" width="128.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="919.1" y="862.0">sun/nio/ch/Selec..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (636 samples, 10.89%)</title><rect x="916.1" y="835.0" width="128.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="919.1" y="846.0">sun/nio/ch/Selec..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (636 samples, 10.89%)</title><rect x="916.1" y="819.0" width="128.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="919.1" y="830.0">sun/nio/ch/KQueu..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (609 samples, 10.43%)</title><rect x="917.3" y="803.0" width="123.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="920.3" y="814.0">sun/nio/ch/KQue..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (8 samples, 0.14%)</title><rect x="922.8" y="787.0" width="1.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="925.8" y="798.0"></text>
</g>
<g>
<title>kevent (574 samples, 9.83%)</title><rect x="924.4" y="787.0" width="116.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="927.4" y="798.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (4 samples, 0.07%)</title><rect x="1040.4" y="803.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1043.4" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (9 samples, 0.15%)</title><rect x="1041.2" y="803.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1044.2" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (6 samples, 0.10%)</title><rect x="1043.5" y="803.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1046.5" y="814.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (432 samples, 7.40%)</title><rect x="1044.7" y="867.0" width="87.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1047.7" y="878.0">one/nio/ne..</text>
</g>
<g>
<title>gettimeofday (3 samples, 0.05%)</title><rect x="1044.7" y="851.0" width="0.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1047.7" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (427 samples, 7.31%)</title><rect x="1045.3" y="851.0" width="86.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1048.3" y="862.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (286 samples, 4.90%)</title><rect x="1045.5" y="835.0" width="57.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1048.5" y="846.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (205 samples, 3.51%)</title><rect x="1047.1" y="819.0" width="41.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1050.1" y="830.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (204 samples, 3.49%)</title><rect x="1047.3" y="803.0" width="41.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1050.3" y="814.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (2 samples, 0.03%)</title><rect x="1047.5" y="787.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1050.5" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.isEmpty (2 samples, 0.03%)</title><rect x="1047.5" y="771.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1050.5" y="782.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.03%)</title><rect x="1047.9" y="787.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1050.9" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.03%)</title><rect x="1047.9" y="771.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1050.9" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.handleDefault (198 samples, 3.39%)</title><rect x="1048.5" y="787.0" width="40.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1051.5" y="798.0">ru/..</text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.03%)</title><rect x="1048.5" y="771.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1051.5" y="782.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.03%)</title><rect x="1048.5" y="755.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1051.5" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.03%)</title><rect x="1048.9" y="771.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1051.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="1048.9" y="755.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1051.9" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="1048.9" y="739.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1051.9" y="750.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1048.9" y="723.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1051.9" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.entity (194 samples, 3.32%)</title><rect x="1049.3" y="771.0" width="39.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1052.3" y="782.0">ru/..</text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.03%)</title><rect x="1049.5" y="755.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1052.5" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.05%)</title><rect x="1049.9" y="755.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1052.9" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.05%)</title><rect x="1049.9" y="739.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1052.9" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="1049.9" y="723.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1052.9" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="1049.9" y="707.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1052.9" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1050.1" y="691.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1053.1" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="1050.1" y="675.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1053.1" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="1050.1" y="659.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1053.1" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (7 samples, 0.12%)</title><rect x="1050.5" y="755.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1053.5" y="766.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (4 samples, 0.07%)</title><rect x="1051.1" y="739.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1054.1" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="1051.5" y="723.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1054.5" y="734.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="1051.5" y="707.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1054.5" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="1051.5" y="691.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1054.5" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/AsyncServiceImpl.executeAsync (178 samples, 3.05%)</title><rect x="1051.9" y="755.0" width="36.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1054.9" y="766.0">ru/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (178 samples, 3.05%)</title><rect x="1051.9" y="739.0" width="36.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1054.9" y="750.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (178 samples, 3.05%)</title><rect x="1051.9" y="723.0" width="36.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1054.9" y="734.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (166 samples, 2.84%)</title><rect x="1052.4" y="707.0" width="33.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1055.4" y="718.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.03%)</title><rect x="1052.6" y="691.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1055.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.03%)</title><rect x="1052.6" y="675.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1055.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.03%)</title><rect x="1052.6" y="659.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1055.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 0.03%)</title><rect x="1052.6" y="643.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1055.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="1053.0" y="691.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1056.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="1053.0" y="675.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1056.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="1053.0" y="659.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1056.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="1053.0" y="643.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1056.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (161 samples, 2.76%)</title><rect x="1053.4" y="691.0" width="32.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1056.4" y="702.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (161 samples, 2.76%)</title><rect x="1053.4" y="675.0" width="32.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1056.4" y="686.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (161 samples, 2.76%)</title><rect x="1053.4" y="659.0" width="32.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1056.4" y="670.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (160 samples, 2.74%)</title><rect x="1053.6" y="643.0" width="32.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1056.6" y="654.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (160 samples, 2.74%)</title><rect x="1053.6" y="627.0" width="32.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1056.6" y="638.0">jd..</text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (151 samples, 2.59%)</title><rect x="1055.4" y="611.0" width="30.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1058.4" y="622.0">Un..</text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list() (2 samples, 0.03%)</title><rect x="1056.8" y="595.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1059.8" y="606.0"></text>
</g>
<g>
<title>Thread::current() (5 samples, 0.09%)</title><rect x="1057.4" y="595.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1060.4" y="606.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (5 samples, 0.09%)</title><rect x="1057.4" y="579.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1060.4" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.05%)</title><rect x="1058.6" y="595.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1061.6" y="606.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="1058.8" y="579.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1061.8" y="590.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="1058.8" y="563.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1061.8" y="574.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.03%)</title><rect x="1059.2" y="595.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1062.2" y="606.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.07%)</title><rect x="1059.6" y="595.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1062.6" y="606.0"></text>
</g>
<g>
<title>__psynch_cvsignal (115 samples, 1.97%)</title><rect x="1060.4" y="595.0" width="23.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1063.4" y="606.0">_..</text>
</g>
<g>
<title>pthread_cond_signal (6 samples, 0.10%)</title><rect x="1084.1" y="595.0" width="1.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1087.1" y="606.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (4 samples, 0.07%)</title><rect x="1084.5" y="579.0" width="0.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1087.5" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.03%)</title><rect x="1085.5" y="595.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1088.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.05%)</title><rect x="1086.1" y="707.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1089.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.05%)</title><rect x="1086.1" y="691.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1089.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.03%)</title><rect x="1086.1" y="675.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1089.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.03%)</title><rect x="1086.1" y="659.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1089.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.03%)</title><rect x="1086.1" y="643.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1089.1" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="1086.1" y="627.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1089.1" y="638.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.03%)</title><rect x="1086.1" y="611.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1089.1" y="622.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.03%)</title><rect x="1086.1" y="595.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1089.1" y="606.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.03%)</title><rect x="1086.1" y="579.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1089.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.09%)</title><rect x="1086.7" y="707.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1089.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.09%)</title><rect x="1086.7" y="691.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1089.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.03%)</title><rect x="1086.9" y="675.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1089.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.03%)</title><rect x="1087.3" y="675.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1090.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.03%)</title><rect x="1087.3" y="659.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1090.3" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/lorismelik/NodeDescriptor.getNodeIdByKey (3 samples, 0.05%)</title><rect x="1087.9" y="755.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1090.9" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (2 samples, 0.03%)</title><rect x="1087.9" y="739.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1090.9" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="1087.9" y="723.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1090.9" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (14 samples, 0.24%)</title><rect x="1088.5" y="819.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1091.5" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4 samples, 0.07%)</title><rect x="1088.5" y="803.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1091.5" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.17%)</title><rect x="1089.3" y="803.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1092.3" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.15%)</title><rect x="1089.5" y="787.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1092.5" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (8 samples, 0.14%)</title><rect x="1091.4" y="819.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1094.4" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 0.09%)</title><rect x="1091.6" y="803.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1094.6" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 0.09%)</title><rect x="1091.6" y="787.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1094.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.03%)</title><rect x="1092.2" y="771.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1095.2" y="782.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.03%)</title><rect x="1092.2" y="755.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1095.2" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (4 samples, 0.07%)</title><rect x="1093.0" y="819.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1096.0" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (35 samples, 0.60%)</title><rect x="1093.8" y="819.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1096.8" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (14 samples, 0.24%)</title><rect x="1094.8" y="803.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1097.8" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (13 samples, 0.22%)</title><rect x="1095.0" y="787.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1098.0" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (5 samples, 0.09%)</title><rect x="1096.0" y="771.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1099.0" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.07%)</title><rect x="1096.2" y="755.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1099.2" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (2 samples, 0.03%)</title><rect x="1096.4" y="739.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1099.4" y="750.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.03%)</title><rect x="1096.4" y="723.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1099.4" y="734.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.05%)</title><rect x="1097.0" y="771.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1100.0" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.03%)</title><rect x="1097.2" y="755.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1100.2" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.03%)</title><rect x="1097.2" y="739.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1100.2" y="750.0"></text>
</g>
<g>
<title>java/lang/String.substring (14 samples, 0.24%)</title><rect x="1097.6" y="803.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1100.6" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (14 samples, 0.24%)</title><rect x="1097.6" y="787.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1100.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1098.4" y="771.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1101.4" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.03%)</title><rect x="1098.8" y="771.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1101.8" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="1098.8" y="755.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1101.8" y="766.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (5 samples, 0.09%)</title><rect x="1099.4" y="771.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1102.4" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (12 samples, 0.21%)</title><rect x="1100.9" y="819.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1103.9" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (11 samples, 0.19%)</title><rect x="1101.1" y="803.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1104.1" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.05%)</title><rect x="1102.7" y="787.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1105.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1102.7" y="771.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1105.7" y="782.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.03%)</title><rect x="1102.7" y="755.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1105.7" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (140 samples, 2.40%)</title><rect x="1103.3" y="835.0" width="28.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1106.3" y="846.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (140 samples, 2.40%)</title><rect x="1103.3" y="819.0" width="28.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1106.3" y="830.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.10%)</title><rect x="1103.7" y="803.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1106.7" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="1103.7" y="787.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1106.7" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="1103.7" y="771.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1106.7" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.09%)</title><rect x="1103.9" y="755.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1106.9" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.09%)</title><rect x="1103.9" y="739.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1106.9" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.07%)</title><rect x="1104.1" y="723.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1107.1" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (132 samples, 2.26%)</title><rect x="1104.9" y="803.0" width="26.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1107.9" y="814.0">s..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (11 samples, 0.19%)</title><rect x="1104.9" y="787.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1107.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (11 samples, 0.19%)</title><rect x="1104.9" y="771.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1107.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (9 samples, 0.15%)</title><rect x="1105.3" y="755.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1108.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (9 samples, 0.15%)</title><rect x="1105.3" y="739.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1108.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (7 samples, 0.12%)</title><rect x="1105.3" y="723.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1108.3" y="734.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.03%)</title><rect x="1106.7" y="723.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1109.7" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (120 samples, 2.06%)</title><rect x="1107.1" y="787.0" width="24.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1110.1" y="798.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (120 samples, 2.06%)</title><rect x="1107.1" y="771.0" width="24.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1110.1" y="782.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (120 samples, 2.06%)</title><rect x="1107.1" y="755.0" width="24.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1110.1" y="766.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (120 samples, 2.06%)</title><rect x="1107.1" y="739.0" width="24.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1110.1" y="750.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (120 samples, 2.06%)</title><rect x="1107.1" y="723.0" width="24.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1110.1" y="734.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (8 samples, 0.14%)</title><rect x="1109.4" y="707.0" width="1.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1112.4" y="718.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.03%)</title><rect x="1110.6" y="691.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1113.6" y="702.0"></text>
</g>
<g>
<title>read (100 samples, 1.71%)</title><rect x="1111.2" y="707.0" width="20.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1114.2" y="718.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="1131.6" y="851.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.6" y="862.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="1131.6" y="835.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1134.6" y="846.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.03%)</title><rect x="1131.6" y="819.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1134.6" y="830.0"></text>
</g>
<g>
<title>_res (2 samples, 0.03%)</title><rect x="1131.6" y="803.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1134.6" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.05%)</title><rect x="1132.0" y="883.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1135.0" y="894.0"></text>
</g>
<g>
<title>thread_start (281 samples, 4.81%)</title><rect x="1132.6" y="883.0" width="56.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1135.6" y="894.0">thread..</text>
</g>
<g>
<title>_pthread_start (281 samples, 4.81%)</title><rect x="1132.6" y="867.0" width="56.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1135.6" y="878.0">_pthre..</text>
</g>
<g>
<title>_pthread_body (281 samples, 4.81%)</title><rect x="1132.6" y="851.0" width="56.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1135.6" y="862.0">_pthre..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (281 samples, 4.81%)</title><rect x="1132.6" y="835.0" width="56.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1135.6" y="846.0">thread..</text>
</g>
<g>
<title>Thread::call_run() (281 samples, 4.81%)</title><rect x="1132.6" y="819.0" width="56.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1135.6" y="830.0">Thread..</text>
</g>
<g>
<title>ConcurrentGCThread::run() (6 samples, 0.10%)</title><rect x="1132.6" y="803.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.6" y="814.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (6 samples, 0.10%)</title><rect x="1132.6" y="787.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.6" y="798.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (6 samples, 0.10%)</title><rect x="1132.6" y="771.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1135.6" y="782.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (6 samples, 0.10%)</title><rect x="1132.6" y="755.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.6" y="766.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (6 samples, 0.10%)</title><rect x="1132.6" y="739.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.6" y="750.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (6 samples, 0.10%)</title><rect x="1132.6" y="723.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.6" y="734.0"></text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 0.10%)</title><rect x="1132.6" y="707.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1135.6" y="718.0"></text>
</g>
<g>
<title>JavaThread::run() (253 samples, 4.33%)</title><rect x="1134.0" y="803.0" width="51.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.0" y="814.0">JavaT..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (253 samples, 4.33%)</title><rect x="1134.0" y="787.0" width="51.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.0" y="798.0">JavaT..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (249 samples, 4.27%)</title><rect x="1134.0" y="771.0" width="50.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.0" y="782.0">Compi..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (249 samples, 4.27%)</title><rect x="1134.0" y="755.0" width="50.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.0" y="766.0">Compi..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (246 samples, 4.21%)</title><rect x="1134.0" y="739.0" width="49.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.0" y="750.0">C2Com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (246 samples, 4.21%)</title><rect x="1134.0" y="723.0" width="49.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.0" y="734.0">Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (147 samples, 2.52%)</title><rect x="1134.0" y="707.0" width="29.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.0" y="718.0">Co..</text>
</g>
<g>
<title>Compile::Output() (7 samples, 0.12%)</title><rect x="1134.0" y="691.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.0" y="702.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (4 samples, 0.07%)</title><rect x="1134.0" y="675.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.0" y="686.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (2 samples, 0.03%)</title><rect x="1134.4" y="659.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.4" y="670.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (2 samples, 0.03%)</title><rect x="1134.4" y="643.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.4" y="654.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.03%)</title><rect x="1134.8" y="675.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.8" y="686.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.03%)</title><rect x="1134.8" y="659.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.8" y="670.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.07%)</title><rect x="1135.4" y="691.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.4" y="702.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (2 samples, 0.03%)</title><rect x="1135.4" y="675.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.4" y="686.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_safepoint(JVMState*, int) (2 samples, 0.03%)</title><rect x="1135.8" y="675.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.8" y="686.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (2 samples, 0.03%)</title><rect x="1135.8" y="659.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.8" y="670.0"></text>
</g>
<g>
<title>Matcher::match() (10 samples, 0.17%)</title><rect x="1136.2" y="691.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.2" y="702.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.03%)</title><rect x="1136.2" y="675.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1139.2" y="686.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (8 samples, 0.14%)</title><rect x="1136.6" y="675.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1139.6" y="686.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (6 samples, 0.10%)</title><rect x="1136.6" y="659.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1139.6" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (13 samples, 0.22%)</title><rect x="1138.5" y="691.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1141.5" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (13 samples, 0.22%)</title><rect x="1138.5" y="675.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1141.5" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (5 samples, 0.09%)</title><rect x="1138.9" y="659.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.9" y="670.0"></text>
</g>
<g>
<title>Block::dom_lca(Block*) (2 samples, 0.03%)</title><rect x="1139.1" y="643.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.1" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.03%)</title><rect x="1139.9" y="659.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.9" y="670.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.05%)</title><rect x="1140.5" y="659.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1143.5" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (111 samples, 1.90%)</title><rect x="1141.3" y="691.0" width="22.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.3" y="702.0">P..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (6 samples, 0.10%)</title><rect x="1141.5" y="675.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.5" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (7 samples, 0.12%)</title><rect x="1142.7" y="675.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.7" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.03%)</title><rect x="1143.1" y="659.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.1" y="670.0"></text>
</g>
<g>
<title>RegMask::SUBTRACT(RegMask const&amp;) (3 samples, 0.05%)</title><rect x="1143.5" y="659.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.5" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 0.09%)</title><rect x="1144.1" y="675.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.1" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (4 samples, 0.07%)</title><rect x="1144.3" y="659.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.3" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (16 samples, 0.27%)</title><rect x="1145.1" y="675.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.1" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (3 samples, 0.05%)</title><rect x="1147.8" y="659.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.8" y="670.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (2 samples, 0.03%)</title><rect x="1148.0" y="643.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.0" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (21 samples, 0.36%)</title><rect x="1148.4" y="675.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1151.4" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (5 samples, 0.09%)</title><rect x="1149.2" y="659.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.2" y="670.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.05%)</title><rect x="1149.4" y="643.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.4" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (9 samples, 0.15%)</title><rect x="1150.2" y="659.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.2" y="670.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (3 samples, 0.05%)</title><rect x="1150.2" y="643.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.2" y="654.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.03%)</title><rect x="1150.8" y="643.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.8" y="654.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (4 samples, 0.07%)</title><rect x="1151.2" y="643.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.2" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (3 samples, 0.05%)</title><rect x="1152.0" y="659.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.0" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (13 samples, 0.22%)</title><rect x="1152.6" y="675.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.6" y="686.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (2 samples, 0.03%)</title><rect x="1153.8" y="659.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.8" y="670.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (4 samples, 0.07%)</title><rect x="1154.4" y="659.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.4" y="670.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.03%)</title><rect x="1154.4" y="643.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.4" y="654.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (2 samples, 0.03%)</title><rect x="1154.8" y="643.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.8" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.03%)</title><rect x="1155.2" y="675.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.2" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (13 samples, 0.22%)</title><rect x="1155.6" y="675.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.6" y="686.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (2 samples, 0.03%)</title><rect x="1156.2" y="659.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.2" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (8 samples, 0.14%)</title><rect x="1156.6" y="659.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.6" y="670.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 0.07%)</title><rect x="1158.5" y="675.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.5" y="686.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (4 samples, 0.07%)</title><rect x="1158.5" y="659.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.5" y="670.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 0.05%)</title><rect x="1158.7" y="643.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.7" y="654.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.03%)</title><rect x="1158.7" y="627.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.7" y="638.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.03%)</title><rect x="1158.7" y="611.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.7" y="622.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.03%)</title><rect x="1159.3" y="675.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.3" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.03%)</title><rect x="1159.3" y="659.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.3" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (5 samples, 0.09%)</title><rect x="1159.7" y="675.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.7" y="686.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.03%)</title><rect x="1160.1" y="659.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.1" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.03%)</title><rect x="1160.7" y="675.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.7" y="686.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (11 samples, 0.19%)</title><rect x="1161.1" y="675.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.1" y="686.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (5 samples, 0.09%)</title><rect x="1162.3" y="659.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.3" y="670.0"></text>
</g>
<g>
<title>Compile::Optimize() (83 samples, 1.42%)</title><rect x="1163.7" y="707.0" width="16.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.7" y="718.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (3 samples, 0.05%)</title><rect x="1163.9" y="691.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.9" y="702.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (3 samples, 0.05%)</title><rect x="1163.9" y="675.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.9" y="686.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.03%)</title><rect x="1163.9" y="659.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.9" y="670.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (35 samples, 0.60%)</title><rect x="1164.5" y="691.0" width="7.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.5" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (35 samples, 0.60%)</title><rect x="1164.5" y="675.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.5" y="686.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1164.5" y="659.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.5" y="670.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1164.5" y="643.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.5" y="654.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1164.5" y="627.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.5" y="638.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1164.5" y="611.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.5" y="622.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1164.5" y="595.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.5" y="606.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1164.5" y="579.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.5" y="590.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1164.5" y="563.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.5" y="574.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1164.5" y="547.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.5" y="558.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1164.5" y="531.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.5" y="542.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1164.5" y="515.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.5" y="526.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1164.5" y="499.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.5" y="510.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1164.5" y="483.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.5" y="494.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1164.5" y="467.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.5" y="478.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1164.5" y="451.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.5" y="462.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1164.5" y="435.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.5" y="446.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1164.5" y="419.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.5" y="430.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.03%)</title><rect x="1164.5" y="403.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.5" y="414.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.03%)</title><rect x="1165.1" y="659.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.1" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.05%)</title><rect x="1165.5" y="659.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.5" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (3 samples, 0.05%)</title><rect x="1165.5" y="643.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.5" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (3 samples, 0.05%)</title><rect x="1165.5" y="627.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.5" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (3 samples, 0.05%)</title><rect x="1165.5" y="611.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.5" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (3 samples, 0.05%)</title><rect x="1165.5" y="595.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.5" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (14 samples, 0.24%)</title><rect x="1166.1" y="659.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.1" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (13 samples, 0.22%)</title><rect x="1166.4" y="643.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.4" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (8 samples, 0.14%)</title><rect x="1166.8" y="627.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.8" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (3 samples, 0.05%)</title><rect x="1167.0" y="611.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.0" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (3 samples, 0.05%)</title><rect x="1167.0" y="595.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.0" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.05%)</title><rect x="1167.0" y="579.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.0" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.03%)</title><rect x="1167.2" y="563.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.2" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.03%)</title><rect x="1167.2" y="547.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.2" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 0.03%)</title><rect x="1168.0" y="611.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.0" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.03%)</title><rect x="1168.6" y="627.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.6" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.03%)</title><rect x="1168.6" y="611.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.6" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.05%)</title><rect x="1169.0" y="659.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.0" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (6 samples, 0.10%)</title><rect x="1169.6" y="659.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.6" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (4 samples, 0.07%)</title><rect x="1170.0" y="643.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.0" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (3 samples, 0.05%)</title><rect x="1170.2" y="627.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.2" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.05%)</title><rect x="1170.8" y="659.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.8" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.03%)</title><rect x="1170.8" y="643.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.8" y="654.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (3 samples, 0.05%)</title><rect x="1171.8" y="691.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.8" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.03%)</title><rect x="1172.4" y="691.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.4" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.03%)</title><rect x="1172.4" y="675.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.4" y="686.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.03%)</title><rect x="1172.8" y="691.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.8" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (22 samples, 0.38%)</title><rect x="1173.4" y="691.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.4" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.03%)</title><rect x="1173.4" y="675.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.4" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.03%)</title><rect x="1173.8" y="675.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.8" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (10 samples, 0.17%)</title><rect x="1174.2" y="675.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.2" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (9 samples, 0.15%)</title><rect x="1174.4" y="659.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.4" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (7 samples, 0.12%)</title><rect x="1174.6" y="643.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.6" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.03%)</title><rect x="1174.8" y="627.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.8" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (2 samples, 0.03%)</title><rect x="1174.8" y="611.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.8" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.03%)</title><rect x="1174.8" y="595.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.8" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.03%)</title><rect x="1174.8" y="579.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.8" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.03%)</title><rect x="1174.8" y="563.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.8" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (3 samples, 0.05%)</title><rect x="1175.4" y="627.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.4" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.03%)</title><rect x="1175.4" y="611.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.4" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.03%)</title><rect x="1175.4" y="595.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.4" y="606.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (2 samples, 0.03%)</title><rect x="1175.4" y="579.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.4" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.03%)</title><rect x="1176.3" y="675.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.3" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (3 samples, 0.05%)</title><rect x="1176.7" y="675.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.7" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (2 samples, 0.03%)</title><rect x="1176.7" y="659.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.7" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.05%)</title><rect x="1177.3" y="675.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.3" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.05%)</title><rect x="1177.3" y="659.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.3" y="670.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.03%)</title><rect x="1177.3" y="643.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.3" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (9 samples, 0.15%)</title><rect x="1178.1" y="691.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.1" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 0.14%)</title><rect x="1178.1" y="675.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.1" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.05%)</title><rect x="1178.3" y="659.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="670.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.03%)</title><rect x="1178.9" y="659.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.9" y="670.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.03%)</title><rect x="1179.9" y="691.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.9" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (15 samples, 0.26%)</title><rect x="1180.7" y="707.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.7" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (15 samples, 0.26%)</title><rect x="1180.7" y="691.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (15 samples, 0.26%)</title><rect x="1180.7" y="675.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (15 samples, 0.26%)</title><rect x="1180.7" y="659.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (15 samples, 0.26%)</title><rect x="1180.7" y="643.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (15 samples, 0.26%)</title><rect x="1180.7" y="627.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.7" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (15 samples, 0.26%)</title><rect x="1180.7" y="611.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (15 samples, 0.26%)</title><rect x="1180.7" y="595.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (15 samples, 0.26%)</title><rect x="1180.7" y="579.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (15 samples, 0.26%)</title><rect x="1180.7" y="563.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.17%)</title><rect x="1180.7" y="547.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.7" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.17%)</title><rect x="1180.7" y="531.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.17%)</title><rect x="1180.7" y="515.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.17%)</title><rect x="1180.7" y="499.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.17%)</title><rect x="1180.7" y="483.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.7" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.07%)</title><rect x="1180.9" y="467.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.9" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.07%)</title><rect x="1180.9" y="451.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.07%)</title><rect x="1180.9" y="435.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.07%)</title><rect x="1180.9" y="419.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="1180.9" y="403.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1181.1" y="387.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.1" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1181.1" y="371.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1181.1" y="355.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1181.1" y="339.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1181.1" y="323.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.1" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1181.1" y="307.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.1" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1181.1" y="291.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1181.1" y="275.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1181.1" y="259.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.1" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.09%)</title><rect x="1181.7" y="467.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.7" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.09%)</title><rect x="1181.7" y="451.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.7" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.09%)</title><rect x="1181.7" y="435.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.09%)</title><rect x="1181.7" y="419.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.09%)</title><rect x="1181.7" y="403.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.09%)</title><rect x="1181.7" y="387.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.7" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.09%)</title><rect x="1181.7" y="371.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.7" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.09%)</title><rect x="1181.7" y="355.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.09%)</title><rect x="1181.7" y="339.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.09%)</title><rect x="1181.7" y="323.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.09%)</title><rect x="1181.7" y="307.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.7" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.09%)</title><rect x="1181.7" y="291.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.7" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.09%)</title><rect x="1181.7" y="275.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.09%)</title><rect x="1181.7" y="259.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.09%)</title><rect x="1181.7" y="243.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.09%)</title><rect x="1181.7" y="227.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.7" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1181.7" y="211.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1181.7" y="195.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1181.7" y="179.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1181.7" y="163.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.7" y="174.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="1182.1" y="211.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.1" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="1182.1" y="195.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.1" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.05%)</title><rect x="1182.1" y="179.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.05%)</title><rect x="1182.1" y="163.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.05%)</title><rect x="1182.1" y="147.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="1182.1" y="131.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.1" y="142.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1182.3" y="115.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1182.3" y="99.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.3" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1182.3" y="83.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="94.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1182.3" y="67.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.3" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1182.3" y="51.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.3" y="62.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1182.3" y="35.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.3" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.09%)</title><rect x="1182.7" y="547.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.7" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.09%)</title><rect x="1182.7" y="531.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.7" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.09%)</title><rect x="1182.7" y="515.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.09%)</title><rect x="1182.7" y="499.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.09%)</title><rect x="1182.7" y="483.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.07%)</title><rect x="1182.7" y="467.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.7" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.07%)</title><rect x="1182.7" y="451.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.7" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.07%)</title><rect x="1182.7" y="435.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.07%)</title><rect x="1182.7" y="419.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.07%)</title><rect x="1182.7" y="403.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.07%)</title><rect x="1182.7" y="387.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.7" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="1182.9" y="371.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.9" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.05%)</title><rect x="1182.9" y="355.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.05%)</title><rect x="1182.9" y="339.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.05%)</title><rect x="1182.9" y="323.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="1182.9" y="307.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.9" y="318.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1183.1" y="291.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.1" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1183.1" y="275.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.1" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1183.1" y="259.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1183.1" y="243.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1183.1" y="227.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1183.1" y="211.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.1" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1183.1" y="195.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.1" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1183.1" y="179.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.1" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1183.1" y="163.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1183.1" y="147.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1183.1" y="131.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1183.1" y="115.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.1" y="126.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.03%)</title><rect x="1183.7" y="739.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.7" y="750.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (2 samples, 0.03%)</title><rect x="1183.7" y="723.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.7" y="734.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.03%)</title><rect x="1183.7" y="707.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.7" y="718.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.03%)</title><rect x="1183.7" y="691.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.7" y="702.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.03%)</title><rect x="1183.7" y="675.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.7" y="686.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.03%)</title><rect x="1183.7" y="659.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.7" y="670.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (3 samples, 0.05%)</title><rect x="1184.5" y="771.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.5" y="782.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2 samples, 0.03%)</title><rect x="1184.5" y="755.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.5" y="766.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 0.03%)</title><rect x="1184.5" y="739.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.5" y="750.0"></text>
</g>
<g>
<title>WatcherThread::run() (20 samples, 0.34%)</title><rect x="1185.4" y="803.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.4" y="814.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (19 samples, 0.33%)</title><rect x="1185.6" y="787.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.6" y="798.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (19 samples, 0.33%)</title><rect x="1185.6" y="771.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.6" y="782.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (19 samples, 0.33%)</title><rect x="1185.6" y="755.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.6" y="766.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (19 samples, 0.33%)</title><rect x="1185.6" y="739.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.6" y="750.0"></text>
</g>
<g>
<title>__psynch_cvwait (18 samples, 0.31%)</title><rect x="1185.6" y="723.0" width="3.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1188.6" y="734.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (3 samples, 0.05%)</title><rect x="1189.4" y="883.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1192.4" y="894.0"></text>
</g>
</g>
</svg>
